:: { n:i8, s:i8*, b:b }

Take(s, n)
Drop(s, n)
Take(s, 5)
Drop(s, 5)
Take(Range(20), n)
Drop(Range(20), n)
Take(Range(20), 5)
Drop(Range(20), 5)
Take(Range(20), 30)
Drop(Range(20), 30)
Take(s, n, it > 3)
Drop(s, n, it > 3)
Take(s, 5, it > 3)
Drop(s, 5, it > 3)
Take(Range(20), n, it > 3)
Drop(Range(20), n, it > 3)
Take(Range(20), 5, it > 3)
Drop(Range(20), 5, it > 3)
Take(Range(20), 30, it > 3)
Drop(Range(20), 30, it > 3)
Take(s, n, true)
Drop(s, n, true)
Take(s, 5, true)
Drop(s, 5, true)
Take(Range(20), n, true)
Drop(Range(20), n, true)
Take(Range(20), 5, true)
Drop(Range(20), 5, true)
Take(Range(20), 30, true)
Drop(Range(20), 30, true)
Take(s, [if] true)
Drop(s, [if] true)
Take(s, [if] false)
Drop(s, [if] false)
Take(s, [while] true)
Drop(s, [while] true)
Take(s, [while] false)
Drop(s, [while] false)
Take(s, n, false)
Drop(s, n, false)
Take(s, 5, false)
Drop(s, 5, false)
Take(Range(20), n, false)
Drop(Range(20), n, false)
Take(Range(20), 5, false)
Drop(Range(20), 5, false)
Take(Range(20), 30, false)
Drop(Range(20), 30, false)

Take(Range(0), n)
Drop(Range(0), n)
Take(Range(0), n, b)
Drop(Range(0), n, b)

Take(s, 0 * 3)
Drop(s, 0 * 3)
Take(s, 0 * 3, b)
Drop(s, 0 * 3, b)

Take([1,2,3,4,5], 1+1)
Drop([1,2,3,4,5], 1+1)

Take(Range(20), -1)
Take(Range(20), -1, b)
Drop(Range(20), -1)
Drop(Range(20), -1, b)
Take(s, -1)
Take(s, -1, b)
Drop(s, -1)
Drop(s, -1, b)

TakeIf(s, b)
DropIf(s, b)
TakeIf(s, true)
DropIf(s, true)
TakeIf(s, false)
DropIf(s, false)
TakeIf(Range(10), b)
DropIf(Range(10), b)
TakeIf(Range(10), true)
DropIf(Range(10), true)
TakeIf(Range(10), false)
DropIf(Range(10), false)

TakeWhile(s, b)
DropWhile(s, b)
TakeWhile(s, true)
DropWhile(s, true)
TakeWhile(s, false)
DropWhile(s, false)
TakeWhile(Range(10), b)
DropWhile(Range(10), b)
TakeWhile(Range(10), true)
DropWhile(Range(10), true)
TakeWhile(Range(10), false)
DropWhile(Range(10), false)
