<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>
// WARNING: This .txt file is generated from the corresponding .tt file. DO NOT edit this .txt directly.

:: {i8:i8, qi8:i8?, s:s, b:b}

`` func Case(a0, a1, b0, b1) := ("GOOD" if a0 = a1 and b0 = b1 else "BAD!", a0, a1, b0, b1)

// This mostly compares reducer results with code gen results. If the output contains
// the text "Value: (BAD!, ", then the reducer and code gen produced different results!


"*** For i8, b, strict treats null differently."
<#
foreach (var a in new[] {"3", "Null(3)", "Opt(3)"}) {
    foreach (var b in new[] {"5", "Null(5)", "Opt(5)"}) {
        Gen(a, b);
    }
}
#>

<#
foreach (var a in new[] {"false", "true", "Null(false)", "Opt(false)", "Opt(true)"}) {
    foreach (var b in new[] {"false", "true", "Null(false)", "Opt(false)", "Opt(true)"}) {
        Gen(a, b);
    }
}
#>

"*** For r8 and r4, strict treats NaN and null differently. Reductions handle non-finites."
<#
foreach (var a in new[] {"3r8", "0/0", "1/0", "-1/0", "Null(3r8)", "Opt(3r8)"}) {
    foreach (var b in new[] {"5r8", "0/0", "1/0", "-1/0", "Null(5r8)", "Opt(5r8)"}) {
        Gen(a, b);
    }
}
#>

<#
foreach (var a in new[] {"3r4", "CastR4(0/0)", "CastR4(1/0)", "CastR4(-1/0)", "Null(3r4)", "Opt(3r4)"}) {
    foreach (var b in new[] {"5r4", "CastR4(0/0)", "CastR4(1/0)", "CastR4(-1/0)", "Null(5r4)", "Opt(5r4)"}) {
        Gen(a, b);
    }
}
#>

"*** For text, strict treats null differently."
<#
foreach (var a in new[] {"\"\"", "\"AA\"", "\"aA\"", "\"Aa\"", "\"BB\"", "Null(\"\")"}) {
    foreach (var b in new[] {"\"\"", "\"AA\"", "\"aA\"", "\"Aa\"", "\"BB\"", "Null(\"\")"}) {
        GenText(a, b);
    }
}
#>

<#+
string[] roots = new[] { "= ", "< ", "<=", "> ", ">="};
string[] nots = new[] {" ", "!"};

void Gen(string a, string b)
{
    foreach (var not in nots) {
        foreach (var root in roots) {
            var op = not + "@" + root;
            var sop = not + "$" + root;
#>
Case(<#=a#> <#=op#> <#=b#>, Wrap(<#=a#>) <#=op#> Wrap(<#=b#>), <#=a#> <#=sop#> <#=b#>, Wrap(<#=a#>) <#=sop#> Wrap(<#=b#>))
<#+
        }
    }
}

void GenText(string a, string b)
{
    foreach (var not in nots) {
        foreach (var root in roots) {
            var op = not + "@" + root;
            var sop = not + "$" + root;
            var cop = not + "~@" + root;
            var scop = not + "~$" + root;
#>
(<#=a#> <#=op#> <#=b#>, Wrap(<#=a#>) <#=op#> Wrap(<#=b#>), <#=a#> <#=cop#> <#=b#>, Wrap(<#=a#>) <#=cop#> Wrap(<#=b#>), <#=a#> <#=sop#> <#=b#>, Wrap(<#=a#>) <#=sop#> Wrap(<#=b#>), <#=a#> <#=scop#> <#=b#>, Wrap(<#=a#>) <#=scop#> Wrap(<#=b#>))
<#+
        }
    }
}
#>
