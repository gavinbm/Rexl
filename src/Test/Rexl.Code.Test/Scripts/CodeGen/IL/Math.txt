::: { xi4:i4, xi8:i8, xu4:u4, xu8:u8, xr4:r4, xr8:r8, xi:i, xn:n, yi4:i4, yi8:i8, yu4:u4, yu8:u8, yr4:r4, yr8:r8, yi:i, yn:n}

``` x := 4d;
``` y := 12f;
``` pz := +0d;
``` nz := -0d;

[ pz, -nz, pz+pz, pz-pz, nz-nz, nz+pz, pz+nz, pz-nz, pz+0d, 0d+pz, nz+0d, 0d+nz, 0d-pz, pz-0d, pz+-0d, -0d+pz ] // Should all be +0.
[ nz, -pz, nz+nz,                             nz-pz,                                    nz-0d, nz+-0d, -0d+nz ] // Should all be -0.

Div(xi4, yi4)
xi4 div yi4
Div(xi8, yi8)
xi8 div yi8
Div(xu4, yu4)
xu4 div yu4
Div(xu8, yu8)
xu8 div yu8
Div(xi, yi)
xi  div yi
Div(xr4, yr4)
Div(xr8, yr8)
Div(xn, yn)

xi4 div 2
xi4 div -1
xi4 div 1
xi4 div 0
xi8 div 2
xi8 div -1
xi8 div 1
xi8 div 0

Mod(xi4, yi4)
xi4 mod yi4
Mod(xi8, yi8)
xi8 mod yi8
Mod(xu4, yu4)
xu4 mod yu4
Mod(xu8, yu8)
xu8 mod yu8
Mod(xi, yi)
xi  mod yi
Mod(xr4, yr4)
Mod(xr8, yr8)
Mod(xn, yn)

xi4 mod 2
xi4 mod -1
xi4 mod 1
xi4 mod 0
xi8 mod 2
xi8 mod -1
xi8 mod 1
xi8 mod 0

Bin(xi4, yi4)
Bin(xi8, yi8)
Bin(xu4, yu4)
Bin(xu8, yu8)
Bin(xr4, yr4)
Bin(xr8, yr8)
Bin(xi, yi)
Bin(xn, yn)

1 / x * y
