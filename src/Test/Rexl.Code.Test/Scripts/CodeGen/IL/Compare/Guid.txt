`` A := CastGuid("a5b4f99d-ef75-48c5-bf8d-f040a88625ee");
`` B := CastGuid("c1cc6966-0706-4aff-a8ad-34039e799e5b");
`` S0 := [ A, A, B ];
`` S1 := [ A, B, A ];

// For all of the below, A < B and the pairs used are (A, A), (A, B), (B, A), so =, <, > in that order.

Zip(x:S0, y:S1, x  =  y)
Zip(x:S0, y:S1, x  <  y)
Zip(x:S0, y:S1, x  <= y)
Zip(x:S0, y:S1, x  >  y)
Zip(x:S0, y:S1, x  >= y)
Zip(x:S0, y:S1, x !=  y)
Zip(x:S0, y:S1, x !<  y)
Zip(x:S0, y:S1, x !<= y)
Zip(x:S0, y:S1, x !>  y)
Zip(x:S0, y:S1, x !>= y)

Zip(x:S0, y:S1, x  =  y = y)
Zip(x:S0, y:S1, x  <  y = y)
Zip(x:S0, y:S1, x  <= y = y)
Zip(x:S0, y:S1, x  >  y = y)
Zip(x:S0, y:S1, x  >= y = y)
Zip(x:S0, y:S1, x !=  y = y)
Zip(x:S0, y:S1, x !<  y = y)
Zip(x:S0, y:S1, x !<= y = y)
Zip(x:S0, y:S1, x !>  y = y)
Zip(x:S0, y:S1, x !>= y = y)
