**** New definitions: S, type: i8[]
**** New definitions: T_0, type: i8[*]
**** New definitions: T_3, type: i8[*]
**** New definitions: T_2_3, type: i8[*,*]
**** New definitions: T_2_3_2, type: i8[*,*,*]
**** New definitions: N1, type: i8
**** New definitions: P0, type: i8
**** New definitions: P1, type: i8
**** New definitions: P2, type: i8
**** New definitions: P3, type: i8
**** New definitions: P4, type: i8
**** New definitions: P5, type: i8
**** New definitions: P6, type: i8
**** New definitions: P7, type: i8
**** New definitions: P8, type: i8
**** New definitions: P9, type: i8

> S->ExpandDims(-1)
S->ExpandDims(-1) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), -1:i8):i8[*]))
*** Warning: (14,15) Node: -1, Message: The number should be at least 0 and less than 1
Func sig: (S:i8[]) to i8[*]
Ten<i8>(1)<0> [1]
###
> S->ExpandDims( 0)
S->ExpandDims(0) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), 0:i8):i8[*]))
Func sig: (S:i8[]) to i8[*]
Ten<i8>(1)<0> [1]
###
> S->ExpandDims( 1)
S->ExpandDims(1) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), 1:i8):i8[*]))
*** Warning: (15,16) Node: 1, Message: The number should be at least 0 and less than 1
Func sig: (S:i8[]) to i8[*]
Ten<i8>(1)<0> [1]
###
> S->ExpandDims(N1)
S->ExpandDims(N1) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(N1)):i8[*]))
Func sig: (S:i8[], N1:i8) to i8[*]
Ten<i8>(1)<0> [1]
###
> S->ExpandDims(P0)
S->ExpandDims(P0) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P0)):i8[*]))
Func sig: (S:i8[], P0:i8) to i8[*]
Ten<i8>(1)<0> [1]
###
> S->ExpandDims(P1)
S->ExpandDims(P1) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P1)):i8[*]))
Func sig: (S:i8[], P1:i8) to i8[*]
Ten<i8>(1)<0> [1]
###
> T_0->ExpandDims(-1)
T_0->ExpandDims(-1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_0), -1:i8):i8[*,*]))
*** Warning: (16,17) Node: -1, Message: The number should be at least 0 and less than 2
Func sig: (T_0:i8[*]) to i8[*,*]
Ten<i8>(1,0)<0,0> []
###
> T_0->ExpandDims( 0)
T_0->ExpandDims(0) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_0), 0:i8):i8[*,*]))
Func sig: (T_0:i8[*]) to i8[*,*]
Ten<i8>(1,0)<0,0> []
###
> T_0->ExpandDims( 1)
T_0->ExpandDims(1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_0), 1:i8):i8[*,*]))
Func sig: (T_0:i8[*]) to i8[*,*]
Ten<i8>(0,1)<0,0> []
###
> T_0->ExpandDims( 2)
T_0->ExpandDims(2) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_0), 2:i8):i8[*,*]))
*** Warning: (17,18) Node: 2, Message: The number should be at least 0 and less than 2
Func sig: (T_0:i8[*]) to i8[*,*]
Ten<i8>(0,1)<0,0> []
###
> T_0->ExpandDims(N1)
T_0->ExpandDims(N1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_0), Global(N1)):i8[*,*]))
Func sig: (T_0:i8[*], N1:i8) to i8[*,*]
Ten<i8>(1,0)<0,0> []
###
> T_0->ExpandDims(P0)
T_0->ExpandDims(P0) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_0), Global(P0)):i8[*,*]))
Func sig: (T_0:i8[*], P0:i8) to i8[*,*]
Ten<i8>(1,0)<0,0> []
###
> T_0->ExpandDims(P1)
T_0->ExpandDims(P1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_0), Global(P1)):i8[*,*]))
Func sig: (T_0:i8[*], P1:i8) to i8[*,*]
Ten<i8>(0,1)<0,0> []
###
> T_0->ExpandDims(P2)
T_0->ExpandDims(P2) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_0), Global(P2)):i8[*,*]))
Func sig: (T_0:i8[*], P2:i8) to i8[*,*]
Ten<i8>(0,1)<0,0> []
###
> T_3->ExpandDims(-1)
T_3->ExpandDims(-1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), -1:i8):i8[*,*]))
*** Warning: (16,17) Node: -1, Message: The number should be at least 0 and less than 2
Func sig: (T_3:i8[*]) to i8[*,*]
Ten<i8>(1,3)<0,1>
  [[0, 1, 2]]
###
> T_3->ExpandDims( 0)
T_3->ExpandDims(0) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 0:i8):i8[*,*]))
Func sig: (T_3:i8[*]) to i8[*,*]
Ten<i8>(1,3)<0,1>
  [[0, 1, 2]]
###
> T_3->ExpandDims( 1)
T_3->ExpandDims(1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 1:i8):i8[*,*]))
Func sig: (T_3:i8[*]) to i8[*,*]
Ten<i8>(3,1)<1,0>
  [[0]
   [1]
   [2]]
###
> T_3->ExpandDims( 2)
T_3->ExpandDims(2) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 2:i8):i8[*,*]))
*** Warning: (17,18) Node: 2, Message: The number should be at least 0 and less than 2
Func sig: (T_3:i8[*]) to i8[*,*]
Ten<i8>(3,1)<1,0>
  [[0]
   [1]
   [2]]
###
> T_3->ExpandDims(N1)
T_3->ExpandDims(N1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(N1)):i8[*,*]))
Func sig: (T_3:i8[*], N1:i8) to i8[*,*]
Ten<i8>(1,3)<0,1>
  [[0, 1, 2]]
###
> T_3->ExpandDims(P0)
T_3->ExpandDims(P0) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P0)):i8[*,*]))
Func sig: (T_3:i8[*], P0:i8) to i8[*,*]
Ten<i8>(1,3)<0,1>
  [[0, 1, 2]]
###
> T_3->ExpandDims(P1)
T_3->ExpandDims(P1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P1)):i8[*,*]))
Func sig: (T_3:i8[*], P1:i8) to i8[*,*]
Ten<i8>(3,1)<1,0>
  [[0]
   [1]
   [2]]
###
> T_3->ExpandDims(P2)
T_3->ExpandDims(P2) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P2)):i8[*,*]))
Func sig: (T_3:i8[*], P2:i8) to i8[*,*]
Ten<i8>(3,1)<1,0>
  [[0]
   [1]
   [2]]
###
> T_2_3->ExpandDims(-1)
T_2_3->ExpandDims(-1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), -1:i8):i8[*,*,*]))
*** Warning: (18,19) Node: -1, Message: The number should be at least 0 and less than 3
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*]
Ten<i8>(1,2,3)<0,3,1>
  [[[0, 1, 2]
    [3, 4, 5]]]
###
> T_2_3->ExpandDims( 0)
T_2_3->ExpandDims(0) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 0:i8):i8[*,*,*]))
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*]
Ten<i8>(1,2,3)<0,3,1>
  [[[0, 1, 2]
    [3, 4, 5]]]
###
> T_2_3->ExpandDims( 1)
T_2_3->ExpandDims(1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 1:i8):i8[*,*,*]))
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*]
Ten<i8>(2,1,3)<3,0,1>
  [[[0, 1, 2]]

   [[3, 4, 5]]]
###
> T_2_3->ExpandDims( 2)
T_2_3->ExpandDims(2) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 2:i8):i8[*,*,*]))
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*]
Ten<i8>(2,3,1)<3,1,0>
  [[[0]
    [1]
    [2]]

   [[3]
    [4]
    [5]]]
###
> T_2_3->ExpandDims( 3)
T_2_3->ExpandDims(3) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 3:i8):i8[*,*,*]))
*** Warning: (19,20) Node: 3, Message: The number should be at least 0 and less than 3
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*]
Ten<i8>(2,3,1)<3,1,0>
  [[[0]
    [1]
    [2]]

   [[3]
    [4]
    [5]]]
###
> T_2_3->ExpandDims(N1)
T_2_3->ExpandDims(N1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(N1)):i8[*,*,*]))
Func sig: (T_2_3:i8[*,*], N1:i8) to i8[*,*,*]
Ten<i8>(1,2,3)<0,3,1>
  [[[0, 1, 2]
    [3, 4, 5]]]
###
> T_2_3->ExpandDims(P0)
T_2_3->ExpandDims(P0) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P0)):i8[*,*,*]))
Func sig: (T_2_3:i8[*,*], P0:i8) to i8[*,*,*]
Ten<i8>(1,2,3)<0,3,1>
  [[[0, 1, 2]
    [3, 4, 5]]]
###
> T_2_3->ExpandDims(P1)
T_2_3->ExpandDims(P1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P1)):i8[*,*,*]))
Func sig: (T_2_3:i8[*,*], P1:i8) to i8[*,*,*]
Ten<i8>(2,1,3)<3,0,1>
  [[[0, 1, 2]]

   [[3, 4, 5]]]
###
> T_2_3->ExpandDims(P2)
T_2_3->ExpandDims(P2) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P2)):i8[*,*,*]))
Func sig: (T_2_3:i8[*,*], P2:i8) to i8[*,*,*]
Ten<i8>(2,3,1)<3,1,0>
  [[[0]
    [1]
    [2]]

   [[3]
    [4]
    [5]]]
###
> T_2_3->ExpandDims(P3)
T_2_3->ExpandDims(P3) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P3)):i8[*,*,*]))
Func sig: (T_2_3:i8[*,*], P3:i8) to i8[*,*,*]
Ten<i8>(2,3,1)<3,1,0>
  [[[0]
    [1]
    [2]]

   [[3]
    [4]
    [5]]]
###
> T_2_3_2->ExpandDims(-1)
T_2_3_2->ExpandDims(-1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3_2), -1:i8):i8[*,*,*,*]))
*** Warning: (20,21) Node: -1, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3_2:i8[*,*,*]) to i8[*,*,*,*]
Ten<i8>(1,2,3,2)<0,6,2,1>
  [[[[0, 1]
     [2, 3]
     [4, 5]]

    [[6, 7]
     [8, 9]
     [10, 11]]]]
###
> T_2_3_2->ExpandDims( 0)
T_2_3_2->ExpandDims(0) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3_2), 0:i8):i8[*,*,*,*]))
Func sig: (T_2_3_2:i8[*,*,*]) to i8[*,*,*,*]
Ten<i8>(1,2,3,2)<0,6,2,1>
  [[[[0, 1]
     [2, 3]
     [4, 5]]

    [[6, 7]
     [8, 9]
     [10, 11]]]]
###
> T_2_3_2->ExpandDims( 1)
T_2_3_2->ExpandDims(1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3_2), 1:i8):i8[*,*,*,*]))
Func sig: (T_2_3_2:i8[*,*,*]) to i8[*,*,*,*]
Ten<i8>(2,1,3,2)<6,0,2,1>
  [[[[0, 1]
     [2, 3]
     [4, 5]]]


   [[[6, 7]
     [8, 9]
     [10, 11]]]]
###
> T_2_3_2->ExpandDims( 2)
T_2_3_2->ExpandDims(2) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3_2), 2:i8):i8[*,*,*,*]))
Func sig: (T_2_3_2:i8[*,*,*]) to i8[*,*,*,*]
Ten<i8>(2,3,1,2)<6,2,0,1>
  [[[[0, 1]]

    [[2, 3]]

    [[4, 5]]]


   [[[6, 7]]

    [[8, 9]]

    [[10, 11]]]]
###
> T_2_3_2->ExpandDims( 3)
T_2_3_2->ExpandDims(3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3_2), 3:i8):i8[*,*,*,*]))
Func sig: (T_2_3_2:i8[*,*,*]) to i8[*,*,*,*]
Ten<i8>(2,3,2,1)<6,2,1,0>
  [[[[0]
     [1]]

    [[2]
     [3]]

    [[4]
     [5]]]


   [[[6]
     [7]]

    [[8]
     [9]]

    [[10]
     [11]]]]
###
> T_2_3_2->ExpandDims( 4)
T_2_3_2->ExpandDims(4) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3_2), 4:i8):i8[*,*,*,*]))
*** Warning: (21,22) Node: 4, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3_2:i8[*,*,*]) to i8[*,*,*,*]
Ten<i8>(2,3,2,1)<6,2,1,0>
  [[[[0]
     [1]]

    [[2]
     [3]]

    [[4]
     [5]]]


   [[[6]
     [7]]

    [[8]
     [9]]

    [[10]
     [11]]]]
###
> T_2_3_2->ExpandDims(N1)
T_2_3_2->ExpandDims(N1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3_2), Global(N1)):i8[*,*,*,*]))
Func sig: (T_2_3_2:i8[*,*,*], N1:i8) to i8[*,*,*,*]
Ten<i8>(1,2,3,2)<0,6,2,1>
  [[[[0, 1]
     [2, 3]
     [4, 5]]

    [[6, 7]
     [8, 9]
     [10, 11]]]]
###
> T_2_3_2->ExpandDims(P0)
T_2_3_2->ExpandDims(P0) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3_2), Global(P0)):i8[*,*,*,*]))
Func sig: (T_2_3_2:i8[*,*,*], P0:i8) to i8[*,*,*,*]
Ten<i8>(1,2,3,2)<0,6,2,1>
  [[[[0, 1]
     [2, 3]
     [4, 5]]

    [[6, 7]
     [8, 9]
     [10, 11]]]]
###
> T_2_3_2->ExpandDims(P1)
T_2_3_2->ExpandDims(P1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3_2), Global(P1)):i8[*,*,*,*]))
Func sig: (T_2_3_2:i8[*,*,*], P1:i8) to i8[*,*,*,*]
Ten<i8>(2,1,3,2)<6,0,2,1>
  [[[[0, 1]
     [2, 3]
     [4, 5]]]


   [[[6, 7]
     [8, 9]
     [10, 11]]]]
###
> T_2_3_2->ExpandDims(P2)
T_2_3_2->ExpandDims(P2) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3_2), Global(P2)):i8[*,*,*,*]))
Func sig: (T_2_3_2:i8[*,*,*], P2:i8) to i8[*,*,*,*]
Ten<i8>(2,3,1,2)<6,2,0,1>
  [[[[0, 1]]

    [[2, 3]]

    [[4, 5]]]


   [[[6, 7]]

    [[8, 9]]

    [[10, 11]]]]
###
> T_2_3_2->ExpandDims(P3)
T_2_3_2->ExpandDims(P3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3_2), Global(P3)):i8[*,*,*,*]))
Func sig: (T_2_3_2:i8[*,*,*], P3:i8) to i8[*,*,*,*]
Ten<i8>(2,3,2,1)<6,2,1,0>
  [[[[0]
     [1]]

    [[2]
     [3]]

    [[4]
     [5]]]


   [[[6]
     [7]]

    [[8]
     [9]]

    [[10]
     [11]]]]
###
> T_2_3_2->ExpandDims(P4)
T_2_3_2->ExpandDims(P4) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3_2), Global(P4)):i8[*,*,*,*]))
Func sig: (T_2_3_2:i8[*,*,*], P4:i8) to i8[*,*,*,*]
Ten<i8>(2,3,2,1)<6,2,1,0>
  [[[[0]
     [1]]

    [[2]
     [3]]

    [[4]
     [5]]]


   [[[6]
     [7]]

    [[8]
     [9]]

    [[10]
     [11]]]]
###
> S->ExpandDims(-1,-1)
S->ExpandDims(-1, -1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), -1:i8, -1:i8):i8[*,*]))
*** Warning: (14,15) Node: -1, Message: The number should be at least 0 and less than 2
*** Warning: (17,18) Node: -1, Message: The number should be at least 0 and less than 2
Func sig: (S:i8[]) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(-1, 0)
S->ExpandDims(-1, 0) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), -1:i8, 0:i8):i8[*,*]))
*** Warning: (14,15) Node: -1, Message: The number should be at least 0 and less than 2
Func sig: (S:i8[]) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(-1, 1)
S->ExpandDims(-1, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), -1:i8, 1:i8):i8[*,*]))
*** Warning: (14,15) Node: -1, Message: The number should be at least 0 and less than 2
Func sig: (S:i8[]) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(-1, 2)
S->ExpandDims(-1, 2) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), -1:i8, 2:i8):i8[*,*]))
*** Warning: (14,15) Node: -1, Message: The number should be at least 0 and less than 2
*** Warning: (18,19) Node: 2, Message: The number should be at least 0 and less than 2
Func sig: (S:i8[]) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims( 0,-1)
S->ExpandDims(0, -1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), 0:i8, -1:i8):i8[*,*]))
*** Warning: (17,18) Node: -1, Message: The number should be at least 0 and less than 2
Func sig: (S:i8[]) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims( 0, 0)
S->ExpandDims(0, 0) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), 0:i8, 0:i8):i8[*,*]))
*** Warning: (18,19) Node: 0, Message: The 0 axis has already been specified
Func sig: (S:i8[]) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims( 0, 1)
S->ExpandDims(0, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), 0:i8, 1:i8):i8[*,*]))
Func sig: (S:i8[]) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims( 0, 2)
S->ExpandDims(0, 2) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), 0:i8, 2:i8):i8[*,*]))
*** Warning: (18,19) Node: 2, Message: The number should be at least 0 and less than 2
Func sig: (S:i8[]) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims( 1,-1)
S->ExpandDims(1, -1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), 1:i8, -1:i8):i8[*,*]))
*** Warning: (17,18) Node: -1, Message: The number should be at least 0 and less than 2
Func sig: (S:i8[]) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims( 1, 0)
S->ExpandDims(1, 0) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), 1:i8, 0:i8):i8[*,*]))
Func sig: (S:i8[]) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims( 1, 1)
S->ExpandDims(1, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), 1:i8, 1:i8):i8[*,*]))
*** Warning: (18,19) Node: 1, Message: The 1 axis has already been specified
Func sig: (S:i8[]) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims( 1, 2)
S->ExpandDims(1, 2) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), 1:i8, 2:i8):i8[*,*]))
*** Warning: (18,19) Node: 2, Message: The number should be at least 0 and less than 2
Func sig: (S:i8[]) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims( 2,-1)
S->ExpandDims(2, -1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), 2:i8, -1:i8):i8[*,*]))
*** Warning: (15,16) Node: 2, Message: The number should be at least 0 and less than 2
*** Warning: (17,18) Node: -1, Message: The number should be at least 0 and less than 2
Func sig: (S:i8[]) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims( 2, 0)
S->ExpandDims(2, 0) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), 2:i8, 0:i8):i8[*,*]))
*** Warning: (15,16) Node: 2, Message: The number should be at least 0 and less than 2
Func sig: (S:i8[]) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims( 2, 1)
S->ExpandDims(2, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), 2:i8, 1:i8):i8[*,*]))
*** Warning: (15,16) Node: 2, Message: The number should be at least 0 and less than 2
Func sig: (S:i8[]) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims( 2, 2)
S->ExpandDims(2, 2) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), 2:i8, 2:i8):i8[*,*]))
*** Warning: (15,16) Node: 2, Message: The number should be at least 0 and less than 2
*** Warning: (18,19) Node: 2, Message: The number should be at least 0 and less than 2
Func sig: (S:i8[]) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(N1,N1)
S->ExpandDims(N1, N1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(N1), Global(N1)):i8[*,*]))
Func sig: (S:i8[], N1:i8) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(N1,P0)
S->ExpandDims(N1, P0) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(N1), Global(P0)):i8[*,*]))
Func sig: (S:i8[], N1:i8, P0:i8) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(N1,P1)
S->ExpandDims(N1, P1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(N1), Global(P1)):i8[*,*]))
Func sig: (S:i8[], N1:i8, P1:i8) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(N1,P2)
S->ExpandDims(N1, P2) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(N1), Global(P2)):i8[*,*]))
Func sig: (S:i8[], N1:i8, P2:i8) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(P0,N1)
S->ExpandDims(P0, N1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P0), Global(N1)):i8[*,*]))
Func sig: (S:i8[], P0:i8, N1:i8) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(P0,P0)
S->ExpandDims(P0, P0) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P0), Global(P0)):i8[*,*]))
Func sig: (S:i8[], P0:i8) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(P0,P1)
S->ExpandDims(P0, P1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P0), Global(P1)):i8[*,*]))
Func sig: (S:i8[], P0:i8, P1:i8) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(P0,P2)
S->ExpandDims(P0, P2) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P0), Global(P2)):i8[*,*]))
Func sig: (S:i8[], P0:i8, P2:i8) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(P1,N1)
S->ExpandDims(P1, N1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P1), Global(N1)):i8[*,*]))
Func sig: (S:i8[], P1:i8, N1:i8) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(P1,P0)
S->ExpandDims(P1, P0) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P1), Global(P0)):i8[*,*]))
Func sig: (S:i8[], P1:i8, P0:i8) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(P1,P1)
S->ExpandDims(P1, P1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P1), Global(P1)):i8[*,*]))
Func sig: (S:i8[], P1:i8) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(P1,P2)
S->ExpandDims(P1, P2) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P1), Global(P2)):i8[*,*]))
Func sig: (S:i8[], P1:i8, P2:i8) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(P2,N1)
S->ExpandDims(P2, N1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P2), Global(N1)):i8[*,*]))
Func sig: (S:i8[], P2:i8, N1:i8) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(P2,P0)
S->ExpandDims(P2, P0) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P2), Global(P0)):i8[*,*]))
Func sig: (S:i8[], P2:i8, P0:i8) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(P2,P1)
S->ExpandDims(P2, P1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P2), Global(P1)):i8[*,*]))
Func sig: (S:i8[], P2:i8, P1:i8) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> S->ExpandDims(P2,P2)
S->ExpandDims(P2, P2) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P2), Global(P2)):i8[*,*]))
Func sig: (S:i8[], P2:i8) to i8[*,*]
Ten<i8>(1,1)<0,0>
  [[1]]
###
> T_3->ExpandDims(-1,-1)
T_3->ExpandDims(-1, -1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), -1:i8, -1:i8):i8[*,*,*]))
*** Warning: (16,17) Node: -1, Message: The number should be at least 0 and less than 3
*** Warning: (19,20) Node: -1, Message: The number should be at least 0 and less than 3
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(1,1,3)<0,0,1>
  [[[0, 1, 2]]]
###
> T_3->ExpandDims(-1, 0)
T_3->ExpandDims(-1, 0) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), -1:i8, 0:i8):i8[*,*,*]))
*** Warning: (16,17) Node: -1, Message: The number should be at least 0 and less than 3
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(1,1,3)<0,0,1>
  [[[0, 1, 2]]]
###
> T_3->ExpandDims(-1, 1)
T_3->ExpandDims(-1, 1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), -1:i8, 1:i8):i8[*,*,*]))
*** Warning: (16,17) Node: -1, Message: The number should be at least 0 and less than 3
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(1,1,3)<0,0,1>
  [[[0, 1, 2]]]
###
> T_3->ExpandDims(-1, 2)
T_3->ExpandDims(-1, 2) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), -1:i8, 2:i8):i8[*,*,*]))
*** Warning: (16,17) Node: -1, Message: The number should be at least 0 and less than 3
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(1,3,1)<0,1,0>
  [[[0]
    [1]
    [2]]]
###
> T_3->ExpandDims(-1, 3)
T_3->ExpandDims(-1, 3) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), -1:i8, 3:i8):i8[*,*,*]))
*** Warning: (16,17) Node: -1, Message: The number should be at least 0 and less than 3
*** Warning: (20,21) Node: 3, Message: The number should be at least 0 and less than 3
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(1,3,1)<0,1,0>
  [[[0]
    [1]
    [2]]]
###
> T_3->ExpandDims( 0,-1)
T_3->ExpandDims(0, -1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 0:i8, -1:i8):i8[*,*,*]))
*** Warning: (19,20) Node: -1, Message: The number should be at least 0 and less than 3
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(1,1,3)<0,0,1>
  [[[0, 1, 2]]]
###
> T_3->ExpandDims( 0, 0)
T_3->ExpandDims(0, 0) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 0:i8, 0:i8):i8[*,*,*]))
*** Warning: (20,21) Node: 0, Message: The 0 axis has already been specified
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(1,1,3)<0,0,1>
  [[[0, 1, 2]]]
###
> T_3->ExpandDims( 0, 1)
T_3->ExpandDims(0, 1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 0:i8, 1:i8):i8[*,*,*]))
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(1,1,3)<0,0,1>
  [[[0, 1, 2]]]
###
> T_3->ExpandDims( 0, 2)
T_3->ExpandDims(0, 2) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 0:i8, 2:i8):i8[*,*,*]))
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(1,3,1)<0,1,0>
  [[[0]
    [1]
    [2]]]
###
> T_3->ExpandDims( 0, 3)
T_3->ExpandDims(0, 3) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 0:i8, 3:i8):i8[*,*,*]))
*** Warning: (20,21) Node: 3, Message: The number should be at least 0 and less than 3
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(1,3,1)<0,1,0>
  [[[0]
    [1]
    [2]]]
###
> T_3->ExpandDims( 1,-1)
T_3->ExpandDims(1, -1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 1:i8, -1:i8):i8[*,*,*]))
*** Warning: (19,20) Node: -1, Message: The number should be at least 0 and less than 3
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(1,1,3)<0,0,1>
  [[[0, 1, 2]]]
###
> T_3->ExpandDims( 1, 0)
T_3->ExpandDims(1, 0) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 1:i8, 0:i8):i8[*,*,*]))
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(1,1,3)<0,0,1>
  [[[0, 1, 2]]]
###
> T_3->ExpandDims( 1, 1)
T_3->ExpandDims(1, 1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 1:i8, 1:i8):i8[*,*,*]))
*** Warning: (20,21) Node: 1, Message: The 1 axis has already been specified
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims( 1, 2)
T_3->ExpandDims(1, 2) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 1:i8, 2:i8):i8[*,*,*]))
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims( 1, 3)
T_3->ExpandDims(1, 3) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 1:i8, 3:i8):i8[*,*,*]))
*** Warning: (20,21) Node: 3, Message: The number should be at least 0 and less than 3
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims( 2,-1)
T_3->ExpandDims(2, -1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 2:i8, -1:i8):i8[*,*,*]))
*** Warning: (19,20) Node: -1, Message: The number should be at least 0 and less than 3
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(1,3,1)<0,1,0>
  [[[0]
    [1]
    [2]]]
###
> T_3->ExpandDims( 2, 0)
T_3->ExpandDims(2, 0) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 2:i8, 0:i8):i8[*,*,*]))
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(1,3,1)<0,1,0>
  [[[0]
    [1]
    [2]]]
###
> T_3->ExpandDims( 2, 1)
T_3->ExpandDims(2, 1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 2:i8, 1:i8):i8[*,*,*]))
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims( 2, 2)
T_3->ExpandDims(2, 2) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 2:i8, 2:i8):i8[*,*,*]))
*** Warning: (20,21) Node: 2, Message: The 2 axis has already been specified
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims( 2, 3)
T_3->ExpandDims(2, 3) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 2:i8, 3:i8):i8[*,*,*]))
*** Warning: (20,21) Node: 3, Message: The number should be at least 0 and less than 3
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims( 3,-1)
T_3->ExpandDims(3, -1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 3:i8, -1:i8):i8[*,*,*]))
*** Warning: (17,18) Node: 3, Message: The number should be at least 0 and less than 3
*** Warning: (19,20) Node: -1, Message: The number should be at least 0 and less than 3
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(1,3,1)<0,1,0>
  [[[0]
    [1]
    [2]]]
###
> T_3->ExpandDims( 3, 0)
T_3->ExpandDims(3, 0) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 3:i8, 0:i8):i8[*,*,*]))
*** Warning: (17,18) Node: 3, Message: The number should be at least 0 and less than 3
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(1,3,1)<0,1,0>
  [[[0]
    [1]
    [2]]]
###
> T_3->ExpandDims( 3, 1)
T_3->ExpandDims(3, 1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 3:i8, 1:i8):i8[*,*,*]))
*** Warning: (17,18) Node: 3, Message: The number should be at least 0 and less than 3
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims( 3, 2)
T_3->ExpandDims(3, 2) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 3:i8, 2:i8):i8[*,*,*]))
*** Warning: (17,18) Node: 3, Message: The number should be at least 0 and less than 3
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims( 3, 3)
T_3->ExpandDims(3, 3) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 3:i8, 3:i8):i8[*,*,*]))
*** Warning: (17,18) Node: 3, Message: The number should be at least 0 and less than 3
*** Warning: (20,21) Node: 3, Message: The number should be at least 0 and less than 3
Func sig: (T_3:i8[*]) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims(N1,N1)
T_3->ExpandDims(N1, N1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(N1), Global(N1)):i8[*,*,*]))
Func sig: (T_3:i8[*], N1:i8) to i8[*,*,*]
Ten<i8>(1,1,3)<0,0,1>
  [[[0, 1, 2]]]
###
> T_3->ExpandDims(N1,P0)
T_3->ExpandDims(N1, P0) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(N1), Global(P0)):i8[*,*,*]))
Func sig: (T_3:i8[*], N1:i8, P0:i8) to i8[*,*,*]
Ten<i8>(1,1,3)<0,0,1>
  [[[0, 1, 2]]]
###
> T_3->ExpandDims(N1,P1)
T_3->ExpandDims(N1, P1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(N1), Global(P1)):i8[*,*,*]))
Func sig: (T_3:i8[*], N1:i8, P1:i8) to i8[*,*,*]
Ten<i8>(1,1,3)<0,0,1>
  [[[0, 1, 2]]]
###
> T_3->ExpandDims(N1,P2)
T_3->ExpandDims(N1, P2) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(N1), Global(P2)):i8[*,*,*]))
Func sig: (T_3:i8[*], N1:i8, P2:i8) to i8[*,*,*]
Ten<i8>(1,3,1)<0,1,0>
  [[[0]
    [1]
    [2]]]
###
> T_3->ExpandDims(N1,P3)
T_3->ExpandDims(N1, P3) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(N1), Global(P3)):i8[*,*,*]))
Func sig: (T_3:i8[*], N1:i8, P3:i8) to i8[*,*,*]
Ten<i8>(1,3,1)<0,1,0>
  [[[0]
    [1]
    [2]]]
###
> T_3->ExpandDims(P0,N1)
T_3->ExpandDims(P0, N1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P0), Global(N1)):i8[*,*,*]))
Func sig: (T_3:i8[*], P0:i8, N1:i8) to i8[*,*,*]
Ten<i8>(1,1,3)<0,0,1>
  [[[0, 1, 2]]]
###
> T_3->ExpandDims(P0,P0)
T_3->ExpandDims(P0, P0) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P0), Global(P0)):i8[*,*,*]))
Func sig: (T_3:i8[*], P0:i8) to i8[*,*,*]
Ten<i8>(1,1,3)<0,0,1>
  [[[0, 1, 2]]]
###
> T_3->ExpandDims(P0,P1)
T_3->ExpandDims(P0, P1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P0), Global(P1)):i8[*,*,*]))
Func sig: (T_3:i8[*], P0:i8, P1:i8) to i8[*,*,*]
Ten<i8>(1,1,3)<0,0,1>
  [[[0, 1, 2]]]
###
> T_3->ExpandDims(P0,P2)
T_3->ExpandDims(P0, P2) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P0), Global(P2)):i8[*,*,*]))
Func sig: (T_3:i8[*], P0:i8, P2:i8) to i8[*,*,*]
Ten<i8>(1,3,1)<0,1,0>
  [[[0]
    [1]
    [2]]]
###
> T_3->ExpandDims(P0,P3)
T_3->ExpandDims(P0, P3) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P0), Global(P3)):i8[*,*,*]))
Func sig: (T_3:i8[*], P0:i8, P3:i8) to i8[*,*,*]
Ten<i8>(1,3,1)<0,1,0>
  [[[0]
    [1]
    [2]]]
###
> T_3->ExpandDims(P1,N1)
T_3->ExpandDims(P1, N1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P1), Global(N1)):i8[*,*,*]))
Func sig: (T_3:i8[*], P1:i8, N1:i8) to i8[*,*,*]
Ten<i8>(1,1,3)<0,0,1>
  [[[0, 1, 2]]]
###
> T_3->ExpandDims(P1,P0)
T_3->ExpandDims(P1, P0) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P1), Global(P0)):i8[*,*,*]))
Func sig: (T_3:i8[*], P1:i8, P0:i8) to i8[*,*,*]
Ten<i8>(1,1,3)<0,0,1>
  [[[0, 1, 2]]]
###
> T_3->ExpandDims(P1,P1)
T_3->ExpandDims(P1, P1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P1), Global(P1)):i8[*,*,*]))
Func sig: (T_3:i8[*], P1:i8) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims(P1,P2)
T_3->ExpandDims(P1, P2) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P1), Global(P2)):i8[*,*,*]))
Func sig: (T_3:i8[*], P1:i8, P2:i8) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims(P1,P3)
T_3->ExpandDims(P1, P3) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P1), Global(P3)):i8[*,*,*]))
Func sig: (T_3:i8[*], P1:i8, P3:i8) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims(P2,N1)
T_3->ExpandDims(P2, N1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P2), Global(N1)):i8[*,*,*]))
Func sig: (T_3:i8[*], P2:i8, N1:i8) to i8[*,*,*]
Ten<i8>(1,3,1)<0,1,0>
  [[[0]
    [1]
    [2]]]
###
> T_3->ExpandDims(P2,P0)
T_3->ExpandDims(P2, P0) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P2), Global(P0)):i8[*,*,*]))
Func sig: (T_3:i8[*], P2:i8, P0:i8) to i8[*,*,*]
Ten<i8>(1,3,1)<0,1,0>
  [[[0]
    [1]
    [2]]]
###
> T_3->ExpandDims(P2,P1)
T_3->ExpandDims(P2, P1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P2), Global(P1)):i8[*,*,*]))
Func sig: (T_3:i8[*], P2:i8, P1:i8) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims(P2,P2)
T_3->ExpandDims(P2, P2) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P2), Global(P2)):i8[*,*,*]))
Func sig: (T_3:i8[*], P2:i8) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims(P2,P3)
T_3->ExpandDims(P2, P3) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P2), Global(P3)):i8[*,*,*]))
Func sig: (T_3:i8[*], P2:i8, P3:i8) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims(P3,N1)
T_3->ExpandDims(P3, N1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P3), Global(N1)):i8[*,*,*]))
Func sig: (T_3:i8[*], P3:i8, N1:i8) to i8[*,*,*]
Ten<i8>(1,3,1)<0,1,0>
  [[[0]
    [1]
    [2]]]
###
> T_3->ExpandDims(P3,P0)
T_3->ExpandDims(P3, P0) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P3), Global(P0)):i8[*,*,*]))
Func sig: (T_3:i8[*], P3:i8, P0:i8) to i8[*,*,*]
Ten<i8>(1,3,1)<0,1,0>
  [[[0]
    [1]
    [2]]]
###
> T_3->ExpandDims(P3,P1)
T_3->ExpandDims(P3, P1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P3), Global(P1)):i8[*,*,*]))
Func sig: (T_3:i8[*], P3:i8, P1:i8) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims(P3,P2)
T_3->ExpandDims(P3, P2) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P3), Global(P2)):i8[*,*,*]))
Func sig: (T_3:i8[*], P3:i8, P2:i8) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_3->ExpandDims(P3,P3)
T_3->ExpandDims(P3, P3) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P3), Global(P3)):i8[*,*,*]))
Func sig: (T_3:i8[*], P3:i8) to i8[*,*,*]
Ten<i8>(3,1,1)<1,0,0>
  [[[0]]

   [[1]]

   [[2]]]
###
> T_2_3->ExpandDims(-1,-1)
T_2_3->ExpandDims(-1, -1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), -1:i8, -1:i8):i8[*,*,*,*]))
*** Warning: (18,19) Node: -1, Message: The number should be at least 0 and less than 4
*** Warning: (21,22) Node: -1, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,1,2,3)<0,0,3,1>
  [[[[0, 1, 2]
     [3, 4, 5]]]]
###
> T_2_3->ExpandDims(-1, 0)
T_2_3->ExpandDims(-1, 0) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), -1:i8, 0:i8):i8[*,*,*,*]))
*** Warning: (18,19) Node: -1, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,1,2,3)<0,0,3,1>
  [[[[0, 1, 2]
     [3, 4, 5]]]]
###
> T_2_3->ExpandDims(-1, 1)
T_2_3->ExpandDims(-1, 1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), -1:i8, 1:i8):i8[*,*,*,*]))
*** Warning: (18,19) Node: -1, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,1,2,3)<0,0,3,1>
  [[[[0, 1, 2]
     [3, 4, 5]]]]
###
> T_2_3->ExpandDims(-1, 2)
T_2_3->ExpandDims(-1, 2) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), -1:i8, 2:i8):i8[*,*,*,*]))
*** Warning: (18,19) Node: -1, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,2,1,3)<0,3,0,1>
  [[[[0, 1, 2]]

    [[3, 4, 5]]]]
###
> T_2_3->ExpandDims(-1, 3)
T_2_3->ExpandDims(-1, 3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), -1:i8, 3:i8):i8[*,*,*,*]))
*** Warning: (18,19) Node: -1, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,2,3,1)<0,3,1,0>
  [[[[0]
     [1]
     [2]]

    [[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims(-1, 4)
T_2_3->ExpandDims(-1, 4) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), -1:i8, 4:i8):i8[*,*,*,*]))
*** Warning: (18,19) Node: -1, Message: The number should be at least 0 and less than 4
*** Warning: (22,23) Node: 4, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,2,3,1)<0,3,1,0>
  [[[[0]
     [1]
     [2]]

    [[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims( 0,-1)
T_2_3->ExpandDims(0, -1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 0:i8, -1:i8):i8[*,*,*,*]))
*** Warning: (21,22) Node: -1, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,1,2,3)<0,0,3,1>
  [[[[0, 1, 2]
     [3, 4, 5]]]]
###
> T_2_3->ExpandDims( 0, 0)
T_2_3->ExpandDims(0, 0) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 0:i8, 0:i8):i8[*,*,*,*]))
*** Warning: (22,23) Node: 0, Message: The 0 axis has already been specified
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,1,2,3)<0,0,3,1>
  [[[[0, 1, 2]
     [3, 4, 5]]]]
###
> T_2_3->ExpandDims( 0, 1)
T_2_3->ExpandDims(0, 1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 0:i8, 1:i8):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,1,2,3)<0,0,3,1>
  [[[[0, 1, 2]
     [3, 4, 5]]]]
###
> T_2_3->ExpandDims( 0, 2)
T_2_3->ExpandDims(0, 2) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 0:i8, 2:i8):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,2,1,3)<0,3,0,1>
  [[[[0, 1, 2]]

    [[3, 4, 5]]]]
###
> T_2_3->ExpandDims( 0, 3)
T_2_3->ExpandDims(0, 3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 0:i8, 3:i8):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,2,3,1)<0,3,1,0>
  [[[[0]
     [1]
     [2]]

    [[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims( 0, 4)
T_2_3->ExpandDims(0, 4) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 0:i8, 4:i8):i8[*,*,*,*]))
*** Warning: (22,23) Node: 4, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,2,3,1)<0,3,1,0>
  [[[[0]
     [1]
     [2]]

    [[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims( 1,-1)
T_2_3->ExpandDims(1, -1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 1:i8, -1:i8):i8[*,*,*,*]))
*** Warning: (21,22) Node: -1, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,1,2,3)<0,0,3,1>
  [[[[0, 1, 2]
     [3, 4, 5]]]]
###
> T_2_3->ExpandDims( 1, 0)
T_2_3->ExpandDims(1, 0) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 1:i8, 0:i8):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,1,2,3)<0,0,3,1>
  [[[[0, 1, 2]
     [3, 4, 5]]]]
###
> T_2_3->ExpandDims( 1, 1)
T_2_3->ExpandDims(1, 1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 1:i8, 1:i8):i8[*,*,*,*]))
*** Warning: (22,23) Node: 1, Message: The 1 axis has already been specified
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(2,1,1,3)<3,0,0,1>
  [[[[0, 1, 2]]]


   [[[3, 4, 5]]]]
###
> T_2_3->ExpandDims( 1, 2)
T_2_3->ExpandDims(1, 2) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 1:i8, 2:i8):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(2,1,1,3)<3,0,0,1>
  [[[[0, 1, 2]]]


   [[[3, 4, 5]]]]
###
> T_2_3->ExpandDims( 1, 3)
T_2_3->ExpandDims(1, 3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 1:i8, 3:i8):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(2,1,3,1)<3,0,1,0>
  [[[[0]
     [1]
     [2]]]


   [[[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims( 1, 4)
T_2_3->ExpandDims(1, 4) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 1:i8, 4:i8):i8[*,*,*,*]))
*** Warning: (22,23) Node: 4, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(2,1,3,1)<3,0,1,0>
  [[[[0]
     [1]
     [2]]]


   [[[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims( 2,-1)
T_2_3->ExpandDims(2, -1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 2:i8, -1:i8):i8[*,*,*,*]))
*** Warning: (21,22) Node: -1, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,2,1,3)<0,3,0,1>
  [[[[0, 1, 2]]

    [[3, 4, 5]]]]
###
> T_2_3->ExpandDims( 2, 0)
T_2_3->ExpandDims(2, 0) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 2:i8, 0:i8):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,2,1,3)<0,3,0,1>
  [[[[0, 1, 2]]

    [[3, 4, 5]]]]
###
> T_2_3->ExpandDims( 2, 1)
T_2_3->ExpandDims(2, 1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 2:i8, 1:i8):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(2,1,1,3)<3,0,0,1>
  [[[[0, 1, 2]]]


   [[[3, 4, 5]]]]
###
> T_2_3->ExpandDims( 2, 2)
T_2_3->ExpandDims(2, 2) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 2:i8, 2:i8):i8[*,*,*,*]))
*** Warning: (22,23) Node: 2, Message: The 2 axis has already been specified
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims( 2, 3)
T_2_3->ExpandDims(2, 3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 2:i8, 3:i8):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims( 2, 4)
T_2_3->ExpandDims(2, 4) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 2:i8, 4:i8):i8[*,*,*,*]))
*** Warning: (22,23) Node: 4, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims( 3,-1)
T_2_3->ExpandDims(3, -1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 3:i8, -1:i8):i8[*,*,*,*]))
*** Warning: (21,22) Node: -1, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,2,3,1)<0,3,1,0>
  [[[[0]
     [1]
     [2]]

    [[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims( 3, 0)
T_2_3->ExpandDims(3, 0) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 3:i8, 0:i8):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,2,3,1)<0,3,1,0>
  [[[[0]
     [1]
     [2]]

    [[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims( 3, 1)
T_2_3->ExpandDims(3, 1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 3:i8, 1:i8):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(2,1,3,1)<3,0,1,0>
  [[[[0]
     [1]
     [2]]]


   [[[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims( 3, 2)
T_2_3->ExpandDims(3, 2) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 3:i8, 2:i8):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims( 3, 3)
T_2_3->ExpandDims(3, 3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 3:i8, 3:i8):i8[*,*,*,*]))
*** Warning: (22,23) Node: 3, Message: The 3 axis has already been specified
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims( 3, 4)
T_2_3->ExpandDims(3, 4) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 3:i8, 4:i8):i8[*,*,*,*]))
*** Warning: (22,23) Node: 4, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims( 4,-1)
T_2_3->ExpandDims(4, -1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 4:i8, -1:i8):i8[*,*,*,*]))
*** Warning: (19,20) Node: 4, Message: The number should be at least 0 and less than 4
*** Warning: (21,22) Node: -1, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,2,3,1)<0,3,1,0>
  [[[[0]
     [1]
     [2]]

    [[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims( 4, 0)
T_2_3->ExpandDims(4, 0) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 4:i8, 0:i8):i8[*,*,*,*]))
*** Warning: (19,20) Node: 4, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(1,2,3,1)<0,3,1,0>
  [[[[0]
     [1]
     [2]]

    [[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims( 4, 1)
T_2_3->ExpandDims(4, 1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 4:i8, 1:i8):i8[*,*,*,*]))
*** Warning: (19,20) Node: 4, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(2,1,3,1)<3,0,1,0>
  [[[[0]
     [1]
     [2]]]


   [[[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims( 4, 2)
T_2_3->ExpandDims(4, 2) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 4:i8, 2:i8):i8[*,*,*,*]))
*** Warning: (19,20) Node: 4, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims( 4, 3)
T_2_3->ExpandDims(4, 3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 4:i8, 3:i8):i8[*,*,*,*]))
*** Warning: (19,20) Node: 4, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims( 4, 4)
T_2_3->ExpandDims(4, 4) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), 4:i8, 4:i8):i8[*,*,*,*]))
*** Warning: (19,20) Node: 4, Message: The number should be at least 0 and less than 4
*** Warning: (22,23) Node: 4, Message: The number should be at least 0 and less than 4
Func sig: (T_2_3:i8[*,*]) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims(N1,N1)
T_2_3->ExpandDims(N1, N1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(N1), Global(N1)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], N1:i8) to i8[*,*,*,*]
Ten<i8>(1,1,2,3)<0,0,3,1>
  [[[[0, 1, 2]
     [3, 4, 5]]]]
###
> T_2_3->ExpandDims(N1,P0)
T_2_3->ExpandDims(N1, P0) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(N1), Global(P0)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], N1:i8, P0:i8) to i8[*,*,*,*]
Ten<i8>(1,1,2,3)<0,0,3,1>
  [[[[0, 1, 2]
     [3, 4, 5]]]]
###
> T_2_3->ExpandDims(N1,P1)
T_2_3->ExpandDims(N1, P1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(N1), Global(P1)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], N1:i8, P1:i8) to i8[*,*,*,*]
Ten<i8>(1,1,2,3)<0,0,3,1>
  [[[[0, 1, 2]
     [3, 4, 5]]]]
###
> T_2_3->ExpandDims(N1,P2)
T_2_3->ExpandDims(N1, P2) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(N1), Global(P2)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], N1:i8, P2:i8) to i8[*,*,*,*]
Ten<i8>(1,2,1,3)<0,3,0,1>
  [[[[0, 1, 2]]

    [[3, 4, 5]]]]
###
> T_2_3->ExpandDims(N1,P3)
T_2_3->ExpandDims(N1, P3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(N1), Global(P3)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], N1:i8, P3:i8) to i8[*,*,*,*]
Ten<i8>(1,2,3,1)<0,3,1,0>
  [[[[0]
     [1]
     [2]]

    [[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims(N1,P4)
T_2_3->ExpandDims(N1, P4) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(N1), Global(P4)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], N1:i8, P4:i8) to i8[*,*,*,*]
Ten<i8>(1,2,3,1)<0,3,1,0>
  [[[[0]
     [1]
     [2]]

    [[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims(P0,N1)
T_2_3->ExpandDims(P0, N1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P0), Global(N1)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P0:i8, N1:i8) to i8[*,*,*,*]
Ten<i8>(1,1,2,3)<0,0,3,1>
  [[[[0, 1, 2]
     [3, 4, 5]]]]
###
> T_2_3->ExpandDims(P0,P0)
T_2_3->ExpandDims(P0, P0) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P0), Global(P0)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P0:i8) to i8[*,*,*,*]
Ten<i8>(1,1,2,3)<0,0,3,1>
  [[[[0, 1, 2]
     [3, 4, 5]]]]
###
> T_2_3->ExpandDims(P0,P1)
T_2_3->ExpandDims(P0, P1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P0), Global(P1)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P0:i8, P1:i8) to i8[*,*,*,*]
Ten<i8>(1,1,2,3)<0,0,3,1>
  [[[[0, 1, 2]
     [3, 4, 5]]]]
###
> T_2_3->ExpandDims(P0,P2)
T_2_3->ExpandDims(P0, P2) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P0), Global(P2)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P0:i8, P2:i8) to i8[*,*,*,*]
Ten<i8>(1,2,1,3)<0,3,0,1>
  [[[[0, 1, 2]]

    [[3, 4, 5]]]]
###
> T_2_3->ExpandDims(P0,P3)
T_2_3->ExpandDims(P0, P3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P0), Global(P3)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P0:i8, P3:i8) to i8[*,*,*,*]
Ten<i8>(1,2,3,1)<0,3,1,0>
  [[[[0]
     [1]
     [2]]

    [[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims(P0,P4)
T_2_3->ExpandDims(P0, P4) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P0), Global(P4)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P0:i8, P4:i8) to i8[*,*,*,*]
Ten<i8>(1,2,3,1)<0,3,1,0>
  [[[[0]
     [1]
     [2]]

    [[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims(P1,N1)
T_2_3->ExpandDims(P1, N1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P1), Global(N1)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P1:i8, N1:i8) to i8[*,*,*,*]
Ten<i8>(1,1,2,3)<0,0,3,1>
  [[[[0, 1, 2]
     [3, 4, 5]]]]
###
> T_2_3->ExpandDims(P1,P0)
T_2_3->ExpandDims(P1, P0) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P1), Global(P0)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P1:i8, P0:i8) to i8[*,*,*,*]
Ten<i8>(1,1,2,3)<0,0,3,1>
  [[[[0, 1, 2]
     [3, 4, 5]]]]
###
> T_2_3->ExpandDims(P1,P1)
T_2_3->ExpandDims(P1, P1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P1), Global(P1)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P1:i8) to i8[*,*,*,*]
Ten<i8>(2,1,1,3)<3,0,0,1>
  [[[[0, 1, 2]]]


   [[[3, 4, 5]]]]
###
> T_2_3->ExpandDims(P1,P2)
T_2_3->ExpandDims(P1, P2) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P1), Global(P2)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P1:i8, P2:i8) to i8[*,*,*,*]
Ten<i8>(2,1,1,3)<3,0,0,1>
  [[[[0, 1, 2]]]


   [[[3, 4, 5]]]]
###
> T_2_3->ExpandDims(P1,P3)
T_2_3->ExpandDims(P1, P3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P1), Global(P3)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P1:i8, P3:i8) to i8[*,*,*,*]
Ten<i8>(2,1,3,1)<3,0,1,0>
  [[[[0]
     [1]
     [2]]]


   [[[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims(P1,P4)
T_2_3->ExpandDims(P1, P4) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P1), Global(P4)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P1:i8, P4:i8) to i8[*,*,*,*]
Ten<i8>(2,1,3,1)<3,0,1,0>
  [[[[0]
     [1]
     [2]]]


   [[[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims(P2,N1)
T_2_3->ExpandDims(P2, N1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P2), Global(N1)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P2:i8, N1:i8) to i8[*,*,*,*]
Ten<i8>(1,2,1,3)<0,3,0,1>
  [[[[0, 1, 2]]

    [[3, 4, 5]]]]
###
> T_2_3->ExpandDims(P2,P0)
T_2_3->ExpandDims(P2, P0) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P2), Global(P0)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P2:i8, P0:i8) to i8[*,*,*,*]
Ten<i8>(1,2,1,3)<0,3,0,1>
  [[[[0, 1, 2]]

    [[3, 4, 5]]]]
###
> T_2_3->ExpandDims(P2,P1)
T_2_3->ExpandDims(P2, P1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P2), Global(P1)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P2:i8, P1:i8) to i8[*,*,*,*]
Ten<i8>(2,1,1,3)<3,0,0,1>
  [[[[0, 1, 2]]]


   [[[3, 4, 5]]]]
###
> T_2_3->ExpandDims(P2,P2)
T_2_3->ExpandDims(P2, P2) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P2), Global(P2)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P2:i8) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims(P2,P3)
T_2_3->ExpandDims(P2, P3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P2), Global(P3)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P2:i8, P3:i8) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims(P2,P4)
T_2_3->ExpandDims(P2, P4) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P2), Global(P4)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P2:i8, P4:i8) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims(P3,N1)
T_2_3->ExpandDims(P3, N1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P3), Global(N1)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P3:i8, N1:i8) to i8[*,*,*,*]
Ten<i8>(1,2,3,1)<0,3,1,0>
  [[[[0]
     [1]
     [2]]

    [[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims(P3,P0)
T_2_3->ExpandDims(P3, P0) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P3), Global(P0)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P3:i8, P0:i8) to i8[*,*,*,*]
Ten<i8>(1,2,3,1)<0,3,1,0>
  [[[[0]
     [1]
     [2]]

    [[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims(P3,P1)
T_2_3->ExpandDims(P3, P1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P3), Global(P1)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P3:i8, P1:i8) to i8[*,*,*,*]
Ten<i8>(2,1,3,1)<3,0,1,0>
  [[[[0]
     [1]
     [2]]]


   [[[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims(P3,P2)
T_2_3->ExpandDims(P3, P2) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P3), Global(P2)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P3:i8, P2:i8) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims(P3,P3)
T_2_3->ExpandDims(P3, P3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P3), Global(P3)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P3:i8) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims(P3,P4)
T_2_3->ExpandDims(P3, P4) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P3), Global(P4)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P3:i8, P4:i8) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims(P4,N1)
T_2_3->ExpandDims(P4, N1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P4), Global(N1)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P4:i8, N1:i8) to i8[*,*,*,*]
Ten<i8>(1,2,3,1)<0,3,1,0>
  [[[[0]
     [1]
     [2]]

    [[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims(P4,P0)
T_2_3->ExpandDims(P4, P0) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P4), Global(P0)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P4:i8, P0:i8) to i8[*,*,*,*]
Ten<i8>(1,2,3,1)<0,3,1,0>
  [[[[0]
     [1]
     [2]]

    [[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims(P4,P1)
T_2_3->ExpandDims(P4, P1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P4), Global(P1)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P4:i8, P1:i8) to i8[*,*,*,*]
Ten<i8>(2,1,3,1)<3,0,1,0>
  [[[[0]
     [1]
     [2]]]


   [[[3]
     [4]
     [5]]]]
###
> T_2_3->ExpandDims(P4,P2)
T_2_3->ExpandDims(P4, P2) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P4), Global(P2)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P4:i8, P2:i8) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims(P4,P3)
T_2_3->ExpandDims(P4, P3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P4), Global(P3)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P4:i8, P3:i8) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> T_2_3->ExpandDims(P4,P4)
T_2_3->ExpandDims(P4, P4) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P4), Global(P4)):i8[*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P4:i8) to i8[*,*,*,*]
Ten<i8>(2,3,1,1)<3,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]


   [[[3]]

    [[4]]

    [[5]]]]
###
> S->ExpandDims(P0,P1,P2)
S->ExpandDims(P0, P1, P2) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P0), Global(P1), Global(P2)):i8[*,*,*]))
Func sig: (S:i8[], P0:i8, P1:i8, P2:i8) to i8[*,*,*]
Ten<i8>(1,1,1)<0,0,0>
  [[[1]]]
###
> S->ExpandDims(P0,P2,P1)
S->ExpandDims(P0, P2, P1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P0), Global(P2), Global(P1)):i8[*,*,*]))
Func sig: (S:i8[], P0:i8, P2:i8, P1:i8) to i8[*,*,*]
Ten<i8>(1,1,1)<0,0,0>
  [[[1]]]
###
> S->ExpandDims(P1,P0,P2)
S->ExpandDims(P1, P0, P2) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P1), Global(P0), Global(P2)):i8[*,*,*]))
Func sig: (S:i8[], P1:i8, P0:i8, P2:i8) to i8[*,*,*]
Ten<i8>(1,1,1)<0,0,0>
  [[[1]]]
###
> S->ExpandDims(P1,P2,P0)
S->ExpandDims(P1, P2, P0) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P1), Global(P2), Global(P0)):i8[*,*,*]))
Func sig: (S:i8[], P1:i8, P2:i8, P0:i8) to i8[*,*,*]
Ten<i8>(1,1,1)<0,0,0>
  [[[1]]]
###
> S->ExpandDims(P2,P0,P1)
S->ExpandDims(P2, P0, P1) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P2), Global(P0), Global(P1)):i8[*,*,*]))
Func sig: (S:i8[], P2:i8, P0:i8, P1:i8) to i8[*,*,*]
Ten<i8>(1,1,1)<0,0,0>
  [[[1]]]
###
> S->ExpandDims(P2,P1,P0)
S->ExpandDims(P2, P1, P0) : i8[*,*,*]
BndKind:Call, Type:i8[*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P2), Global(P1), Global(P0)):i8[*,*,*]))
Func sig: (S:i8[], P2:i8, P1:i8, P0:i8) to i8[*,*,*]
Ten<i8>(1,1,1)<0,0,0>
  [[[1]]]
###
> T_3->ExpandDims(P0,P1,P2)
T_3->ExpandDims(P0, P1, P2) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P0), Global(P1), Global(P2)):i8[*,*,*,*]))
Func sig: (T_3:i8[*], P0:i8, P1:i8, P2:i8) to i8[*,*,*,*]
Ten<i8>(1,1,1,3)<0,0,0,1>
  [[[[0, 1, 2]]]]
###
> T_3->ExpandDims(P0,P2,P1)
T_3->ExpandDims(P0, P2, P1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P0), Global(P2), Global(P1)):i8[*,*,*,*]))
Func sig: (T_3:i8[*], P0:i8, P2:i8, P1:i8) to i8[*,*,*,*]
Ten<i8>(1,1,1,3)<0,0,0,1>
  [[[[0, 1, 2]]]]
###
> T_3->ExpandDims(P1,P0,P2)
T_3->ExpandDims(P1, P0, P2) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P1), Global(P0), Global(P2)):i8[*,*,*,*]))
Func sig: (T_3:i8[*], P1:i8, P0:i8, P2:i8) to i8[*,*,*,*]
Ten<i8>(1,1,1,3)<0,0,0,1>
  [[[[0, 1, 2]]]]
###
> T_3->ExpandDims(P1,P2,P0)
T_3->ExpandDims(P1, P2, P0) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P1), Global(P2), Global(P0)):i8[*,*,*,*]))
Func sig: (T_3:i8[*], P1:i8, P2:i8, P0:i8) to i8[*,*,*,*]
Ten<i8>(1,1,1,3)<0,0,0,1>
  [[[[0, 1, 2]]]]
###
> T_3->ExpandDims(P2,P0,P1)
T_3->ExpandDims(P2, P0, P1) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P2), Global(P0), Global(P1)):i8[*,*,*,*]))
Func sig: (T_3:i8[*], P2:i8, P0:i8, P1:i8) to i8[*,*,*,*]
Ten<i8>(1,1,1,3)<0,0,0,1>
  [[[[0, 1, 2]]]]
###
> T_3->ExpandDims(P2,P1,P0)
T_3->ExpandDims(P2, P1, P0) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P2), Global(P1), Global(P0)):i8[*,*,*,*]))
Func sig: (T_3:i8[*], P2:i8, P1:i8, P0:i8) to i8[*,*,*,*]
Ten<i8>(1,1,1,3)<0,0,0,1>
  [[[[0, 1, 2]]]]
###
> T_3->ExpandDims(P0,P1,P3)
T_3->ExpandDims(P0, P1, P3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P0), Global(P1), Global(P3)):i8[*,*,*,*]))
Func sig: (T_3:i8[*], P0:i8, P1:i8, P3:i8) to i8[*,*,*,*]
Ten<i8>(1,1,3,1)<0,0,1,0>
  [[[[0]
     [1]
     [2]]]]
###
> T_3->ExpandDims(P0,P2,P3)
T_3->ExpandDims(P0, P2, P3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P0), Global(P2), Global(P3)):i8[*,*,*,*]))
Func sig: (T_3:i8[*], P0:i8, P2:i8, P3:i8) to i8[*,*,*,*]
Ten<i8>(1,3,1,1)<0,1,0,0>
  [[[[0]]

    [[1]]

    [[2]]]]
###
> T_3->ExpandDims(P1,P2,P3)
T_3->ExpandDims(P1, P2, P3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P1), Global(P2), Global(P3)):i8[*,*,*,*]))
Func sig: (T_3:i8[*], P1:i8, P2:i8, P3:i8) to i8[*,*,*,*]
Ten<i8>(3,1,1,1)<1,0,0,0>
  [[[[0]]]


   [[[1]]]


   [[[2]]]]
###
> T_2_3->ExpandDims(P0,P1,P2)
T_2_3->ExpandDims(P0, P1, P2) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P0), Global(P1), Global(P2)):i8[*,*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P0:i8, P1:i8, P2:i8) to i8[*,*,*,*,*]
Ten<i8>(1,1,1,2,3)<0,0,0,3,1>
  [[[[[0, 1, 2]
      [3, 4, 5]]]]]
###
> T_2_3->ExpandDims(P0,P1,P3)
T_2_3->ExpandDims(P0, P1, P3) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P0), Global(P1), Global(P3)):i8[*,*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P0:i8, P1:i8, P3:i8) to i8[*,*,*,*,*]
Ten<i8>(1,1,2,1,3)<0,0,3,0,1>
  [[[[[0, 1, 2]]

     [[3, 4, 5]]]]]
###
> T_2_3->ExpandDims(P0,P1,P4)
T_2_3->ExpandDims(P0, P1, P4) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P0), Global(P1), Global(P4)):i8[*,*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P0:i8, P1:i8, P4:i8) to i8[*,*,*,*,*]
Ten<i8>(1,1,2,3,1)<0,0,3,1,0>
  [[[[[0]
      [1]
      [2]]

     [[3]
      [4]
      [5]]]]]
###
> T_2_3->ExpandDims(P0,P2,P3)
T_2_3->ExpandDims(P0, P2, P3) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P0), Global(P2), Global(P3)):i8[*,*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P0:i8, P2:i8, P3:i8) to i8[*,*,*,*,*]
Ten<i8>(1,2,1,1,3)<0,3,0,0,1>
  [[[[[0, 1, 2]]]


    [[[3, 4, 5]]]]]
###
> T_2_3->ExpandDims(P0,P2,P4)
T_2_3->ExpandDims(P0, P2, P4) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P0), Global(P2), Global(P4)):i8[*,*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P0:i8, P2:i8, P4:i8) to i8[*,*,*,*,*]
Ten<i8>(1,2,1,3,1)<0,3,0,1,0>
  [[[[[0]
      [1]
      [2]]]


    [[[3]
      [4]
      [5]]]]]
###
> T_2_3->ExpandDims(P0,P3,P4)
T_2_3->ExpandDims(P0, P3, P4) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P0), Global(P3), Global(P4)):i8[*,*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P0:i8, P3:i8, P4:i8) to i8[*,*,*,*,*]
Ten<i8>(1,2,3,1,1)<0,3,1,0,0>
  [[[[[0]]

     [[1]]

     [[2]]]


    [[[3]]

     [[4]]

     [[5]]]]]
###
> T_2_3->ExpandDims(P1,P2,P3)
T_2_3->ExpandDims(P1, P2, P3) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P1), Global(P2), Global(P3)):i8[*,*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P1:i8, P2:i8, P3:i8) to i8[*,*,*,*,*]
Ten<i8>(2,1,1,1,3)<3,0,0,0,1>
  [[[[[0, 1, 2]]]]



   [[[[3, 4, 5]]]]]
###
> T_2_3->ExpandDims(P1,P2,P4)
T_2_3->ExpandDims(P1, P2, P4) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P1), Global(P2), Global(P4)):i8[*,*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P1:i8, P2:i8, P4:i8) to i8[*,*,*,*,*]
Ten<i8>(2,1,1,3,1)<3,0,0,1,0>
  [[[[[0]
      [1]
      [2]]]]



   [[[[3]
      [4]
      [5]]]]]
###
> T_2_3->ExpandDims(P1,P3,P4)
T_2_3->ExpandDims(P1, P3, P4) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P1), Global(P3), Global(P4)):i8[*,*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P1:i8, P3:i8, P4:i8) to i8[*,*,*,*,*]
Ten<i8>(2,1,3,1,1)<3,0,1,0,0>
  [[[[[0]]

     [[1]]

     [[2]]]]



   [[[[3]]

     [[4]]

     [[5]]]]]
###
> T_2_3->ExpandDims(P2,P3,P4)
T_2_3->ExpandDims(P2, P3, P4) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_2_3), Global(P2), Global(P3), Global(P4)):i8[*,*,*,*,*]))
Func sig: (T_2_3:i8[*,*], P2:i8, P3:i8, P4:i8) to i8[*,*,*,*,*]
Ten<i8>(2,3,1,1,1)<3,1,0,0,0>
  [[[[[0]]]


    [[[1]]]


    [[[2]]]]



   [[[[3]]]


    [[[4]]]


    [[[5]]]]]
###
> S  ->ExpandDims(P0,P1,P2,P3)
S->ExpandDims(P0, P1, P2, P3) : i8[*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P0), Global(P1), Global(P2), Global(P3)):i8[*,*,*,*]))
Func sig: (S:i8[], P0:i8, P1:i8, P2:i8, P3:i8) to i8[*,*,*,*]
Ten<i8>(1,1,1,1)<0,0,0,0>
  [[[[1]]]]
###
> T_3->ExpandDims(P0,P1,P2,P3)
T_3->ExpandDims(P0, P1, P2, P3) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P0), Global(P1), Global(P2), Global(P3)):i8[*,*,*,*,*]))
Func sig: (T_3:i8[*], P0:i8, P1:i8, P2:i8, P3:i8) to i8[*,*,*,*,*]
Ten<i8>(1,1,1,1,3)<0,0,0,0,1>
  [[[[[0, 1, 2]]]]]
###
> T_3->ExpandDims(P3,P0,P1,P2)
T_3->ExpandDims(P3, P0, P1, P2) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P3), Global(P0), Global(P1), Global(P2)):i8[*,*,*,*,*]))
Func sig: (T_3:i8[*], P3:i8, P0:i8, P1:i8, P2:i8) to i8[*,*,*,*,*]
Ten<i8>(1,1,1,1,3)<0,0,0,0,1>
  [[[[[0, 1, 2]]]]]
###
> T_3->ExpandDims(P2,P3,P0,P1)
T_3->ExpandDims(P2, P3, P0, P1) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P2), Global(P3), Global(P0), Global(P1)):i8[*,*,*,*,*]))
Func sig: (T_3:i8[*], P2:i8, P3:i8, P0:i8, P1:i8) to i8[*,*,*,*,*]
Ten<i8>(1,1,1,1,3)<0,0,0,0,1>
  [[[[[0, 1, 2]]]]]
###
> T_3->ExpandDims(P1,P2,P3,P0)
T_3->ExpandDims(P1, P2, P3, P0) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P1), Global(P2), Global(P3), Global(P0)):i8[*,*,*,*,*]))
Func sig: (T_3:i8[*], P1:i8, P2:i8, P3:i8, P0:i8) to i8[*,*,*,*,*]
Ten<i8>(1,1,1,1,3)<0,0,0,0,1>
  [[[[[0, 1, 2]]]]]
###
> T_3->ExpandDims(P0,P0,P0,P0)
T_3->ExpandDims(P0, P0, P0, P0) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P0), Global(P0), Global(P0), Global(P0)):i8[*,*,*,*,*]))
Func sig: (T_3:i8[*], P0:i8) to i8[*,*,*,*,*]
Ten<i8>(1,1,1,1,3)<0,0,0,0,1>
  [[[[[0, 1, 2]]]]]
###
> T_3->ExpandDims(P1,P1,P1,P1)
T_3->ExpandDims(P1, P1, P1, P1) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P1), Global(P1), Global(P1), Global(P1)):i8[*,*,*,*,*]))
Func sig: (T_3:i8[*], P1:i8) to i8[*,*,*,*,*]
Ten<i8>(3,1,1,1,1)<1,0,0,0,0>
  [[[[[0]]]]



   [[[[1]]]]



   [[[[2]]]]]
###
> T_3->ExpandDims(P4,P4,P4,P4)
T_3->ExpandDims(P4, P4, P4, P4) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P4), Global(P4), Global(P4), Global(P4)):i8[*,*,*,*,*]))
Func sig: (T_3:i8[*], P4:i8) to i8[*,*,*,*,*]
Ten<i8>(3,1,1,1,1)<1,0,0,0,0>
  [[[[[0]]]]



   [[[[1]]]]



   [[[[2]]]]]
###
> T_3->ExpandDims(P4,P4,P4,P0)
T_3->ExpandDims(P4, P4, P4, P0) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P4), Global(P4), Global(P4), Global(P0)):i8[*,*,*,*,*]))
Func sig: (T_3:i8[*], P4:i8, P0:i8) to i8[*,*,*,*,*]
Ten<i8>(1,3,1,1,1)<0,1,0,0,0>
  [[[[[0]]]


    [[[1]]]


    [[[2]]]]]
###
> T_3->ExpandDims(P4,P4,P0,P4)
T_3->ExpandDims(P4, P4, P0, P4) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P4), Global(P4), Global(P0), Global(P4)):i8[*,*,*,*,*]))
Func sig: (T_3:i8[*], P4:i8, P0:i8) to i8[*,*,*,*,*]
Ten<i8>(1,3,1,1,1)<0,1,0,0,0>
  [[[[[0]]]


    [[[1]]]


    [[[2]]]]]
###
> T_3->ExpandDims(P4,P0,P4,P4)
T_3->ExpandDims(P4, P0, P4, P4) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P4), Global(P0), Global(P4), Global(P4)):i8[*,*,*,*,*]))
Func sig: (T_3:i8[*], P4:i8, P0:i8) to i8[*,*,*,*,*]
Ten<i8>(1,3,1,1,1)<0,1,0,0,0>
  [[[[[0]]]


    [[[1]]]


    [[[2]]]]]
###
> T_3->ExpandDims(P0,P4,P4,P4)
T_3->ExpandDims(P0, P4, P4, P4) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P0), Global(P4), Global(P4), Global(P4)):i8[*,*,*,*,*]))
Func sig: (T_3:i8[*], P0:i8, P4:i8) to i8[*,*,*,*,*]
Ten<i8>(1,3,1,1,1)<0,1,0,0,0>
  [[[[[0]]]


    [[[1]]]


    [[[2]]]]]
###
> T_3->ExpandDims(P4,P1,P4,P0)
T_3->ExpandDims(P4, P1, P4, P0) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P4), Global(P1), Global(P4), Global(P0)):i8[*,*,*,*,*]))
Func sig: (T_3:i8[*], P4:i8, P1:i8, P0:i8) to i8[*,*,*,*,*]
Ten<i8>(1,1,3,1,1)<0,0,1,0,0>
  [[[[[0]]

     [[1]]

     [[2]]]]]
###
> T_3->ExpandDims(P2,P1,P4,P0)
T_3->ExpandDims(P2, P1, P4, P0) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P2), Global(P1), Global(P4), Global(P0)):i8[*,*,*,*,*]))
Func sig: (T_3:i8[*], P2:i8, P1:i8, P4:i8, P0:i8) to i8[*,*,*,*,*]
Ten<i8>(1,1,1,3,1)<0,0,0,1,0>
  [[[[[0]
      [1]
      [2]]]]]
###
> T_3->ExpandDims(P2,P1,P3,P0)
T_3->ExpandDims(P2, P1, P3, P0) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P2), Global(P1), Global(P3), Global(P0)):i8[*,*,*,*,*]))
Func sig: (T_3:i8[*], P2:i8, P1:i8, P3:i8, P0:i8) to i8[*,*,*,*,*]
Ten<i8>(1,1,1,1,3)<0,0,0,0,1>
  [[[[[0, 1, 2]]]]]
###
> S  ->ExpandDims(P0,P1,P2,P3,P4)
S->ExpandDims(P0, P1, P2, P3, P4) : i8[*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(S), Global(P0), Global(P1), Global(P2), Global(P3), Global(P4)):i8[*,*,*,*,*]))
Func sig: (S:i8[], P0:i8, P1:i8, P2:i8, P3:i8, P4:i8) to i8[*,*,*,*,*]
Ten<i8>(1,1,1,1,1)<0,0,0,0,0>
  [[[[[1]]]]]
###
> T_3->ExpandDims(P0,P1,P2,P3,P4)
T_3->ExpandDims(P0, P1, P2, P3, P4) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P0), Global(P1), Global(P2), Global(P3), Global(P4)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P0:i8, P1:i8, P2:i8, P3:i8, P4:i8) to i8[*,*,*,*,*,*]
Ten<i8>(1,1,1,1,1,3)<0,0,0,0,0,1>
  [[[[[[0, 1, 2]]]]]]
###
> T_3->ExpandDims(P4,P0,P1,P2,P3)
T_3->ExpandDims(P4, P0, P1, P2, P3) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P4), Global(P0), Global(P1), Global(P2), Global(P3)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P4:i8, P0:i8, P1:i8, P2:i8, P3:i8) to i8[*,*,*,*,*,*]
Ten<i8>(1,1,1,1,1,3)<0,0,0,0,0,1>
  [[[[[[0, 1, 2]]]]]]
###
> T_3->ExpandDims(P3,P4,P0,P1,P2)
T_3->ExpandDims(P3, P4, P0, P1, P2) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P3), Global(P4), Global(P0), Global(P1), Global(P2)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P3:i8, P4:i8, P0:i8, P1:i8, P2:i8) to i8[*,*,*,*,*,*]
Ten<i8>(1,1,1,1,1,3)<0,0,0,0,0,1>
  [[[[[[0, 1, 2]]]]]]
###
> T_3->ExpandDims(P2,P3,P4,P0,P1)
T_3->ExpandDims(P2, P3, P4, P0, P1) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P2), Global(P3), Global(P4), Global(P0), Global(P1)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P2:i8, P3:i8, P4:i8, P0:i8, P1:i8) to i8[*,*,*,*,*,*]
Ten<i8>(1,1,1,1,1,3)<0,0,0,0,0,1>
  [[[[[[0, 1, 2]]]]]]
###
> T_3->ExpandDims(P1,P2,P3,P4,P0)
T_3->ExpandDims(P1, P2, P3, P4, P0) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P1), Global(P2), Global(P3), Global(P4), Global(P0)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P1:i8, P2:i8, P3:i8, P4:i8, P0:i8) to i8[*,*,*,*,*,*]
Ten<i8>(1,1,1,1,1,3)<0,0,0,0,0,1>
  [[[[[[0, 1, 2]]]]]]
###
> T_3->ExpandDims(P0,P0,P0,P0,P0)
T_3->ExpandDims(P0, P0, P0, P0, P0) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P0), Global(P0), Global(P0), Global(P0), Global(P0)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P0:i8) to i8[*,*,*,*,*,*]
Ten<i8>(1,1,1,1,1,3)<0,0,0,0,0,1>
  [[[[[[0, 1, 2]]]]]]
###
> T_3->ExpandDims(P1,P1,P1,P1,P1)
T_3->ExpandDims(P1, P1, P1, P1, P1) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P1), Global(P1), Global(P1), Global(P1), Global(P1)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P1:i8) to i8[*,*,*,*,*,*]
Ten<i8>(3,1,1,1,1,1)<1,0,0,0,0,0>
  [[[[[[0]]]]]




   [[[[[1]]]]]




   [[[[[2]]]]]]
###
> T_3->ExpandDims(P5,P5,P5,P5,P5)
T_3->ExpandDims(P5, P5, P5, P5, P5) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P5), Global(P5), Global(P5), Global(P5), Global(P5)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P5:i8) to i8[*,*,*,*,*,*]
Ten<i8>(3,1,1,1,1,1)<1,0,0,0,0,0>
  [[[[[[0]]]]]




   [[[[[1]]]]]




   [[[[[2]]]]]]
###
> T_3->ExpandDims(P5,P5,P5,P5,P0)
T_3->ExpandDims(P5, P5, P5, P5, P0) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P5), Global(P5), Global(P5), Global(P5), Global(P0)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P5:i8, P0:i8) to i8[*,*,*,*,*,*]
Ten<i8>(1,3,1,1,1,1)<0,1,0,0,0,0>
  [[[[[[0]]]]



    [[[[1]]]]



    [[[[2]]]]]]
###
> T_3->ExpandDims(P5,P5,P5,P0,P5)
T_3->ExpandDims(P5, P5, P5, P0, P5) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P5), Global(P5), Global(P5), Global(P0), Global(P5)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P5:i8, P0:i8) to i8[*,*,*,*,*,*]
Ten<i8>(1,3,1,1,1,1)<0,1,0,0,0,0>
  [[[[[[0]]]]



    [[[[1]]]]



    [[[[2]]]]]]
###
> T_3->ExpandDims(P5,P5,P0,P5,P5)
T_3->ExpandDims(P5, P5, P0, P5, P5) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P5), Global(P5), Global(P0), Global(P5), Global(P5)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P5:i8, P0:i8) to i8[*,*,*,*,*,*]
Ten<i8>(1,3,1,1,1,1)<0,1,0,0,0,0>
  [[[[[[0]]]]



    [[[[1]]]]



    [[[[2]]]]]]
###
> T_3->ExpandDims(P5,P0,P5,P5,P5)
T_3->ExpandDims(P5, P0, P5, P5, P5) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P5), Global(P0), Global(P5), Global(P5), Global(P5)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P5:i8, P0:i8) to i8[*,*,*,*,*,*]
Ten<i8>(1,3,1,1,1,1)<0,1,0,0,0,0>
  [[[[[[0]]]]



    [[[[1]]]]



    [[[[2]]]]]]
###
> T_3->ExpandDims(P0,P5,P5,P5,P5)
T_3->ExpandDims(P0, P5, P5, P5, P5) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P0), Global(P5), Global(P5), Global(P5), Global(P5)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P0:i8, P5:i8) to i8[*,*,*,*,*,*]
Ten<i8>(1,3,1,1,1,1)<0,1,0,0,0,0>
  [[[[[[0]]]]



    [[[[1]]]]



    [[[[2]]]]]]
###
> T_3->ExpandDims(P5,P1,P5,P5,P0)
T_3->ExpandDims(P5, P1, P5, P5, P0) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P5), Global(P1), Global(P5), Global(P5), Global(P0)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P5:i8, P1:i8, P0:i8) to i8[*,*,*,*,*,*]
Ten<i8>(1,1,3,1,1,1)<0,0,1,0,0,0>
  [[[[[[0]]]


     [[[1]]]


     [[[2]]]]]]
###
> T_3->ExpandDims(P5,P1,P2,P5,P0)
T_3->ExpandDims(P5, P1, P2, P5, P0) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P5), Global(P1), Global(P2), Global(P5), Global(P0)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P5:i8, P1:i8, P2:i8, P0:i8) to i8[*,*,*,*,*,*]
Ten<i8>(1,1,1,3,1,1)<0,0,0,1,0,0>
  [[[[[[0]]

      [[1]]

      [[2]]]]]]
###
> T_3->ExpandDims(P3,P1,P2,P5,P0)
T_3->ExpandDims(P3, P1, P2, P5, P0) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P3), Global(P1), Global(P2), Global(P5), Global(P0)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P3:i8, P1:i8, P2:i8, P5:i8, P0:i8) to i8[*,*,*,*,*,*]
Ten<i8>(1,1,1,1,3,1)<0,0,0,0,1,0>
  [[[[[[0]
       [1]
       [2]]]]]]
###
> T_3->ExpandDims(P3,P1,P2,P4,P0)
T_3->ExpandDims(P3, P1, P2, P4, P0) : i8[*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), Global(P3), Global(P1), Global(P2), Global(P4), Global(P0)):i8[*,*,*,*,*,*]))
Func sig: (T_3:i8[*], P3:i8, P1:i8, P2:i8, P4:i8, P0:i8) to i8[*,*,*,*,*,*]
Ten<i8>(1,1,1,1,1,3)<0,0,0,0,0,1>
  [[[[[[0, 1, 2]]]]]]
###
> T_3->ExpandDims( 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32)
T_3->ExpandDims(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32) : i8[*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 0:i8, 1:i8, 2:i8, 3:i8, 4:i8, 5:i8, 6:i8, 7:i8, 8:i8, 9:i8, 10:i8, 11:i8, 12:i8, 13:i8, 14:i8, 15:i8, 16:i8, 17:i8, 18:i8, 19:i8, 20:i8, 21:i8, 22:i8, 23:i8, 24:i8, 25:i8, 26:i8, 27:i8, 28:i8, 29:i8, 30:i8, 31:i8, 32:i8):i8[*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*]))
Func sig: (T_3:i8[*]) to i8[*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*]
Ten<i8>(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3)<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1>
  [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[0, 1, 2]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
###
> T_3->ExpandDims( 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,   32)
T_3->ExpandDims(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32) : i8[*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 0:i8, 1:i8, 2:i8, 3:i8, 4:i8, 5:i8, 6:i8, 7:i8, 8:i8, 9:i8, 10:i8, 11:i8, 12:i8, 13:i8, 14:i8, 15:i8, 16:i8, 17:i8, 18:i8, 19:i8, 20:i8, 21:i8, 22:i8, 23:i8, 24:i8, 25:i8, 26:i8, 27:i8, 28:i8, 29:i8, 30:i8, 32:i8):i8[*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*]))
Func sig: (T_3:i8[*]) to i8[*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*]
Ten<i8>(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1)<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0>
  [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[0]
                                  [1]
                                  [2]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
###
> T_3->ExpandDims(00,10,20,30,40,50,60,01,11,21,31,41,51,61,02,12,22,32,42,52,62,03,13,23,33,43,53,63,04,14,24,34,44,54,64,05,15,25,35,45,55,65,06,16,26,36,46,56,66,07,17,27,37,47,57,67,08,18,28,38,48,58,68,9,19,29,39,49,59,69)
T_3->ExpandDims(0, 10, 20, 30, 40, 50, 60, 1, 11, 21, 31, 41, 51, 61, 2, 12, 22, 32, 42, 52, 62, 3, 13, 23, 33, 43, 53, 63, 4, 14, 24, 34, 44, 54, 64, 5, 15, 25, 35, 45, 55, 65, 6, 16, 26, 36, 46, 56, 66, 7, 17, 27, 37, 47, 57, 67, 8, 18, 28, 38, 48, 58, 68, 9, 19, 29, 39, 49, 59, 69) : i8[*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 0:i8, 10:i8, 20:i8, 30:i8, 40:i8, 50:i8, 60:i8, 1:i8, 11:i8, 21:i8, 31:i8, 41:i8, 51:i8, 61:i8, 2:i8, 12:i8, 22:i8, 32:i8, 42:i8, 52:i8, 62:i8, 3:i8, 13:i8, 23:i8, 33:i8, 43:i8, 53:i8, 63:i8, 4:i8, 14:i8, 24:i8, 34:i8, 44:i8, 54:i8, 64:i8, 5:i8, 15:i8, 25:i8, 35:i8, 45:i8, 55:i8, 65:i8, 6:i8, 16:i8, 26:i8, 36:i8, 46:i8, 56:i8, 66:i8, 7:i8, 17:i8, 27:i8, 37:i8, 47:i8, 57:i8, 67:i8, 8:i8, 18:i8, 28:i8, 38:i8, 48:i8, 58:i8, 68:i8, 9:i8, 19:i8, 29:i8, 39:i8, 49:i8, 59:i8, 69:i8):i8[*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*]))
Func sig: (T_3:i8[*]) to i8[*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*]
Ten<i8>(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3)<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1>
  [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[0, 1, 2]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
###
> T_3->ExpandDims(00,10,20,30,40,50,60,01,11,21,31,41,51,61,02,12,22,32,42,52,62,03,13,23,33,43,53,63,04,14,24,34,44,54,64,05,15,25,35,45,55,65,06,16,26,36,46,56,66,07,17,27,37,47,57,67,08,18,28,38,48,58,   9,19,29,39,49,59,69)
T_3->ExpandDims(0, 10, 20, 30, 40, 50, 60, 1, 11, 21, 31, 41, 51, 61, 2, 12, 22, 32, 42, 52, 62, 3, 13, 23, 33, 43, 53, 63, 4, 14, 24, 34, 44, 54, 64, 5, 15, 25, 35, 45, 55, 65, 6, 16, 26, 36, 46, 56, 66, 7, 17, 27, 37, 47, 57, 67, 8, 18, 28, 38, 48, 58, 9, 19, 29, 39, 49, 59, 69) : i8[*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*]
BndKind:Call, Type:i8[*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*], Bnd:(Call(∂.Tensor.ExpandDims(Global(T_3), 0:i8, 10:i8, 20:i8, 30:i8, 40:i8, 50:i8, 60:i8, 1:i8, 11:i8, 21:i8, 31:i8, 41:i8, 51:i8, 61:i8, 2:i8, 12:i8, 22:i8, 32:i8, 42:i8, 52:i8, 62:i8, 3:i8, 13:i8, 23:i8, 33:i8, 43:i8, 53:i8, 63:i8, 4:i8, 14:i8, 24:i8, 34:i8, 44:i8, 54:i8, 64:i8, 5:i8, 15:i8, 25:i8, 35:i8, 45:i8, 55:i8, 65:i8, 6:i8, 16:i8, 26:i8, 36:i8, 46:i8, 56:i8, 66:i8, 7:i8, 17:i8, 27:i8, 37:i8, 47:i8, 57:i8, 67:i8, 8:i8, 18:i8, 28:i8, 38:i8, 48:i8, 58:i8, 9:i8, 19:i8, 29:i8, 39:i8, 49:i8, 59:i8, 69:i8):i8[*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*]))
Func sig: (T_3:i8[*]) to i8[*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*]
Ten<i8>(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1)<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0>
  [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[0]
                                                                       [1]
                                                                       [2]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
###
