**** New definitions: D, type: i8
**** New definitions: D2, type: i8
**** New definitions: D0, type: i8
**** New definitions: S, type: i8*
**** New definitions: E, type: i8*
**** New definitions: T, type: {A:i8, B:i8}*

> Tensor.Build(S, D2, 2 * it, 17)
Tensor.Build(S, D2, 2 * it, 17) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.Build([map:1] Global(S), Global(D2), Mul(Scope(1), 2:i8), 17:i8):i8[*]))
Func sig: (<ctx>:x, S:i8*, D2:i8) to i8[*]
Ten<i8>(10)<1> [17, 0, 17, 0, 17, 0, 17, 0, 17, 0]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*1: S, D2, Mul(*1, 2), 17)
###
> Tensor.Build(S, D2, 2 * #0, 17)
Tensor.Build(S, D2, 2 * #, 17) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.Build([map:2] Global(S), Global(D2), Mul(Scope(1), 2:i8), 17:i8):i8[*]))
Func sig: (<ctx>:x, S:i8*, D2:i8) to i8[*]
Ten<i8>(10)<1> [17, 0, 17, 0, 17, 0, 17, 0, 17, 0]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*2: S, D2, Mul(#1, 2), 17)
###
> Tensor.Build(S, D2, 2 * it, 17, -1)
Tensor.Build(S, D2, 2 * it, 17, -1) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.Build([map:1] Global(S), Global(D2), Mul(Scope(1), 2:i8), 17:i8, -1:i8):i8[*]))
Func sig: (<ctx>:x, S:i8*, D2:i8) to i8[*]
Ten<i8>(10)<1> [17, -1, 17, -1, 17, -1, 17, -1, 17, -1]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*1: S, D2, Mul(*1, 2), 17, -1)
###
> Tensor.Build(S, D2, 2 * #0, 17, -1)
Tensor.Build(S, D2, 2 * #, 17, -1) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.Build([map:2] Global(S), Global(D2), Mul(Scope(1), 2:i8), 17:i8, -1:i8):i8[*]))
Func sig: (<ctx>:x, S:i8*, D2:i8) to i8[*]
Ten<i8>(10)<1> [17, -1, 17, -1, 17, -1, 17, -1, 17, -1]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*2: S, D2, Mul(#1, 2), 17, -1)
###
> Tensor.Build(S, D2, 2 * it + 1, 17)
Tensor.Build(S, D2, 2 * it + 1, 17) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.Build([map:1] Global(S), Global(D2), Add(Mul(Scope(1), 2:i8), 1:i8), 17:i8):i8[*]))
Func sig: (<ctx>:x, S:i8*, D2:i8) to i8[*]
Ten<i8>(10)<1> [0, 17, 0, 17, 0, 17, 0, 17, 0, 17]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*1: S, D2, Add(Mul(*1, 2), 1), 17)
###
> Tensor.Build(S, D2, 2 * it + 2, 17)
Tensor.Build(S, D2, 2 * it + 2, 17) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.Build([map:1] Global(S), Global(D2), Add(Mul(Scope(1), 2:i8), 2:i8), 17:i8):i8[*]))
Func sig: (<ctx>:x, S:i8*, D2:i8) to i8[*]
Ten<i8>(10)<1> [0, 0, 17, 0, 17, 0, 17, 0, 17, 0]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*1: S, D2, Add(Mul(*1, 2), 2), 17)
###
> Tensor.Build(E, D2, 2 * it, 17)
Tensor.Build(E, D2, 2 * it, 17) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.Build([map:1] Global(E), Global(D2), Mul(Scope(1), 2:i8), 17:i8):i8[*]))
Func sig: (<ctx>:x, E:i8*, D2:i8) to i8[*]
Ten<i8>(10)<0> [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
*** Ctx ping count: 0
###
> Tensor.Build(E, D2, 2 * #0, 17)
Tensor.Build(E, D2, 2 * #, 17) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.Build([map:2] Global(E), Global(D2), Mul(Scope(1), 2:i8), 17:i8):i8[*]))
Func sig: (<ctx>:x, E:i8*, D2:i8) to i8[*]
Ten<i8>(10)<0> [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
*** Ctx ping count: 0
###
> Tensor.Build(E, D2, 2 * it, 17, -1)
Tensor.Build(E, D2, 2 * it, 17, -1) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.Build([map:1] Global(E), Global(D2), Mul(Scope(1), 2:i8), 17:i8, -1:i8):i8[*]))
Func sig: (<ctx>:x, E:i8*, D2:i8) to i8[*]
Ten<i8>(10)<0> [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
*** Ctx ping count: 0
###
> Tensor.Build(E, D2, 2 * #0, 17, -1)
Tensor.Build(E, D2, 2 * #, 17, -1) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.Build([map:2] Global(E), Global(D2), Mul(Scope(1), 2:i8), 17:i8, -1:i8):i8[*]))
Func sig: (<ctx>:x, E:i8*, D2:i8) to i8[*]
Ten<i8>(10)<0> [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
*** Ctx ping count: 0
###
> Tensor.Build(S, D0, 2 * it, 17)
Tensor.Build(S, D0, 2 * it, 17) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.Build([map:1] Global(S), Global(D0), Mul(Scope(1), 2:i8), 17:i8):i8[*]))
Func sig: (<ctx>:x, S:i8*, D0:i8) to i8[*]
Ten<i8>(0)<0> []
*** Ctx ping count: 0
###
> Tensor.Build(S, D0, 2 * #0, 17)
Tensor.Build(S, D0, 2 * #, 17) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.Build([map:2] Global(S), Global(D0), Mul(Scope(1), 2:i8), 17:i8):i8[*]))
Func sig: (<ctx>:x, S:i8*, D0:i8) to i8[*]
Ten<i8>(0)<0> []
*** Ctx ping count: 0
###
> Tensor.Build(S, D0, 2 * it, 17, -1)
Tensor.Build(S, D0, 2 * it, 17, -1) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.Build([map:1] Global(S), Global(D0), Mul(Scope(1), 2:i8), 17:i8, -1:i8):i8[*]))
Func sig: (<ctx>:x, S:i8*, D0:i8) to i8[*]
Ten<i8>(0)<0> []
*** Ctx ping count: 0
###
> Tensor.Build(S, D0, 2 * #0, 17, -1)
Tensor.Build(S, D0, 2 * #, 17, -1) : i8[*]
BndKind:Call, Type:i8[*], Bnd:(Call(∂.Tensor.Build([map:2] Global(S), Global(D0), Mul(Scope(1), 2:i8), 17:i8, -1:i8):i8[*]))
Func sig: (<ctx>:x, S:i8*, D0:i8) to i8[*]
Ten<i8>(0)<0> []
*** Ctx ping count: 0
###
> Tensor.Build(S, D, D, it, it, 1)
Tensor.Build(S, D, D, it, it, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(S), Global(D), Global(D), Scope(1), Scope(1), 1:i8):i8[*,*]))
Func sig: (<ctx>:x, S:i8*, D:i8) to i8[*,*]
Ten<i8>(5,5)<5,1>
  [[1, 0, 0, 0, 0]
   [0, 1, 0, 0, 0]
   [0, 0, 1, 0, 0]
   [0, 0, 0, 1, 0]
   [0, 0, 0, 0, 1]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*1: S, D, D, *1, *1, 1)
###
> Tensor.Build(S, D, D, #0, it, 1)
Tensor.Build(S, D, D, #, it, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:2] Global(S), Global(D), Global(D), Scope(1), Scope(2), 1:i8):i8[*,*]))
Func sig: (<ctx>:x, S:i8*, D:i8) to i8[*,*]
Ten<i8>(5,5)<5,1>
  [[1, 0, 0, 0, 0]
   [0, 1, 0, 0, 0]
   [0, 0, 1, 0, 0]
   [0, 0, 0, 1, 0]
   [0, 0, 0, 0, 1]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*2: S, D, D, #1, *2, 1)
###
> Tensor.Build(S, D, D, it, #0, 1)
Tensor.Build(S, D, D, it, #, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:2] Global(S), Global(D), Global(D), Scope(2), Scope(1), 1:i8):i8[*,*]))
Func sig: (<ctx>:x, S:i8*, D:i8) to i8[*,*]
Ten<i8>(5,5)<5,1>
  [[1, 0, 0, 0, 0]
   [0, 1, 0, 0, 0]
   [0, 0, 1, 0, 0]
   [0, 0, 0, 1, 0]
   [0, 0, 0, 0, 1]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*2: S, D, D, *2, #1, 1)
###
> Tensor.Build(S, D, D, #0, #0, 1)
Tensor.Build(S, D, D, #, #, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:2] Global(S), Global(D), Global(D), Scope(1), Scope(1), 1:i8):i8[*,*]))
Func sig: (<ctx>:x, S:i8*, D:i8) to i8[*,*]
Ten<i8>(5,5)<5,1>
  [[1, 0, 0, 0, 0]
   [0, 1, 0, 0, 0]
   [0, 0, 1, 0, 0]
   [0, 0, 0, 1, 0]
   [0, 0, 0, 0, 1]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*2: S, D, D, #1, #1, 1)
###
> Tensor.Build(S, D, D, it, it, 1, 8)
Tensor.Build(S, D, D, it, it, 1, 8) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(S), Global(D), Global(D), Scope(1), Scope(1), 1:i8, 8:i8):i8[*,*]))
Func sig: (<ctx>:x, S:i8*, D:i8) to i8[*,*]
Ten<i8>(5,5)<5,1>
  [[1, 8, 8, 8, 8]
   [8, 1, 8, 8, 8]
   [8, 8, 1, 8, 8]
   [8, 8, 8, 1, 8]
   [8, 8, 8, 8, 1]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*1: S, D, D, *1, *1, 1, 8)
###
> Tensor.Build(S, D, D, it, #0, 1, 8)
Tensor.Build(S, D, D, it, #, 1, 8) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:2] Global(S), Global(D), Global(D), Scope(2), Scope(1), 1:i8, 8:i8):i8[*,*]))
Func sig: (<ctx>:x, S:i8*, D:i8) to i8[*,*]
Ten<i8>(5,5)<5,1>
  [[1, 8, 8, 8, 8]
   [8, 1, 8, 8, 8]
   [8, 8, 1, 8, 8]
   [8, 8, 8, 1, 8]
   [8, 8, 8, 8, 1]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*2: S, D, D, *2, #1, 1, 8)
###
> Tensor.Build(S, D, D, it, it, 1, null)
Tensor.Build(S, D, D, it, it, 1, null) : i8?[*,*]
BndKind:Call, Type:i8?[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(S), Global(D), Global(D), Scope(1), Scope(1), Opt<i8?>(1:i8), null:i8?):i8?[*,*]))
Func sig: (<ctx>:x, S:i8*, D:i8) to i8?[*,*]
Ten<Opt<i8>>(5,5)<5,1>
  [[1, <null>, <null>, <null>, <null>]
   [<null>, 1, <null>, <null>, <null>]
   [<null>, <null>, 1, <null>, <null>]
   [<null>, <null>, <null>, 1, <null>]
   [<null>, <null>, <null>, <null>, 1]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*1: S, D, D, *1, *1, Opt<i8?>(1), null)
###
> Tensor.Build(S, D, D, it, it + 1, 1)
Tensor.Build(S, D, D, it, it + 1, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(S), Global(D), Global(D), Scope(1), Add(Scope(1), 1:i8), 1:i8):i8[*,*]))
Func sig: (<ctx>:x, S:i8*, D:i8) to i8[*,*]
Ten<i8>(5,5)<5,1>
  [[0, 1, 0, 0, 0]
   [0, 0, 1, 0, 0]
   [0, 0, 0, 1, 0]
   [0, 0, 0, 0, 1]
   [0, 0, 0, 0, 0]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*1: S, D, D, *1, Add(*1, 1), 1)
###
> Tensor.Build(S, D, D, it, #0 + 1, 1)
Tensor.Build(S, D, D, it, # + 1, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:2] Global(S), Global(D), Global(D), Scope(2), Add(Scope(1), 1:i8), 1:i8):i8[*,*]))
Func sig: (<ctx>:x, S:i8*, D:i8) to i8[*,*]
Ten<i8>(5,5)<5,1>
  [[0, 1, 0, 0, 0]
   [0, 0, 1, 0, 0]
   [0, 0, 0, 1, 0]
   [0, 0, 0, 0, 1]
   [0, 0, 0, 0, 0]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*2: S, D, D, *2, Add(#1, 1), 1)
###
> Tensor.Build(S, D, D, it, it + 1, 1, 8)
Tensor.Build(S, D, D, it, it + 1, 1, 8) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(S), Global(D), Global(D), Scope(1), Add(Scope(1), 1:i8), 1:i8, 8:i8):i8[*,*]))
Func sig: (<ctx>:x, S:i8*, D:i8) to i8[*,*]
Ten<i8>(5,5)<5,1>
  [[8, 1, 8, 8, 8]
   [8, 8, 1, 8, 8]
   [8, 8, 8, 1, 8]
   [8, 8, 8, 8, 1]
   [8, 8, 8, 8, 8]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*1: S, D, D, *1, Add(*1, 1), 1, 8)
###
> Tensor.Build(S, D, D, it, #0 + 1, 1, 8)
Tensor.Build(S, D, D, it, # + 1, 1, 8) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:2] Global(S), Global(D), Global(D), Scope(2), Add(Scope(1), 1:i8), 1:i8, 8:i8):i8[*,*]))
Func sig: (<ctx>:x, S:i8*, D:i8) to i8[*,*]
Ten<i8>(5,5)<5,1>
  [[8, 1, 8, 8, 8]
   [8, 8, 1, 8, 8]
   [8, 8, 8, 1, 8]
   [8, 8, 8, 8, 1]
   [8, 8, 8, 8, 8]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*2: S, D, D, *2, Add(#1, 1), 1, 8)
###
> Tensor.Build(T, D, D, A, B, it)
Tensor.Build(T, D, D, A, B, it) : {A:i8, B:i8}[*,*]
BndKind:Call, Type:{A:i8, B:i8}[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(T), Global(D), Global(D), GetField(Scope(1), A), GetField(Scope(1), B), Scope(1)):{A:i8, B:i8}[*,*]))
Func sig: (<ctx>:x, T:{A:i8, B:i8}*, D:i8) to {A:i8, B:i8}[*,*]
Ten<{i8,i8}>(5,5)<5,1>
  [[{ A: 0, B: 0 }, { A: 0, B: 1 }, { A: 0, B: 0 }, { A: 0, B: 0 }, { A: 0, B: 0 }]
   [{ A: 0, B: 0 }, { A: 0, B: 0 }, { A: 0, B: 0 }, { A: 1, B: 3 }, { A: 0, B: 0 }]
   [{ A: 2, B: 0 }, { A: 0, B: 0 }, { A: 0, B: 0 }, { A: 0, B: 0 }, { A: 0, B: 0 }]
   [{ A: 0, B: 0 }, { A: 0, B: 0 }, { A: 3, B: 2 }, { A: 0, B: 0 }, { A: 0, B: 0 }]
   [{ A: 0, B: 0 }, { A: 0, B: 0 }, { A: 0, B: 0 }, { A: 0, B: 0 }, { A: 4, B: 4 }]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*1: T, D, D, *1.A, *1.B, *1)
###
> Tensor.Build(T, D, D, A, B, it->Opt())
Tensor.Build(T, D, D, A, B, it->Opt()) : {A:i8, B:i8}?[*,*]
BndKind:Call, Type:{A:i8, B:i8}?[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(T), Global(D), Global(D), GetField(Scope(1), A), GetField(Scope(1), B), Ref<{A:i8, B:i8}?>(Scope(1))):{A:i8, B:i8}?[*,*]))
Func sig: (<ctx>:x, T:{A:i8, B:i8}*, D:i8) to {A:i8, B:i8}?[*,*]
Ten<{i8,i8}>(5,5)<5,1>
  [[<null>, { A: 0, B: 1 }, <null>, <null>, <null>]
   [<null>, <null>, <null>, { A: 1, B: 3 }, <null>]
   [{ A: 2, B: 0 }, <null>, <null>, <null>, <null>]
   [<null>, <null>, { A: 3, B: 2 }, <null>, <null>]
   [<null>, <null>, <null>, <null>, { A: 4, B: 4 }]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*1: T, D, D, *1.A, *1.B, Ref<{A:i8, B:i8}?>(*1))
###
> Tensor.Build(T, D, D, A, B, it, null)
Tensor.Build(T, D, D, A, B, it, null) : {A:i8, B:i8}?[*,*]
BndKind:Call, Type:{A:i8, B:i8}?[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(T), Global(D), Global(D), GetField(Scope(1), A), GetField(Scope(1), B), Ref<{A:i8, B:i8}?>(Scope(1)), null:{A:i8, B:i8}?):{A:i8, B:i8}?[*,*]))
Func sig: (<ctx>:x, T:{A:i8, B:i8}*, D:i8) to {A:i8, B:i8}?[*,*]
Ten<{i8,i8}>(5,5)<5,1>
  [[<null>, { A: 0, B: 1 }, <null>, <null>, <null>]
   [<null>, <null>, <null>, { A: 1, B: 3 }, <null>]
   [{ A: 2, B: 0 }, <null>, <null>, <null>, <null>]
   [<null>, <null>, { A: 3, B: 2 }, <null>, <null>]
   [<null>, <null>, <null>, <null>, { A: 4, B: 4 }]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*1: T, D, D, *1.A, *1.B, Ref<{A:i8, B:i8}?>(*1), null)
###
> Tensor.Build(T, D, D, A, B, it, { A: -1, B:null })
Tensor.Build(T, D, D, A, B, it, { A : -1, B : null }) : {A:i8, B:i8?}[*,*]
BndKind:Call, Type:{A:i8, B:i8?}[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(T), Global(D), Global(D), GetField(Scope(1), A), GetField(Scope(1), B), Ref<{A:i8, B:i8?}>(Scope(1)), {A:-1:i8, B:null:i8?}):{A:i8, B:i8?}[*,*]))
Func sig: (<ctx>:x, T:{A:i8, B:i8}*, D:i8) to {A:i8, B:i8?}[*,*]
Ten<{i8,i8}>(5,5)<5,1>
  [[{ A: -1, B: <null> }, { A: 0, B: 1 }, { A: -1, B: <null> }, { A: -1, B: <null> }, { A: -1, B: <null> }]
   [{ A: -1, B: <null> }, { A: -1, B: <null> }, { A: -1, B: <null> }, { A: 1, B: 3 }, { A: -1, B: <null> }]
   [{ A: 2, B: 0 }, { A: -1, B: <null> }, { A: -1, B: <null> }, { A: -1, B: <null> }, { A: -1, B: <null> }]
   [{ A: -1, B: <null> }, { A: -1, B: <null> }, { A: 3, B: 2 }, { A: -1, B: <null> }, { A: -1, B: <null> }]
   [{ A: -1, B: <null> }, { A: -1, B: <null> }, { A: -1, B: <null> }, { A: -1, B: <null> }, { A: 4, B: 4 }]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*1: T, D, D, *1.A, *1.B, Ref<{A:i8, B:i8?}>(*1), {A:-1, B:null})
###
> Tensor.Build(T, D, D, A, B, it, { A: -1 })
Tensor.Build(T, D, D, A, B, it, { A : -1 }) : {A:i8, B:i8?}[*,*]
BndKind:Call, Type:{A:i8, B:i8?}[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(T), Global(D), Global(D), GetField(Scope(1), A), GetField(Scope(1), B), Ref<{A:i8, B:i8?}>(Scope(1)), {A:-1:i8[, B:null:i8?]}):{A:i8, B:i8?}[*,*]))
Func sig: (<ctx>:x, T:{A:i8, B:i8}*, D:i8) to {A:i8, B:i8?}[*,*]
Ten<{i8,i8}>(5,5)<5,1>
  [[{ A: -1, B: <null> }, { A: 0, B: 1 }, { A: -1, B: <null> }, { A: -1, B: <null> }, { A: -1, B: <null> }]
   [{ A: -1, B: <null> }, { A: -1, B: <null> }, { A: -1, B: <null> }, { A: 1, B: 3 }, { A: -1, B: <null> }]
   [{ A: 2, B: 0 }, { A: -1, B: <null> }, { A: -1, B: <null> }, { A: -1, B: <null> }, { A: -1, B: <null> }]
   [{ A: -1, B: <null> }, { A: -1, B: <null> }, { A: 3, B: 2 }, { A: -1, B: <null> }, { A: -1, B: <null> }]
   [{ A: -1, B: <null> }, { A: -1, B: <null> }, { A: -1, B: <null> }, { A: -1, B: <null> }, { A: 4, B: 4 }]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*1: T, D, D, *1.A, *1.B, Ref<{A:i8, B:i8?}>(*1), {A:-1[, B:null:i8?]})
###
> Tensor.Build(T, D, D, A, B, it, { A: -1, B:null, C:"filled" })
Tensor.Build(T, D, D, A, B, it, { A : -1, B : null, C : "filled" }) : {A:i8, B:i8?, C:s}[*,*]
BndKind:Call, Type:{A:i8, B:i8?, C:s}[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(T), Global(D), Global(D), GetField(Scope(1), A), GetField(Scope(1), B), {A:GetField(Scope(1), A), B:Opt<i8?>(GetField(Scope(1), B)), C:str(<null>)}, {A:-1:i8, B:null:i8?, C:str(filled)}):{A:i8, B:i8?, C:s}[*,*]))
Func sig: (<ctx>:x, T:{A:i8, B:i8}*, D:i8) to {A:i8, B:i8?, C:s}[*,*]
Ten<{i8,i8,str}>(5,5)<5,1>
  [[{ A: -1, B: <null>, C: filled }, { A: 0, B: 1, C: <null> }, { A: -1, B: <null>, C: filled }, { A: -1, B: <null>, C: filled }, { A: -1, B: <null>, C: filled }]
   [{ A: -1, B: <null>, C: filled }, { A: -1, B: <null>, C: filled }, { A: -1, B: <null>, C: filled }, { A: 1, B: 3, C: <null> }, { A: -1, B: <null>, C: filled }]
   [{ A: 2, B: 0, C: <null> }, { A: -1, B: <null>, C: filled }, { A: -1, B: <null>, C: filled }, { A: -1, B: <null>, C: filled }, { A: -1, B: <null>, C: filled }]
   [{ A: -1, B: <null>, C: filled }, { A: -1, B: <null>, C: filled }, { A: 3, B: 2, C: <null> }, { A: -1, B: <null>, C: filled }, { A: -1, B: <null>, C: filled }]
   [{ A: -1, B: <null>, C: filled }, { A: -1, B: <null>, C: filled }, { A: -1, B: <null>, C: filled }, { A: -1, B: <null>, C: filled }, { A: 4, B: 4, C: <null> }]]
*** Ctx ping count: 6
    [0](6): Tensor.Build(*1: T, D, D, *1.A, *1.B, {A:*1.A, B:Opt<i8?>(*1.B), C:str(<null>)}, {A:-1, B:null, C:"filled"})
###
> Tensor.Build(E, D, D, it, it, 1)
Tensor.Build(E, D, D, it, it, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(E), Global(D), Global(D), Scope(1), Scope(1), 1:i8):i8[*,*]))
Func sig: (<ctx>:x, E:i8*, D:i8) to i8[*,*]
Ten<i8>(5,5)<0,0>
  [[0, 0, 0, 0, 0]
   [0, 0, 0, 0, 0]
   [0, 0, 0, 0, 0]
   [0, 0, 0, 0, 0]
   [0, 0, 0, 0, 0]]
*** Ctx ping count: 0
###
> Tensor.Build(E, D, D, #0, it, 1)
Tensor.Build(E, D, D, #, it, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:2] Global(E), Global(D), Global(D), Scope(1), Scope(2), 1:i8):i8[*,*]))
Func sig: (<ctx>:x, E:i8*, D:i8) to i8[*,*]
Ten<i8>(5,5)<0,0>
  [[0, 0, 0, 0, 0]
   [0, 0, 0, 0, 0]
   [0, 0, 0, 0, 0]
   [0, 0, 0, 0, 0]
   [0, 0, 0, 0, 0]]
*** Ctx ping count: 0
###
> Tensor.Build(E, D, D, it, #0, 1)
Tensor.Build(E, D, D, it, #, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:2] Global(E), Global(D), Global(D), Scope(2), Scope(1), 1:i8):i8[*,*]))
Func sig: (<ctx>:x, E:i8*, D:i8) to i8[*,*]
Ten<i8>(5,5)<0,0>
  [[0, 0, 0, 0, 0]
   [0, 0, 0, 0, 0]
   [0, 0, 0, 0, 0]
   [0, 0, 0, 0, 0]
   [0, 0, 0, 0, 0]]
*** Ctx ping count: 0
###
> Tensor.Build(E, D, D, #0, #0, 1)
Tensor.Build(E, D, D, #, #, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:2] Global(E), Global(D), Global(D), Scope(1), Scope(1), 1:i8):i8[*,*]))
Func sig: (<ctx>:x, E:i8*, D:i8) to i8[*,*]
Ten<i8>(5,5)<0,0>
  [[0, 0, 0, 0, 0]
   [0, 0, 0, 0, 0]
   [0, 0, 0, 0, 0]
   [0, 0, 0, 0, 0]
   [0, 0, 0, 0, 0]]
*** Ctx ping count: 0
###
> Tensor.Build(E, D, D, it, it, 1, 8)
Tensor.Build(E, D, D, it, it, 1, 8) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(E), Global(D), Global(D), Scope(1), Scope(1), 1:i8, 8:i8):i8[*,*]))
Func sig: (<ctx>:x, E:i8*, D:i8) to i8[*,*]
Ten<i8>(5,5)<0,0>
  [[8, 8, 8, 8, 8]
   [8, 8, 8, 8, 8]
   [8, 8, 8, 8, 8]
   [8, 8, 8, 8, 8]
   [8, 8, 8, 8, 8]]
*** Ctx ping count: 0
###
> Tensor.Build(E, D, D, it, #0, 1, 8)
Tensor.Build(E, D, D, it, #, 1, 8) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:2] Global(E), Global(D), Global(D), Scope(2), Scope(1), 1:i8, 8:i8):i8[*,*]))
Func sig: (<ctx>:x, E:i8*, D:i8) to i8[*,*]
Ten<i8>(5,5)<0,0>
  [[8, 8, 8, 8, 8]
   [8, 8, 8, 8, 8]
   [8, 8, 8, 8, 8]
   [8, 8, 8, 8, 8]
   [8, 8, 8, 8, 8]]
*** Ctx ping count: 0
###
> Tensor.Build(E, D, D, it, it, 1, null)
Tensor.Build(E, D, D, it, it, 1, null) : i8?[*,*]
BndKind:Call, Type:i8?[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(E), Global(D), Global(D), Scope(1), Scope(1), Opt<i8?>(1:i8), null:i8?):i8?[*,*]))
Func sig: (<ctx>:x, E:i8*, D:i8) to i8?[*,*]
Ten<Opt<i8>>(5,5)<0,0>
  [[<null>, <null>, <null>, <null>, <null>]
   [<null>, <null>, <null>, <null>, <null>]
   [<null>, <null>, <null>, <null>, <null>]
   [<null>, <null>, <null>, <null>, <null>]
   [<null>, <null>, <null>, <null>, <null>]]
*** Ctx ping count: 0
###
> Tensor.Build(S, D0, D, it, it, 1)
Tensor.Build(S, D0, D, it, it, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(S), Global(D0), Global(D), Scope(1), Scope(1), 1:i8):i8[*,*]))
Func sig: (<ctx>:x, S:i8*, D0:i8, D:i8) to i8[*,*]
Ten<i8>(0,5)<0,0> []
*** Ctx ping count: 0
###
> Tensor.Build(S, D, D0, #0, it, 1)
Tensor.Build(S, D, D0, #, it, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:2] Global(S), Global(D), Global(D0), Scope(1), Scope(2), 1:i8):i8[*,*]))
Func sig: (<ctx>:x, S:i8*, D:i8, D0:i8) to i8[*,*]
Ten<i8>(5,0)<0,0> []
*** Ctx ping count: 0
###
> Tensor.Build(S, D0, D, it, it, 1, 8)
Tensor.Build(S, D0, D, it, it, 1, 8) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(S), Global(D0), Global(D), Scope(1), Scope(1), 1:i8, 8:i8):i8[*,*]))
Func sig: (<ctx>:x, S:i8*, D0:i8, D:i8) to i8[*,*]
Ten<i8>(0,5)<0,0> []
*** Ctx ping count: 0
###
> Tensor.Build(S, D, D0, #0, it, 1, 8)
Tensor.Build(S, D, D0, #, it, 1, 8) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:2] Global(S), Global(D), Global(D0), Scope(1), Scope(2), 1:i8, 8:i8):i8[*,*]))
Func sig: (<ctx>:x, S:i8*, D:i8, D0:i8) to i8[*,*]
Ten<i8>(5,0)<0,0> []
*** Ctx ping count: 0
###
> Tensor.Build(S, 2 - 3, D, it, it, 1)
Tensor.Build(S, 2 - 3, D, it, it, 1) : i8[*,*]
BndKind:Call, Type:i8[*,*], Bnd:(Call(∂.Tensor.Build([map:1] Global(S), 0:i8, Global(D), Scope(1), Scope(1), 1:i8):i8[*,*]))
*** Warning: (18,19) Node: 2 - 3, Message: Tensor dimension should be non-negative
Func sig: (<ctx>:x, S:i8*, D:i8) to i8[*,*]
Ten<i8>(0,5)<0,0> []
*** Ctx ping count: 0
###
