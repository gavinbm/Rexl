> Range(1, 11)
Range(1, 11) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Range(1:i8, 11:i8):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 1
 1) 2
 2) 3
 3) 4
 4) 5
 5) 6
 6) 7
 7) 8
 8) 9
 9) 10
###
> ForEach(s1:Range(1, 11), (s1,))
ForEach(s1 : Range(1, 11), (s1,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), (Scope(1),):(i8)):(i8)*))
Func sig: () to (i8)*
Sequence: Seq<(i8)>
 0) (1,)
 1) (2,)
 2) (3,)
 3) (4,)
 4) (5,)
 5) (6,)
 6) (7,)
 7) (8,)
 8) (9,)
 9) (10,)
###
> ForEach(s1:Range(1, 11), (#s1, s1))
ForEach(s1 : Range(1, 11), (#s1, s1)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), (Scope(1), Scope(2)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 1)
 1) (1, 2)
 2) (2, 3)
 3) (3, 4)
 4) (4, 5)
 5) (5, 6)
 6) (6, 7)
 7) (7, 8)
 8) (8, 9)
 9) (9, 10)
###
> Range(1, 11) * Range(2, 12)
Range(1, 11) * Range(2, 12) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), Mul(Scope(1), Scope(2))):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 2
 1) 6
 2) 12
 3) 20
 4) 30
 5) 42
 6) 56
 7) 72
 8) 90
 9) 110
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), (s1 * s2,))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), (s1 * s2,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), (Mul(Scope(1), Scope(2)),):(i8)):(i8)*))
Func sig: () to (i8)*
Sequence: Seq<(i8)>
 0) (2,)
 1) (6,)
 2) (12,)
 3) (20,)
 4) (30,)
 5) (42,)
 6) (56,)
 7) (72,)
 8) (90,)
 9) (110,)
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), (#s1, s1 * s2))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), (#s1, s1 * s2)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), (Scope(1), Mul(Scope(2), Scope(3))):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 2)
 1) (1, 6)
 2) (2, 12)
 3) (3, 20)
 4) (4, 30)
 5) (5, 42)
 6) (6, 56)
 7) (7, 72)
 8) (8, 90)
 9) (9, 110)
###
> Range(1, 11) * Range(2, 12) * Range(3, 13)
Range(1, 11) * Range(2, 12) * Range(3, 13) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), Mul(Scope(1), Scope(2), Scope(3))):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 6
 1) 24
 2) 60
 3) 120
 4) 210
 5) 336
 6) 504
 7) 720
 8) 990
 9) 1320
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), (s1 * s2 * s3,))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), (s1 * s2 * s3,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), (Mul(Scope(1), Scope(2), Scope(3)),):(i8)):(i8)*))
Func sig: () to (i8)*
Sequence: Seq<(i8)>
 0) (6,)
 1) (24,)
 2) (60,)
 3) (120,)
 4) (210,)
 5) (336,)
 6) (504,)
 7) (720,)
 8) (990,)
 9) (1320,)
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), (#s1, s1 * s2 * s3))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), (#s1, s1 * s2 * s3)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), (Scope(1), Mul(Scope(2), Scope(3), Scope(4))):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 6)
 1) (1, 24)
 2) (2, 60)
 3) (3, 120)
 4) (4, 210)
 5) (5, 336)
 6) (6, 504)
 7) (7, 720)
 8) (8, 990)
 9) (9, 1320)
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4))):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 24
 1) 120
 2) 360
 3) 840
 4) 1680
 5) 3024
 6) 5040
 7) 7920
 8) 11880
 9) 17160
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), (s1 * s2 * s3 * s4,))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), (s1 * s2 * s3 * s4,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), (Mul(Scope(1), Scope(2), Scope(3), Scope(4)),):(i8)):(i8)*))
Func sig: () to (i8)*
Sequence: Seq<(i8)>
 0) (24,)
 1) (120,)
 2) (360,)
 3) (840,)
 4) (1680,)
 5) (3024,)
 6) (5040,)
 7) (7920,)
 8) (11880,)
 9) (17160,)
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), (#s2, s1 * s2 * s3 * s4))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), (#s2, s1 * s2 * s3 * s4)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), (Scope(1), Mul(Scope(2), Scope(3), Scope(4), Scope(5))):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 24)
 1) (1, 120)
 2) (2, 360)
 3) (3, 840)
 4) (4, 1680)
 5) (5, 3024)
 6) (6, 5040)
 7) (7, 7920)
 8) (8, 11880)
 9) (9, 17160)
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5))):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 120
 1) 720
 2) 2520
 3) 6720
 4) 15120
 5) 30240
 6) 55440
 7) 95040
 8) 154440
 9) 240240
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), (s1 * s2 * s3 * s4 * s5,))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), (s1 * s2 * s3 * s4 * s5,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), (Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)),):(i8)):(i8)*))
Func sig: () to (i8)*
Sequence: Seq<(i8)>
 0) (120,)
 1) (720,)
 2) (2520,)
 3) (6720,)
 4) (15120,)
 5) (30240,)
 6) (55440,)
 7) (95040,)
 8) (154440,)
 9) (240240,)
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), (#s2, s1 * s2 * s3 * s4 * s5))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), (#s2, s1 * s2 * s3 * s4 * s5)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), (Scope(1), Mul(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6))):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 120)
 1) (1, 720)
 2) (2, 2520)
 3) (3, 6720)
 4) (4, 15120)
 5) (5, 30240)
 6) (6, 55440)
 7) (7, 95040)
 8) (8, 154440)
 9) (9, 240240)
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6))):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 720
 1) 5040
 2) 20160
 3) 60480
 4) 151200
 5) 332640
 6) 665280
 7) 1235520
 8) 2162160
 9) 3603600
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), (s1 * s2 * s3 * s4 * s5 * s6,))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), (s1 * s2 * s3 * s4 * s5 * s6,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), (Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)),):(i8)):(i8)*))
Func sig: () to (i8)*
Sequence: Seq<(i8)>
 0) (720,)
 1) (5040,)
 2) (20160,)
 3) (60480,)
 4) (151200,)
 5) (332640,)
 6) (665280,)
 7) (1235520,)
 8) (2162160,)
 9) (3603600,)
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), (#s3, s1 * s2 * s3 * s4 * s5 * s6))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), (#s3, s1 * s2 * s3 * s4 * s5 * s6)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), (Scope(1), Mul(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7))):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 720)
 1) (1, 5040)
 2) (2, 20160)
 3) (3, 60480)
 4) (4, 151200)
 5) (5, 332640)
 6) (6, 665280)
 7) (7, 1235520)
 8) (8, 2162160)
 9) (9, 3603600)
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7))):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 5040
 1) 40320
 2) 181440
 3) 604800
 4) 1663200
 5) 3991680
 6) 8648640
 7) 17297280
 8) 32432400
 9) 57657600
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), (s1 * s2 * s3 * s4 * s5 * s6 * s7,))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), (s1 * s2 * s3 * s4 * s5 * s6 * s7,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), (Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)),):(i8)):(i8)*))
Func sig: () to (i8)*
Sequence: Seq<(i8)>
 0) (5040,)
 1) (40320,)
 2) (181440,)
 3) (604800,)
 4) (1663200,)
 5) (3991680,)
 6) (8648640,)
 7) (17297280,)
 8) (32432400,)
 9) (57657600,)
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), (#s3, s1 * s2 * s3 * s4 * s5 * s6 * s7))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), (#s3, s1 * s2 * s3 * s4 * s5 * s6 * s7)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), (Scope(1), Mul(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8))):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 5040)
 1) (1, 40320)
 2) (2, 181440)
 3) (3, 604800)
 4) (4, 1663200)
 5) (5, 3991680)
 6) (6, 8648640)
 7) (7, 17297280)
 8) (8, 32432400)
 9) (9, 57657600)
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8))):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 40320
 1) 362880
 2) 1814400
 3) 6652800
 4) 19958400
 5) 51891840
 6) 121080960
 7) 259459200
 8) 518918400
 9) 980179200
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8,))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), (Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)),):(i8)):(i8)*))
Func sig: () to (i8)*
Sequence: Seq<(i8)>
 0) (40320,)
 1) (362880,)
 2) (1814400,)
 3) (6652800,)
 4) (19958400,)
 5) (51891840,)
 6) (121080960,)
 7) (259459200,)
 8) (518918400,)
 9) (980179200,)
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), (#s4, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), (#s4, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), (Scope(1), Mul(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9))):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 40320)
 1) (1, 362880)
 2) (2, 1814400)
 3) (3, 6652800)
 4) (4, 19958400)
 5) (5, 51891840)
 6) (6, 121080960)
 7) (7, 259459200)
 8) (8, 518918400)
 9) (9, 980179200)
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9))):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 362880
 1) 3628800
 2) 19958400
 3) 79833600
 4) 259459200
 5) 726485760
 6) 1816214400
 7) 4151347200
 8) 8821612800
 9) 17643225600
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9,))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), (Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)),):(i8)):(i8)*))
Func sig: () to (i8)*
Sequence: Seq<(i8)>
 0) (362880,)
 1) (3628800,)
 2) (19958400,)
 3) (79833600,)
 4) (259459200,)
 5) (726485760,)
 6) (1816214400,)
 7) (4151347200,)
 8) (8821612800,)
 9) (17643225600,)
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), (#s4, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), (#s4, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), (Scope(1), Mul(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10))):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 362880)
 1) (1, 3628800)
 2) (2, 19958400)
 3) (3, 79833600)
 4) (4, 259459200)
 5) (5, 726485760)
 6) (6, 1816214400)
 7) (7, 4151347200)
 8) (8, 8821612800)
 9) (9, 17643225600)
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10))):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 3628800
 1) 39916800
 2) 239500800
 3) 1037836800
 4) 3632428800
 5) 10897286400
 6) 29059430400
 7) 70572902400
 8) 158789030400
 9) 335221286400
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10,))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), (Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)),):(i8)):(i8)*))
Func sig: () to (i8)*
Sequence: Seq<(i8)>
 0) (3628800,)
 1) (39916800,)
 2) (239500800,)
 3) (1037836800,)
 4) (3632428800,)
 5) (10897286400,)
 6) (29059430400,)
 7) (70572902400,)
 8) (158789030400,)
 9) (335221286400,)
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), (#s5, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), (#s5, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), (Scope(1), Mul(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11))):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 3628800)
 1) (1, 39916800)
 2) (2, 239500800)
 3) (3, 1037836800)
 4) (4, 3632428800)
 5) (5, 10897286400)
 6) (6, 29059430400)
 7) (7, 70572902400)
 8) (8, 158789030400)
 9) (9, 335221286400)
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11))):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 39916800
 1) 479001600
 2) 3113510400
 3) 14529715200
 4) 54486432000
 5) 174356582400
 6) 494010316800
 7) 1270312243200
 8) 3016991577600
 9) 6704425728000
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11,))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), (Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)),):(i8)):(i8)*))
Func sig: () to (i8)*
Sequence: Seq<(i8)>
 0) (39916800,)
 1) (479001600,)
 2) (3113510400,)
 3) (14529715200,)
 4) (54486432000,)
 5) (174356582400,)
 6) (494010316800,)
 7) (1270312243200,)
 8) (3016991577600,)
 9) (6704425728000,)
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), (#s5, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), (#s5, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), (Scope(1), Mul(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12))):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 39916800)
 1) (1, 479001600)
 2) (2, 3113510400)
 3) (3, 14529715200)
 4) (4, 54486432000)
 5) (5, 174356582400)
 6) (6, 494010316800)
 7) (7, 1270312243200)
 8) (8, 3016991577600)
 9) (9, 6704425728000)
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12))):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 479001600
 1) 6227020800
 2) 43589145600
 3) 217945728000
 4) 871782912000
 5) 2964061900800
 6) 8892185702400
 7) 24135932620800
 8) 60339831552000
 9) 140792940288000
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12,))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), (Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)),):(i8)):(i8)*))
Func sig: () to (i8)*
Sequence: Seq<(i8)>
 0) (479001600,)
 1) (6227020800,)
 2) (43589145600,)
 3) (217945728000,)
 4) (871782912000,)
 5) (2964061900800,)
 6) (8892185702400,)
 7) (24135932620800,)
 8) (60339831552000,)
 9) (140792940288000,)
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), (#s6, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), (#s6, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), (Scope(1), Mul(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13))):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 479001600)
 1) (1, 6227020800)
 2) (2, 43589145600)
 3) (3, 217945728000)
 4) (4, 871782912000)
 5) (5, 2964061900800)
 6) (6, 8892185702400)
 7) (7, 24135932620800)
 8) (8, 60339831552000)
 9) (9, 140792940288000)
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13))):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 6227020800
 1) 87178291200
 2) 653837184000
 3) 3487131648000
 4) 14820309504000
 5) 53353114214400
 6) 168951528345600
 7) 482718652416000
 8) 1267136462592000
 9) 3097444686336000
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13,))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), (Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)),):(i8)):(i8)*))
Func sig: () to (i8)*
Sequence: Seq<(i8)>
 0) (6227020800,)
 1) (87178291200,)
 2) (653837184000,)
 3) (3487131648000,)
 4) (14820309504000,)
 5) (53353114214400,)
 6) (168951528345600,)
 7) (482718652416000,)
 8) (1267136462592000,)
 9) (3097444686336000,)
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), (#s6, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), (#s6, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), (Scope(1), Mul(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 6227020800)
 1) (1, 87178291200)
 2) (2, 653837184000)
 3) (3, 3487131648000)
 4) (4, 14820309504000)
 5) (5, 53353114214400)
 6) (6, 168951528345600)
 7) (7, 482718652416000)
 8) (8, 1267136462592000)
 9) (9, 3097444686336000)
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 87178291200
 1) 1307674368000
 2) 10461394944000
 3) 59281238016000
 4) 266765571072000
 5) 1013709170073600
 6) 3379030566912000
 7) 10137091700736000
 8) 27877002177024000
 9) 71241227785728000
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13 * s14,))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13 * s14,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), (Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)),):(i8)):(i8)*))
Func sig: () to (i8)*
Sequence: Seq<(i8)>
 0) (87178291200,)
 1) (1307674368000,)
 2) (10461394944000,)
 3) (59281238016000,)
 4) (266765571072000,)
 5) (1013709170073600,)
 6) (3379030566912000,)
 7) (10137091700736000,)
 8) (27877002177024000,)
 9) (71241227785728000,)
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), (#s7, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13 * s14))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), (#s7, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13 * s14)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), (Scope(1), Mul(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 87178291200)
 1) (1, 1307674368000)
 2) (2, 10461394944000)
 3) (3, 59281238016000)
 4) (4, 266765571072000)
 5) (5, 1013709170073600)
 6) (6, 3379030566912000)
 7) (7, 10137091700736000)
 8) (8, 27877002177024000)
 9) (9, 71241227785728000)
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 1307674368000
 1) 20922789888000
 2) 177843714048000
 3) 1067062284288000
 4) 5068545850368000
 5) 20274183401472000
 6) 70959641905152000
 7) 223016017416192000
 8) 641171050071552000
 9) 1709789466857472000
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13 * s14 * s15,))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13 * s14 * s15,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), (Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)),):(i8)):(i8)*))
Func sig: () to (i8)*
Sequence: Seq<(i8)>
 0) (1307674368000,)
 1) (20922789888000,)
 2) (177843714048000,)
 3) (1067062284288000,)
 4) (5068545850368000,)
 5) (20274183401472000,)
 6) (70959641905152000,)
 7) (223016017416192000,)
 8) (641171050071552000,)
 9) (1709789466857472000,)
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), (#s7, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13 * s14 * s15))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), (#s7, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13 * s14 * s15)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), (Scope(1), Mul(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 1307674368000)
 1) (1, 20922789888000)
 2) (2, 177843714048000)
 3) (3, 1067062284288000)
 4) (4, 5068545850368000)
 5) (5, 20274183401472000)
 6) (6, 70959641905152000)
 7) (7, 223016017416192000)
 8) (8, 641171050071552000)
 9) (9, 1709789466857472000)
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 20922789888000
 1) 355687428096000
 2) 3201186852864000
 3) 20274183401472000
 4) 101370917007360000
 5) 425757851430912000
 6) 1561112121913344000
 7) 5129368400572416000
 8) -3058638871992303616
 9) 5851248524017696768
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), s16:Range(16, 26), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13 * s14 * s15 * s16,))
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), s16 : Range(16, 26), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13 * s14 * s15 * s16,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), (Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)),):(i8)):(i8)*))
Func sig: () to (i8)*
Sequence: Seq<(i8)>
 0) (20922789888000,)
 1) (355687428096000,)
 2) (3201186852864000,)
 3) (20274183401472000,)
 4) (101370917007360000,)
 5) (425757851430912000,)
 6) (1561112121913344000,)
 7) (5129368400572416000,)
 8) (-3058638871992303616,)
 9) (5851248524017696768,)
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), s16:Range(16, 26), (#s8, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13 * s14 * s15 * s16)) // Fails
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), s16 : Range(16, 26), (#s8, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13 * s14 * s15 * s16)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [map:17] Call(∂.Range(16:i8, 26:i8):i8*), (Scope(1), Mul(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17))):(i8, i8)):(i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) * Range(17, 27) // Fails
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) * Range(17, 27) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [map:17] Call(∂.Range(17:i8, 27:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17))):i8*))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), s16:Range(16, 26), s17:Range(17, 27), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13 * s14 * s15 * s16 * s17,)) // Fails
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), s16 : Range(16, 26), s17 : Range(17, 27), (s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13 * s14 * s15 * s16 * s17,)) : (i8)*
BndKind:Call, Type:(i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [map:17] Call(∂.Range(17:i8, 27:i8):i8*), (Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)),):(i8)):(i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEach(s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), s16:Range(16, 26), s17:Range(17, 27), (#s8, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13 * s14 * s15 * s16 * s17)) // Fails
ForEach(s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), s16 : Range(16, 26), s17 : Range(17, 27), (#s8, s1 * s2 * s3 * s4 * s5 * s6 * s7 * s8 * s9 * s10 * s11 * s12 * s13 * s14 * s15 * s16 * s17)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [map:17] Call(∂.Range(16:i8, 26:i8):i8*), [map:18] Call(∂.Range(17:i8, 27:i8):i8*), (Scope(1), Mul(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17), Scope(18))):(i8, i8)):(i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> Range(1, 11) * Range(2, 12) | Sum(_)
Range(1, 11) * Range(2, 12) | Sum(_) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), Mul(Scope(1), Scope(2))):i8*)):i8))
Func sig: (<ctx>:x) to i8
Type: i8, Value: 440
*** Ctx ping count: 11
    [0](11): Sum(ForEach(*1: Range(1, 11), *2: Range(2, 12), Mul(*1, *2)))
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) | Sum(_)
Range(1, 11) * Range(2, 12) * Range(3, 13) | Sum(_) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), Mul(Scope(1), Scope(2), Scope(3))):i8*)):i8))
Func sig: (<ctx>:x) to i8
Type: i8, Value: 4290
*** Ctx ping count: 11
    [0](11): Sum(ForEach(*1: Range(1, 11), *2: Range(2, 12), *3: Range(3, 13), Mul(*1, *2, *3)))
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) | Sum(_)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) | Sum(_) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4))):i8*)):i8))
Func sig: (<ctx>:x) to i8
Type: i8, Value: 48048
*** Ctx ping count: 11
    [0](11): Sum(ForEach(*1: Range(1, 11), *2: Range(2, 12), *3: Range(3, 13), *4: Range(4, 14), Mul(*1, *2, *3, *4)))
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) | Sum(_)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) | Sum(_) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5))):i8*)):i8))
Func sig: (<ctx>:x) to i8
Type: i8, Value: 600600
*** Ctx ping count: 11
    [0](11): Sum(ForEach(*1: Range(1, 11), *2: Range(2, 12), *3: Range(3, 13), *4: Range(4, 14), *5: Range(5, 15), Mul(*1, *2, *3, *4, *5)))
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) | Sum(_)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) | Sum(_) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6))):i8*)):i8))
Func sig: (<ctx>:x) to i8
Type: i8, Value: 8236800
*** Ctx ping count: 11
    [0](11): Sum(ForEach(*1: Range(1, 11), *2: Range(2, 12), *3: Range(3, 13), *4: Range(4, 14), *5: Range(5, 15), *6: Range(6, 16), Mul(*1, *2, *3, *4, *5, *6)))
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) | Sum(_)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) | Sum(_) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7))):i8*)):i8))
Func sig: (<ctx>:x) to i8
Type: i8, Value: 122522400
*** Ctx ping count: 11
    [0](11): Sum(ForEach(*1: Range(1, 11), *2: Range(2, 12), *3: Range(3, 13), *4: Range(4, 14), *5: Range(5, 15), *6: Range(6, 16), *7: Range(7, 17), Mul(*1, *2, *3, *4, *5, *6, *7)))
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) | Sum(_)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) | Sum(_) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8))):i8*)):i8))
Func sig: (<ctx>:x) to i8
Type: i8, Value: 1960358400
*** Ctx ping count: 11
    [0](11): Sum(ForEach(*1: Range(1, 11), *2: Range(2, 12), *3: Range(3, 13), *4: Range(4, 14), *5: Range(5, 15), *6: Range(6, 16), *7: Range(7, 17), *8: Range(8, 18), Mul(*1, *2, *3, *4, *5, *6, *7, *8)))
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) | Sum(_)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) | Sum(_) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9))):i8*)):i8))
Func sig: (<ctx>:x) to i8
Type: i8, Value: 33522128640
*** Ctx ping count: 11
    [0](11): Sum(ForEach(*1: Range(1, 11), *2: Range(2, 12), *3: Range(3, 13), *4: Range(4, 14), *5: Range(5, 15), *6: Range(6, 16), *7: Range(7, 17), *8: Range(8, 18), *9: Range(9, 19), Mul(*1, *2, *3, *4, *5, *6, *7, *8, *9)))
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) | Sum(_)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) | Sum(_) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10))):i8*)):i8))
Func sig: (<ctx>:x) to i8
Type: i8, Value: 609493248000
*** Ctx ping count: 11
    [0](11): Sum(ForEach(*1: Range(1, 11), *2: Range(2, 12), *3: Range(3, 13), *4: Range(4, 14), *5: Range(5, 15), *6: Range(6, 16), *7: Range(7, 17), *8: Range(8, 18), *9: Range(9, 19), *10: Range(10, 20), Mul(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10)))
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) | Sum(_)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) | Sum(_) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11))):i8*)):i8))
Func sig: (<ctx>:x) to i8
Type: i8, Value: 11732745024000
*** Ctx ping count: 11
    [0](11): Sum(ForEach(*1: Range(1, 11), *2: Range(2, 12), *3: Range(3, 13), *4: Range(4, 14), *5: Range(5, 15), *6: Range(6, 16), *7: Range(7, 17), *8: Range(8, 18), *9: Range(9, 19), *10: Range(10, 20), *11: Range(11, 21), Mul(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11)))
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) | Sum(_)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) | Sum(_) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12))):i8*)):i8))
Func sig: (<ctx>:x) to i8
Type: i8, Value: 238264975872000
*** Ctx ping count: 11
    [0](11): Sum(ForEach(*1: Range(1, 11), *2: Range(2, 12), *3: Range(3, 13), *4: Range(4, 14), *5: Range(5, 15), *6: Range(6, 16), *7: Range(7, 17), *8: Range(8, 18), *9: Range(9, 19), *10: Range(10, 20), *11: Range(11, 21), *12: Range(12, 22), Mul(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12)))
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) | Sum(_)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) | Sum(_) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13))):i8*)):i8))
Func sig: (<ctx>:x) to i8
Type: i8, Value: 5088659127552000
*** Ctx ping count: 11
    [0](11): Sum(ForEach(*1: Range(1, 11), *2: Range(2, 12), *3: Range(3, 13), *4: Range(4, 14), *5: Range(5, 15), *6: Range(6, 16), *7: Range(7, 17), *8: Range(8, 18), *9: Range(9, 19), *10: Range(10, 20), *11: Range(11, 21), *12: Range(12, 22), *13: Range(13, 23), Mul(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13)))
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) | Sum(_)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) | Sum(_) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):i8*)):i8))
Func sig: (<ctx>:x) to i8
Type: i8, Value: 113985964457164800
*** Ctx ping count: 11
    [0](11): Sum(ForEach(*1: Range(1, 11), *2: Range(2, 12), *3: Range(3, 13), *4: Range(4, 14), *5: Range(5, 15), *6: Range(6, 16), *7: Range(7, 17), *8: Range(8, 18), *9: Range(9, 19), *10: Range(10, 20), *11: Range(11, 21), *12: Range(12, 22), *13: Range(13, 23), *14: Range(14, 24), Mul(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14)))
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) | Sum(_)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) | Sum(_) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*)):i8))
Func sig: (<ctx>:x) to i8
Type: i8, Value: 2671546041964800000
*** Ctx ping count: 11
    [0](11): Sum(ForEach(*1: Range(1, 11), *2: Range(2, 12), *3: Range(3, 13), *4: Range(4, 14), *5: Range(5, 15), *6: Range(6, 16), *7: Range(7, 17), *8: Range(8, 18), *9: Range(9, 19), *10: Range(10, 20), *11: Range(11, 21), *12: Range(12, 22), *13: Range(13, 23), *14: Range(14, 24), *15: Range(15, 25), Mul(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15)))
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) | Sum(_)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) | Sum(_) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*)):i8))
Func sig: (<ctx>:x) to i8
Type: i8, Value: -8412673150287806464
*** Ctx ping count: 11
    [0](11): Sum(ForEach(*1: Range(1, 11), *2: Range(2, 12), *3: Range(3, 13), *4: Range(4, 14), *5: Range(5, 15), *6: Range(6, 16), *7: Range(7, 17), *8: Range(8, 18), *9: Range(9, 19), *10: Range(10, 20), *11: Range(11, 21), *12: Range(12, 22), *13: Range(13, 23), *14: Range(14, 24), *15: Range(15, 25), *16: Range(16, 26), Mul(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15, *16)))
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) * Range(17, 27) | Sum(_) // Fails
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) * Range(17, 27) | Sum(_) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [map:17] Call(∂.Range(17:i8, 27:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17))):i8*)):i8))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEachIf(s0:Range(0, 10), (s0) mod 3 = 0, (s0))
ForEachIf(s0 : Range(0, 10), s0 mod 3 @= 0, s0) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Take([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [if] Cmp(IntMod(Scope(1), 3:i8) @= 0:i8)):i8*))
Func sig: (<ctx>:x) to i8*
Sequence: Seq<i8>
 0) 0
 1) 3
 2) 6
 3) 9
*** Ctx ping count: 6
    [0](6): Take(*1: Range(0, 10), [if] IntMod(*1, 3) @= 0)
###
> ForEach(s0:Range(0, 10), [if] (s0) mod 3 = 0, (s0))
ForEach(s0 : Range(0, 10), [if] s0 mod 3 @= 0, s0) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Take([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [if] Cmp(IntMod(Scope(1), 3:i8) @= 0:i8)):i8*))
Func sig: (<ctx>:x) to i8*
Sequence: Seq<i8>
 0) 0
 1) 3
 2) 6
 3) 9
*** Ctx ping count: 6
    [0](6): Take(*1: Range(0, 10), [if] IntMod(*1, 3) @= 0)
###
> ForEachIf(s0:Range(0, 10), (s0) mod 3 = 0, (#s0, s0))
ForEachIf(s0 : Range(0, 10), s0 mod 3 @= 0, (#s0, s0)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [if] Cmp(IntMod(Scope(2), 3:i8) @= 0:i8), (Scope(1), Scope(2)):(i8, i8)):(i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 0)
 1) (3, 3)
 2) (6, 6)
 3) (9, 9)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), [if] IntMod(*2, 3) @= 0, (#1, *2))
###
> ForEach(s0:Range(0, 10), [if] (s0) mod 3 = 0, (#s0, s0))
ForEach(s0 : Range(0, 10), [if] s0 mod 3 @= 0, (#s0, s0)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [if] Cmp(IntMod(Scope(2), 3:i8) @= 0:i8), (Scope(1), Scope(2)):(i8, i8)):(i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 0)
 1) (3, 3)
 2) (6, 6)
 3) (9, 9)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), [if] IntMod(*2, 3) @= 0, (#1, *2))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), (s0+s1) mod 3 = 0, (s0, s1))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), (s0 + s1) mod 3 @= 0, (s0, s1)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2)), 3:i8) @= 0:i8), (Scope(1), Scope(2)):(i8, i8)):(i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (1, 2)
 1) (4, 5)
 2) (7, 8)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), [if] IntMod(Add(*1, *2), 3) @= 0, (*1, *2))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), [if] (s0+s1) mod 3 = 0, (s0, s1))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), [if] (s0 + s1) mod 3 @= 0, (s0, s1)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2)), 3:i8) @= 0:i8), (Scope(1), Scope(2)):(i8, i8)):(i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (1, 2)
 1) (4, 5)
 2) (7, 8)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), [if] IntMod(Add(*1, *2), 3) @= 0, (*1, *2))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), (s0+s1) mod 3 = 0, (#s1, s0, s1))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), (s0 + s1) mod 3 @= 0, (#s1, s0, s1)) : (i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3)), 3:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3)):(i8, i8, i8)):(i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8)*
Sequence: Seq<(i8,i8,i8)>
 0) (1, 1, 2)
 1) (4, 4, 5)
 2) (7, 7, 8)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), [if] IntMod(Add(*2, *3), 3) @= 0, (#1, *2, *3))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), [if] (s0+s1) mod 3 = 0, (#s1, s0, s1))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), [if] (s0 + s1) mod 3 @= 0, (#s1, s0, s1)) : (i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3)), 3:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3)):(i8, i8, i8)):(i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8)*
Sequence: Seq<(i8,i8,i8)>
 0) (1, 1, 2)
 1) (4, 4, 5)
 2) (7, 7, 8)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), [if] IntMod(Add(*2, *3), 3) @= 0, (#1, *2, *3))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), (s0+s1+s2) mod 2 = 0, (s0, s1, s2))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), (s0 + s1 + s2) mod 2 @= 0, (s0, s1, s2)) : (i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 2:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3)):(i8, i8, i8)):(i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8)*
Sequence: Seq<(i8,i8,i8)>
 0) (1, 2, 3)
 1) (3, 4, 5)
 2) (5, 6, 7)
 3) (7, 8, 9)
 4) (9, 10, 11)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), [if] IntMod(Add(*1, *2, *3), 2) @= 0, (*1, *2, *3))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), [if] (s0+s1+s2) mod 2 = 0, (s0, s1, s2))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), [if] (s0 + s1 + s2) mod 2 @= 0, (s0, s1, s2)) : (i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 2:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3)):(i8, i8, i8)):(i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8)*
Sequence: Seq<(i8,i8,i8)>
 0) (1, 2, 3)
 1) (3, 4, 5)
 2) (5, 6, 7)
 3) (7, 8, 9)
 4) (9, 10, 11)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), [if] IntMod(Add(*1, *2, *3), 2) @= 0, (*1, *2, *3))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), (s0+s1+s2) mod 2 = 0, (#s1, s0, s1, s2))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), (s0 + s1 + s2) mod 2 @= 0, (#s1, s0, s1, s2)) : (i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 2:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4)):(i8, i8, i8, i8)):(i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8)>
 0) (1, 1, 2, 3)
 1) (3, 3, 4, 5)
 2) (5, 5, 6, 7)
 3) (7, 7, 8, 9)
 4) (9, 9, 10, 11)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), [if] IntMod(Add(*2, *3, *4), 2) @= 0, (#1, *2, *3, *4))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), [if] (s0+s1+s2) mod 2 = 0, (#s1, s0, s1, s2))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), [if] (s0 + s1 + s2) mod 2 @= 0, (#s1, s0, s1, s2)) : (i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 2:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4)):(i8, i8, i8, i8)):(i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8)>
 0) (1, 1, 2, 3)
 1) (3, 3, 4, 5)
 2) (5, 5, 6, 7)
 3) (7, 7, 8, 9)
 4) (9, 9, 10, 11)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), [if] IntMod(Add(*2, *3, *4), 2) @= 0, (#1, *2, *3, *4))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), (s0+s1+s2+s3) mod 3 = 0, (s0, s1, s2, s3))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), (s0 + s1 + s2 + s3) mod 3 @= 0, (s0, s1, s2, s3)) : (i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 3:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4)):(i8, i8, i8, i8)):(i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8)>
 0) (0, 1, 2, 3)
 1) (3, 4, 5, 6)
 2) (6, 7, 8, 9)
 3) (9, 10, 11, 12)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), [if] IntMod(Add(*1, *2, *3, *4), 3) @= 0, (*1, *2, *3, *4))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), [if] (s0+s1+s2+s3) mod 3 = 0, (s0, s1, s2, s3))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), [if] (s0 + s1 + s2 + s3) mod 3 @= 0, (s0, s1, s2, s3)) : (i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 3:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4)):(i8, i8, i8, i8)):(i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8)>
 0) (0, 1, 2, 3)
 1) (3, 4, 5, 6)
 2) (6, 7, 8, 9)
 3) (9, 10, 11, 12)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), [if] IntMod(Add(*1, *2, *3, *4), 3) @= 0, (*1, *2, *3, *4))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), (s0+s1+s2+s3) mod 3 = 0, (#s2, s0, s1, s2, s3))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), (s0 + s1 + s2 + s3) mod 3 @= 0, (#s2, s0, s1, s2, s3)) : (i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 3:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)):(i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3)
 1) (3, 3, 4, 5, 6)
 2) (6, 6, 7, 8, 9)
 3) (9, 9, 10, 11, 12)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), [if] IntMod(Add(*2, *3, *4, *5), 3) @= 0, (#1, *2, *3, *4, *5))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), [if] (s0+s1+s2+s3) mod 3 = 0, (#s2, s0, s1, s2, s3))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), [if] (s0 + s1 + s2 + s3) mod 3 @= 0, (#s2, s0, s1, s2, s3)) : (i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 3:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)):(i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3)
 1) (3, 3, 4, 5, 6)
 2) (6, 6, 7, 8, 9)
 3) (9, 9, 10, 11, 12)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), [if] IntMod(Add(*2, *3, *4, *5), 3) @= 0, (#1, *2, *3, *4, *5))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), (s0+s1+s2+s3+s4) mod 4 = 0, (s0, s1, s2, s3, s4))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), (s0 + s1 + s2 + s3 + s4) mod 4 @= 0, (s0, s1, s2, s3, s4)) : (i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 4:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)):(i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8)>
 0) (2, 3, 4, 5, 6)
 1) (6, 7, 8, 9, 10)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), [if] IntMod(Add(*1, *2, *3, *4, *5), 4) @= 0, (*1, *2, *3, *4, *5))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), [if] (s0+s1+s2+s3+s4) mod 4 = 0, (s0, s1, s2, s3, s4))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), [if] (s0 + s1 + s2 + s3 + s4) mod 4 @= 0, (s0, s1, s2, s3, s4)) : (i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 4:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)):(i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8)>
 0) (2, 3, 4, 5, 6)
 1) (6, 7, 8, 9, 10)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), [if] IntMod(Add(*1, *2, *3, *4, *5), 4) @= 0, (*1, *2, *3, *4, *5))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), (s0+s1+s2+s3+s4) mod 4 = 0, (#s2, s0, s1, s2, s3, s4))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), (s0 + s1 + s2 + s3 + s4) mod 4 @= 0, (#s2, s0, s1, s2, s3, s4)) : (i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 4:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)):(i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8)>
 0) (2, 2, 3, 4, 5, 6)
 1) (6, 6, 7, 8, 9, 10)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), [if] IntMod(Add(*2, *3, *4, *5, *6), 4) @= 0, (#1, *2, *3, *4, *5, *6))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), [if] (s0+s1+s2+s3+s4) mod 4 = 0, (#s2, s0, s1, s2, s3, s4))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), [if] (s0 + s1 + s2 + s3 + s4) mod 4 @= 0, (#s2, s0, s1, s2, s3, s4)) : (i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 4:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)):(i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8)>
 0) (2, 2, 3, 4, 5, 6)
 1) (6, 6, 7, 8, 9, 10)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), [if] IntMod(Add(*2, *3, *4, *5, *6), 4) @= 0, (#1, *2, *3, *4, *5, *6))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), (s0+s1+s2+s3+s4+s5) mod 5 = 0, (s0, s1, s2, s3, s4, s5))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), (s0 + s1 + s2 + s3 + s4 + s5) mod 5 @= 0, (s0, s1, s2, s3, s4, s5)) : (i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 5:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)):(i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5)
 1) (5, 6, 7, 8, 9, 10)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), [if] IntMod(Add(*1, *2, *3, *4, *5, *6), 5) @= 0, (*1, *2, *3, *4, *5, *6))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), [if] (s0+s1+s2+s3+s4+s5) mod 5 = 0, (s0, s1, s2, s3, s4, s5))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), [if] (s0 + s1 + s2 + s3 + s4 + s5) mod 5 @= 0, (s0, s1, s2, s3, s4, s5)) : (i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 5:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)):(i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5)
 1) (5, 6, 7, 8, 9, 10)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), [if] IntMod(Add(*1, *2, *3, *4, *5, *6), 5) @= 0, (*1, *2, *3, *4, *5, *6))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), (s0+s1+s2+s3+s4+s5) mod 5 = 0, (#s3, s0, s1, s2, s3, s4, s5))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), (s0 + s1 + s2 + s3 + s4 + s5) mod 5 @= 0, (#s3, s0, s1, s2, s3, s4, s5)) : (i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 5:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)):(i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5)
 1) (5, 5, 6, 7, 8, 9, 10)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), [if] IntMod(Add(*2, *3, *4, *5, *6, *7), 5) @= 0, (#1, *2, *3, *4, *5, *6, *7))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), [if] (s0+s1+s2+s3+s4+s5) mod 5 = 0, (#s3, s0, s1, s2, s3, s4, s5))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), [if] (s0 + s1 + s2 + s3 + s4 + s5) mod 5 @= 0, (#s3, s0, s1, s2, s3, s4, s5)) : (i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 5:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)):(i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5)
 1) (5, 5, 6, 7, 8, 9, 10)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), [if] IntMod(Add(*2, *3, *4, *5, *6, *7), 5) @= 0, (#1, *2, *3, *4, *5, *6, *7))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), (s0+s1+s2+s3+s4+s5+s6) mod 6 = 0, (s0, s1, s2, s3, s4, s5, s6))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 6 @= 0, (s0, s1, s2, s3, s4, s5, s6)) : (i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 6:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)):(i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8)>
 0) (3, 4, 5, 6, 7, 8, 9)
 1) (9, 10, 11, 12, 13, 14, 15)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7), 6) @= 0, (*1, *2, *3, *4, *5, *6, *7))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), [if] (s0+s1+s2+s3+s4+s5+s6) mod 6 = 0, (s0, s1, s2, s3, s4, s5, s6))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 6 @= 0, (s0, s1, s2, s3, s4, s5, s6)) : (i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 6:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)):(i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8)>
 0) (3, 4, 5, 6, 7, 8, 9)
 1) (9, 10, 11, 12, 13, 14, 15)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7), 6) @= 0, (*1, *2, *3, *4, *5, *6, *7))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), (s0+s1+s2+s3+s4+s5+s6) mod 6 = 0, (#s3, s0, s1, s2, s3, s4, s5, s6))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 6 @= 0, (#s3, s0, s1, s2, s3, s4, s5, s6)) : (i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 6:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)):(i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (3, 3, 4, 5, 6, 7, 8, 9)
 1) (9, 9, 10, 11, 12, 13, 14, 15)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8), 6) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), [if] (s0+s1+s2+s3+s4+s5+s6) mod 6 = 0, (#s3, s0, s1, s2, s3, s4, s5, s6))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 6 @= 0, (#s3, s0, s1, s2, s3, s4, s5, s6)) : (i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 6:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)):(i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (3, 3, 4, 5, 6, 7, 8, 9)
 1) (9, 9, 10, 11, 12, 13, 14, 15)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8), 6) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6+s7) mod 7 = 0, (s0, s1, s2, s3, s4, s5, s6, s7))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 7 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7)) : (i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 7:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)):(i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7)
 1) (7, 8, 9, 10, 11, 12, 13, 14)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8), 7) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 7 = 0, (s0, s1, s2, s3, s4, s5, s6, s7))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 7 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7)) : (i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 7:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)):(i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7)
 1) (7, 8, 9, 10, 11, 12, 13, 14)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8), 7) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6+s7) mod 7 = 0, (#s4, s0, s1, s2, s3, s4, s5, s6, s7))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 7 @= 0, (#s4, s0, s1, s2, s3, s4, s5, s6, s7)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 7:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7)
 1) (7, 7, 8, 9, 10, 11, 12, 13, 14)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), *9: Range(7, 17), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8, *9), 7) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8, *9))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 7 = 0, (#s4, s0, s1, s2, s3, s4, s5, s6, s7))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 7 @= 0, (#s4, s0, s1, s2, s3, s4, s5, s6, s7)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 7:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7)
 1) (7, 7, 8, 9, 10, 11, 12, 13, 14)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), *9: Range(7, 17), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8, *9), 7) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8, *9))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 8 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 8 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 8:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (4, 5, 6, 7, 8, 9, 10, 11, 12)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), *9: Range(8, 18), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8, *9), 8) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8, *9))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 8 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 8 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 8:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (4, 5, 6, 7, 8, 9, 10, 11, 12)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), *9: Range(8, 18), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8, *9), 8) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8, *9))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 8 = 0, (#s4, s0, s1, s2, s3, s4, s5, s6, s7, s8))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 8 @= 0, (#s4, s0, s1, s2, s3, s4, s5, s6, s7, s8)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 8:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (4, 4, 5, 6, 7, 8, 9, 10, 11, 12)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), *9: Range(7, 17), *10: Range(8, 18), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8, *9, *10), 8) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8, *9, *10))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 8 = 0, (#s4, s0, s1, s2, s3, s4, s5, s6, s7, s8))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 8 @= 0, (#s4, s0, s1, s2, s3, s4, s5, s6, s7, s8)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 8:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (4, 4, 5, 6, 7, 8, 9, 10, 11, 12)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), *9: Range(7, 17), *10: Range(8, 18), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8, *9, *10), 8) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8, *9, *10))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 9 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 9 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 9:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
 1) (9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), *9: Range(8, 18), *10: Range(9, 19), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10), 9) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8, *9, *10))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 9 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 9 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 9:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
 1) (9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), *9: Range(8, 18), *10: Range(9, 19), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10), 9) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8, *9, *10))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 9 = 0, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 9 @= 0, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 9:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
 1) (9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), *9: Range(7, 17), *10: Range(8, 18), *11: Range(9, 19), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8, *9, *10, *11), 9) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 9 = 0, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 9 @= 0, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 9:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
 1) (9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), *9: Range(7, 17), *10: Range(8, 18), *11: Range(9, 19), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8, *9, *10, *11), 9) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), *9: Range(8, 18), *10: Range(9, 19), *11: Range(10, 20), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11), 10) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), *9: Range(8, 18), *10: Range(9, 19), *11: Range(10, 20), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11), 10) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), *9: Range(7, 17), *10: Range(8, 18), *11: Range(9, 19), *12: Range(10, 20), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12), 10) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), *9: Range(7, 17), *10: Range(8, 18), *11: Range(9, 19), *12: Range(10, 20), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12), 10) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 11 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 11 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 11:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), *9: Range(8, 18), *10: Range(9, 19), *11: Range(10, 20), *12: Range(11, 21), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12), 11) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 11 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 11 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 11:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), *9: Range(8, 18), *10: Range(9, 19), *11: Range(10, 20), *12: Range(11, 21), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12), 11) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 11 = 0, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 11 @= 0, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 11:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), *9: Range(7, 17), *10: Range(8, 18), *11: Range(9, 19), *12: Range(10, 20), *13: Range(11, 21), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13), 11) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 11 = 0, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 11 @= 0, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 11:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), *9: Range(7, 17), *10: Range(8, 18), *11: Range(9, 19), *12: Range(10, 20), *13: Range(11, 21), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13), 11) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 12 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 12 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 12:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), *9: Range(8, 18), *10: Range(9, 19), *11: Range(10, 20), *12: Range(11, 21), *13: Range(12, 22), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13), 12) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 12 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 12 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 12:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), *9: Range(8, 18), *10: Range(9, 19), *11: Range(10, 20), *12: Range(11, 21), *13: Range(12, 22), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13), 12) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 12 = 0, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 12 @= 0, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 12:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), *9: Range(7, 17), *10: Range(8, 18), *11: Range(9, 19), *12: Range(10, 20), *13: Range(11, 21), *14: Range(12, 22), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14), 12) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 12 = 0, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 12 @= 0, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 12:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), *9: Range(7, 17), *10: Range(8, 18), *11: Range(9, 19), *12: Range(10, 20), *13: Range(11, 21), *14: Range(12, 22), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14), 12) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 13 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 13 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 13:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), *9: Range(8, 18), *10: Range(9, 19), *11: Range(10, 20), *12: Range(11, 21), *13: Range(12, 22), *14: Range(13, 23), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14), 13) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 13 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 13 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 13:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), *9: Range(8, 18), *10: Range(9, 19), *11: Range(10, 20), *12: Range(11, 21), *13: Range(12, 22), *14: Range(13, 23), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14), 13) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 13 = 0, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 13 @= 0, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 13:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), *9: Range(7, 17), *10: Range(8, 18), *11: Range(9, 19), *12: Range(10, 20), *13: Range(11, 21), *14: Range(12, 22), *15: Range(13, 23), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15), 13) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 13 = 0, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 13 @= 0, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 13:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), *9: Range(7, 17), *10: Range(8, 18), *11: Range(9, 19), *12: Range(10, 20), *13: Range(11, 21), *14: Range(12, 22), *15: Range(13, 23), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15), 13) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 14 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 14 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 14:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), *9: Range(8, 18), *10: Range(9, 19), *11: Range(10, 20), *12: Range(11, 21), *13: Range(12, 22), *14: Range(13, 23), *15: Range(14, 24), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15), 14) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 14 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 14 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 14:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), *9: Range(8, 18), *10: Range(9, 19), *11: Range(10, 20), *12: Range(11, 21), *13: Range(12, 22), *14: Range(13, 23), *15: Range(14, 24), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15), 14) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 14 = 0, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 14 @= 0, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [map:16] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 14:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), *9: Range(7, 17), *10: Range(8, 18), *11: Range(9, 19), *12: Range(10, 20), *13: Range(11, 21), *14: Range(12, 22), *15: Range(13, 23), *16: Range(14, 24), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15, *16), 14) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15, *16))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 14 = 0, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 14 @= 0, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [map:16] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 14:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)
*** Ctx ping count: 11
    [0](11): ForEach(*2: Range(0, 10), *3: Range(1, 11), *4: Range(2, 12), *5: Range(3, 13), *6: Range(4, 14), *7: Range(5, 15), *8: Range(6, 16), *9: Range(7, 17), *10: Range(8, 18), *11: Range(9, 19), *12: Range(10, 20), *13: Range(11, 21), *14: Range(12, 22), *15: Range(13, 23), *16: Range(14, 24), [if] IntMod(Add(*2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15, *16), 14) @= 0, (#1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15, *16))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 15 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15))
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 15 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 15:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), *9: Range(8, 18), *10: Range(9, 19), *11: Range(10, 20), *12: Range(11, 21), *13: Range(12, 22), *14: Range(13, 23), *15: Range(14, 24), *16: Range(15, 25), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15, *16), 15) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15, *16))
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 15 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 15 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 15:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: (<ctx>:x) to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
*** Ctx ping count: 11
    [0](11): ForEach(*1: Range(0, 10), *2: Range(1, 11), *3: Range(2, 12), *4: Range(3, 13), *5: Range(4, 14), *6: Range(5, 15), *7: Range(6, 16), *8: Range(7, 17), *9: Range(8, 18), *10: Range(9, 19), *11: Range(10, 20), *12: Range(11, 21), *13: Range(12, 22), *14: Range(13, 23), *15: Range(14, 24), *16: Range(15, 25), [if] IntMod(Add(*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15, *16), 15) @= 0, (*1, *2, *3, *4, *5, *6, *7, *8, *9, *10, *11, *12, *13, *14, *15, *16))
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 15 = 0, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15)) // Fails
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 15 @= 0, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [map:16] Call(∂.Range(14:i8, 24:i8):i8*), [map:17] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)), 15:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 15 = 0, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15)) // Fails
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 15 @= 0, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [map:16] Call(∂.Range(14:i8, 24:i8):i8*), [map:17] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)), 15:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), s16:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15+s16) mod 16 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) // Fails
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), s16 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15 + s16) mod 16 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [map:17] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)), 16:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), s16:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15+s16) mod 16 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) // Fails
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), s16 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15 + s16) mod 16 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [map:17] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)), 16:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEachIf(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), s16:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15+s16) mod 16 = 0, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) // Fails
ForEachIf(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), s16 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15 + s16) mod 16 @= 0, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [map:16] Call(∂.Range(14:i8, 24:i8):i8*), [map:17] Call(∂.Range(15:i8, 25:i8):i8*), [map:18] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17), Scope(18)), 16:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17), Scope(18)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), s16:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15+s16) mod 16 = 0, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) // Fails
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), s16 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15 + s16) mod 16 @= 0, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [map:16] Call(∂.Range(14:i8, 24:i8):i8*), [map:17] Call(∂.Range(15:i8, 25:i8):i8*), [map:18] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17), Scope(18)), 16:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17), Scope(18)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEachWhile(s0:Range(0, 10), (s0) mod 3 = 0, (s0))
ForEachWhile(s0 : Range(0, 10), s0 mod 3 @= 0, s0) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Take([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [while] Cmp(IntMod(Scope(1), 3:i8) @= 0:i8)):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 0
###
> ForEachWhile(s0:Range(0, 10), [while] (s0) mod 3 >= 0, (s0))
ForEachWhile(s0 : Range(0, 10), [while] s0 mod 3 $>= 0, s0) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Take([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [while] Cmp(IntMod(Scope(1), 3:i8) @>= 0:i8)):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 0
 1) 1
 2) 2
 3) 3
 4) 4
 5) 5
 6) 6
 7) 7
 8) 8
 9) 9
###
> ForEach(s0:Range(0, 10), [while] (s0) mod 3 < 2, (s0))
ForEach(s0 : Range(0, 10), [while] s0 mod 3 $< 2, s0) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Take([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [while] Cmp(IntMod(Scope(1), 3:i8) @< 2:i8)):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 0
 1) 1
###
> ForEachWhile(s0:Range(0, 10), (s0) mod 3 = 0, (#s0, s0))
ForEachWhile(s0 : Range(0, 10), s0 mod 3 @= 0, (#s0, s0)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [while] Cmp(IntMod(Scope(2), 3:i8) @= 0:i8), (Scope(1), Scope(2)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 0)
###
> ForEachWhile(s0:Range(0, 10), [while] (s0) mod 3 >= 0, (#s0, s0))
ForEachWhile(s0 : Range(0, 10), [while] s0 mod 3 $>= 0, (#s0, s0)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [while] Cmp(IntMod(Scope(2), 3:i8) @>= 0:i8), (Scope(1), Scope(2)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 0)
 1) (1, 1)
 2) (2, 2)
 3) (3, 3)
 4) (4, 4)
 5) (5, 5)
 6) (6, 6)
 7) (7, 7)
 8) (8, 8)
 9) (9, 9)
###
> ForEach(s0:Range(0, 10), [while] (s0) mod 3 < 2, (#s0, s0))
ForEach(s0 : Range(0, 10), [while] s0 mod 3 $< 2, (#s0, s0)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [while] Cmp(IntMod(Scope(2), 3:i8) @< 2:i8), (Scope(1), Scope(2)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 0)
 1) (1, 1)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), (s0+s1) mod 3 = 0, (s0, s1))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), (s0 + s1) mod 3 @= 0, (s0, s1)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2)), 3:i8) @= 0:i8), (Scope(1), Scope(2)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), [while] (s0+s1) mod 3 >= 0, (s0, s1))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), [while] (s0 + s1) mod 3 $>= 0, (s0, s1)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2)), 3:i8) @>= 0:i8), (Scope(1), Scope(2)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 1)
 1) (1, 2)
 2) (2, 3)
 3) (3, 4)
 4) (4, 5)
 5) (5, 6)
 6) (6, 7)
 7) (7, 8)
 8) (8, 9)
 9) (9, 10)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), [while] (s0+s1) mod 3 < 2, (s0, s1))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), [while] (s0 + s1) mod 3 $< 2, (s0, s1)) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2)), 3:i8) @< 2:i8), (Scope(1), Scope(2)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (0, 1)
 1) (1, 2)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), (s0+s1) mod 3 = 0, (#s1, s0, s1))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), (s0 + s1) mod 3 @= 0, (#s1, s0, s1)) : (i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3)), 3:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3)):(i8, i8, i8)):(i8, i8, i8)*))
Func sig: () to (i8, i8, i8)*
Sequence: Seq<(i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), [while] (s0+s1) mod 3 >= 0, (#s1, s0, s1))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), [while] (s0 + s1) mod 3 $>= 0, (#s1, s0, s1)) : (i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3)), 3:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3)):(i8, i8, i8)):(i8, i8, i8)*))
Func sig: () to (i8, i8, i8)*
Sequence: Seq<(i8,i8,i8)>
 0) (0, 0, 1)
 1) (1, 1, 2)
 2) (2, 2, 3)
 3) (3, 3, 4)
 4) (4, 4, 5)
 5) (5, 5, 6)
 6) (6, 6, 7)
 7) (7, 7, 8)
 8) (8, 8, 9)
 9) (9, 9, 10)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), [while] (s0+s1) mod 3 < 2, (#s1, s0, s1))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), [while] (s0 + s1) mod 3 $< 2, (#s1, s0, s1)) : (i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3)), 3:i8) @< 2:i8), (Scope(1), Scope(2), Scope(3)):(i8, i8, i8)):(i8, i8, i8)*))
Func sig: () to (i8, i8, i8)*
Sequence: Seq<(i8,i8,i8)>
 0) (0, 0, 1)
 1) (1, 1, 2)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), (s0+s1+s2) mod 2 = 0, (s0, s1, s2))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), (s0 + s1 + s2) mod 2 @= 0, (s0, s1, s2)) : (i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 2:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3)):(i8, i8, i8)):(i8, i8, i8)*))
Func sig: () to (i8, i8, i8)*
Sequence: Seq<(i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), [while] (s0+s1+s2) mod 2 >= 0, (s0, s1, s2))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), [while] (s0 + s1 + s2) mod 2 $>= 0, (s0, s1, s2)) : (i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 2:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3)):(i8, i8, i8)):(i8, i8, i8)*))
Func sig: () to (i8, i8, i8)*
Sequence: Seq<(i8,i8,i8)>
 0) (0, 1, 2)
 1) (1, 2, 3)
 2) (2, 3, 4)
 3) (3, 4, 5)
 4) (4, 5, 6)
 5) (5, 6, 7)
 6) (6, 7, 8)
 7) (7, 8, 9)
 8) (8, 9, 10)
 9) (9, 10, 11)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), [while] (s0+s1+s2) mod 2 < 1, (s0, s1, s2))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), [while] (s0 + s1 + s2) mod 2 $< 1, (s0, s1, s2)) : (i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 2:i8) @< 1:i8), (Scope(1), Scope(2), Scope(3)):(i8, i8, i8)):(i8, i8, i8)*))
Func sig: () to (i8, i8, i8)*
Sequence: Seq<(i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), (s0+s1+s2) mod 2 = 0, (#s1, s0, s1, s2))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), (s0 + s1 + s2) mod 2 @= 0, (#s1, s0, s1, s2)) : (i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 2:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4)):(i8, i8, i8, i8)):(i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), [while] (s0+s1+s2) mod 2 >= 0, (#s1, s0, s1, s2))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), [while] (s0 + s1 + s2) mod 2 $>= 0, (#s1, s0, s1, s2)) : (i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 2:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4)):(i8, i8, i8, i8)):(i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8)>
 0) (0, 0, 1, 2)
 1) (1, 1, 2, 3)
 2) (2, 2, 3, 4)
 3) (3, 3, 4, 5)
 4) (4, 4, 5, 6)
 5) (5, 5, 6, 7)
 6) (6, 6, 7, 8)
 7) (7, 7, 8, 9)
 8) (8, 8, 9, 10)
 9) (9, 9, 10, 11)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), [while] (s0+s1+s2) mod 2 < 1, (#s1, s0, s1, s2))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), [while] (s0 + s1 + s2) mod 2 $< 1, (#s1, s0, s1, s2)) : (i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 2:i8) @< 1:i8), (Scope(1), Scope(2), Scope(3), Scope(4)):(i8, i8, i8, i8)):(i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), (s0+s1+s2+s3) mod 3 = 0, (s0, s1, s2, s3))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), (s0 + s1 + s2 + s3) mod 3 @= 0, (s0, s1, s2, s3)) : (i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 3:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4)):(i8, i8, i8, i8)):(i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8)>
 0) (0, 1, 2, 3)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), [while] (s0+s1+s2+s3) mod 3 >= 0, (s0, s1, s2, s3))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), [while] (s0 + s1 + s2 + s3) mod 3 $>= 0, (s0, s1, s2, s3)) : (i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 3:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4)):(i8, i8, i8, i8)):(i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8)>
 0) (0, 1, 2, 3)
 1) (1, 2, 3, 4)
 2) (2, 3, 4, 5)
 3) (3, 4, 5, 6)
 4) (4, 5, 6, 7)
 5) (5, 6, 7, 8)
 6) (6, 7, 8, 9)
 7) (7, 8, 9, 10)
 8) (8, 9, 10, 11)
 9) (9, 10, 11, 12)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), [while] (s0+s1+s2+s3) mod 3 < 2, (s0, s1, s2, s3))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), [while] (s0 + s1 + s2 + s3) mod 3 $< 2, (s0, s1, s2, s3)) : (i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 3:i8) @< 2:i8), (Scope(1), Scope(2), Scope(3), Scope(4)):(i8, i8, i8, i8)):(i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8)>
 0) (0, 1, 2, 3)
 1) (1, 2, 3, 4)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), (s0+s1+s2+s3) mod 3 = 0, (#s2, s0, s1, s2, s3))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), (s0 + s1 + s2 + s3) mod 3 @= 0, (#s2, s0, s1, s2, s3)) : (i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 3:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)):(i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), [while] (s0+s1+s2+s3) mod 3 >= 0, (#s2, s0, s1, s2, s3))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), [while] (s0 + s1 + s2 + s3) mod 3 $>= 0, (#s2, s0, s1, s2, s3)) : (i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 3:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)):(i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3)
 1) (1, 1, 2, 3, 4)
 2) (2, 2, 3, 4, 5)
 3) (3, 3, 4, 5, 6)
 4) (4, 4, 5, 6, 7)
 5) (5, 5, 6, 7, 8)
 6) (6, 6, 7, 8, 9)
 7) (7, 7, 8, 9, 10)
 8) (8, 8, 9, 10, 11)
 9) (9, 9, 10, 11, 12)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), [while] (s0+s1+s2+s3) mod 3 < 2, (#s2, s0, s1, s2, s3))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), [while] (s0 + s1 + s2 + s3) mod 3 $< 2, (#s2, s0, s1, s2, s3)) : (i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 3:i8) @< 2:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)):(i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3)
 1) (1, 1, 2, 3, 4)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), (s0+s1+s2+s3+s4) mod 4 = 0, (s0, s1, s2, s3, s4))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), (s0 + s1 + s2 + s3 + s4) mod 4 @= 0, (s0, s1, s2, s3, s4)) : (i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 4:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)):(i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), [while] (s0+s1+s2+s3+s4) mod 4 >= 0, (s0, s1, s2, s3, s4))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), [while] (s0 + s1 + s2 + s3 + s4) mod 4 $>= 0, (s0, s1, s2, s3, s4)) : (i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 4:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)):(i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4)
 1) (1, 2, 3, 4, 5)
 2) (2, 3, 4, 5, 6)
 3) (3, 4, 5, 6, 7)
 4) (4, 5, 6, 7, 8)
 5) (5, 6, 7, 8, 9)
 6) (6, 7, 8, 9, 10)
 7) (7, 8, 9, 10, 11)
 8) (8, 9, 10, 11, 12)
 9) (9, 10, 11, 12, 13)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), [while] (s0+s1+s2+s3+s4) mod 4 < 3, (s0, s1, s2, s3, s4))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), [while] (s0 + s1 + s2 + s3 + s4) mod 4 $< 3, (s0, s1, s2, s3, s4)) : (i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 4:i8) @< 3:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)):(i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), (s0+s1+s2+s3+s4) mod 4 = 0, (#s2, s0, s1, s2, s3, s4))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), (s0 + s1 + s2 + s3 + s4) mod 4 @= 0, (#s2, s0, s1, s2, s3, s4)) : (i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 4:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)):(i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), [while] (s0+s1+s2+s3+s4) mod 4 >= 0, (#s2, s0, s1, s2, s3, s4))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), [while] (s0 + s1 + s2 + s3 + s4) mod 4 $>= 0, (#s2, s0, s1, s2, s3, s4)) : (i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 4:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)):(i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4)
 1) (1, 1, 2, 3, 4, 5)
 2) (2, 2, 3, 4, 5, 6)
 3) (3, 3, 4, 5, 6, 7)
 4) (4, 4, 5, 6, 7, 8)
 5) (5, 5, 6, 7, 8, 9)
 6) (6, 6, 7, 8, 9, 10)
 7) (7, 7, 8, 9, 10, 11)
 8) (8, 8, 9, 10, 11, 12)
 9) (9, 9, 10, 11, 12, 13)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), [while] (s0+s1+s2+s3+s4) mod 4 < 3, (#s2, s0, s1, s2, s3, s4))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), [while] (s0 + s1 + s2 + s3 + s4) mod 4 $< 3, (#s2, s0, s1, s2, s3, s4)) : (i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 4:i8) @< 3:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)):(i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), (s0+s1+s2+s3+s4+s5) mod 5 = 0, (s0, s1, s2, s3, s4, s5))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), (s0 + s1 + s2 + s3 + s4 + s5) mod 5 @= 0, (s0, s1, s2, s3, s4, s5)) : (i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 5:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)):(i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), [while] (s0+s1+s2+s3+s4+s5) mod 5 >= 0, (s0, s1, s2, s3, s4, s5))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 5 $>= 0, (s0, s1, s2, s3, s4, s5)) : (i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 5:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)):(i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5)
 1) (1, 2, 3, 4, 5, 6)
 2) (2, 3, 4, 5, 6, 7)
 3) (3, 4, 5, 6, 7, 8)
 4) (4, 5, 6, 7, 8, 9)
 5) (5, 6, 7, 8, 9, 10)
 6) (6, 7, 8, 9, 10, 11)
 7) (7, 8, 9, 10, 11, 12)
 8) (8, 9, 10, 11, 12, 13)
 9) (9, 10, 11, 12, 13, 14)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), [while] (s0+s1+s2+s3+s4+s5) mod 5 < 4, (s0, s1, s2, s3, s4, s5))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 5 $< 4, (s0, s1, s2, s3, s4, s5)) : (i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 5:i8) @< 4:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)):(i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5)
 1) (1, 2, 3, 4, 5, 6)
 2) (2, 3, 4, 5, 6, 7)
 3) (3, 4, 5, 6, 7, 8)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), (s0+s1+s2+s3+s4+s5) mod 5 = 0, (#s3, s0, s1, s2, s3, s4, s5))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), (s0 + s1 + s2 + s3 + s4 + s5) mod 5 @= 0, (#s3, s0, s1, s2, s3, s4, s5)) : (i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 5:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)):(i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), [while] (s0+s1+s2+s3+s4+s5) mod 5 >= 0, (#s3, s0, s1, s2, s3, s4, s5))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 5 $>= 0, (#s3, s0, s1, s2, s3, s4, s5)) : (i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 5:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)):(i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5)
 1) (1, 1, 2, 3, 4, 5, 6)
 2) (2, 2, 3, 4, 5, 6, 7)
 3) (3, 3, 4, 5, 6, 7, 8)
 4) (4, 4, 5, 6, 7, 8, 9)
 5) (5, 5, 6, 7, 8, 9, 10)
 6) (6, 6, 7, 8, 9, 10, 11)
 7) (7, 7, 8, 9, 10, 11, 12)
 8) (8, 8, 9, 10, 11, 12, 13)
 9) (9, 9, 10, 11, 12, 13, 14)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), [while] (s0+s1+s2+s3+s4+s5) mod 5 < 4, (#s3, s0, s1, s2, s3, s4, s5))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 5 $< 4, (#s3, s0, s1, s2, s3, s4, s5)) : (i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 5:i8) @< 4:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)):(i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5)
 1) (1, 1, 2, 3, 4, 5, 6)
 2) (2, 2, 3, 4, 5, 6, 7)
 3) (3, 3, 4, 5, 6, 7, 8)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), (s0+s1+s2+s3+s4+s5+s6) mod 6 = 0, (s0, s1, s2, s3, s4, s5, s6))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 6 @= 0, (s0, s1, s2, s3, s4, s5, s6)) : (i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 6:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)):(i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5+s6) mod 6 >= 0, (s0, s1, s2, s3, s4, s5, s6))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 6 $>= 0, (s0, s1, s2, s3, s4, s5, s6)) : (i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 6:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)):(i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6)
 1) (1, 2, 3, 4, 5, 6, 7)
 2) (2, 3, 4, 5, 6, 7, 8)
 3) (3, 4, 5, 6, 7, 8, 9)
 4) (4, 5, 6, 7, 8, 9, 10)
 5) (5, 6, 7, 8, 9, 10, 11)
 6) (6, 7, 8, 9, 10, 11, 12)
 7) (7, 8, 9, 10, 11, 12, 13)
 8) (8, 9, 10, 11, 12, 13, 14)
 9) (9, 10, 11, 12, 13, 14, 15)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5+s6) mod 6 < 5, (s0, s1, s2, s3, s4, s5, s6))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 6 $< 5, (s0, s1, s2, s3, s4, s5, s6)) : (i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 6:i8) @< 5:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)):(i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6)
 1) (1, 2, 3, 4, 5, 6, 7)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), (s0+s1+s2+s3+s4+s5+s6) mod 6 = 0, (#s3, s0, s1, s2, s3, s4, s5, s6))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 6 @= 0, (#s3, s0, s1, s2, s3, s4, s5, s6)) : (i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 6:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)):(i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5+s6) mod 6 >= 0, (#s3, s0, s1, s2, s3, s4, s5, s6))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 6 $>= 0, (#s3, s0, s1, s2, s3, s4, s5, s6)) : (i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 6:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)):(i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6)
 1) (1, 1, 2, 3, 4, 5, 6, 7)
 2) (2, 2, 3, 4, 5, 6, 7, 8)
 3) (3, 3, 4, 5, 6, 7, 8, 9)
 4) (4, 4, 5, 6, 7, 8, 9, 10)
 5) (5, 5, 6, 7, 8, 9, 10, 11)
 6) (6, 6, 7, 8, 9, 10, 11, 12)
 7) (7, 7, 8, 9, 10, 11, 12, 13)
 8) (8, 8, 9, 10, 11, 12, 13, 14)
 9) (9, 9, 10, 11, 12, 13, 14, 15)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5+s6) mod 6 < 5, (#s3, s0, s1, s2, s3, s4, s5, s6))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 6 $< 5, (#s3, s0, s1, s2, s3, s4, s5, s6)) : (i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 6:i8) @< 5:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)):(i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6)
 1) (1, 1, 2, 3, 4, 5, 6, 7)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6+s7) mod 7 = 0, (s0, s1, s2, s3, s4, s5, s6, s7))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 7 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7)) : (i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 7:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)):(i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 7 >= 0, (s0, s1, s2, s3, s4, s5, s6, s7))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 7 $>= 0, (s0, s1, s2, s3, s4, s5, s6, s7)) : (i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 7:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)):(i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7)
 1) (1, 2, 3, 4, 5, 6, 7, 8)
 2) (2, 3, 4, 5, 6, 7, 8, 9)
 3) (3, 4, 5, 6, 7, 8, 9, 10)
 4) (4, 5, 6, 7, 8, 9, 10, 11)
 5) (5, 6, 7, 8, 9, 10, 11, 12)
 6) (6, 7, 8, 9, 10, 11, 12, 13)
 7) (7, 8, 9, 10, 11, 12, 13, 14)
 8) (8, 9, 10, 11, 12, 13, 14, 15)
 9) (9, 10, 11, 12, 13, 14, 15, 16)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 7 < 6, (s0, s1, s2, s3, s4, s5, s6, s7))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 7 $< 6, (s0, s1, s2, s3, s4, s5, s6, s7)) : (i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 7:i8) @< 6:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)):(i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7)
 1) (1, 2, 3, 4, 5, 6, 7, 8)
 2) (2, 3, 4, 5, 6, 7, 8, 9)
 3) (3, 4, 5, 6, 7, 8, 9, 10)
 4) (4, 5, 6, 7, 8, 9, 10, 11)
 5) (5, 6, 7, 8, 9, 10, 11, 12)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6+s7) mod 7 = 0, (#s4, s0, s1, s2, s3, s4, s5, s6, s7))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 7 @= 0, (#s4, s0, s1, s2, s3, s4, s5, s6, s7)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 7:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 7 >= 0, (#s4, s0, s1, s2, s3, s4, s5, s6, s7))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 7 $>= 0, (#s4, s0, s1, s2, s3, s4, s5, s6, s7)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 7:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7)
 1) (1, 1, 2, 3, 4, 5, 6, 7, 8)
 2) (2, 2, 3, 4, 5, 6, 7, 8, 9)
 3) (3, 3, 4, 5, 6, 7, 8, 9, 10)
 4) (4, 4, 5, 6, 7, 8, 9, 10, 11)
 5) (5, 5, 6, 7, 8, 9, 10, 11, 12)
 6) (6, 6, 7, 8, 9, 10, 11, 12, 13)
 7) (7, 7, 8, 9, 10, 11, 12, 13, 14)
 8) (8, 8, 9, 10, 11, 12, 13, 14, 15)
 9) (9, 9, 10, 11, 12, 13, 14, 15, 16)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 7 < 6, (#s4, s0, s1, s2, s3, s4, s5, s6, s7))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 7 $< 6, (#s4, s0, s1, s2, s3, s4, s5, s6, s7)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 7:i8) @< 6:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7)
 1) (1, 1, 2, 3, 4, 5, 6, 7, 8)
 2) (2, 2, 3, 4, 5, 6, 7, 8, 9)
 3) (3, 3, 4, 5, 6, 7, 8, 9, 10)
 4) (4, 4, 5, 6, 7, 8, 9, 10, 11)
 5) (5, 5, 6, 7, 8, 9, 10, 11, 12)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 8 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 8 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 8:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 8 >= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 8 $>= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 8:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8)
 1) (1, 2, 3, 4, 5, 6, 7, 8, 9)
 2) (2, 3, 4, 5, 6, 7, 8, 9, 10)
 3) (3, 4, 5, 6, 7, 8, 9, 10, 11)
 4) (4, 5, 6, 7, 8, 9, 10, 11, 12)
 5) (5, 6, 7, 8, 9, 10, 11, 12, 13)
 6) (6, 7, 8, 9, 10, 11, 12, 13, 14)
 7) (7, 8, 9, 10, 11, 12, 13, 14, 15)
 8) (8, 9, 10, 11, 12, 13, 14, 15, 16)
 9) (9, 10, 11, 12, 13, 14, 15, 16, 17)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 8 < 7, (s0, s1, s2, s3, s4, s5, s6, s7, s8))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 8 $< 7, (s0, s1, s2, s3, s4, s5, s6, s7, s8)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 8:i8) @< 7:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8)
 1) (1, 2, 3, 4, 5, 6, 7, 8, 9)
 2) (2, 3, 4, 5, 6, 7, 8, 9, 10)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 8 = 0, (#s4, s0, s1, s2, s3, s4, s5, s6, s7, s8))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 8 @= 0, (#s4, s0, s1, s2, s3, s4, s5, s6, s7, s8)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 8:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 8 >= 0, (#s4, s0, s1, s2, s3, s4, s5, s6, s7, s8))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 8 $>= 0, (#s4, s0, s1, s2, s3, s4, s5, s6, s7, s8)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 8:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8)
 1) (1, 1, 2, 3, 4, 5, 6, 7, 8, 9)
 2) (2, 2, 3, 4, 5, 6, 7, 8, 9, 10)
 3) (3, 3, 4, 5, 6, 7, 8, 9, 10, 11)
 4) (4, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 5) (5, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 6) (6, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 7) (7, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 8) (8, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 9) (9, 9, 10, 11, 12, 13, 14, 15, 16, 17)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 8 < 7, (#s4, s0, s1, s2, s3, s4, s5, s6, s7, s8))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 8 $< 7, (#s4, s0, s1, s2, s3, s4, s5, s6, s7, s8)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 8:i8) @< 7:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8)
 1) (1, 1, 2, 3, 4, 5, 6, 7, 8, 9)
 2) (2, 2, 3, 4, 5, 6, 7, 8, 9, 10)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 9 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 9 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 9:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 9 >= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 9 $>= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 9:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
 1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
 2) (2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
 3) (3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 4) (4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 5) (5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 6) (6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 7) (7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 8) (8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 9) (9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 9 < 8, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 9 $< 8, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 9:i8) @< 8:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
 1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
 2) (2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
 3) (3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 4) (4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 5) (5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 6) (6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 7) (7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 9 = 0, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 9 @= 0, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 9:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 9 >= 0, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 9 $>= 0, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 9:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
 1) (1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
 2) (2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
 3) (3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 4) (4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 5) (5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 6) (6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 7) (7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 8) (8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 9) (9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 9 < 8, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 9 $< 8, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 9:i8) @< 8:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
 1) (1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
 2) (2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
 3) (3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 4) (4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 5) (5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 6) (6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 7) (7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
 1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
 2) (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 3) (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 4) (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 5) (5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 6) (6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 7) (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 8) (8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 9) (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 9, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 9, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 9:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
 1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
 2) (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 3) (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
 1) (1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
 2) (2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 3) (3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 4) (4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 5) (5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 6) (6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 7) (7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 8) (8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 9) (9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 9, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 9, (#s5, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 9:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
 1) (1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
 2) (2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 3) (3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 11 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 11 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 11:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 11 >= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 11 $>= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 11:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
 1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 2) (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 3) (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 4) (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 5) (5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 6) (6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 7) (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 8) (8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
 9) (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 11 < 10, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 11 $< 10, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 11:i8) @< 10:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
 1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 2) (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 3) (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 4) (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 5) (5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 6) (6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 7) (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 8) (8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
 9) (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 11 = 0, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 11 @= 0, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 11:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 11 >= 0, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 11 $>= 0, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 11:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
 1) (1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 2) (2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 3) (3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 4) (4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 5) (5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 6) (6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 7) (7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 8) (8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
 9) (9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 11 < 10, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 11 $< 10, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 11:i8) @< 10:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
 1) (1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 2) (2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 3) (3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 4) (4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 5) (5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 6) (6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 7) (7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 8) (8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
 9) (9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 12 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 12 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 12:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 12 >= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 12 $>= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 12:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 2) (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 3) (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 4) (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 5) (5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 6) (6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 7) (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
 8) (8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
 9) (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 12 < 11, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 12 $< 11, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 12:i8) @< 11:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 2) (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 3) (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 4) (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 12 = 0, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 12 @= 0, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 12:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 12 >= 0, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 12 $>= 0, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 12:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 1) (1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 2) (2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 3) (3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 4) (4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 5) (5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 6) (6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 7) (7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
 8) (8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
 9) (9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 12 < 11, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 12 $< 11, (#s6, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 12:i8) @< 11:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
 1) (1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 2) (2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 3) (3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 4) (4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 13 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 13 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 13:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 13 >= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 13 $>= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 13:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 2) (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 3) (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 4) (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 5) (5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 6) (6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
 7) (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
 8) (8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)
 9) (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 13 < 12, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 13 $< 12, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 13:i8) @< 12:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 2) (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 3) (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 4) (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 5) (5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 6) (6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
 7) (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
 8) (8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)
 9) (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 13 = 0, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 13 @= 0, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 13:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 13 >= 0, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 13 $>= 0, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 13:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 1) (1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 2) (2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 3) (3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 4) (4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 5) (5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 6) (6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
 7) (7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
 8) (8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)
 9) (9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 13 < 12, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 13 $< 12, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 13:i8) @< 12:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
 1) (1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 2) (2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 3) (3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 4) (4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 5) (5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 6) (6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
 7) (7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
 8) (8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)
 9) (9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 14 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 14 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 14:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 14 >= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 14 $>= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 14:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 2) (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 3) (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 4) (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 5) (5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
 6) (6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
 7) (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)
 8) (8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
 9) (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 14 < 13, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 14 $< 13, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 14:i8) @< 13:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 2) (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 3) (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 4) (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 5) (5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 14 = 0, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 14 @= 0, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [map:16] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 14:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 14 >= 0, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 14 $>= 0, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [map:16] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 14:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 1) (1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 2) (2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 3) (3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 4) (4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 5) (5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
 6) (6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
 7) (7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)
 8) (8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
 9) (9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 14 < 13, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 14 $< 13, (#s7, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [map:16] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 14:i8) @< 13:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
 1) (1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 2) (2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 3) (3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 4) (4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 5) (5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 15 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 15 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 15:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 15 >= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15))
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 15 $>= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 15:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 2) (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 3) (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 4) (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
 5) (5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
 6) (6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)
 7) (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
 8) (8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
 9) (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24)
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 15 < 14, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15))
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 15 $< 14, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 15:i8) @< 14:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
Func sig: () to (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
Sequence: Seq<(i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8)>
 0) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)
 1) (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
 2) (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)
 3) (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)
 4) (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
 5) (5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
 6) (6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)
 7) (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)
 8) (8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)
 9) (9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24)
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 15 = 0, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15)) // Fails
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 15 @= 0, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [map:16] Call(∂.Range(14:i8, 24:i8):i8*), [map:17] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)), 15:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 15 >= 0, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15)) // Fails
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 15 $>= 0, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [map:16] Call(∂.Range(14:i8, 24:i8):i8*), [map:17] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)), 15:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 15 < 14, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15)) // Fails
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 15 $< 14, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [map:16] Call(∂.Range(14:i8, 24:i8):i8*), [map:17] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)), 15:i8) @< 14:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), s16:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15+s16) mod 16 = 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) // Fails
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), s16 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15 + s16) mod 16 @= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [map:17] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)), 16:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), s16:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15+s16) mod 16 >= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) // Fails
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), s16 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15 + s16) mod 16 $>= 0, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [map:17] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)), 16:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), s16:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15+s16) mod 16 < 15, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) // Fails
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), s16 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15 + s16) mod 16 $< 15, (s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(0:i8, 10:i8):i8*), [map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [map:17] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)), 16:i8) @< 15:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), s16:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15+s16) mod 16 = 0, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) // Fails
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), s16 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15 + s16) mod 16 @= 0, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [map:16] Call(∂.Range(14:i8, 24:i8):i8*), [map:17] Call(∂.Range(15:i8, 25:i8):i8*), [map:18] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17), Scope(18)), 16:i8) @= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17), Scope(18)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEachWhile(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), s16:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15+s16) mod 16 >= 0, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) // Fails
ForEachWhile(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), s16 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15 + s16) mod 16 $>= 0, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [map:16] Call(∂.Range(14:i8, 24:i8):i8*), [map:17] Call(∂.Range(15:i8, 25:i8):i8*), [map:18] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17), Scope(18)), 16:i8) @>= 0:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17), Scope(18)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###
> ForEach(s0:Range(0, 10), s1:Range(1, 11), s2:Range(2, 12), s3:Range(3, 13), s4:Range(4, 14), s5:Range(5, 15), s6:Range(6, 16), s7:Range(7, 17), s8:Range(8, 18), s9:Range(9, 19), s10:Range(10, 20), s11:Range(11, 21), s12:Range(12, 22), s13:Range(13, 23), s14:Range(14, 24), s15:Range(15, 25), s16:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15+s16) mod 16 < 15, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) // Fails
ForEach(s0 : Range(0, 10), s1 : Range(1, 11), s2 : Range(2, 12), s3 : Range(3, 13), s4 : Range(4, 14), s5 : Range(5, 15), s6 : Range(6, 16), s7 : Range(7, 17), s8 : Range(8, 18), s9 : Range(9, 19), s10 : Range(10, 20), s11 : Range(11, 21), s12 : Range(12, 22), s13 : Range(13, 23), s14 : Range(14, 24), s15 : Range(15, 25), s16 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15 + s16) mod 16 $< 15, (#s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)) : (i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*
BndKind:Call, Type:(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(0:i8, 10:i8):i8*), [map:3] Call(∂.Range(1:i8, 11:i8):i8*), [map:4] Call(∂.Range(2:i8, 12:i8):i8*), [map:5] Call(∂.Range(3:i8, 13:i8):i8*), [map:6] Call(∂.Range(4:i8, 14:i8):i8*), [map:7] Call(∂.Range(5:i8, 15:i8):i8*), [map:8] Call(∂.Range(6:i8, 16:i8):i8*), [map:9] Call(∂.Range(7:i8, 17:i8):i8*), [map:10] Call(∂.Range(8:i8, 18:i8):i8*), [map:11] Call(∂.Range(9:i8, 19:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 21:i8):i8*), [map:14] Call(∂.Range(12:i8, 22:i8):i8*), [map:15] Call(∂.Range(13:i8, 23:i8):i8*), [map:16] Call(∂.Range(14:i8, 24:i8):i8*), [map:17] Call(∂.Range(15:i8, 25:i8):i8*), [map:18] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17), Scope(18)), 16:i8) @< 15:i8), (Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16), Scope(17), Scope(18)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)):(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)*))
*** NYI Exception: 'More than 16 parameters used'
###

**** New definitions: e, type: i8*

> e * Range(2, 12)
e * Range(2, 12) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), Mul(Scope(1), Scope(2))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * e
Range(1, 11) * e : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), Mul(Scope(1), Scope(2))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> e * Range(2, 12) * Range(3, 13)
e * Range(2, 12) * Range(3, 13) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), Mul(Scope(1), Scope(2), Scope(3))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * e * Range(3, 13)
Range(1, 11) * e * Range(3, 13) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), Mul(Scope(1), Scope(2), Scope(3))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * e
Range(1, 11) * Range(2, 12) * e : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), Mul(Scope(1), Scope(2), Scope(3))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> e * Range(2, 12) * Range(3, 13) * Range(4, 14)
e * Range(2, 12) * Range(3, 13) * Range(4, 14) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * e * Range(3, 13) * Range(4, 14)
Range(1, 11) * e * Range(3, 13) * Range(4, 14) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * e * Range(4, 14)
Range(1, 11) * Range(2, 12) * e * Range(4, 14) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * e
Range(1, 11) * Range(2, 12) * Range(3, 13) * e : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), Mul(Scope(1), Scope(2), Scope(3), Scope(4))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15)
e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15)
Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15)
Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15)
Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16)
e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16)
Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16)
Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16)
Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17)
e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17)
Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17)
Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17)
Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18)
e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18)
Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18)
Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18)
Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19)
e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19)
Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19)
Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19)
Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) * Range(9, 19)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) * Range(9, 19) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) * Range(9, 19)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) * Range(9, 19) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e * Range(9, 19)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e * Range(9, 19) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * e
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * e : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20)
e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20)
Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20)
Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20)
Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) * Range(9, 19) * Range(10, 20)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) * Range(9, 19) * Range(10, 20) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e * Range(9, 19) * Range(10, 20)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e * Range(9, 19) * Range(10, 20) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * e * Range(10, 20)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * e * Range(10, 20) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * e
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * e : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21)
e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21)
Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21)
Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21)
Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e * Range(9, 19) * Range(10, 20) * Range(11, 21)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e * Range(9, 19) * Range(10, 20) * Range(11, 21) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * e * Range(10, 20) * Range(11, 21)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * e * Range(10, 20) * Range(11, 21) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * e * Range(11, 21)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * e * Range(11, 21) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * e
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * e : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22)
e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22)
Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22)
Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22)
Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * e * Range(10, 20) * Range(11, 21) * Range(12, 22)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * e * Range(10, 20) * Range(11, 21) * Range(12, 22) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * e * Range(11, 21) * Range(12, 22)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * e * Range(11, 21) * Range(12, 22) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * e * Range(12, 22)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * e * Range(12, 22) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * e
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * e : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23)
e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23)
Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23)
Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23)
Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * e * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * e * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * e * Range(11, 21) * Range(12, 22) * Range(13, 23)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * e * Range(11, 21) * Range(12, 22) * Range(13, 23) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * e * Range(12, 22) * Range(13, 23)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * e * Range(12, 22) * Range(13, 23) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * e * Range(13, 23)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * e * Range(13, 23) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * e
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * e : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24)
e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24)
Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24)
Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24)
Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * e * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * e * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * e * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * e * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * e * Range(12, 22) * Range(13, 23) * Range(14, 24)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * e * Range(12, 22) * Range(13, 23) * Range(14, 24) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * e * Range(13, 23) * Range(14, 24)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * e * Range(13, 23) * Range(14, 24) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * e * Range(14, 24)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * e * Range(14, 24) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * e
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * e : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25)
e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25)
Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25)
Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25)
Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * e * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * e * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * e * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * e * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * e * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * e * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * e * Range(13, 23) * Range(14, 24) * Range(15, 25)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * e * Range(13, 23) * Range(14, 24) * Range(15, 25) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * e * Range(14, 24) * Range(15, 25)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * e * Range(14, 24) * Range(15, 25) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * e * Range(15, 25)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * e * Range(15, 25) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * e
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * e : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Global(e), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26)
e * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26)
Range(1, 11) * e * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26)
Range(1, 11) * Range(2, 12) * e * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26)
Range(1, 11) * Range(2, 12) * Range(3, 13) * e * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * e * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * e * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * e * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * e * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * e * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * e * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * e * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * e * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * e * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * e * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * e * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * e * Range(13, 23) * Range(14, 24) * Range(15, 25) * Range(16, 26) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * e * Range(14, 24) * Range(15, 25) * Range(16, 26)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * e * Range(14, 24) * Range(15, 25) * Range(16, 26) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * e * Range(15, 25) * Range(16, 26)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * e * Range(15, 25) * Range(16, 26) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * e * Range(16, 26)
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * e * Range(16, 26) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Global(e), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * e
Range(1, 11) * Range(2, 12) * Range(3, 13) * Range(4, 14) * Range(5, 15) * Range(6, 16) * Range(7, 17) * Range(8, 18) * Range(9, 19) * Range(10, 20) * Range(11, 21) * Range(12, 22) * Range(13, 23) * Range(14, 24) * Range(15, 25) * e : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Global(e), Mul(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16))):i8*))
Func sig: (e:i8*) to i8*
Type: <null>, Value: <null>
###
> ForEach(s0:e, (s0, "Should not appear"))
ForEach(s0 : e, (s0, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Global(e), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, (#s0, s0, "Should not appear"))
ForEach(s0 : e, (#s0, s0, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), (Scope(1), Scope(2), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, (s0) mod 10 = 0, "Should not appear")
ForEachIf(s0 : e, s0 mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [if] Cmp(IntMod(Scope(1), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, [if] (s0) mod 10 = 0, "Should not appear")
ForEach(s0 : e, [if] s0 mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [if] Cmp(IntMod(Scope(1), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, (s0) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : e, s0 mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [while] Cmp(IntMod(Scope(1), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, [while] (s0) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : e, [while] s0 mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [while] Cmp(IntMod(Scope(1), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:e, [while] (s0) mod 10 < 5, "Should not appear")
ForEach(s0 : e, [while] s0 mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [while] Cmp(IntMod(Scope(1), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, (s0) mod 10 = 0, (#s0, "Should not appear"))
ForEachIf(s0 : e, s0 mod 10 @= 0, (#s0, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [if] Cmp(IntMod(Scope(2), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, [if] (s0) mod 10 = 0, (#s0, "Should not appear"))
ForEach(s0 : e, [if] s0 mod 10 @= 0, (#s0, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [if] Cmp(IntMod(Scope(2), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, (s0) mod 10 = 0, (#s0, "Should not appear"))
ForEachWhile(s0 : e, s0 mod 10 @= 0, (#s0, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [while] Cmp(IntMod(Scope(2), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, [while] (s0) mod 10 >= 0, (#s0, "Should not appear"))
ForEachWhile(s0 : e, [while] s0 mod 10 $>= 0, (#s0, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [while] Cmp(IntMod(Scope(2), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, [while] (s0) mod 10 < 5, (#s0, "Should not appear"))
ForEach(s0 : e, [while] s0 mod 10 $< 5, (#s0, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [while] Cmp(IntMod(Scope(2), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), (s0+s1, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), (s0 + s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), (Add(Scope(1), Scope(2)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), (#s1, s0+s1, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), (#s1, s0 + s1, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), (Scope(1), Add(Scope(2), Scope(3)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), (s0+s1) mod 10 = 0, "Should not appear")
ForEachIf(s0 : e, s1 : Range(2, 12), (s0 + s1) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), [if] (s0+s1) mod 10 = 0, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), [if] (s0 + s1) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), (s0+s1) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), (s0 + s1) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), [while] (s0+s1) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), [while] (s0 + s1) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), [while] (s0+s1) mod 10 < 5, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), [while] (s0 + s1) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), (s0+s1) mod 10 = 0, (#s1, "Should not appear"))
ForEachIf(s0 : e, s1 : Range(2, 12), (s0 + s1) mod 10 @= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), [if] (s0+s1) mod 10 = 0, (#s1, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), [if] (s0 + s1) mod 10 @= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), (s0+s1) mod 10 = 0, (#s1, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), (s0 + s1) mod 10 @= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), [while] (s0+s1) mod 10 >= 0, (#s1, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), [while] (s0 + s1) mod 10 $>= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), [while] (s0+s1) mod 10 < 5, (#s1, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), [while] (s0 + s1) mod 10 $< 5, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, (s0+s1, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, (s0 + s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), (Add(Scope(1), Scope(2)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, (#s1, s0+s1, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, (#s1, s0 + s1, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), (Scope(1), Add(Scope(2), Scope(3)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, (s0+s1) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : e, (s0 + s1) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, [if] (s0+s1) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, [if] (s0 + s1) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, (s0+s1) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, (s0 + s1) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, [while] (s0+s1) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, [while] (s0 + s1) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, [while] (s0+s1) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, [while] (s0 + s1) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, (s0+s1) mod 10 = 0, (#s1, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : e, (s0 + s1) mod 10 @= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, [if] (s0+s1) mod 10 = 0, (#s1, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, [if] (s0 + s1) mod 10 @= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, (s0+s1) mod 10 = 0, (#s1, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, (s0 + s1) mod 10 @= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, [while] (s0+s1) mod 10 >= 0, (#s1, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, [while] (s0 + s1) mod 10 $>= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, [while] (s0+s1) mod 10 < 5, (#s1, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, [while] (s0 + s1) mod 10 $< 5, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), (s0+s1+s2, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), (s0 + s1 + s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), (Add(Scope(1), Scope(2), Scope(3)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), (#s1, s0+s1+s2, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), (#s1, s0 + s1 + s2, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), (s0+s1+s2) mod 10 = 0, "Should not appear")
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), (s0 + s1 + s2) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), [if] (s0+s1+s2) mod 10 = 0, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), [if] (s0 + s1 + s2) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), (s0+s1+s2) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), (s0 + s1 + s2) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), [while] (s0+s1+s2) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), [while] (s0 + s1 + s2) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), [while] (s0+s1+s2) mod 10 < 5, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), [while] (s0 + s1 + s2) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), (s0+s1+s2) mod 10 = 0, (#s1, "Should not appear"))
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), (s0 + s1 + s2) mod 10 @= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), [if] (s0+s1+s2) mod 10 = 0, (#s1, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), [if] (s0 + s1 + s2) mod 10 @= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), (s0+s1+s2) mod 10 = 0, (#s1, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), (s0 + s1 + s2) mod 10 @= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), [while] (s0+s1+s2) mod 10 >= 0, (#s1, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), [while] (s0 + s1 + s2) mod 10 $>= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), [while] (s0+s1+s2) mod 10 < 5, (#s1, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), [while] (s0 + s1 + s2) mod 10 $< 5, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), (s0+s1+s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), (s0 + s1 + s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), (Add(Scope(1), Scope(2), Scope(3)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), (#s1, s0+s1+s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), (#s1, s0 + s1 + s2, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), (s0+s1+s2) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), (s0 + s1 + s2) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), [if] (s0+s1+s2) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), [if] (s0 + s1 + s2) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), (s0+s1+s2) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), (s0 + s1 + s2) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), [while] (s0+s1+s2) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), [while] (s0 + s1 + s2) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), [while] (s0+s1+s2) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), [while] (s0 + s1 + s2) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), (s0+s1+s2) mod 10 = 0, (#s1, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), (s0 + s1 + s2) mod 10 @= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), [if] (s0+s1+s2) mod 10 = 0, (#s1, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), [if] (s0 + s1 + s2) mod 10 @= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), (s0+s1+s2) mod 10 = 0, (#s1, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), (s0 + s1 + s2) mod 10 @= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), [while] (s0+s1+s2) mod 10 >= 0, (#s1, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), [while] (s0 + s1 + s2) mod 10 $>= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), [while] (s0+s1+s2) mod 10 < 5, (#s1, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), [while] (s0 + s1 + s2) mod 10 $< 5, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, (s0+s1+s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, (s0 + s1 + s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), (Add(Scope(1), Scope(2), Scope(3)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, (#s1, s0+s1+s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, (#s1, s0 + s1 + s2, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), (Scope(1), Add(Scope(2), Scope(3), Scope(4)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, (s0+s1+s2) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, (s0 + s1 + s2) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, [if] (s0+s1+s2) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, [if] (s0 + s1 + s2) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, (s0+s1+s2) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, (s0 + s1 + s2) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, [while] (s0+s1+s2) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, [while] (s0 + s1 + s2) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, [while] (s0+s1+s2) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, [while] (s0 + s1 + s2) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, (s0+s1+s2) mod 10 = 0, (#s1, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, (s0 + s1 + s2) mod 10 @= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, [if] (s0+s1+s2) mod 10 = 0, (#s1, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, [if] (s0 + s1 + s2) mod 10 @= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, (s0+s1+s2) mod 10 = 0, (#s1, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, (s0 + s1 + s2) mod 10 @= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, [while] (s0+s1+s2) mod 10 >= 0, (#s1, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, [while] (s0 + s1 + s2) mod 10 $>= 0, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, [while] (s0+s1+s2) mod 10 < 5, (#s1, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, [while] (s0 + s1 + s2) mod 10 $< 5, (#s1, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), (s0+s1+s2+s3, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), (s0 + s1 + s2 + s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), (#s2, s0+s1+s2+s3, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), (#s2, s0 + s1 + s2 + s3, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), (s0+s1+s2+s3) mod 10 = 0, "Should not appear")
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), (s0 + s1 + s2 + s3) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), [if] (s0+s1+s2+s3) mod 10 = 0, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), [if] (s0 + s1 + s2 + s3) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), (s0+s1+s2+s3) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), (s0 + s1 + s2 + s3) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), [while] (s0+s1+s2+s3) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), [while] (s0 + s1 + s2 + s3) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), [while] (s0+s1+s2+s3) mod 10 < 5, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), [while] (s0 + s1 + s2 + s3) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), (s0+s1+s2+s3) mod 10 = 0, (#s2, "Should not appear"))
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), (s0 + s1 + s2 + s3) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), [if] (s0+s1+s2+s3) mod 10 = 0, (#s2, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), [if] (s0 + s1 + s2 + s3) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), (s0+s1+s2+s3) mod 10 = 0, (#s2, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), (s0 + s1 + s2 + s3) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), [while] (s0+s1+s2+s3) mod 10 >= 0, (#s2, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), [while] (s0 + s1 + s2 + s3) mod 10 $>= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), [while] (s0+s1+s2+s3) mod 10 < 5, (#s2, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), [while] (s0 + s1 + s2 + s3) mod 10 $< 5, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), (s0+s1+s2+s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), (s0 + s1 + s2 + s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), (#s2, s0+s1+s2+s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), (#s2, s0 + s1 + s2 + s3, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), (s0+s1+s2+s3) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), (s0 + s1 + s2 + s3) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), [if] (s0+s1+s2+s3) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), [if] (s0 + s1 + s2 + s3) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), (s0+s1+s2+s3) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), (s0 + s1 + s2 + s3) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), [while] (s0+s1+s2+s3) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), [while] (s0 + s1 + s2 + s3) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), [while] (s0+s1+s2+s3) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), [while] (s0 + s1 + s2 + s3) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), (s0+s1+s2+s3) mod 10 = 0, (#s2, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), (s0 + s1 + s2 + s3) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), [if] (s0+s1+s2+s3) mod 10 = 0, (#s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), [if] (s0 + s1 + s2 + s3) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), (s0+s1+s2+s3) mod 10 = 0, (#s2, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), (s0 + s1 + s2 + s3) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), [while] (s0+s1+s2+s3) mod 10 >= 0, (#s2, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), [while] (s0 + s1 + s2 + s3) mod 10 $>= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), [while] (s0+s1+s2+s3) mod 10 < 5, (#s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), [while] (s0 + s1 + s2 + s3) mod 10 $< 5, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), (s0+s1+s2+s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), (s0 + s1 + s2 + s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), (#s2, s0+s1+s2+s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), (#s2, s0 + s1 + s2 + s3, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), (s0+s1+s2+s3) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), (s0 + s1 + s2 + s3) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), [if] (s0+s1+s2+s3) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), [if] (s0 + s1 + s2 + s3) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), (s0+s1+s2+s3) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), (s0 + s1 + s2 + s3) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), [while] (s0+s1+s2+s3) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), [while] (s0 + s1 + s2 + s3) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), [while] (s0+s1+s2+s3) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), [while] (s0 + s1 + s2 + s3) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), (s0+s1+s2+s3) mod 10 = 0, (#s2, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), (s0 + s1 + s2 + s3) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), [if] (s0+s1+s2+s3) mod 10 = 0, (#s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), [if] (s0 + s1 + s2 + s3) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), (s0+s1+s2+s3) mod 10 = 0, (#s2, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), (s0 + s1 + s2 + s3) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), [while] (s0+s1+s2+s3) mod 10 >= 0, (#s2, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), [while] (s0 + s1 + s2 + s3) mod 10 $>= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), [while] (s0+s1+s2+s3) mod 10 < 5, (#s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), [while] (s0 + s1 + s2 + s3) mod 10 $< 5, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, (s0+s1+s2+s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, (s0 + s1 + s2 + s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), (Add(Scope(1), Scope(2), Scope(3), Scope(4)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, (#s2, s0+s1+s2+s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, (#s2, s0 + s1 + s2 + s3, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, (s0+s1+s2+s3) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, (s0 + s1 + s2 + s3) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, [if] (s0+s1+s2+s3) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, [if] (s0 + s1 + s2 + s3) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, (s0+s1+s2+s3) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, (s0 + s1 + s2 + s3) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, [while] (s0+s1+s2+s3) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, [while] (s0 + s1 + s2 + s3) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, [while] (s0+s1+s2+s3) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, [while] (s0 + s1 + s2 + s3) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, (s0+s1+s2+s3) mod 10 = 0, (#s2, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, (s0 + s1 + s2 + s3) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, [if] (s0+s1+s2+s3) mod 10 = 0, (#s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, [if] (s0 + s1 + s2 + s3) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, (s0+s1+s2+s3) mod 10 = 0, (#s2, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, (s0 + s1 + s2 + s3) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, [while] (s0+s1+s2+s3) mod 10 >= 0, (#s2, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, [while] (s0 + s1 + s2 + s3) mod 10 $>= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, [while] (s0+s1+s2+s3) mod 10 < 5, (#s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, [while] (s0 + s1 + s2 + s3) mod 10 $< 5, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), (s0+s1+s2+s3+s4, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), (#s2, s0+s1+s2+s3+s4, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), (#s2, s0 + s1 + s2 + s3 + s4, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), (s0+s1+s2+s3+s4) mod 10 = 0, "Should not appear")
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), [if] (s0+s1+s2+s3+s4) mod 10 = 0, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), [if] (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), (s0+s1+s2+s3+s4) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), [while] (s0+s1+s2+s3+s4) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), [while] (s0+s1+s2+s3+s4) mod 10 < 5, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), (s0+s1+s2+s3+s4) mod 10 = 0, (#s2, "Should not appear"))
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), [if] (s0+s1+s2+s3+s4) mod 10 = 0, (#s2, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), [if] (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), (s0+s1+s2+s3+s4) mod 10 = 0, (#s2, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), [while] (s0+s1+s2+s3+s4) mod 10 >= 0, (#s2, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4) mod 10 $>= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), [while] (s0+s1+s2+s3+s4) mod 10 < 5, (#s2, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4) mod 10 $< 5, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), (s0+s1+s2+s3+s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), (#s2, s0+s1+s2+s3+s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), (#s2, s0 + s1 + s2 + s3 + s4, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), (s0+s1+s2+s3+s4) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), [if] (s0+s1+s2+s3+s4) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), [if] (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), (s0+s1+s2+s3+s4) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), [while] (s0+s1+s2+s3+s4) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), [while] (s0+s1+s2+s3+s4) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), (s0+s1+s2+s3+s4) mod 10 = 0, (#s2, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), [if] (s0+s1+s2+s3+s4) mod 10 = 0, (#s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), [if] (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), (s0+s1+s2+s3+s4) mod 10 = 0, (#s2, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), [while] (s0+s1+s2+s3+s4) mod 10 >= 0, (#s2, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4) mod 10 $>= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), [while] (s0+s1+s2+s3+s4) mod 10 < 5, (#s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4) mod 10 $< 5, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), (s0+s1+s2+s3+s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), (#s2, s0+s1+s2+s3+s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), (#s2, s0 + s1 + s2 + s3 + s4, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), (s0+s1+s2+s3+s4) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), [if] (s0+s1+s2+s3+s4) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), [if] (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), (s0+s1+s2+s3+s4) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), [while] (s0+s1+s2+s3+s4) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), [while] (s0+s1+s2+s3+s4) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), (s0+s1+s2+s3+s4) mod 10 = 0, (#s2, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), [if] (s0+s1+s2+s3+s4) mod 10 = 0, (#s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), [if] (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), (s0+s1+s2+s3+s4) mod 10 = 0, (#s2, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), [while] (s0+s1+s2+s3+s4) mod 10 >= 0, (#s2, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4) mod 10 $>= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), [while] (s0+s1+s2+s3+s4) mod 10 < 5, (#s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4) mod 10 $< 5, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), (s0+s1+s2+s3+s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), (#s2, s0+s1+s2+s3+s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), (#s2, s0 + s1 + s2 + s3 + s4, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), (s0+s1+s2+s3+s4) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), [if] (s0+s1+s2+s3+s4) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), [if] (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), (s0+s1+s2+s3+s4) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), [while] (s0+s1+s2+s3+s4) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), [while] (s0+s1+s2+s3+s4) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), (s0+s1+s2+s3+s4) mod 10 = 0, (#s2, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), [if] (s0+s1+s2+s3+s4) mod 10 = 0, (#s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), [if] (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), (s0+s1+s2+s3+s4) mod 10 = 0, (#s2, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), [while] (s0+s1+s2+s3+s4) mod 10 >= 0, (#s2, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4) mod 10 $>= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), [while] (s0+s1+s2+s3+s4) mod 10 < 5, (#s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), [while] (s0 + s1 + s2 + s3 + s4) mod 10 $< 5, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, (s0+s1+s2+s3+s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, (s0 + s1 + s2 + s3 + s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, (#s2, s0+s1+s2+s3+s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, (#s2, s0 + s1 + s2 + s3 + s4, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, (s0+s1+s2+s3+s4) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, [if] (s0+s1+s2+s3+s4) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, [if] (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, (s0+s1+s2+s3+s4) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, [while] (s0+s1+s2+s3+s4) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, [while] (s0 + s1 + s2 + s3 + s4) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, [while] (s0+s1+s2+s3+s4) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, [while] (s0 + s1 + s2 + s3 + s4) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, (s0+s1+s2+s3+s4) mod 10 = 0, (#s2, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, [if] (s0+s1+s2+s3+s4) mod 10 = 0, (#s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, [if] (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, (s0+s1+s2+s3+s4) mod 10 = 0, (#s2, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, (s0 + s1 + s2 + s3 + s4) mod 10 @= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, [while] (s0+s1+s2+s3+s4) mod 10 >= 0, (#s2, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, [while] (s0 + s1 + s2 + s3 + s4) mod 10 $>= 0, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, [while] (s0+s1+s2+s3+s4) mod 10 < 5, (#s2, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, [while] (s0 + s1 + s2 + s3 + s4) mod 10 $< 5, (#s2, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (#s3, s0+s1+s2+s3+s4+s5, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (#s3, s0 + s1 + s2 + s3 + s4 + s5, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [if] (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [if] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 < 5, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [if] (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [if] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 >= 0, (#s3, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $>= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 < 5, (#s3, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $< 5, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (#s3, s0+s1+s2+s3+s4+s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (#s3, s0 + s1 + s2 + s3 + s4 + s5, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [if] (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [if] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [if] (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [if] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 >= 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $>= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 < 5, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $< 5, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (#s3, s0+s1+s2+s3+s4+s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (#s3, s0 + s1 + s2 + s3 + s4 + s5, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [if] (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [if] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [if] (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [if] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 >= 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $>= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 < 5, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $< 5, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), (#s3, s0+s1+s2+s3+s4+s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), (#s3, s0 + s1 + s2 + s3 + s4 + s5, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), [if] (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), [if] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), [if] (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), [if] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 >= 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $>= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 < 5, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $< 5, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), (s0+s1+s2+s3+s4+s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), (#s3, s0+s1+s2+s3+s4+s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), (#s3, s0 + s1 + s2 + s3 + s4 + s5, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), [if] (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), [if] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), [if] (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), [if] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 >= 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $>= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), [while] (s0+s1+s2+s3+s4+s5) mod 10 < 5, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $< 5, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, (s0+s1+s2+s3+s4+s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, (s0 + s1 + s2 + s3 + s4 + s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, (#s3, s0+s1+s2+s3+s4+s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, (#s3, s0 + s1 + s2 + s3 + s4 + s5, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, [if] (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, (s0+s1+s2+s3+s4+s5) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, [while] (s0+s1+s2+s3+s4+s5) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, [while] (s0+s1+s2+s3+s4+s5) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, [if] (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, (s0+s1+s2+s3+s4+s5) mod 10 = 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, (s0 + s1 + s2 + s3 + s4 + s5) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, [while] (s0+s1+s2+s3+s4+s5) mod 10 >= 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $>= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, [while] (s0+s1+s2+s3+s4+s5) mod 10 < 5, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5) mod 10 $< 5, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (#s3, s0+s1+s2+s3+s4+s5+s6, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (#s3, s0 + s1 + s2 + s3 + s4 + s5 + s6, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [if] (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 < 5, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [if] (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 >= 0, (#s3, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $>= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 < 5, (#s3, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $< 5, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (#s3, s0+s1+s2+s3+s4+s5+s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (#s3, s0 + s1 + s2 + s3 + s4 + s5 + s6, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [if] (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [if] (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 >= 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $>= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 < 5, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $< 5, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (#s3, s0+s1+s2+s3+s4+s5+s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (#s3, s0 + s1 + s2 + s3 + s4 + s5 + s6, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [if] (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [if] (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 >= 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $>= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 < 5, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $< 5, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (#s3, s0+s1+s2+s3+s4+s5+s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (#s3, s0 + s1 + s2 + s3 + s4 + s5 + s6, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [if] (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [if] (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 >= 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $>= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 < 5, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $< 5, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), (#s3, s0+s1+s2+s3+s4+s5+s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), (#s3, s0 + s1 + s2 + s3 + s4 + s5 + s6, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), [if] (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), [if] (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 >= 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $>= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 < 5, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $< 5, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), (#s3, s0+s1+s2+s3+s4+s5+s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), (#s3, s0 + s1 + s2 + s3 + s4 + s5 + s6, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), [if] (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), [if] (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 >= 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $>= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 < 5, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $< 5, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, (s0+s1+s2+s3+s4+s5+s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, (#s3, s0+s1+s2+s3+s4+s5+s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, (#s3, s0 + s1 + s2 + s3 + s4 + s5 + s6, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, [if] (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, [if] (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, (s0+s1+s2+s3+s4+s5+s6) mod 10 = 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 @= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 >= 0, (#s3, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $>= 0, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, [while] (s0+s1+s2+s3+s4+s5+s6) mod 10 < 5, (#s3, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6) mod 10 $< 5, (#s3, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (#s4, s0+s1+s2+s3+s4+s5+s6+s7, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 < 5, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (#s4, s0+s1+s2+s3+s4+s5+s6+s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (#s4, s0+s1+s2+s3+s4+s5+s6+s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (#s4, s0+s1+s2+s3+s4+s5+s6+s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (#s4, s0+s1+s2+s3+s4+s5+s6+s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), (#s4, s0+s1+s2+s3+s4+s5+s6+s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), (#s4, s0+s1+s2+s3+s4+s5+s6+s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, (s0+s1+s2+s3+s4+s5+s6+s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, (#s4, s0+s1+s2+s3+s4+s5+s6+s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (#s4, s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (#s4, s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (#s4, s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (#s4, s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (#s4, s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (#s4, s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), (#s4, s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), (#s4, s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, (#s4, s0+s1+s2+s3+s4+s5+s6+s7+s8, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, (#s4, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 = 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 @= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 >= 0, (#s4, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $>= 0, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8) mod 10 < 5, (#s4, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8) mod 10 $< 5, (#s4, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, (#s5, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, (#s5, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 = 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 @= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 >= 0, (#s5, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $>= 0, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10) mod 10 < 5, (#s5, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) mod 10 $< 5, (#s5, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, (#s6, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, (#s6, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 = 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 @= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 >= 0, (#s6, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $>= 0, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12) mod 10 < 5, (#s6, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12) mod 10 $< 5, (#s6, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Global(e), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Global(e), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Global(e), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Global(e), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Global(e), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Global(e), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Global(e), [map:16] Call(∂.Range(15:i8, 25:i8):i8*), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Global(e), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, (#s7, s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, (#s7, s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14, "Should not appear")) : (i8, i8, s)*
BndKind:Call, Type:(i8, i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Global(e), (Scope(1), Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, i8, s)):(i8, i8, s)*))
Func sig: (e:i8*) to (i8, i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Global(e), [if] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (<ctx>:x, e:i8*) to (i8, s)*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 = 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 @= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 >= 0, (#s7, "Should not appear"))
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $>= 0, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14) mod 10 < 5, (#s7, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14) mod 10 $< 5, (#s7, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 11:i8):i8*), [map:3] Call(∂.Range(2:i8, 12:i8):i8*), [map:4] Call(∂.Range(3:i8, 13:i8):i8*), [map:5] Call(∂.Range(4:i8, 14:i8):i8*), [map:6] Call(∂.Range(5:i8, 15:i8):i8*), [map:7] Call(∂.Range(6:i8, 16:i8):i8*), [map:8] Call(∂.Range(7:i8, 17:i8):i8*), [map:9] Call(∂.Range(8:i8, 18:i8):i8*), [map:10] Call(∂.Range(9:i8, 19:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 21:i8):i8*), [map:13] Call(∂.Range(12:i8, 22:i8):i8*), [map:14] Call(∂.Range(13:i8, 23:i8):i8*), [map:15] Call(∂.Range(14:i8, 24:i8):i8*), [map:16] Global(e), [while] Cmp(IntMod(Add(Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), (Scope(1), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15, "Should not appear"))
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachIf(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:e, s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 < 5, "Should not appear")
ForEach(s0 : e, s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Global(e), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:e, s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : e, s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Global(e), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:e, s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : e, s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:e, s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : e, s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:e, s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : e, s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:e, s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : e, s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:e, s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : e, s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:e, s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : e, s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:e, s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : e, s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:e, s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : e, s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:e, s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : e, s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:e, s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : e, s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:e, s13:Range(14, 24), s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : e, s13 : Range(14, 24), s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), s15:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), s15 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:e, s14:Range(15, 25), s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : e, s14 : Range(15, 25), s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Global(e), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Global(e), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, s15:Range(16, 26), [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, s15 : Range(16, 26), [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Global(e), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, s15:Range(16, 26), (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, s15 : Range(16, 26), (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Global(e), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Global(e), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:e, s15:Range(16, 26), [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : e, s15 : Range(16, 26), [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Global(e), [map:16] Call(∂.Range(16:i8, 26:i8):i8*), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15, "Should not appear"))
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15, "Should not appear")) : (i8, s)*
BndKind:Call, Type:(i8, s)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Global(e), (Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), str(Should not appear)):(i8, s)):(i8, s)*))
Func sig: (e:i8*) to (i8, s)*
Type: <null>, Value: <null>
###
> ForEachIf(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachIf(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:e, [if] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : e, [if] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Global(e), [if] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (<ctx>:x, e:i8*) to s*
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:e, (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 = 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : e, (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 @= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEachWhile(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 >= 0, "Should not appear")
ForEachWhile(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $>= 0, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @>= 0:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
> ForEach(s0:Range(1, 11), s1:Range(2, 12), s2:Range(3, 13), s3:Range(4, 14), s4:Range(5, 15), s5:Range(6, 16), s6:Range(7, 17), s7:Range(8, 18), s8:Range(9, 19), s9:Range(10, 20), s10:Range(11, 21), s11:Range(12, 22), s12:Range(13, 23), s13:Range(14, 24), s14:Range(15, 25), s15:e, [while] (s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14+s15) mod 10 < 5, "Should not appear")
ForEach(s0 : Range(1, 11), s1 : Range(2, 12), s2 : Range(3, 13), s3 : Range(4, 14), s4 : Range(5, 15), s5 : Range(6, 16), s6 : Range(7, 17), s7 : Range(8, 18), s8 : Range(9, 19), s9 : Range(10, 20), s10 : Range(11, 21), s11 : Range(12, 22), s12 : Range(13, 23), s13 : Range(14, 24), s14 : Range(15, 25), s15 : e, [while] (s0 + s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15) mod 10 $< 5, "Should not appear") : s*
BndKind:Call, Type:s*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(1:i8, 11:i8):i8*), [map:2] Call(∂.Range(2:i8, 12:i8):i8*), [map:3] Call(∂.Range(3:i8, 13:i8):i8*), [map:4] Call(∂.Range(4:i8, 14:i8):i8*), [map:5] Call(∂.Range(5:i8, 15:i8):i8*), [map:6] Call(∂.Range(6:i8, 16:i8):i8*), [map:7] Call(∂.Range(7:i8, 17:i8):i8*), [map:8] Call(∂.Range(8:i8, 18:i8):i8*), [map:9] Call(∂.Range(9:i8, 19:i8):i8*), [map:10] Call(∂.Range(10:i8, 20:i8):i8*), [map:11] Call(∂.Range(11:i8, 21:i8):i8*), [map:12] Call(∂.Range(12:i8, 22:i8):i8*), [map:13] Call(∂.Range(13:i8, 23:i8):i8*), [map:14] Call(∂.Range(14:i8, 24:i8):i8*), [map:15] Call(∂.Range(15:i8, 25:i8):i8*), [map:16] Global(e), [while] Cmp(IntMod(Add(Scope(1), Scope(2), Scope(3), Scope(4), Scope(5), Scope(6), Scope(7), Scope(8), Scope(9), Scope(10), Scope(11), Scope(12), Scope(13), Scope(14), Scope(15), Scope(16)), 10:i8) @< 5:i8), str(Should not appear)):s*))
Func sig: (e:i8*) to s*
Type: <null>, Value: <null>
###
