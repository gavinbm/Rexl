**** New globals: {b:b, i8:i8, qi8:i8?, s:s}
**** New udf: Case, arity: 4

> "*** For i8, b, strict treats null differently."
"*** For i8, b, strict treats null differently." : s
BndKind:Str, Type:s, Bnd:(str(*** For i8, b, strict treats null differently.))
Func sig: () to s
Type: str, Value: *** For i8, b, strict treats null differently.
###
> Case(3  @=  5, Wrap(3)  @=  Wrap(5), 3  $=  5, Wrap(3)  $=  Wrap(5))
Case(3 @= 5, Wrap(3) @= Wrap(5), 3 $= 5, Wrap(3) $= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3  @<  5, Wrap(3)  @<  Wrap(5), 3  $<  5, Wrap(3)  $<  Wrap(5))
Case(3 @< 5, Wrap(3) @< Wrap(5), 3 $< 5, Wrap(3) $< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @< Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3  @<= 5, Wrap(3)  @<= Wrap(5), 3  $<= 5, Wrap(3)  $<= Wrap(5))
Case(3 @<= 5, Wrap(3) @<= Wrap(5), 3 $<= 5, Wrap(3) $<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @<= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3  @>  5, Wrap(3)  @>  Wrap(5), 3  $>  5, Wrap(3)  $>  Wrap(5))
Case(3 @> 5, Wrap(3) @> Wrap(5), 3 $> 5, Wrap(3) $> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @> Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3  @>= 5, Wrap(3)  @>= Wrap(5), 3  $>= 5, Wrap(3)  $>= Wrap(5))
Case(3 @>= 5, Wrap(3) @>= Wrap(5), 3 $>= 5, Wrap(3) $>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @>= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3 !@=  5, Wrap(3) !@=  Wrap(5), 3 !$=  5, Wrap(3) !$=  Wrap(5))
Case(3 !@= 5, Wrap(3) !@= Wrap(5), 3 !$= 5, Wrap(3) !$= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) !@= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3 !@<  5, Wrap(3) !@<  Wrap(5), 3 !$<  5, Wrap(3) !$<  Wrap(5))
Case(3 !@< 5, Wrap(3) !@< Wrap(5), 3 !$< 5, Wrap(3) !$< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @>= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3 !@<= 5, Wrap(3) !@<= Wrap(5), 3 !$<= 5, Wrap(3) !$<= Wrap(5))
Case(3 !@<= 5, Wrap(3) !@<= Wrap(5), 3 !$<= 5, Wrap(3) !$<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @> Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3 !@>  5, Wrap(3) !@>  Wrap(5), 3 !$>  5, Wrap(3) !$>  Wrap(5))
Case(3 !@> 5, Wrap(3) !@> Wrap(5), 3 !$> 5, Wrap(3) !$> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @<= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3 !@>= 5, Wrap(3) !@>= Wrap(5), 3 !$>= 5, Wrap(3) !$>= Wrap(5))
Case(3 !@>= 5, Wrap(3) !@>= Wrap(5), 3 !$>= 5, Wrap(3) !$>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @< Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3  @=  Null(5), Wrap(3)  @=  Wrap(Null(5)), 3  $=  Null(5), Wrap(3)  $=  Wrap(Null(5)))
Case(3 @= Null(5), Wrap(3) @= Wrap(Null(5)), 3 $= Null(5), Wrap(3) $= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3  @<  Null(5), Wrap(3)  @<  Wrap(Null(5)), 3  $<  Null(5), Wrap(3)  $<  Wrap(Null(5)))
Case(3 @< Null(5), Wrap(3) @< Wrap(Null(5)), 3 $< Null(5), Wrap(3) $< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @< Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:i8):i8) $< Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3  @<= Null(5), Wrap(3)  @<= Wrap(Null(5)), 3  $<= Null(5), Wrap(3)  $<= Wrap(Null(5)))
Case(3 @<= Null(5), Wrap(3) @<= Wrap(Null(5)), 3 $<= Null(5), Wrap(3) $<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @<= Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:i8):i8) $<= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3  @>  Null(5), Wrap(3)  @>  Wrap(Null(5)), 3  $>  Null(5), Wrap(3)  $>  Wrap(Null(5)))
Case(3 @> Null(5), Wrap(3) @> Wrap(Null(5)), 3 $> Null(5), Wrap(3) $> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @> Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:i8):i8) $> Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(3  @>= Null(5), Wrap(3)  @>= Wrap(Null(5)), 3  $>= Null(5), Wrap(3)  $>= Wrap(Null(5)))
Case(3 @>= Null(5), Wrap(3) @>= Wrap(Null(5)), 3 $>= Null(5), Wrap(3) $>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @>= Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:i8):i8) $>= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(3 !@=  Null(5), Wrap(3) !@=  Wrap(Null(5)), 3 !$=  Null(5), Wrap(3) !$=  Wrap(Null(5)))
Case(3 !@= Null(5), Wrap(3) !@= Wrap(Null(5)), 3 !$= Null(5), Wrap(3) !$= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) !@= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3 !@<  Null(5), Wrap(3) !@<  Wrap(Null(5)), 3 !$<  Null(5), Wrap(3) !$<  Wrap(Null(5)))
Case(3 !@< Null(5), Wrap(3) !@< Wrap(Null(5)), 3 !$< Null(5), Wrap(3) !$< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @>= Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:i8):i8) !$< Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3 !@<= Null(5), Wrap(3) !@<= Wrap(Null(5)), 3 !$<= Null(5), Wrap(3) !$<= Wrap(Null(5)))
Case(3 !@<= Null(5), Wrap(3) !@<= Wrap(Null(5)), 3 !$<= Null(5), Wrap(3) !$<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @> Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:i8):i8) !$<= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3 !@>  Null(5), Wrap(3) !@>  Wrap(Null(5)), 3 !$>  Null(5), Wrap(3) !$>  Wrap(Null(5)))
Case(3 !@> Null(5), Wrap(3) !@> Wrap(Null(5)), 3 !$> Null(5), Wrap(3) !$> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @<= Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:i8):i8) !$> Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(3 !@>= Null(5), Wrap(3) !@>= Wrap(Null(5)), 3 !$>= Null(5), Wrap(3) !$>= Wrap(Null(5)))
Case(3 !@>= Null(5), Wrap(3) !@>= Wrap(Null(5)), 3 !$>= Null(5), Wrap(3) !$>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @< Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:i8):i8) !$>= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(3  @=  Opt(5), Wrap(3)  @=  Wrap(Opt(5)), 3  $=  Opt(5), Wrap(3)  $=  Wrap(Opt(5)))
Case(3 @= Opt(5), Wrap(3) @= Wrap(Opt(5)), 3 $= Opt(5), Wrap(3) $= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3  @<  Opt(5), Wrap(3)  @<  Wrap(Opt(5)), 3  $<  Opt(5), Wrap(3)  $<  Wrap(Opt(5)))
Case(3 @< Opt(5), Wrap(3) @< Wrap(Opt(5)), 3 $< Opt(5), Wrap(3) $< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @< Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:i8):i8) $< Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3  @<= Opt(5), Wrap(3)  @<= Wrap(Opt(5)), 3  $<= Opt(5), Wrap(3)  $<= Wrap(Opt(5)))
Case(3 @<= Opt(5), Wrap(3) @<= Wrap(Opt(5)), 3 $<= Opt(5), Wrap(3) $<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @<= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:i8):i8) $<= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3  @>  Opt(5), Wrap(3)  @>  Wrap(Opt(5)), 3  $>  Opt(5), Wrap(3)  $>  Wrap(Opt(5)))
Case(3 @> Opt(5), Wrap(3) @> Wrap(Opt(5)), 3 $> Opt(5), Wrap(3) $> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @> Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:i8):i8) $> Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3  @>= Opt(5), Wrap(3)  @>= Wrap(Opt(5)), 3  $>= Opt(5), Wrap(3)  $>= Wrap(Opt(5)))
Case(3 @>= Opt(5), Wrap(3) @>= Wrap(Opt(5)), 3 $>= Opt(5), Wrap(3) $>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @>= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:i8):i8) $>= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3 !@=  Opt(5), Wrap(3) !@=  Wrap(Opt(5)), 3 !$=  Opt(5), Wrap(3) !$=  Wrap(Opt(5)))
Case(3 !@= Opt(5), Wrap(3) !@= Wrap(Opt(5)), 3 !$= Opt(5), Wrap(3) !$= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) !@= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3 !@<  Opt(5), Wrap(3) !@<  Wrap(Opt(5)), 3 !$<  Opt(5), Wrap(3) !$<  Wrap(Opt(5)))
Case(3 !@< Opt(5), Wrap(3) !@< Wrap(Opt(5)), 3 !$< Opt(5), Wrap(3) !$< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @>= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:i8):i8) !$< Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3 !@<= Opt(5), Wrap(3) !@<= Wrap(Opt(5)), 3 !$<= Opt(5), Wrap(3) !$<= Wrap(Opt(5)))
Case(3 !@<= Opt(5), Wrap(3) !@<= Wrap(Opt(5)), 3 !$<= Opt(5), Wrap(3) !$<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @> Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:i8):i8) !$<= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3 !@>  Opt(5), Wrap(3) !@>  Wrap(Opt(5)), 3 !$>  Opt(5), Wrap(3) !$>  Wrap(Opt(5)))
Case(3 !@> Opt(5), Wrap(3) !@> Wrap(Opt(5)), 3 !$> Opt(5), Wrap(3) !$> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @<= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:i8):i8) !$> Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3 !@>= Opt(5), Wrap(3) !@>= Wrap(Opt(5)), 3 !$>= Opt(5), Wrap(3) !$>= Wrap(Opt(5)))
Case(3 !@>= Opt(5), Wrap(3) !@>= Wrap(Opt(5)), 3 !$>= Opt(5), Wrap(3) !$>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:i8):i8) @< Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:i8):i8) !$>= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3)  @=  5, Wrap(Null(3))  @=  Wrap(5), Null(3)  $=  5, Wrap(Null(3))  $=  Wrap(5))
Case(Null(3) @= 5, Wrap(Null(3)) @= Wrap(5), Null(3) $= 5, Wrap(Null(3)) $= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3)  @<  5, Wrap(Null(3))  @<  Wrap(5), Null(3)  $<  5, Wrap(Null(3))  $<  Wrap(5))
Case(Null(3) @< 5, Wrap(Null(3)) @< Wrap(5), Null(3) $< 5, Wrap(Null(3)) $< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @< Call(∂.Test.Wrap(5:i8):i8)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) $< Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3)  @<= 5, Wrap(Null(3))  @<= Wrap(5), Null(3)  $<= 5, Wrap(Null(3))  $<= Wrap(5))
Case(Null(3) @<= 5, Wrap(Null(3)) @<= Wrap(5), Null(3) $<= 5, Wrap(Null(3)) $<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @<= Call(∂.Test.Wrap(5:i8):i8)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) $<= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3)  @>  5, Wrap(Null(3))  @>  Wrap(5), Null(3)  $>  5, Wrap(Null(3))  $>  Wrap(5))
Case(Null(3) @> 5, Wrap(Null(3)) @> Wrap(5), Null(3) $> 5, Wrap(Null(3)) $> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @> Call(∂.Test.Wrap(5:i8):i8)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) $> Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3)  @>= 5, Wrap(Null(3))  @>= Wrap(5), Null(3)  $>= 5, Wrap(Null(3))  $>= Wrap(5))
Case(Null(3) @>= 5, Wrap(Null(3)) @>= Wrap(5), Null(3) $>= 5, Wrap(Null(3)) $>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @>= Call(∂.Test.Wrap(5:i8):i8)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) $>= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3) !@=  5, Wrap(Null(3)) !@=  Wrap(5), Null(3) !$=  5, Wrap(Null(3)) !$=  Wrap(5))
Case(Null(3) !@= 5, Wrap(Null(3)) !@= Wrap(5), Null(3) !$= 5, Wrap(Null(3)) !$= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !@= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3) !@<  5, Wrap(Null(3)) !@<  Wrap(5), Null(3) !$<  5, Wrap(Null(3)) !$<  Wrap(5))
Case(Null(3) !@< 5, Wrap(Null(3)) !@< Wrap(5), Null(3) !$< 5, Wrap(Null(3)) !$< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @>= Call(∂.Test.Wrap(5:i8):i8)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !$< Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3) !@<= 5, Wrap(Null(3)) !@<= Wrap(5), Null(3) !$<= 5, Wrap(Null(3)) !$<= Wrap(5))
Case(Null(3) !@<= 5, Wrap(Null(3)) !@<= Wrap(5), Null(3) !$<= 5, Wrap(Null(3)) !$<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @> Call(∂.Test.Wrap(5:i8):i8)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !$<= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3) !@>  5, Wrap(Null(3)) !@>  Wrap(5), Null(3) !$>  5, Wrap(Null(3)) !$>  Wrap(5))
Case(Null(3) !@> 5, Wrap(Null(3)) !@> Wrap(5), Null(3) !$> 5, Wrap(Null(3)) !$> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @<= Call(∂.Test.Wrap(5:i8):i8)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !$> Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3) !@>= 5, Wrap(Null(3)) !@>= Wrap(5), Null(3) !$>= 5, Wrap(Null(3)) !$>= Wrap(5))
Case(Null(3) !@>= 5, Wrap(Null(3)) !@>= Wrap(5), Null(3) !$>= 5, Wrap(Null(3)) !$>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @< Call(∂.Test.Wrap(5:i8):i8)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !$>= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3)  @=  Null(5), Wrap(Null(3))  @=  Wrap(Null(5)), Null(3)  $=  Null(5), Wrap(Null(3))  $=  Wrap(Null(5)))
Case(Null(3) @= Null(5), Wrap(Null(3)) @= Wrap(Null(5)), Null(3) $= Null(5), Wrap(Null(3)) $= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @= Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) $= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3)  @<  Null(5), Wrap(Null(3))  @<  Wrap(Null(5)), Null(3)  $<  Null(5), Wrap(Null(3))  $<  Wrap(Null(5)))
Case(Null(3) @< Null(5), Wrap(Null(3)) @< Wrap(Null(5)), Null(3) $< Null(5), Wrap(Null(3)) $< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @< Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) $< Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3)  @<= Null(5), Wrap(Null(3))  @<= Wrap(Null(5)), Null(3)  $<= Null(5), Wrap(Null(3))  $<= Wrap(Null(5)))
Case(Null(3) @<= Null(5), Wrap(Null(3)) @<= Wrap(Null(5)), Null(3) $<= Null(5), Wrap(Null(3)) $<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @<= Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) $<= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3)  @>  Null(5), Wrap(Null(3))  @>  Wrap(Null(5)), Null(3)  $>  Null(5), Wrap(Null(3))  $>  Wrap(Null(5)))
Case(Null(3) @> Null(5), Wrap(Null(3)) @> Wrap(Null(5)), Null(3) $> Null(5), Wrap(Null(3)) $> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @> Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) $> Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3)  @>= Null(5), Wrap(Null(3))  @>= Wrap(Null(5)), Null(3)  $>= Null(5), Wrap(Null(3))  $>= Wrap(Null(5)))
Case(Null(3) @>= Null(5), Wrap(Null(3)) @>= Wrap(Null(5)), Null(3) $>= Null(5), Wrap(Null(3)) $>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @>= Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) $>= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3) !@=  Null(5), Wrap(Null(3)) !@=  Wrap(Null(5)), Null(3) !$=  Null(5), Wrap(Null(3)) !$=  Wrap(Null(5)))
Case(Null(3) !@= Null(5), Wrap(Null(3)) !@= Wrap(Null(5)), Null(3) !$= Null(5), Wrap(Null(3)) !$= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !@= Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !$= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3) !@<  Null(5), Wrap(Null(3)) !@<  Wrap(Null(5)), Null(3) !$<  Null(5), Wrap(Null(3)) !$<  Wrap(Null(5)))
Case(Null(3) !@< Null(5), Wrap(Null(3)) !@< Wrap(Null(5)), Null(3) !$< Null(5), Wrap(Null(3)) !$< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @>= Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !$< Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3) !@<= Null(5), Wrap(Null(3)) !@<= Wrap(Null(5)), Null(3) !$<= Null(5), Wrap(Null(3)) !$<= Wrap(Null(5)))
Case(Null(3) !@<= Null(5), Wrap(Null(3)) !@<= Wrap(Null(5)), Null(3) !$<= Null(5), Wrap(Null(3)) !$<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @> Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !$<= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3) !@>  Null(5), Wrap(Null(3)) !@>  Wrap(Null(5)), Null(3) !$>  Null(5), Wrap(Null(3)) !$>  Wrap(Null(5)))
Case(Null(3) !@> Null(5), Wrap(Null(3)) !@> Wrap(Null(5)), Null(3) !$> Null(5), Wrap(Null(3)) !$> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @<= Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !$> Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3) !@>= Null(5), Wrap(Null(3)) !@>= Wrap(Null(5)), Null(3) !$>= Null(5), Wrap(Null(3)) !$>= Wrap(Null(5)))
Case(Null(3) !@>= Null(5), Wrap(Null(3)) !@>= Wrap(Null(5)), Null(3) !$>= Null(5), Wrap(Null(3)) !$>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @< Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !$>= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3)  @=  Opt(5), Wrap(Null(3))  @=  Wrap(Opt(5)), Null(3)  $=  Opt(5), Wrap(Null(3))  $=  Wrap(Opt(5)))
Case(Null(3) @= Opt(5), Wrap(Null(3)) @= Wrap(Opt(5)), Null(3) $= Opt(5), Wrap(Null(3)) $= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) $= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3)  @<  Opt(5), Wrap(Null(3))  @<  Wrap(Opt(5)), Null(3)  $<  Opt(5), Wrap(Null(3))  $<  Wrap(Opt(5)))
Case(Null(3) @< Opt(5), Wrap(Null(3)) @< Wrap(Opt(5)), Null(3) $< Opt(5), Wrap(Null(3)) $< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @< Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) $< Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3)  @<= Opt(5), Wrap(Null(3))  @<= Wrap(Opt(5)), Null(3)  $<= Opt(5), Wrap(Null(3))  $<= Wrap(Opt(5)))
Case(Null(3) @<= Opt(5), Wrap(Null(3)) @<= Wrap(Opt(5)), Null(3) $<= Opt(5), Wrap(Null(3)) $<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @<= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) $<= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3)  @>  Opt(5), Wrap(Null(3))  @>  Wrap(Opt(5)), Null(3)  $>  Opt(5), Wrap(Null(3))  $>  Wrap(Opt(5)))
Case(Null(3) @> Opt(5), Wrap(Null(3)) @> Wrap(Opt(5)), Null(3) $> Opt(5), Wrap(Null(3)) $> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @> Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) $> Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3)  @>= Opt(5), Wrap(Null(3))  @>= Wrap(Opt(5)), Null(3)  $>= Opt(5), Wrap(Null(3))  $>= Wrap(Opt(5)))
Case(Null(3) @>= Opt(5), Wrap(Null(3)) @>= Wrap(Opt(5)), Null(3) $>= Opt(5), Wrap(Null(3)) $>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @>= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) $>= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3) !@=  Opt(5), Wrap(Null(3)) !@=  Wrap(Opt(5)), Null(3) !$=  Opt(5), Wrap(Null(3)) !$=  Wrap(Opt(5)))
Case(Null(3) !@= Opt(5), Wrap(Null(3)) !@= Wrap(Opt(5)), Null(3) !$= Opt(5), Wrap(Null(3)) !$= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !@= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !$= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3) !@<  Opt(5), Wrap(Null(3)) !@<  Wrap(Opt(5)), Null(3) !$<  Opt(5), Wrap(Null(3)) !$<  Wrap(Opt(5)))
Case(Null(3) !@< Opt(5), Wrap(Null(3)) !@< Wrap(Opt(5)), Null(3) !$< Opt(5), Wrap(Null(3)) !$< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @>= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !$< Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3) !@<= Opt(5), Wrap(Null(3)) !@<= Wrap(Opt(5)), Null(3) !$<= Opt(5), Wrap(Null(3)) !$<= Wrap(Opt(5)))
Case(Null(3) !@<= Opt(5), Wrap(Null(3)) !@<= Wrap(Opt(5)), Null(3) !$<= Opt(5), Wrap(Null(3)) !$<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @> Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !$<= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3) !@>  Opt(5), Wrap(Null(3)) !@>  Wrap(Opt(5)), Null(3) !$>  Opt(5), Wrap(Null(3)) !$>  Wrap(Opt(5)))
Case(Null(3) !@> Opt(5), Wrap(Null(3)) !@> Wrap(Opt(5)), Null(3) !$> Opt(5), Wrap(Null(3)) !$> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @<= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !$> Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3) !@>= Opt(5), Wrap(Null(3)) !@>= Wrap(Opt(5)), Null(3) !$>= Opt(5), Wrap(Null(3)) !$>= Wrap(Opt(5)))
Case(Null(3) !@>= Opt(5), Wrap(Null(3)) !@>= Wrap(Opt(5)), Null(3) !$>= Opt(5), Wrap(Null(3)) !$>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) @< Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:i8?):i8?) !$>= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3)  @=  5, Wrap(Opt(3))  @=  Wrap(5), Opt(3)  $=  5, Wrap(Opt(3))  $=  Wrap(5))
Case(Opt(3) @= 5, Wrap(Opt(3)) @= Wrap(5), Opt(3) $= 5, Wrap(Opt(3)) $= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3)  @<  5, Wrap(Opt(3))  @<  Wrap(5), Opt(3)  $<  5, Wrap(Opt(3))  $<  Wrap(5))
Case(Opt(3) @< 5, Wrap(Opt(3)) @< Wrap(5), Opt(3) $< 5, Wrap(Opt(3)) $< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @< Call(∂.Test.Wrap(5:i8):i8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) $< Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3)  @<= 5, Wrap(Opt(3))  @<= Wrap(5), Opt(3)  $<= 5, Wrap(Opt(3))  $<= Wrap(5))
Case(Opt(3) @<= 5, Wrap(Opt(3)) @<= Wrap(5), Opt(3) $<= 5, Wrap(Opt(3)) $<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @<= Call(∂.Test.Wrap(5:i8):i8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) $<= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3)  @>  5, Wrap(Opt(3))  @>  Wrap(5), Opt(3)  $>  5, Wrap(Opt(3))  $>  Wrap(5))
Case(Opt(3) @> 5, Wrap(Opt(3)) @> Wrap(5), Opt(3) $> 5, Wrap(Opt(3)) $> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @> Call(∂.Test.Wrap(5:i8):i8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) $> Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3)  @>= 5, Wrap(Opt(3))  @>= Wrap(5), Opt(3)  $>= 5, Wrap(Opt(3))  $>= Wrap(5))
Case(Opt(3) @>= 5, Wrap(Opt(3)) @>= Wrap(5), Opt(3) $>= 5, Wrap(Opt(3)) $>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @>= Call(∂.Test.Wrap(5:i8):i8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) $>= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3) !@=  5, Wrap(Opt(3)) !@=  Wrap(5), Opt(3) !$=  5, Wrap(Opt(3)) !$=  Wrap(5))
Case(Opt(3) !@= 5, Wrap(Opt(3)) !@= Wrap(5), Opt(3) !$= 5, Wrap(Opt(3)) !$= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !@= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3) !@<  5, Wrap(Opt(3)) !@<  Wrap(5), Opt(3) !$<  5, Wrap(Opt(3)) !$<  Wrap(5))
Case(Opt(3) !@< 5, Wrap(Opt(3)) !@< Wrap(5), Opt(3) !$< 5, Wrap(Opt(3)) !$< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @>= Call(∂.Test.Wrap(5:i8):i8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !$< Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3) !@<= 5, Wrap(Opt(3)) !@<= Wrap(5), Opt(3) !$<= 5, Wrap(Opt(3)) !$<= Wrap(5))
Case(Opt(3) !@<= 5, Wrap(Opt(3)) !@<= Wrap(5), Opt(3) !$<= 5, Wrap(Opt(3)) !$<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @> Call(∂.Test.Wrap(5:i8):i8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !$<= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3) !@>  5, Wrap(Opt(3)) !@>  Wrap(5), Opt(3) !$>  5, Wrap(Opt(3)) !$>  Wrap(5))
Case(Opt(3) !@> 5, Wrap(Opt(3)) !@> Wrap(5), Opt(3) !$> 5, Wrap(Opt(3)) !$> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @<= Call(∂.Test.Wrap(5:i8):i8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !$> Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3) !@>= 5, Wrap(Opt(3)) !@>= Wrap(5), Opt(3) !$>= 5, Wrap(Opt(3)) !$>= Wrap(5))
Case(Opt(3) !@>= 5, Wrap(Opt(3)) !@>= Wrap(5), Opt(3) !$>= 5, Wrap(Opt(3)) !$>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @< Call(∂.Test.Wrap(5:i8):i8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !$>= Call(∂.Test.Wrap(5:i8):i8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3)  @=  Null(5), Wrap(Opt(3))  @=  Wrap(Null(5)), Opt(3)  $=  Null(5), Wrap(Opt(3))  $=  Wrap(Null(5)))
Case(Opt(3) @= Null(5), Wrap(Opt(3)) @= Wrap(Null(5)), Opt(3) $= Null(5), Wrap(Opt(3)) $= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @= Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) $= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3)  @<  Null(5), Wrap(Opt(3))  @<  Wrap(Null(5)), Opt(3)  $<  Null(5), Wrap(Opt(3))  $<  Wrap(Null(5)))
Case(Opt(3) @< Null(5), Wrap(Opt(3)) @< Wrap(Null(5)), Opt(3) $< Null(5), Wrap(Opt(3)) $< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @< Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) $< Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3)  @<= Null(5), Wrap(Opt(3))  @<= Wrap(Null(5)), Opt(3)  $<= Null(5), Wrap(Opt(3))  $<= Wrap(Null(5)))
Case(Opt(3) @<= Null(5), Wrap(Opt(3)) @<= Wrap(Null(5)), Opt(3) $<= Null(5), Wrap(Opt(3)) $<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @<= Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) $<= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3)  @>  Null(5), Wrap(Opt(3))  @>  Wrap(Null(5)), Opt(3)  $>  Null(5), Wrap(Opt(3))  $>  Wrap(Null(5)))
Case(Opt(3) @> Null(5), Wrap(Opt(3)) @> Wrap(Null(5)), Opt(3) $> Null(5), Wrap(Opt(3)) $> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @> Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) $> Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Opt(3)  @>= Null(5), Wrap(Opt(3))  @>= Wrap(Null(5)), Opt(3)  $>= Null(5), Wrap(Opt(3))  $>= Wrap(Null(5)))
Case(Opt(3) @>= Null(5), Wrap(Opt(3)) @>= Wrap(Null(5)), Opt(3) $>= Null(5), Wrap(Opt(3)) $>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @>= Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) $>= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Opt(3) !@=  Null(5), Wrap(Opt(3)) !@=  Wrap(Null(5)), Opt(3) !$=  Null(5), Wrap(Opt(3)) !$=  Wrap(Null(5)))
Case(Opt(3) !@= Null(5), Wrap(Opt(3)) !@= Wrap(Null(5)), Opt(3) !$= Null(5), Wrap(Opt(3)) !$= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !@= Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !$= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3) !@<  Null(5), Wrap(Opt(3)) !@<  Wrap(Null(5)), Opt(3) !$<  Null(5), Wrap(Opt(3)) !$<  Wrap(Null(5)))
Case(Opt(3) !@< Null(5), Wrap(Opt(3)) !@< Wrap(Null(5)), Opt(3) !$< Null(5), Wrap(Opt(3)) !$< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @>= Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !$< Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3) !@<= Null(5), Wrap(Opt(3)) !@<= Wrap(Null(5)), Opt(3) !$<= Null(5), Wrap(Opt(3)) !$<= Wrap(Null(5)))
Case(Opt(3) !@<= Null(5), Wrap(Opt(3)) !@<= Wrap(Null(5)), Opt(3) !$<= Null(5), Wrap(Opt(3)) !$<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @> Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !$<= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3) !@>  Null(5), Wrap(Opt(3)) !@>  Wrap(Null(5)), Opt(3) !$>  Null(5), Wrap(Opt(3)) !$>  Wrap(Null(5)))
Case(Opt(3) !@> Null(5), Wrap(Opt(3)) !@> Wrap(Null(5)), Opt(3) !$> Null(5), Wrap(Opt(3)) !$> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @<= Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !$> Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Opt(3) !@>= Null(5), Wrap(Opt(3)) !@>= Wrap(Null(5)), Opt(3) !$>= Null(5), Wrap(Opt(3)) !$>= Wrap(Null(5)))
Case(Opt(3) !@>= Null(5), Wrap(Opt(3)) !@>= Wrap(Null(5)), Opt(3) !$>= Null(5), Wrap(Opt(3)) !$>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @< Call(∂.Test.Wrap(null:i8?):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !$>= Call(∂.Test.Wrap(null:i8?):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Opt(3)  @=  Opt(5), Wrap(Opt(3))  @=  Wrap(Opt(5)), Opt(3)  $=  Opt(5), Wrap(Opt(3))  $=  Wrap(Opt(5)))
Case(Opt(3) @= Opt(5), Wrap(Opt(3)) @= Wrap(Opt(5)), Opt(3) $= Opt(5), Wrap(Opt(3)) $= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) $= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3)  @<  Opt(5), Wrap(Opt(3))  @<  Wrap(Opt(5)), Opt(3)  $<  Opt(5), Wrap(Opt(3))  $<  Wrap(Opt(5)))
Case(Opt(3) @< Opt(5), Wrap(Opt(3)) @< Wrap(Opt(5)), Opt(3) $< Opt(5), Wrap(Opt(3)) $< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @< Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) $< Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3)  @<= Opt(5), Wrap(Opt(3))  @<= Wrap(Opt(5)), Opt(3)  $<= Opt(5), Wrap(Opt(3))  $<= Wrap(Opt(5)))
Case(Opt(3) @<= Opt(5), Wrap(Opt(3)) @<= Wrap(Opt(5)), Opt(3) $<= Opt(5), Wrap(Opt(3)) $<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @<= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) $<= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3)  @>  Opt(5), Wrap(Opt(3))  @>  Wrap(Opt(5)), Opt(3)  $>  Opt(5), Wrap(Opt(3))  $>  Wrap(Opt(5)))
Case(Opt(3) @> Opt(5), Wrap(Opt(3)) @> Wrap(Opt(5)), Opt(3) $> Opt(5), Wrap(Opt(3)) $> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @> Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) $> Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3)  @>= Opt(5), Wrap(Opt(3))  @>= Wrap(Opt(5)), Opt(3)  $>= Opt(5), Wrap(Opt(3))  $>= Wrap(Opt(5)))
Case(Opt(3) @>= Opt(5), Wrap(Opt(3)) @>= Wrap(Opt(5)), Opt(3) $>= Opt(5), Wrap(Opt(3)) $>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @>= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) $>= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3) !@=  Opt(5), Wrap(Opt(3)) !@=  Wrap(Opt(5)), Opt(3) !$=  Opt(5), Wrap(Opt(3)) !$=  Wrap(Opt(5)))
Case(Opt(3) !@= Opt(5), Wrap(Opt(3)) !@= Wrap(Opt(5)), Opt(3) !$= Opt(5), Wrap(Opt(3)) !$= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !@= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !$= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3) !@<  Opt(5), Wrap(Opt(3)) !@<  Wrap(Opt(5)), Opt(3) !$<  Opt(5), Wrap(Opt(3)) !$<  Wrap(Opt(5)))
Case(Opt(3) !@< Opt(5), Wrap(Opt(3)) !@< Wrap(Opt(5)), Opt(3) !$< Opt(5), Wrap(Opt(3)) !$< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @>= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !$< Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3) !@<= Opt(5), Wrap(Opt(3)) !@<= Wrap(Opt(5)), Opt(3) !$<= Opt(5), Wrap(Opt(3)) !$<= Wrap(Opt(5)))
Case(Opt(3) !@<= Opt(5), Wrap(Opt(3)) !@<= Wrap(Opt(5)), Opt(3) !$<= Opt(5), Wrap(Opt(3)) !$<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @> Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !$<= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3) !@>  Opt(5), Wrap(Opt(3)) !@>  Wrap(Opt(5)), Opt(3) !$>  Opt(5), Wrap(Opt(3)) !$>  Wrap(Opt(5)))
Case(Opt(3) !@> Opt(5), Wrap(Opt(3)) !@> Wrap(Opt(5)), Opt(3) !$> Opt(5), Wrap(Opt(3)) !$> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @<= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !$> Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3) !@>= Opt(5), Wrap(Opt(3)) !@>= Wrap(Opt(5)), Opt(3) !$>= Opt(5), Wrap(Opt(3)) !$>= Wrap(Opt(5)))
Case(Opt(3) !@>= Opt(5), Wrap(Opt(3)) !@>= Wrap(Opt(5)), Opt(3) !$>= Opt(5), Wrap(Opt(3)) !$>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) @< Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<i8?>(3:i8)):i8?) !$>= Call(∂.Test.Wrap(Opt<i8?>(5:i8)):i8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false  @=  false, Wrap(false)  @=  Wrap(false), false  $=  false, Wrap(false)  $=  Wrap(false))
Case(false @= false, Wrap(false) @= Wrap(false), false $= false, Wrap(false) $= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false  @<  false, Wrap(false)  @<  Wrap(false), false  $<  false, Wrap(false)  $<  Wrap(false))
Case(false @< false, Wrap(false) @< Wrap(false), false $< false, Wrap(false) $< Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @< Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false  @<= false, Wrap(false)  @<= Wrap(false), false  $<= false, Wrap(false)  $<= Wrap(false))
Case(false @<= false, Wrap(false) @<= Wrap(false), false $<= false, Wrap(false) $<= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @<= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false  @>  false, Wrap(false)  @>  Wrap(false), false  $>  false, Wrap(false)  $>  Wrap(false))
Case(false @> false, Wrap(false) @> Wrap(false), false $> false, Wrap(false) $> Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @> Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false  @>= false, Wrap(false)  @>= Wrap(false), false  $>= false, Wrap(false)  $>= Wrap(false))
Case(false @>= false, Wrap(false) @>= Wrap(false), false $>= false, Wrap(false) $>= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @>= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false !@=  false, Wrap(false) !@=  Wrap(false), false !$=  false, Wrap(false) !$=  Wrap(false))
Case(false !@= false, Wrap(false) !@= Wrap(false), false !$= false, Wrap(false) !$= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) !@= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false !@<  false, Wrap(false) !@<  Wrap(false), false !$<  false, Wrap(false) !$<  Wrap(false))
Case(false !@< false, Wrap(false) !@< Wrap(false), false !$< false, Wrap(false) !$< Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @>= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false !@<= false, Wrap(false) !@<= Wrap(false), false !$<= false, Wrap(false) !$<= Wrap(false))
Case(false !@<= false, Wrap(false) !@<= Wrap(false), false !$<= false, Wrap(false) !$<= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @> Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false !@>  false, Wrap(false) !@>  Wrap(false), false !$>  false, Wrap(false) !$>  Wrap(false))
Case(false !@> false, Wrap(false) !@> Wrap(false), false !$> false, Wrap(false) !$> Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @<= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false !@>= false, Wrap(false) !@>= Wrap(false), false !$>= false, Wrap(false) !$>= Wrap(false))
Case(false !@>= false, Wrap(false) !@>= Wrap(false), false !$>= false, Wrap(false) !$>= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @< Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false  @=  true, Wrap(false)  @=  Wrap(true), false  $=  true, Wrap(false)  $=  Wrap(true))
Case(false @= true, Wrap(false) @= Wrap(true), false $= true, Wrap(false) $= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false  @<  true, Wrap(false)  @<  Wrap(true), false  $<  true, Wrap(false)  $<  Wrap(true))
Case(false @< true, Wrap(false) @< Wrap(true), false $< true, Wrap(false) $< Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @< Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false  @<= true, Wrap(false)  @<= Wrap(true), false  $<= true, Wrap(false)  $<= Wrap(true))
Case(false @<= true, Wrap(false) @<= Wrap(true), false $<= true, Wrap(false) $<= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @<= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false  @>  true, Wrap(false)  @>  Wrap(true), false  $>  true, Wrap(false)  $>  Wrap(true))
Case(false @> true, Wrap(false) @> Wrap(true), false $> true, Wrap(false) $> Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @> Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false  @>= true, Wrap(false)  @>= Wrap(true), false  $>= true, Wrap(false)  $>= Wrap(true))
Case(false @>= true, Wrap(false) @>= Wrap(true), false $>= true, Wrap(false) $>= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @>= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false !@=  true, Wrap(false) !@=  Wrap(true), false !$=  true, Wrap(false) !$=  Wrap(true))
Case(false !@= true, Wrap(false) !@= Wrap(true), false !$= true, Wrap(false) !$= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) !@= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false !@<  true, Wrap(false) !@<  Wrap(true), false !$<  true, Wrap(false) !$<  Wrap(true))
Case(false !@< true, Wrap(false) !@< Wrap(true), false !$< true, Wrap(false) !$< Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @>= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false !@<= true, Wrap(false) !@<= Wrap(true), false !$<= true, Wrap(false) !$<= Wrap(true))
Case(false !@<= true, Wrap(false) !@<= Wrap(true), false !$<= true, Wrap(false) !$<= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @> Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false !@>  true, Wrap(false) !@>  Wrap(true), false !$>  true, Wrap(false) !$>  Wrap(true))
Case(false !@> true, Wrap(false) !@> Wrap(true), false !$> true, Wrap(false) !$> Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @<= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false !@>= true, Wrap(false) !@>= Wrap(true), false !$>= true, Wrap(false) !$>= Wrap(true))
Case(false !@>= true, Wrap(false) !@>= Wrap(true), false !$>= true, Wrap(false) !$>= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @< Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false  @=  Null(false), Wrap(false)  @=  Wrap(Null(false)), false  $=  Null(false), Wrap(false)  $=  Wrap(Null(false)))
Case(false @= Null(false), Wrap(false) @= Wrap(Null(false)), false $= Null(false), Wrap(false) $= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false  @<  Null(false), Wrap(false)  @<  Wrap(Null(false)), false  $<  Null(false), Wrap(false)  $<  Wrap(Null(false)))
Case(false @< Null(false), Wrap(false) @< Wrap(Null(false)), false $< Null(false), Wrap(false) $< Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @< Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) $< Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false  @<= Null(false), Wrap(false)  @<= Wrap(Null(false)), false  $<= Null(false), Wrap(false)  $<= Wrap(Null(false)))
Case(false @<= Null(false), Wrap(false) @<= Wrap(Null(false)), false $<= Null(false), Wrap(false) $<= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @<= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) $<= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false  @>  Null(false), Wrap(false)  @>  Wrap(Null(false)), false  $>  Null(false), Wrap(false)  $>  Wrap(Null(false)))
Case(false @> Null(false), Wrap(false) @> Wrap(Null(false)), false $> Null(false), Wrap(false) $> Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @> Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) $> Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(false  @>= Null(false), Wrap(false)  @>= Wrap(Null(false)), false  $>= Null(false), Wrap(false)  $>= Wrap(Null(false)))
Case(false @>= Null(false), Wrap(false) @>= Wrap(Null(false)), false $>= Null(false), Wrap(false) $>= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @>= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) $>= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(false !@=  Null(false), Wrap(false) !@=  Wrap(Null(false)), false !$=  Null(false), Wrap(false) !$=  Wrap(Null(false)))
Case(false !@= Null(false), Wrap(false) !@= Wrap(Null(false)), false !$= Null(false), Wrap(false) !$= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) !@= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false !@<  Null(false), Wrap(false) !@<  Wrap(Null(false)), false !$<  Null(false), Wrap(false) !$<  Wrap(Null(false)))
Case(false !@< Null(false), Wrap(false) !@< Wrap(Null(false)), false !$< Null(false), Wrap(false) !$< Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @>= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) !$< Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false !@<= Null(false), Wrap(false) !@<= Wrap(Null(false)), false !$<= Null(false), Wrap(false) !$<= Wrap(Null(false)))
Case(false !@<= Null(false), Wrap(false) !@<= Wrap(Null(false)), false !$<= Null(false), Wrap(false) !$<= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @> Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) !$<= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false !@>  Null(false), Wrap(false) !@>  Wrap(Null(false)), false !$>  Null(false), Wrap(false) !$>  Wrap(Null(false)))
Case(false !@> Null(false), Wrap(false) !@> Wrap(Null(false)), false !$> Null(false), Wrap(false) !$> Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @<= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) !$> Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(false !@>= Null(false), Wrap(false) !@>= Wrap(Null(false)), false !$>= Null(false), Wrap(false) !$>= Wrap(Null(false)))
Case(false !@>= Null(false), Wrap(false) !@>= Wrap(Null(false)), false !$>= Null(false), Wrap(false) !$>= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @< Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) !$>= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(false  @=  Opt(false), Wrap(false)  @=  Wrap(Opt(false)), false  $=  Opt(false), Wrap(false)  $=  Wrap(Opt(false)))
Case(false @= Opt(false), Wrap(false) @= Wrap(Opt(false)), false $= Opt(false), Wrap(false) $= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false  @<  Opt(false), Wrap(false)  @<  Wrap(Opt(false)), false  $<  Opt(false), Wrap(false)  $<  Wrap(Opt(false)))
Case(false @< Opt(false), Wrap(false) @< Wrap(Opt(false)), false $< Opt(false), Wrap(false) $< Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) $< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false  @<= Opt(false), Wrap(false)  @<= Wrap(Opt(false)), false  $<= Opt(false), Wrap(false)  $<= Wrap(Opt(false)))
Case(false @<= Opt(false), Wrap(false) @<= Wrap(Opt(false)), false $<= Opt(false), Wrap(false) $<= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) $<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false  @>  Opt(false), Wrap(false)  @>  Wrap(Opt(false)), false  $>  Opt(false), Wrap(false)  $>  Wrap(Opt(false)))
Case(false @> Opt(false), Wrap(false) @> Wrap(Opt(false)), false $> Opt(false), Wrap(false) $> Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) $> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false  @>= Opt(false), Wrap(false)  @>= Wrap(Opt(false)), false  $>= Opt(false), Wrap(false)  $>= Wrap(Opt(false)))
Case(false @>= Opt(false), Wrap(false) @>= Wrap(Opt(false)), false $>= Opt(false), Wrap(false) $>= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) $>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false !@=  Opt(false), Wrap(false) !@=  Wrap(Opt(false)), false !$=  Opt(false), Wrap(false) !$=  Wrap(Opt(false)))
Case(false !@= Opt(false), Wrap(false) !@= Wrap(Opt(false)), false !$= Opt(false), Wrap(false) !$= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) !@= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false !@<  Opt(false), Wrap(false) !@<  Wrap(Opt(false)), false !$<  Opt(false), Wrap(false) !$<  Wrap(Opt(false)))
Case(false !@< Opt(false), Wrap(false) !@< Wrap(Opt(false)), false !$< Opt(false), Wrap(false) !$< Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) !$< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false !@<= Opt(false), Wrap(false) !@<= Wrap(Opt(false)), false !$<= Opt(false), Wrap(false) !$<= Wrap(Opt(false)))
Case(false !@<= Opt(false), Wrap(false) !@<= Wrap(Opt(false)), false !$<= Opt(false), Wrap(false) !$<= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) !$<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false !@>  Opt(false), Wrap(false) !@>  Wrap(Opt(false)), false !$>  Opt(false), Wrap(false) !$>  Wrap(Opt(false)))
Case(false !@> Opt(false), Wrap(false) !@> Wrap(Opt(false)), false !$> Opt(false), Wrap(false) !$> Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) !$> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false !@>= Opt(false), Wrap(false) !@>= Wrap(Opt(false)), false !$>= Opt(false), Wrap(false) !$>= Wrap(Opt(false)))
Case(false !@>= Opt(false), Wrap(false) !@>= Wrap(Opt(false)), false !$>= Opt(false), Wrap(false) !$>= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) !$>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false  @=  Opt(true), Wrap(false)  @=  Wrap(Opt(true)), false  $=  Opt(true), Wrap(false)  $=  Wrap(Opt(true)))
Case(false @= Opt(true), Wrap(false) @= Wrap(Opt(true)), false $= Opt(true), Wrap(false) $= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false  @<  Opt(true), Wrap(false)  @<  Wrap(Opt(true)), false  $<  Opt(true), Wrap(false)  $<  Wrap(Opt(true)))
Case(false @< Opt(true), Wrap(false) @< Wrap(Opt(true)), false $< Opt(true), Wrap(false) $< Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) $< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false  @<= Opt(true), Wrap(false)  @<= Wrap(Opt(true)), false  $<= Opt(true), Wrap(false)  $<= Wrap(Opt(true)))
Case(false @<= Opt(true), Wrap(false) @<= Wrap(Opt(true)), false $<= Opt(true), Wrap(false) $<= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) $<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false  @>  Opt(true), Wrap(false)  @>  Wrap(Opt(true)), false  $>  Opt(true), Wrap(false)  $>  Wrap(Opt(true)))
Case(false @> Opt(true), Wrap(false) @> Wrap(Opt(true)), false $> Opt(true), Wrap(false) $> Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) $> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false  @>= Opt(true), Wrap(false)  @>= Wrap(Opt(true)), false  $>= Opt(true), Wrap(false)  $>= Wrap(Opt(true)))
Case(false @>= Opt(true), Wrap(false) @>= Wrap(Opt(true)), false $>= Opt(true), Wrap(false) $>= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) $>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false !@=  Opt(true), Wrap(false) !@=  Wrap(Opt(true)), false !$=  Opt(true), Wrap(false) !$=  Wrap(Opt(true)))
Case(false !@= Opt(true), Wrap(false) !@= Wrap(Opt(true)), false !$= Opt(true), Wrap(false) !$= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) !@= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false !@<  Opt(true), Wrap(false) !@<  Wrap(Opt(true)), false !$<  Opt(true), Wrap(false) !$<  Wrap(Opt(true)))
Case(false !@< Opt(true), Wrap(false) !@< Wrap(Opt(true)), false !$< Opt(true), Wrap(false) !$< Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) !$< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false !@<= Opt(true), Wrap(false) !@<= Wrap(Opt(true)), false !$<= Opt(true), Wrap(false) !$<= Wrap(Opt(true)))
Case(false !@<= Opt(true), Wrap(false) !@<= Wrap(Opt(true)), false !$<= Opt(true), Wrap(false) !$<= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) !$<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(false !@>  Opt(true), Wrap(false) !@>  Wrap(Opt(true)), false !$>  Opt(true), Wrap(false) !$>  Wrap(Opt(true)))
Case(false !@> Opt(true), Wrap(false) !@> Wrap(Opt(true)), false !$> Opt(true), Wrap(false) !$> Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) !$> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(false !@>= Opt(true), Wrap(false) !@>= Wrap(Opt(true)), false !$>= Opt(true), Wrap(false) !$>= Wrap(Opt(true)))
Case(false !@>= Opt(true), Wrap(false) !@>= Wrap(Opt(true)), false !$>= Opt(true), Wrap(false) !$>= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(false:b):b) @< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(false:b):b) !$>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true  @=  false, Wrap(true)  @=  Wrap(false), true  $=  false, Wrap(true)  $=  Wrap(false))
Case(true @= false, Wrap(true) @= Wrap(false), true $= false, Wrap(true) $= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true  @<  false, Wrap(true)  @<  Wrap(false), true  $<  false, Wrap(true)  $<  Wrap(false))
Case(true @< false, Wrap(true) @< Wrap(false), true $< false, Wrap(true) $< Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @< Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true  @<= false, Wrap(true)  @<= Wrap(false), true  $<= false, Wrap(true)  $<= Wrap(false))
Case(true @<= false, Wrap(true) @<= Wrap(false), true $<= false, Wrap(true) $<= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @<= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true  @>  false, Wrap(true)  @>  Wrap(false), true  $>  false, Wrap(true)  $>  Wrap(false))
Case(true @> false, Wrap(true) @> Wrap(false), true $> false, Wrap(true) $> Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @> Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true  @>= false, Wrap(true)  @>= Wrap(false), true  $>= false, Wrap(true)  $>= Wrap(false))
Case(true @>= false, Wrap(true) @>= Wrap(false), true $>= false, Wrap(true) $>= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @>= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@=  false, Wrap(true) !@=  Wrap(false), true !$=  false, Wrap(true) !$=  Wrap(false))
Case(true !@= false, Wrap(true) !@= Wrap(false), true !$= false, Wrap(true) !$= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) !@= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@<  false, Wrap(true) !@<  Wrap(false), true !$<  false, Wrap(true) !$<  Wrap(false))
Case(true !@< false, Wrap(true) !@< Wrap(false), true !$< false, Wrap(true) !$< Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @>= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@<= false, Wrap(true) !@<= Wrap(false), true !$<= false, Wrap(true) !$<= Wrap(false))
Case(true !@<= false, Wrap(true) !@<= Wrap(false), true !$<= false, Wrap(true) !$<= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @> Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@>  false, Wrap(true) !@>  Wrap(false), true !$>  false, Wrap(true) !$>  Wrap(false))
Case(true !@> false, Wrap(true) !@> Wrap(false), true !$> false, Wrap(true) !$> Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @<= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true !@>= false, Wrap(true) !@>= Wrap(false), true !$>= false, Wrap(true) !$>= Wrap(false))
Case(true !@>= false, Wrap(true) !@>= Wrap(false), true !$>= false, Wrap(true) !$>= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @< Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true  @=  true, Wrap(true)  @=  Wrap(true), true  $=  true, Wrap(true)  $=  Wrap(true))
Case(true @= true, Wrap(true) @= Wrap(true), true $= true, Wrap(true) $= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true  @<  true, Wrap(true)  @<  Wrap(true), true  $<  true, Wrap(true)  $<  Wrap(true))
Case(true @< true, Wrap(true) @< Wrap(true), true $< true, Wrap(true) $< Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @< Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true  @<= true, Wrap(true)  @<= Wrap(true), true  $<= true, Wrap(true)  $<= Wrap(true))
Case(true @<= true, Wrap(true) @<= Wrap(true), true $<= true, Wrap(true) $<= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @<= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true  @>  true, Wrap(true)  @>  Wrap(true), true  $>  true, Wrap(true)  $>  Wrap(true))
Case(true @> true, Wrap(true) @> Wrap(true), true $> true, Wrap(true) $> Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @> Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true  @>= true, Wrap(true)  @>= Wrap(true), true  $>= true, Wrap(true)  $>= Wrap(true))
Case(true @>= true, Wrap(true) @>= Wrap(true), true $>= true, Wrap(true) $>= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @>= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@=  true, Wrap(true) !@=  Wrap(true), true !$=  true, Wrap(true) !$=  Wrap(true))
Case(true !@= true, Wrap(true) !@= Wrap(true), true !$= true, Wrap(true) !$= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) !@= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true !@<  true, Wrap(true) !@<  Wrap(true), true !$<  true, Wrap(true) !$<  Wrap(true))
Case(true !@< true, Wrap(true) !@< Wrap(true), true !$< true, Wrap(true) !$< Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @>= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@<= true, Wrap(true) !@<= Wrap(true), true !$<= true, Wrap(true) !$<= Wrap(true))
Case(true !@<= true, Wrap(true) !@<= Wrap(true), true !$<= true, Wrap(true) !$<= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @> Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true !@>  true, Wrap(true) !@>  Wrap(true), true !$>  true, Wrap(true) !$>  Wrap(true))
Case(true !@> true, Wrap(true) !@> Wrap(true), true !$> true, Wrap(true) !$> Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @<= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@>= true, Wrap(true) !@>= Wrap(true), true !$>= true, Wrap(true) !$>= Wrap(true))
Case(true !@>= true, Wrap(true) !@>= Wrap(true), true !$>= true, Wrap(true) !$>= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @< Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true  @=  Null(false), Wrap(true)  @=  Wrap(Null(false)), true  $=  Null(false), Wrap(true)  $=  Wrap(Null(false)))
Case(true @= Null(false), Wrap(true) @= Wrap(Null(false)), true $= Null(false), Wrap(true) $= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true  @<  Null(false), Wrap(true)  @<  Wrap(Null(false)), true  $<  Null(false), Wrap(true)  $<  Wrap(Null(false)))
Case(true @< Null(false), Wrap(true) @< Wrap(Null(false)), true $< Null(false), Wrap(true) $< Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @< Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) $< Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true  @<= Null(false), Wrap(true)  @<= Wrap(Null(false)), true  $<= Null(false), Wrap(true)  $<= Wrap(Null(false)))
Case(true @<= Null(false), Wrap(true) @<= Wrap(Null(false)), true $<= Null(false), Wrap(true) $<= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @<= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) $<= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true  @>  Null(false), Wrap(true)  @>  Wrap(Null(false)), true  $>  Null(false), Wrap(true)  $>  Wrap(Null(false)))
Case(true @> Null(false), Wrap(true) @> Wrap(Null(false)), true $> Null(false), Wrap(true) $> Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @> Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) $> Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(true  @>= Null(false), Wrap(true)  @>= Wrap(Null(false)), true  $>= Null(false), Wrap(true)  $>= Wrap(Null(false)))
Case(true @>= Null(false), Wrap(true) @>= Wrap(Null(false)), true $>= Null(false), Wrap(true) $>= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @>= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) $>= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(true !@=  Null(false), Wrap(true) !@=  Wrap(Null(false)), true !$=  Null(false), Wrap(true) !$=  Wrap(Null(false)))
Case(true !@= Null(false), Wrap(true) !@= Wrap(Null(false)), true !$= Null(false), Wrap(true) !$= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) !@= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@<  Null(false), Wrap(true) !@<  Wrap(Null(false)), true !$<  Null(false), Wrap(true) !$<  Wrap(Null(false)))
Case(true !@< Null(false), Wrap(true) !@< Wrap(Null(false)), true !$< Null(false), Wrap(true) !$< Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @>= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) !$< Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@<= Null(false), Wrap(true) !@<= Wrap(Null(false)), true !$<= Null(false), Wrap(true) !$<= Wrap(Null(false)))
Case(true !@<= Null(false), Wrap(true) !@<= Wrap(Null(false)), true !$<= Null(false), Wrap(true) !$<= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @> Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) !$<= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@>  Null(false), Wrap(true) !@>  Wrap(Null(false)), true !$>  Null(false), Wrap(true) !$>  Wrap(Null(false)))
Case(true !@> Null(false), Wrap(true) !@> Wrap(Null(false)), true !$> Null(false), Wrap(true) !$> Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @<= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) !$> Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(true !@>= Null(false), Wrap(true) !@>= Wrap(Null(false)), true !$>= Null(false), Wrap(true) !$>= Wrap(Null(false)))
Case(true !@>= Null(false), Wrap(true) !@>= Wrap(Null(false)), true !$>= Null(false), Wrap(true) !$>= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @< Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) !$>= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(true  @=  Opt(false), Wrap(true)  @=  Wrap(Opt(false)), true  $=  Opt(false), Wrap(true)  $=  Wrap(Opt(false)))
Case(true @= Opt(false), Wrap(true) @= Wrap(Opt(false)), true $= Opt(false), Wrap(true) $= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true  @<  Opt(false), Wrap(true)  @<  Wrap(Opt(false)), true  $<  Opt(false), Wrap(true)  $<  Wrap(Opt(false)))
Case(true @< Opt(false), Wrap(true) @< Wrap(Opt(false)), true $< Opt(false), Wrap(true) $< Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) $< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true  @<= Opt(false), Wrap(true)  @<= Wrap(Opt(false)), true  $<= Opt(false), Wrap(true)  $<= Wrap(Opt(false)))
Case(true @<= Opt(false), Wrap(true) @<= Wrap(Opt(false)), true $<= Opt(false), Wrap(true) $<= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) $<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true  @>  Opt(false), Wrap(true)  @>  Wrap(Opt(false)), true  $>  Opt(false), Wrap(true)  $>  Wrap(Opt(false)))
Case(true @> Opt(false), Wrap(true) @> Wrap(Opt(false)), true $> Opt(false), Wrap(true) $> Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) $> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true  @>= Opt(false), Wrap(true)  @>= Wrap(Opt(false)), true  $>= Opt(false), Wrap(true)  $>= Wrap(Opt(false)))
Case(true @>= Opt(false), Wrap(true) @>= Wrap(Opt(false)), true $>= Opt(false), Wrap(true) $>= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) $>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@=  Opt(false), Wrap(true) !@=  Wrap(Opt(false)), true !$=  Opt(false), Wrap(true) !$=  Wrap(Opt(false)))
Case(true !@= Opt(false), Wrap(true) !@= Wrap(Opt(false)), true !$= Opt(false), Wrap(true) !$= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) !@= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@<  Opt(false), Wrap(true) !@<  Wrap(Opt(false)), true !$<  Opt(false), Wrap(true) !$<  Wrap(Opt(false)))
Case(true !@< Opt(false), Wrap(true) !@< Wrap(Opt(false)), true !$< Opt(false), Wrap(true) !$< Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) !$< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@<= Opt(false), Wrap(true) !@<= Wrap(Opt(false)), true !$<= Opt(false), Wrap(true) !$<= Wrap(Opt(false)))
Case(true !@<= Opt(false), Wrap(true) !@<= Wrap(Opt(false)), true !$<= Opt(false), Wrap(true) !$<= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) !$<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@>  Opt(false), Wrap(true) !@>  Wrap(Opt(false)), true !$>  Opt(false), Wrap(true) !$>  Wrap(Opt(false)))
Case(true !@> Opt(false), Wrap(true) !@> Wrap(Opt(false)), true !$> Opt(false), Wrap(true) !$> Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) !$> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true !@>= Opt(false), Wrap(true) !@>= Wrap(Opt(false)), true !$>= Opt(false), Wrap(true) !$>= Wrap(Opt(false)))
Case(true !@>= Opt(false), Wrap(true) !@>= Wrap(Opt(false)), true !$>= Opt(false), Wrap(true) !$>= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) !$>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true  @=  Opt(true), Wrap(true)  @=  Wrap(Opt(true)), true  $=  Opt(true), Wrap(true)  $=  Wrap(Opt(true)))
Case(true @= Opt(true), Wrap(true) @= Wrap(Opt(true)), true $= Opt(true), Wrap(true) $= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true  @<  Opt(true), Wrap(true)  @<  Wrap(Opt(true)), true  $<  Opt(true), Wrap(true)  $<  Wrap(Opt(true)))
Case(true @< Opt(true), Wrap(true) @< Wrap(Opt(true)), true $< Opt(true), Wrap(true) $< Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) $< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true  @<= Opt(true), Wrap(true)  @<= Wrap(Opt(true)), true  $<= Opt(true), Wrap(true)  $<= Wrap(Opt(true)))
Case(true @<= Opt(true), Wrap(true) @<= Wrap(Opt(true)), true $<= Opt(true), Wrap(true) $<= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) $<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true  @>  Opt(true), Wrap(true)  @>  Wrap(Opt(true)), true  $>  Opt(true), Wrap(true)  $>  Wrap(Opt(true)))
Case(true @> Opt(true), Wrap(true) @> Wrap(Opt(true)), true $> Opt(true), Wrap(true) $> Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) $> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true  @>= Opt(true), Wrap(true)  @>= Wrap(Opt(true)), true  $>= Opt(true), Wrap(true)  $>= Wrap(Opt(true)))
Case(true @>= Opt(true), Wrap(true) @>= Wrap(Opt(true)), true $>= Opt(true), Wrap(true) $>= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) $>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@=  Opt(true), Wrap(true) !@=  Wrap(Opt(true)), true !$=  Opt(true), Wrap(true) !$=  Wrap(Opt(true)))
Case(true !@= Opt(true), Wrap(true) !@= Wrap(Opt(true)), true !$= Opt(true), Wrap(true) !$= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) !@= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true !@<  Opt(true), Wrap(true) !@<  Wrap(Opt(true)), true !$<  Opt(true), Wrap(true) !$<  Wrap(Opt(true)))
Case(true !@< Opt(true), Wrap(true) !@< Wrap(Opt(true)), true !$< Opt(true), Wrap(true) !$< Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) !$< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@<= Opt(true), Wrap(true) !@<= Wrap(Opt(true)), true !$<= Opt(true), Wrap(true) !$<= Wrap(Opt(true)))
Case(true !@<= Opt(true), Wrap(true) !@<= Wrap(Opt(true)), true !$<= Opt(true), Wrap(true) !$<= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) !$<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(true !@>  Opt(true), Wrap(true) !@>  Wrap(Opt(true)), true !$>  Opt(true), Wrap(true) !$>  Wrap(Opt(true)))
Case(true !@> Opt(true), Wrap(true) !@> Wrap(Opt(true)), true !$> Opt(true), Wrap(true) !$> Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) !$> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(true !@>= Opt(true), Wrap(true) !@>= Wrap(Opt(true)), true !$>= Opt(true), Wrap(true) !$>= Wrap(Opt(true)))
Case(true !@>= Opt(true), Wrap(true) !@>= Wrap(Opt(true)), true !$>= Opt(true), Wrap(true) !$>= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(true:b):b) @< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(true:b):b) !$>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(false)  @=  false, Wrap(Null(false))  @=  Wrap(false), Null(false)  $=  false, Wrap(Null(false))  $=  Wrap(false))
Case(Null(false) @= false, Wrap(Null(false)) @= Wrap(false), Null(false) $= false, Wrap(Null(false)) $= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(false)  @<  false, Wrap(Null(false))  @<  Wrap(false), Null(false)  $<  false, Wrap(Null(false))  $<  Wrap(false))
Case(Null(false) @< false, Wrap(Null(false)) @< Wrap(false), Null(false) $< false, Wrap(Null(false)) $< Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @< Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $< Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(false)  @<= false, Wrap(Null(false))  @<= Wrap(false), Null(false)  $<= false, Wrap(Null(false))  $<= Wrap(false))
Case(Null(false) @<= false, Wrap(Null(false)) @<= Wrap(false), Null(false) $<= false, Wrap(Null(false)) $<= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @<= Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $<= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(false)  @>  false, Wrap(Null(false))  @>  Wrap(false), Null(false)  $>  false, Wrap(Null(false))  $>  Wrap(false))
Case(Null(false) @> false, Wrap(Null(false)) @> Wrap(false), Null(false) $> false, Wrap(Null(false)) $> Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @> Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $> Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(false)  @>= false, Wrap(Null(false))  @>= Wrap(false), Null(false)  $>= false, Wrap(Null(false))  $>= Wrap(false))
Case(Null(false) @>= false, Wrap(Null(false)) @>= Wrap(false), Null(false) $>= false, Wrap(Null(false)) $>= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @>= Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $>= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(false) !@=  false, Wrap(Null(false)) !@=  Wrap(false), Null(false) !$=  false, Wrap(Null(false)) !$=  Wrap(false))
Case(Null(false) !@= false, Wrap(Null(false)) !@= Wrap(false), Null(false) !$= false, Wrap(Null(false)) !$= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) !@= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(false) !@<  false, Wrap(Null(false)) !@<  Wrap(false), Null(false) !$<  false, Wrap(Null(false)) !$<  Wrap(false))
Case(Null(false) !@< false, Wrap(Null(false)) !@< Wrap(false), Null(false) !$< false, Wrap(Null(false)) !$< Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @>= Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$< Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(false) !@<= false, Wrap(Null(false)) !@<= Wrap(false), Null(false) !$<= false, Wrap(Null(false)) !$<= Wrap(false))
Case(Null(false) !@<= false, Wrap(Null(false)) !@<= Wrap(false), Null(false) !$<= false, Wrap(Null(false)) !$<= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @> Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$<= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(false) !@>  false, Wrap(Null(false)) !@>  Wrap(false), Null(false) !$>  false, Wrap(Null(false)) !$>  Wrap(false))
Case(Null(false) !@> false, Wrap(Null(false)) !@> Wrap(false), Null(false) !$> false, Wrap(Null(false)) !$> Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @<= Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$> Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(false) !@>= false, Wrap(Null(false)) !@>= Wrap(false), Null(false) !$>= false, Wrap(Null(false)) !$>= Wrap(false))
Case(Null(false) !@>= false, Wrap(Null(false)) !@>= Wrap(false), Null(false) !$>= false, Wrap(Null(false)) !$>= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @< Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$>= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(false)  @=  true, Wrap(Null(false))  @=  Wrap(true), Null(false)  $=  true, Wrap(Null(false))  $=  Wrap(true))
Case(Null(false) @= true, Wrap(Null(false)) @= Wrap(true), Null(false) $= true, Wrap(Null(false)) $= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(false)  @<  true, Wrap(Null(false))  @<  Wrap(true), Null(false)  $<  true, Wrap(Null(false))  $<  Wrap(true))
Case(Null(false) @< true, Wrap(Null(false)) @< Wrap(true), Null(false) $< true, Wrap(Null(false)) $< Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @< Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $< Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(false)  @<= true, Wrap(Null(false))  @<= Wrap(true), Null(false)  $<= true, Wrap(Null(false))  $<= Wrap(true))
Case(Null(false) @<= true, Wrap(Null(false)) @<= Wrap(true), Null(false) $<= true, Wrap(Null(false)) $<= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @<= Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $<= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(false)  @>  true, Wrap(Null(false))  @>  Wrap(true), Null(false)  $>  true, Wrap(Null(false))  $>  Wrap(true))
Case(Null(false) @> true, Wrap(Null(false)) @> Wrap(true), Null(false) $> true, Wrap(Null(false)) $> Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @> Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $> Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(false)  @>= true, Wrap(Null(false))  @>= Wrap(true), Null(false)  $>= true, Wrap(Null(false))  $>= Wrap(true))
Case(Null(false) @>= true, Wrap(Null(false)) @>= Wrap(true), Null(false) $>= true, Wrap(Null(false)) $>= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @>= Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $>= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(false) !@=  true, Wrap(Null(false)) !@=  Wrap(true), Null(false) !$=  true, Wrap(Null(false)) !$=  Wrap(true))
Case(Null(false) !@= true, Wrap(Null(false)) !@= Wrap(true), Null(false) !$= true, Wrap(Null(false)) !$= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) !@= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(false) !@<  true, Wrap(Null(false)) !@<  Wrap(true), Null(false) !$<  true, Wrap(Null(false)) !$<  Wrap(true))
Case(Null(false) !@< true, Wrap(Null(false)) !@< Wrap(true), Null(false) !$< true, Wrap(Null(false)) !$< Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @>= Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$< Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(false) !@<= true, Wrap(Null(false)) !@<= Wrap(true), Null(false) !$<= true, Wrap(Null(false)) !$<= Wrap(true))
Case(Null(false) !@<= true, Wrap(Null(false)) !@<= Wrap(true), Null(false) !$<= true, Wrap(Null(false)) !$<= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @> Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$<= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(false) !@>  true, Wrap(Null(false)) !@>  Wrap(true), Null(false) !$>  true, Wrap(Null(false)) !$>  Wrap(true))
Case(Null(false) !@> true, Wrap(Null(false)) !@> Wrap(true), Null(false) !$> true, Wrap(Null(false)) !$> Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @<= Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$> Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(false) !@>= true, Wrap(Null(false)) !@>= Wrap(true), Null(false) !$>= true, Wrap(Null(false)) !$>= Wrap(true))
Case(Null(false) !@>= true, Wrap(Null(false)) !@>= Wrap(true), Null(false) !$>= true, Wrap(Null(false)) !$>= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @< Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$>= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(false)  @=  Null(false), Wrap(Null(false))  @=  Wrap(Null(false)), Null(false)  $=  Null(false), Wrap(Null(false))  $=  Wrap(Null(false)))
Case(Null(false) @= Null(false), Wrap(Null(false)) @= Wrap(Null(false)), Null(false) $= Null(false), Wrap(Null(false)) $= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(false)  @<  Null(false), Wrap(Null(false))  @<  Wrap(Null(false)), Null(false)  $<  Null(false), Wrap(Null(false))  $<  Wrap(Null(false)))
Case(Null(false) @< Null(false), Wrap(Null(false)) @< Wrap(Null(false)), Null(false) $< Null(false), Wrap(Null(false)) $< Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @< Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $< Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(false)  @<= Null(false), Wrap(Null(false))  @<= Wrap(Null(false)), Null(false)  $<= Null(false), Wrap(Null(false))  $<= Wrap(Null(false)))
Case(Null(false) @<= Null(false), Wrap(Null(false)) @<= Wrap(Null(false)), Null(false) $<= Null(false), Wrap(Null(false)) $<= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @<= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $<= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(false)  @>  Null(false), Wrap(Null(false))  @>  Wrap(Null(false)), Null(false)  $>  Null(false), Wrap(Null(false))  $>  Wrap(Null(false)))
Case(Null(false) @> Null(false), Wrap(Null(false)) @> Wrap(Null(false)), Null(false) $> Null(false), Wrap(Null(false)) $> Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @> Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $> Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(false)  @>= Null(false), Wrap(Null(false))  @>= Wrap(Null(false)), Null(false)  $>= Null(false), Wrap(Null(false))  $>= Wrap(Null(false)))
Case(Null(false) @>= Null(false), Wrap(Null(false)) @>= Wrap(Null(false)), Null(false) $>= Null(false), Wrap(Null(false)) $>= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @>= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $>= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(false) !@=  Null(false), Wrap(Null(false)) !@=  Wrap(Null(false)), Null(false) !$=  Null(false), Wrap(Null(false)) !$=  Wrap(Null(false)))
Case(Null(false) !@= Null(false), Wrap(Null(false)) !@= Wrap(Null(false)), Null(false) !$= Null(false), Wrap(Null(false)) !$= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) !@= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(false) !@<  Null(false), Wrap(Null(false)) !@<  Wrap(Null(false)), Null(false) !$<  Null(false), Wrap(Null(false)) !$<  Wrap(Null(false)))
Case(Null(false) !@< Null(false), Wrap(Null(false)) !@< Wrap(Null(false)), Null(false) !$< Null(false), Wrap(Null(false)) !$< Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @>= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$< Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(false) !@<= Null(false), Wrap(Null(false)) !@<= Wrap(Null(false)), Null(false) !$<= Null(false), Wrap(Null(false)) !$<= Wrap(Null(false)))
Case(Null(false) !@<= Null(false), Wrap(Null(false)) !@<= Wrap(Null(false)), Null(false) !$<= Null(false), Wrap(Null(false)) !$<= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @> Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$<= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(false) !@>  Null(false), Wrap(Null(false)) !@>  Wrap(Null(false)), Null(false) !$>  Null(false), Wrap(Null(false)) !$>  Wrap(Null(false)))
Case(Null(false) !@> Null(false), Wrap(Null(false)) !@> Wrap(Null(false)), Null(false) !$> Null(false), Wrap(Null(false)) !$> Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @<= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$> Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(false) !@>= Null(false), Wrap(Null(false)) !@>= Wrap(Null(false)), Null(false) !$>= Null(false), Wrap(Null(false)) !$>= Wrap(Null(false)))
Case(Null(false) !@>= Null(false), Wrap(Null(false)) !@>= Wrap(Null(false)), Null(false) !$>= Null(false), Wrap(Null(false)) !$>= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @< Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$>= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(false)  @=  Opt(false), Wrap(Null(false))  @=  Wrap(Opt(false)), Null(false)  $=  Opt(false), Wrap(Null(false))  $=  Wrap(Opt(false)))
Case(Null(false) @= Opt(false), Wrap(Null(false)) @= Wrap(Opt(false)), Null(false) $= Opt(false), Wrap(Null(false)) $= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(false)  @<  Opt(false), Wrap(Null(false))  @<  Wrap(Opt(false)), Null(false)  $<  Opt(false), Wrap(Null(false))  $<  Wrap(Opt(false)))
Case(Null(false) @< Opt(false), Wrap(Null(false)) @< Wrap(Opt(false)), Null(false) $< Opt(false), Wrap(Null(false)) $< Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(false)  @<= Opt(false), Wrap(Null(false))  @<= Wrap(Opt(false)), Null(false)  $<= Opt(false), Wrap(Null(false))  $<= Wrap(Opt(false)))
Case(Null(false) @<= Opt(false), Wrap(Null(false)) @<= Wrap(Opt(false)), Null(false) $<= Opt(false), Wrap(Null(false)) $<= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(false)  @>  Opt(false), Wrap(Null(false))  @>  Wrap(Opt(false)), Null(false)  $>  Opt(false), Wrap(Null(false))  $>  Wrap(Opt(false)))
Case(Null(false) @> Opt(false), Wrap(Null(false)) @> Wrap(Opt(false)), Null(false) $> Opt(false), Wrap(Null(false)) $> Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(false)  @>= Opt(false), Wrap(Null(false))  @>= Wrap(Opt(false)), Null(false)  $>= Opt(false), Wrap(Null(false))  $>= Wrap(Opt(false)))
Case(Null(false) @>= Opt(false), Wrap(Null(false)) @>= Wrap(Opt(false)), Null(false) $>= Opt(false), Wrap(Null(false)) $>= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(false) !@=  Opt(false), Wrap(Null(false)) !@=  Wrap(Opt(false)), Null(false) !$=  Opt(false), Wrap(Null(false)) !$=  Wrap(Opt(false)))
Case(Null(false) !@= Opt(false), Wrap(Null(false)) !@= Wrap(Opt(false)), Null(false) !$= Opt(false), Wrap(Null(false)) !$= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) !@= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(false) !@<  Opt(false), Wrap(Null(false)) !@<  Wrap(Opt(false)), Null(false) !$<  Opt(false), Wrap(Null(false)) !$<  Wrap(Opt(false)))
Case(Null(false) !@< Opt(false), Wrap(Null(false)) !@< Wrap(Opt(false)), Null(false) !$< Opt(false), Wrap(Null(false)) !$< Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(false) !@<= Opt(false), Wrap(Null(false)) !@<= Wrap(Opt(false)), Null(false) !$<= Opt(false), Wrap(Null(false)) !$<= Wrap(Opt(false)))
Case(Null(false) !@<= Opt(false), Wrap(Null(false)) !@<= Wrap(Opt(false)), Null(false) !$<= Opt(false), Wrap(Null(false)) !$<= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(false) !@>  Opt(false), Wrap(Null(false)) !@>  Wrap(Opt(false)), Null(false) !$>  Opt(false), Wrap(Null(false)) !$>  Wrap(Opt(false)))
Case(Null(false) !@> Opt(false), Wrap(Null(false)) !@> Wrap(Opt(false)), Null(false) !$> Opt(false), Wrap(Null(false)) !$> Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(false) !@>= Opt(false), Wrap(Null(false)) !@>= Wrap(Opt(false)), Null(false) !$>= Opt(false), Wrap(Null(false)) !$>= Wrap(Opt(false)))
Case(Null(false) !@>= Opt(false), Wrap(Null(false)) !@>= Wrap(Opt(false)), Null(false) !$>= Opt(false), Wrap(Null(false)) !$>= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(false)  @=  Opt(true), Wrap(Null(false))  @=  Wrap(Opt(true)), Null(false)  $=  Opt(true), Wrap(Null(false))  $=  Wrap(Opt(true)))
Case(Null(false) @= Opt(true), Wrap(Null(false)) @= Wrap(Opt(true)), Null(false) $= Opt(true), Wrap(Null(false)) $= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(false)  @<  Opt(true), Wrap(Null(false))  @<  Wrap(Opt(true)), Null(false)  $<  Opt(true), Wrap(Null(false))  $<  Wrap(Opt(true)))
Case(Null(false) @< Opt(true), Wrap(Null(false)) @< Wrap(Opt(true)), Null(false) $< Opt(true), Wrap(Null(false)) $< Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(false)  @<= Opt(true), Wrap(Null(false))  @<= Wrap(Opt(true)), Null(false)  $<= Opt(true), Wrap(Null(false))  $<= Wrap(Opt(true)))
Case(Null(false) @<= Opt(true), Wrap(Null(false)) @<= Wrap(Opt(true)), Null(false) $<= Opt(true), Wrap(Null(false)) $<= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(false)  @>  Opt(true), Wrap(Null(false))  @>  Wrap(Opt(true)), Null(false)  $>  Opt(true), Wrap(Null(false))  $>  Wrap(Opt(true)))
Case(Null(false) @> Opt(true), Wrap(Null(false)) @> Wrap(Opt(true)), Null(false) $> Opt(true), Wrap(Null(false)) $> Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(false)  @>= Opt(true), Wrap(Null(false))  @>= Wrap(Opt(true)), Null(false)  $>= Opt(true), Wrap(Null(false))  $>= Wrap(Opt(true)))
Case(Null(false) @>= Opt(true), Wrap(Null(false)) @>= Wrap(Opt(true)), Null(false) $>= Opt(true), Wrap(Null(false)) $>= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) $>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(false) !@=  Opt(true), Wrap(Null(false)) !@=  Wrap(Opt(true)), Null(false) !$=  Opt(true), Wrap(Null(false)) !$=  Wrap(Opt(true)))
Case(Null(false) !@= Opt(true), Wrap(Null(false)) !@= Wrap(Opt(true)), Null(false) !$= Opt(true), Wrap(Null(false)) !$= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) !@= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(false) !@<  Opt(true), Wrap(Null(false)) !@<  Wrap(Opt(true)), Null(false) !$<  Opt(true), Wrap(Null(false)) !$<  Wrap(Opt(true)))
Case(Null(false) !@< Opt(true), Wrap(Null(false)) !@< Wrap(Opt(true)), Null(false) !$< Opt(true), Wrap(Null(false)) !$< Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(false) !@<= Opt(true), Wrap(Null(false)) !@<= Wrap(Opt(true)), Null(false) !$<= Opt(true), Wrap(Null(false)) !$<= Wrap(Opt(true)))
Case(Null(false) !@<= Opt(true), Wrap(Null(false)) !@<= Wrap(Opt(true)), Null(false) !$<= Opt(true), Wrap(Null(false)) !$<= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(false) !@>  Opt(true), Wrap(Null(false)) !@>  Wrap(Opt(true)), Null(false) !$>  Opt(true), Wrap(Null(false)) !$>  Wrap(Opt(true)))
Case(Null(false) !@> Opt(true), Wrap(Null(false)) !@> Wrap(Opt(true)), Null(false) !$> Opt(true), Wrap(Null(false)) !$> Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(false) !@>= Opt(true), Wrap(Null(false)) !@>= Wrap(Opt(true)), Null(false) !$>= Opt(true), Wrap(Null(false)) !$>= Wrap(Opt(true)))
Case(Null(false) !@>= Opt(true), Wrap(Null(false)) !@>= Wrap(Opt(true)), Null(false) !$>= Opt(true), Wrap(Null(false)) !$>= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:b?):b?) @< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(null:b?):b?) !$>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false)  @=  false, Wrap(Opt(false))  @=  Wrap(false), Opt(false)  $=  false, Wrap(Opt(false))  $=  Wrap(false))
Case(Opt(false) @= false, Wrap(Opt(false)) @= Wrap(false), Opt(false) $= false, Wrap(Opt(false)) $= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false)  @<  false, Wrap(Opt(false))  @<  Wrap(false), Opt(false)  $<  false, Wrap(Opt(false))  $<  Wrap(false))
Case(Opt(false) @< false, Wrap(Opt(false)) @< Wrap(false), Opt(false) $< false, Wrap(Opt(false)) $< Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @< Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $< Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false)  @<= false, Wrap(Opt(false))  @<= Wrap(false), Opt(false)  $<= false, Wrap(Opt(false))  $<= Wrap(false))
Case(Opt(false) @<= false, Wrap(Opt(false)) @<= Wrap(false), Opt(false) $<= false, Wrap(Opt(false)) $<= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @<= Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $<= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false)  @>  false, Wrap(Opt(false))  @>  Wrap(false), Opt(false)  $>  false, Wrap(Opt(false))  $>  Wrap(false))
Case(Opt(false) @> false, Wrap(Opt(false)) @> Wrap(false), Opt(false) $> false, Wrap(Opt(false)) $> Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @> Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $> Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false)  @>= false, Wrap(Opt(false))  @>= Wrap(false), Opt(false)  $>= false, Wrap(Opt(false))  $>= Wrap(false))
Case(Opt(false) @>= false, Wrap(Opt(false)) @>= Wrap(false), Opt(false) $>= false, Wrap(Opt(false)) $>= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @>= Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $>= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false) !@=  false, Wrap(Opt(false)) !@=  Wrap(false), Opt(false) !$=  false, Wrap(Opt(false)) !$=  Wrap(false))
Case(Opt(false) !@= false, Wrap(Opt(false)) !@= Wrap(false), Opt(false) !$= false, Wrap(Opt(false)) !$= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !@= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false) !@<  false, Wrap(Opt(false)) !@<  Wrap(false), Opt(false) !$<  false, Wrap(Opt(false)) !$<  Wrap(false))
Case(Opt(false) !@< false, Wrap(Opt(false)) !@< Wrap(false), Opt(false) !$< false, Wrap(Opt(false)) !$< Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @>= Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$< Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false) !@<= false, Wrap(Opt(false)) !@<= Wrap(false), Opt(false) !$<= false, Wrap(Opt(false)) !$<= Wrap(false))
Case(Opt(false) !@<= false, Wrap(Opt(false)) !@<= Wrap(false), Opt(false) !$<= false, Wrap(Opt(false)) !$<= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @> Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$<= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false) !@>  false, Wrap(Opt(false)) !@>  Wrap(false), Opt(false) !$>  false, Wrap(Opt(false)) !$>  Wrap(false))
Case(Opt(false) !@> false, Wrap(Opt(false)) !@> Wrap(false), Opt(false) !$> false, Wrap(Opt(false)) !$> Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @<= Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$> Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false) !@>= false, Wrap(Opt(false)) !@>= Wrap(false), Opt(false) !$>= false, Wrap(Opt(false)) !$>= Wrap(false))
Case(Opt(false) !@>= false, Wrap(Opt(false)) !@>= Wrap(false), Opt(false) !$>= false, Wrap(Opt(false)) !$>= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @< Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$>= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false)  @=  true, Wrap(Opt(false))  @=  Wrap(true), Opt(false)  $=  true, Wrap(Opt(false))  $=  Wrap(true))
Case(Opt(false) @= true, Wrap(Opt(false)) @= Wrap(true), Opt(false) $= true, Wrap(Opt(false)) $= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false)  @<  true, Wrap(Opt(false))  @<  Wrap(true), Opt(false)  $<  true, Wrap(Opt(false))  $<  Wrap(true))
Case(Opt(false) @< true, Wrap(Opt(false)) @< Wrap(true), Opt(false) $< true, Wrap(Opt(false)) $< Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @< Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $< Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false)  @<= true, Wrap(Opt(false))  @<= Wrap(true), Opt(false)  $<= true, Wrap(Opt(false))  $<= Wrap(true))
Case(Opt(false) @<= true, Wrap(Opt(false)) @<= Wrap(true), Opt(false) $<= true, Wrap(Opt(false)) $<= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @<= Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $<= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false)  @>  true, Wrap(Opt(false))  @>  Wrap(true), Opt(false)  $>  true, Wrap(Opt(false))  $>  Wrap(true))
Case(Opt(false) @> true, Wrap(Opt(false)) @> Wrap(true), Opt(false) $> true, Wrap(Opt(false)) $> Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @> Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $> Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false)  @>= true, Wrap(Opt(false))  @>= Wrap(true), Opt(false)  $>= true, Wrap(Opt(false))  $>= Wrap(true))
Case(Opt(false) @>= true, Wrap(Opt(false)) @>= Wrap(true), Opt(false) $>= true, Wrap(Opt(false)) $>= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @>= Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $>= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false) !@=  true, Wrap(Opt(false)) !@=  Wrap(true), Opt(false) !$=  true, Wrap(Opt(false)) !$=  Wrap(true))
Case(Opt(false) !@= true, Wrap(Opt(false)) !@= Wrap(true), Opt(false) !$= true, Wrap(Opt(false)) !$= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !@= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false) !@<  true, Wrap(Opt(false)) !@<  Wrap(true), Opt(false) !$<  true, Wrap(Opt(false)) !$<  Wrap(true))
Case(Opt(false) !@< true, Wrap(Opt(false)) !@< Wrap(true), Opt(false) !$< true, Wrap(Opt(false)) !$< Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @>= Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$< Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false) !@<= true, Wrap(Opt(false)) !@<= Wrap(true), Opt(false) !$<= true, Wrap(Opt(false)) !$<= Wrap(true))
Case(Opt(false) !@<= true, Wrap(Opt(false)) !@<= Wrap(true), Opt(false) !$<= true, Wrap(Opt(false)) !$<= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @> Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$<= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false) !@>  true, Wrap(Opt(false)) !@>  Wrap(true), Opt(false) !$>  true, Wrap(Opt(false)) !$>  Wrap(true))
Case(Opt(false) !@> true, Wrap(Opt(false)) !@> Wrap(true), Opt(false) !$> true, Wrap(Opt(false)) !$> Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @<= Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$> Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false) !@>= true, Wrap(Opt(false)) !@>= Wrap(true), Opt(false) !$>= true, Wrap(Opt(false)) !$>= Wrap(true))
Case(Opt(false) !@>= true, Wrap(Opt(false)) !@>= Wrap(true), Opt(false) !$>= true, Wrap(Opt(false)) !$>= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @< Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$>= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false)  @=  Null(false), Wrap(Opt(false))  @=  Wrap(Null(false)), Opt(false)  $=  Null(false), Wrap(Opt(false))  $=  Wrap(Null(false)))
Case(Opt(false) @= Null(false), Wrap(Opt(false)) @= Wrap(Null(false)), Opt(false) $= Null(false), Wrap(Opt(false)) $= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false)  @<  Null(false), Wrap(Opt(false))  @<  Wrap(Null(false)), Opt(false)  $<  Null(false), Wrap(Opt(false))  $<  Wrap(Null(false)))
Case(Opt(false) @< Null(false), Wrap(Opt(false)) @< Wrap(Null(false)), Opt(false) $< Null(false), Wrap(Opt(false)) $< Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @< Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $< Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false)  @<= Null(false), Wrap(Opt(false))  @<= Wrap(Null(false)), Opt(false)  $<= Null(false), Wrap(Opt(false))  $<= Wrap(Null(false)))
Case(Opt(false) @<= Null(false), Wrap(Opt(false)) @<= Wrap(Null(false)), Opt(false) $<= Null(false), Wrap(Opt(false)) $<= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @<= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $<= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false)  @>  Null(false), Wrap(Opt(false))  @>  Wrap(Null(false)), Opt(false)  $>  Null(false), Wrap(Opt(false))  $>  Wrap(Null(false)))
Case(Opt(false) @> Null(false), Wrap(Opt(false)) @> Wrap(Null(false)), Opt(false) $> Null(false), Wrap(Opt(false)) $> Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @> Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $> Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Opt(false)  @>= Null(false), Wrap(Opt(false))  @>= Wrap(Null(false)), Opt(false)  $>= Null(false), Wrap(Opt(false))  $>= Wrap(Null(false)))
Case(Opt(false) @>= Null(false), Wrap(Opt(false)) @>= Wrap(Null(false)), Opt(false) $>= Null(false), Wrap(Opt(false)) $>= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @>= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $>= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Opt(false) !@=  Null(false), Wrap(Opt(false)) !@=  Wrap(Null(false)), Opt(false) !$=  Null(false), Wrap(Opt(false)) !$=  Wrap(Null(false)))
Case(Opt(false) !@= Null(false), Wrap(Opt(false)) !@= Wrap(Null(false)), Opt(false) !$= Null(false), Wrap(Opt(false)) !$= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !@= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false) !@<  Null(false), Wrap(Opt(false)) !@<  Wrap(Null(false)), Opt(false) !$<  Null(false), Wrap(Opt(false)) !$<  Wrap(Null(false)))
Case(Opt(false) !@< Null(false), Wrap(Opt(false)) !@< Wrap(Null(false)), Opt(false) !$< Null(false), Wrap(Opt(false)) !$< Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @>= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$< Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false) !@<= Null(false), Wrap(Opt(false)) !@<= Wrap(Null(false)), Opt(false) !$<= Null(false), Wrap(Opt(false)) !$<= Wrap(Null(false)))
Case(Opt(false) !@<= Null(false), Wrap(Opt(false)) !@<= Wrap(Null(false)), Opt(false) !$<= Null(false), Wrap(Opt(false)) !$<= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @> Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$<= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false) !@>  Null(false), Wrap(Opt(false)) !@>  Wrap(Null(false)), Opt(false) !$>  Null(false), Wrap(Opt(false)) !$>  Wrap(Null(false)))
Case(Opt(false) !@> Null(false), Wrap(Opt(false)) !@> Wrap(Null(false)), Opt(false) !$> Null(false), Wrap(Opt(false)) !$> Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @<= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$> Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Opt(false) !@>= Null(false), Wrap(Opt(false)) !@>= Wrap(Null(false)), Opt(false) !$>= Null(false), Wrap(Opt(false)) !$>= Wrap(Null(false)))
Case(Opt(false) !@>= Null(false), Wrap(Opt(false)) !@>= Wrap(Null(false)), Opt(false) !$>= Null(false), Wrap(Opt(false)) !$>= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @< Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$>= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Opt(false)  @=  Opt(false), Wrap(Opt(false))  @=  Wrap(Opt(false)), Opt(false)  $=  Opt(false), Wrap(Opt(false))  $=  Wrap(Opt(false)))
Case(Opt(false) @= Opt(false), Wrap(Opt(false)) @= Wrap(Opt(false)), Opt(false) $= Opt(false), Wrap(Opt(false)) $= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false)  @<  Opt(false), Wrap(Opt(false))  @<  Wrap(Opt(false)), Opt(false)  $<  Opt(false), Wrap(Opt(false))  $<  Wrap(Opt(false)))
Case(Opt(false) @< Opt(false), Wrap(Opt(false)) @< Wrap(Opt(false)), Opt(false) $< Opt(false), Wrap(Opt(false)) $< Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false)  @<= Opt(false), Wrap(Opt(false))  @<= Wrap(Opt(false)), Opt(false)  $<= Opt(false), Wrap(Opt(false))  $<= Wrap(Opt(false)))
Case(Opt(false) @<= Opt(false), Wrap(Opt(false)) @<= Wrap(Opt(false)), Opt(false) $<= Opt(false), Wrap(Opt(false)) $<= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false)  @>  Opt(false), Wrap(Opt(false))  @>  Wrap(Opt(false)), Opt(false)  $>  Opt(false), Wrap(Opt(false))  $>  Wrap(Opt(false)))
Case(Opt(false) @> Opt(false), Wrap(Opt(false)) @> Wrap(Opt(false)), Opt(false) $> Opt(false), Wrap(Opt(false)) $> Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false)  @>= Opt(false), Wrap(Opt(false))  @>= Wrap(Opt(false)), Opt(false)  $>= Opt(false), Wrap(Opt(false))  $>= Wrap(Opt(false)))
Case(Opt(false) @>= Opt(false), Wrap(Opt(false)) @>= Wrap(Opt(false)), Opt(false) $>= Opt(false), Wrap(Opt(false)) $>= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false) !@=  Opt(false), Wrap(Opt(false)) !@=  Wrap(Opt(false)), Opt(false) !$=  Opt(false), Wrap(Opt(false)) !$=  Wrap(Opt(false)))
Case(Opt(false) !@= Opt(false), Wrap(Opt(false)) !@= Wrap(Opt(false)), Opt(false) !$= Opt(false), Wrap(Opt(false)) !$= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !@= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false) !@<  Opt(false), Wrap(Opt(false)) !@<  Wrap(Opt(false)), Opt(false) !$<  Opt(false), Wrap(Opt(false)) !$<  Wrap(Opt(false)))
Case(Opt(false) !@< Opt(false), Wrap(Opt(false)) !@< Wrap(Opt(false)), Opt(false) !$< Opt(false), Wrap(Opt(false)) !$< Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false) !@<= Opt(false), Wrap(Opt(false)) !@<= Wrap(Opt(false)), Opt(false) !$<= Opt(false), Wrap(Opt(false)) !$<= Wrap(Opt(false)))
Case(Opt(false) !@<= Opt(false), Wrap(Opt(false)) !@<= Wrap(Opt(false)), Opt(false) !$<= Opt(false), Wrap(Opt(false)) !$<= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false) !@>  Opt(false), Wrap(Opt(false)) !@>  Wrap(Opt(false)), Opt(false) !$>  Opt(false), Wrap(Opt(false)) !$>  Wrap(Opt(false)))
Case(Opt(false) !@> Opt(false), Wrap(Opt(false)) !@> Wrap(Opt(false)), Opt(false) !$> Opt(false), Wrap(Opt(false)) !$> Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false) !@>= Opt(false), Wrap(Opt(false)) !@>= Wrap(Opt(false)), Opt(false) !$>= Opt(false), Wrap(Opt(false)) !$>= Wrap(Opt(false)))
Case(Opt(false) !@>= Opt(false), Wrap(Opt(false)) !@>= Wrap(Opt(false)), Opt(false) !$>= Opt(false), Wrap(Opt(false)) !$>= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false)  @=  Opt(true), Wrap(Opt(false))  @=  Wrap(Opt(true)), Opt(false)  $=  Opt(true), Wrap(Opt(false))  $=  Wrap(Opt(true)))
Case(Opt(false) @= Opt(true), Wrap(Opt(false)) @= Wrap(Opt(true)), Opt(false) $= Opt(true), Wrap(Opt(false)) $= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false)  @<  Opt(true), Wrap(Opt(false))  @<  Wrap(Opt(true)), Opt(false)  $<  Opt(true), Wrap(Opt(false))  $<  Wrap(Opt(true)))
Case(Opt(false) @< Opt(true), Wrap(Opt(false)) @< Wrap(Opt(true)), Opt(false) $< Opt(true), Wrap(Opt(false)) $< Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false)  @<= Opt(true), Wrap(Opt(false))  @<= Wrap(Opt(true)), Opt(false)  $<= Opt(true), Wrap(Opt(false))  $<= Wrap(Opt(true)))
Case(Opt(false) @<= Opt(true), Wrap(Opt(false)) @<= Wrap(Opt(true)), Opt(false) $<= Opt(true), Wrap(Opt(false)) $<= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false)  @>  Opt(true), Wrap(Opt(false))  @>  Wrap(Opt(true)), Opt(false)  $>  Opt(true), Wrap(Opt(false))  $>  Wrap(Opt(true)))
Case(Opt(false) @> Opt(true), Wrap(Opt(false)) @> Wrap(Opt(true)), Opt(false) $> Opt(true), Wrap(Opt(false)) $> Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false)  @>= Opt(true), Wrap(Opt(false))  @>= Wrap(Opt(true)), Opt(false)  $>= Opt(true), Wrap(Opt(false))  $>= Wrap(Opt(true)))
Case(Opt(false) @>= Opt(true), Wrap(Opt(false)) @>= Wrap(Opt(true)), Opt(false) $>= Opt(true), Wrap(Opt(false)) $>= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) $>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false) !@=  Opt(true), Wrap(Opt(false)) !@=  Wrap(Opt(true)), Opt(false) !$=  Opt(true), Wrap(Opt(false)) !$=  Wrap(Opt(true)))
Case(Opt(false) !@= Opt(true), Wrap(Opt(false)) !@= Wrap(Opt(true)), Opt(false) !$= Opt(true), Wrap(Opt(false)) !$= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !@= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false) !@<  Opt(true), Wrap(Opt(false)) !@<  Wrap(Opt(true)), Opt(false) !$<  Opt(true), Wrap(Opt(false)) !$<  Wrap(Opt(true)))
Case(Opt(false) !@< Opt(true), Wrap(Opt(false)) !@< Wrap(Opt(true)), Opt(false) !$< Opt(true), Wrap(Opt(false)) !$< Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false) !@<= Opt(true), Wrap(Opt(false)) !@<= Wrap(Opt(true)), Opt(false) !$<= Opt(true), Wrap(Opt(false)) !$<= Wrap(Opt(true)))
Case(Opt(false) !@<= Opt(true), Wrap(Opt(false)) !@<= Wrap(Opt(true)), Opt(false) !$<= Opt(true), Wrap(Opt(false)) !$<= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(false) !@>  Opt(true), Wrap(Opt(false)) !@>  Wrap(Opt(true)), Opt(false) !$>  Opt(true), Wrap(Opt(false)) !$>  Wrap(Opt(true)))
Case(Opt(false) !@> Opt(true), Wrap(Opt(false)) !@> Wrap(Opt(true)), Opt(false) !$> Opt(true), Wrap(Opt(false)) !$> Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(false) !@>= Opt(true), Wrap(Opt(false)) !@>= Wrap(Opt(true)), Opt(false) !$>= Opt(true), Wrap(Opt(false)) !$>= Wrap(Opt(true)))
Case(Opt(false) !@>= Opt(true), Wrap(Opt(false)) !@>= Wrap(Opt(true)), Opt(false) !$>= Opt(true), Wrap(Opt(false)) !$>= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) @< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(false:b)):b?) !$>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true)  @=  false, Wrap(Opt(true))  @=  Wrap(false), Opt(true)  $=  false, Wrap(Opt(true))  $=  Wrap(false))
Case(Opt(true) @= false, Wrap(Opt(true)) @= Wrap(false), Opt(true) $= false, Wrap(Opt(true)) $= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true)  @<  false, Wrap(Opt(true))  @<  Wrap(false), Opt(true)  $<  false, Wrap(Opt(true))  $<  Wrap(false))
Case(Opt(true) @< false, Wrap(Opt(true)) @< Wrap(false), Opt(true) $< false, Wrap(Opt(true)) $< Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @< Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $< Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true)  @<= false, Wrap(Opt(true))  @<= Wrap(false), Opt(true)  $<= false, Wrap(Opt(true))  $<= Wrap(false))
Case(Opt(true) @<= false, Wrap(Opt(true)) @<= Wrap(false), Opt(true) $<= false, Wrap(Opt(true)) $<= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @<= Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $<= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true)  @>  false, Wrap(Opt(true))  @>  Wrap(false), Opt(true)  $>  false, Wrap(Opt(true))  $>  Wrap(false))
Case(Opt(true) @> false, Wrap(Opt(true)) @> Wrap(false), Opt(true) $> false, Wrap(Opt(true)) $> Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @> Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $> Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true)  @>= false, Wrap(Opt(true))  @>= Wrap(false), Opt(true)  $>= false, Wrap(Opt(true))  $>= Wrap(false))
Case(Opt(true) @>= false, Wrap(Opt(true)) @>= Wrap(false), Opt(true) $>= false, Wrap(Opt(true)) $>= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @>= Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $>= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@=  false, Wrap(Opt(true)) !@=  Wrap(false), Opt(true) !$=  false, Wrap(Opt(true)) !$=  Wrap(false))
Case(Opt(true) !@= false, Wrap(Opt(true)) !@= Wrap(false), Opt(true) !$= false, Wrap(Opt(true)) !$= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !@= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@<  false, Wrap(Opt(true)) !@<  Wrap(false), Opt(true) !$<  false, Wrap(Opt(true)) !$<  Wrap(false))
Case(Opt(true) !@< false, Wrap(Opt(true)) !@< Wrap(false), Opt(true) !$< false, Wrap(Opt(true)) !$< Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @>= Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$< Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@<= false, Wrap(Opt(true)) !@<= Wrap(false), Opt(true) !$<= false, Wrap(Opt(true)) !$<= Wrap(false))
Case(Opt(true) !@<= false, Wrap(Opt(true)) !@<= Wrap(false), Opt(true) !$<= false, Wrap(Opt(true)) !$<= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @> Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$<= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@>  false, Wrap(Opt(true)) !@>  Wrap(false), Opt(true) !$>  false, Wrap(Opt(true)) !$>  Wrap(false))
Case(Opt(true) !@> false, Wrap(Opt(true)) !@> Wrap(false), Opt(true) !$> false, Wrap(Opt(true)) !$> Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @<= Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$> Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true) !@>= false, Wrap(Opt(true)) !@>= Wrap(false), Opt(true) !$>= false, Wrap(Opt(true)) !$>= Wrap(false))
Case(Opt(true) !@>= false, Wrap(Opt(true)) !@>= Wrap(false), Opt(true) !$>= false, Wrap(Opt(true)) !$>= Wrap(false)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @< Call(∂.Test.Wrap(false:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$>= Call(∂.Test.Wrap(false:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true)  @=  true, Wrap(Opt(true))  @=  Wrap(true), Opt(true)  $=  true, Wrap(Opt(true))  $=  Wrap(true))
Case(Opt(true) @= true, Wrap(Opt(true)) @= Wrap(true), Opt(true) $= true, Wrap(Opt(true)) $= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(1))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true)  @<  true, Wrap(Opt(true))  @<  Wrap(true), Opt(true)  $<  true, Wrap(Opt(true))  $<  Wrap(true))
Case(Opt(true) @< true, Wrap(Opt(true)) @< Wrap(true), Opt(true) $< true, Wrap(Opt(true)) $< Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @< Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $< Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true)  @<= true, Wrap(Opt(true))  @<= Wrap(true), Opt(true)  $<= true, Wrap(Opt(true))  $<= Wrap(true))
Case(Opt(true) @<= true, Wrap(Opt(true)) @<= Wrap(true), Opt(true) $<= true, Wrap(Opt(true)) $<= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @<= Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $<= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true)  @>  true, Wrap(Opt(true))  @>  Wrap(true), Opt(true)  $>  true, Wrap(Opt(true))  $>  Wrap(true))
Case(Opt(true) @> true, Wrap(Opt(true)) @> Wrap(true), Opt(true) $> true, Wrap(Opt(true)) $> Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @> Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $> Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true)  @>= true, Wrap(Opt(true))  @>= Wrap(true), Opt(true)  $>= true, Wrap(Opt(true))  $>= Wrap(true))
Case(Opt(true) @>= true, Wrap(Opt(true)) @>= Wrap(true), Opt(true) $>= true, Wrap(Opt(true)) $>= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @>= Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $>= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@=  true, Wrap(Opt(true)) !@=  Wrap(true), Opt(true) !$=  true, Wrap(Opt(true)) !$=  Wrap(true))
Case(Opt(true) !@= true, Wrap(Opt(true)) !@= Wrap(true), Opt(true) !$= true, Wrap(Opt(true)) !$= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !@= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(1))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(1)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true) !@<  true, Wrap(Opt(true)) !@<  Wrap(true), Opt(true) !$<  true, Wrap(Opt(true)) !$<  Wrap(true))
Case(Opt(true) !@< true, Wrap(Opt(true)) !@< Wrap(true), Opt(true) !$< true, Wrap(Opt(true)) !$< Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @>= Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$< Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@<= true, Wrap(Opt(true)) !@<= Wrap(true), Opt(true) !$<= true, Wrap(Opt(true)) !$<= Wrap(true))
Case(Opt(true) !@<= true, Wrap(Opt(true)) !@<= Wrap(true), Opt(true) !$<= true, Wrap(Opt(true)) !$<= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @> Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$<= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true) !@>  true, Wrap(Opt(true)) !@>  Wrap(true), Opt(true) !$>  true, Wrap(Opt(true)) !$>  Wrap(true))
Case(Opt(true) !@> true, Wrap(Opt(true)) !@> Wrap(true), Opt(true) !$> true, Wrap(Opt(true)) !$> Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @<= Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$> Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@>= true, Wrap(Opt(true)) !@>= Wrap(true), Opt(true) !$>= true, Wrap(Opt(true)) !$>= Wrap(true))
Case(Opt(true) !@>= true, Wrap(Opt(true)) !@>= Wrap(true), Opt(true) !$>= true, Wrap(Opt(true)) !$>= Wrap(true)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @< Call(∂.Test.Wrap(true:b):b)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$>= Call(∂.Test.Wrap(true:b):b)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true)  @=  Null(false), Wrap(Opt(true))  @=  Wrap(Null(false)), Opt(true)  $=  Null(false), Wrap(Opt(true))  $=  Wrap(Null(false)))
Case(Opt(true) @= Null(false), Wrap(Opt(true)) @= Wrap(Null(false)), Opt(true) $= Null(false), Wrap(Opt(true)) $= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true)  @<  Null(false), Wrap(Opt(true))  @<  Wrap(Null(false)), Opt(true)  $<  Null(false), Wrap(Opt(true))  $<  Wrap(Null(false)))
Case(Opt(true) @< Null(false), Wrap(Opt(true)) @< Wrap(Null(false)), Opt(true) $< Null(false), Wrap(Opt(true)) $< Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @< Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $< Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true)  @<= Null(false), Wrap(Opt(true))  @<= Wrap(Null(false)), Opt(true)  $<= Null(false), Wrap(Opt(true))  $<= Wrap(Null(false)))
Case(Opt(true) @<= Null(false), Wrap(Opt(true)) @<= Wrap(Null(false)), Opt(true) $<= Null(false), Wrap(Opt(true)) $<= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @<= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $<= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true)  @>  Null(false), Wrap(Opt(true))  @>  Wrap(Null(false)), Opt(true)  $>  Null(false), Wrap(Opt(true))  $>  Wrap(Null(false)))
Case(Opt(true) @> Null(false), Wrap(Opt(true)) @> Wrap(Null(false)), Opt(true) $> Null(false), Wrap(Opt(true)) $> Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @> Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $> Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Opt(true)  @>= Null(false), Wrap(Opt(true))  @>= Wrap(Null(false)), Opt(true)  $>= Null(false), Wrap(Opt(true))  $>= Wrap(Null(false)))
Case(Opt(true) @>= Null(false), Wrap(Opt(true)) @>= Wrap(Null(false)), Opt(true) $>= Null(false), Wrap(Opt(true)) $>= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @>= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $>= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Opt(true) !@=  Null(false), Wrap(Opt(true)) !@=  Wrap(Null(false)), Opt(true) !$=  Null(false), Wrap(Opt(true)) !$=  Wrap(Null(false)))
Case(Opt(true) !@= Null(false), Wrap(Opt(true)) !@= Wrap(Null(false)), Opt(true) !$= Null(false), Wrap(Opt(true)) !$= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !@= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@<  Null(false), Wrap(Opt(true)) !@<  Wrap(Null(false)), Opt(true) !$<  Null(false), Wrap(Opt(true)) !$<  Wrap(Null(false)))
Case(Opt(true) !@< Null(false), Wrap(Opt(true)) !@< Wrap(Null(false)), Opt(true) !$< Null(false), Wrap(Opt(true)) !$< Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @>= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$< Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@<= Null(false), Wrap(Opt(true)) !@<= Wrap(Null(false)), Opt(true) !$<= Null(false), Wrap(Opt(true)) !$<= Wrap(Null(false)))
Case(Opt(true) !@<= Null(false), Wrap(Opt(true)) !@<= Wrap(Null(false)), Opt(true) !$<= Null(false), Wrap(Opt(true)) !$<= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @> Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$<= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@>  Null(false), Wrap(Opt(true)) !@>  Wrap(Null(false)), Opt(true) !$>  Null(false), Wrap(Opt(true)) !$>  Wrap(Null(false)))
Case(Opt(true) !@> Null(false), Wrap(Opt(true)) !@> Wrap(Null(false)), Opt(true) !$> Null(false), Wrap(Opt(true)) !$> Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @<= Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$> Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Opt(true) !@>= Null(false), Wrap(Opt(true)) !@>= Wrap(Null(false)), Opt(true) !$>= Null(false), Wrap(Opt(true)) !$>= Wrap(Null(false)))
Case(Opt(true) !@>= Null(false), Wrap(Opt(true)) !@>= Wrap(Null(false)), Opt(true) !$>= Null(false), Wrap(Opt(true)) !$>= Wrap(Null(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @< Call(∂.Test.Wrap(null:b?):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$>= Call(∂.Test.Wrap(null:b?):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Opt(true)  @=  Opt(false), Wrap(Opt(true))  @=  Wrap(Opt(false)), Opt(true)  $=  Opt(false), Wrap(Opt(true))  $=  Wrap(Opt(false)))
Case(Opt(true) @= Opt(false), Wrap(Opt(true)) @= Wrap(Opt(false)), Opt(true) $= Opt(false), Wrap(Opt(true)) $= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true)  @<  Opt(false), Wrap(Opt(true))  @<  Wrap(Opt(false)), Opt(true)  $<  Opt(false), Wrap(Opt(true))  $<  Wrap(Opt(false)))
Case(Opt(true) @< Opt(false), Wrap(Opt(true)) @< Wrap(Opt(false)), Opt(true) $< Opt(false), Wrap(Opt(true)) $< Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true)  @<= Opt(false), Wrap(Opt(true))  @<= Wrap(Opt(false)), Opt(true)  $<= Opt(false), Wrap(Opt(true))  $<= Wrap(Opt(false)))
Case(Opt(true) @<= Opt(false), Wrap(Opt(true)) @<= Wrap(Opt(false)), Opt(true) $<= Opt(false), Wrap(Opt(true)) $<= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true)  @>  Opt(false), Wrap(Opt(true))  @>  Wrap(Opt(false)), Opt(true)  $>  Opt(false), Wrap(Opt(true))  $>  Wrap(Opt(false)))
Case(Opt(true) @> Opt(false), Wrap(Opt(true)) @> Wrap(Opt(false)), Opt(true) $> Opt(false), Wrap(Opt(true)) $> Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true)  @>= Opt(false), Wrap(Opt(true))  @>= Wrap(Opt(false)), Opt(true)  $>= Opt(false), Wrap(Opt(true))  $>= Wrap(Opt(false)))
Case(Opt(true) @>= Opt(false), Wrap(Opt(true)) @>= Wrap(Opt(false)), Opt(true) $>= Opt(false), Wrap(Opt(true)) $>= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@=  Opt(false), Wrap(Opt(true)) !@=  Wrap(Opt(false)), Opt(true) !$=  Opt(false), Wrap(Opt(true)) !$=  Wrap(Opt(false)))
Case(Opt(true) !@= Opt(false), Wrap(Opt(true)) !@= Wrap(Opt(false)), Opt(true) !$= Opt(false), Wrap(Opt(true)) !$= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !@= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@<  Opt(false), Wrap(Opt(true)) !@<  Wrap(Opt(false)), Opt(true) !$<  Opt(false), Wrap(Opt(true)) !$<  Wrap(Opt(false)))
Case(Opt(true) !@< Opt(false), Wrap(Opt(true)) !@< Wrap(Opt(false)), Opt(true) !$< Opt(false), Wrap(Opt(true)) !$< Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@<= Opt(false), Wrap(Opt(true)) !@<= Wrap(Opt(false)), Opt(true) !$<= Opt(false), Wrap(Opt(true)) !$<= Wrap(Opt(false)))
Case(Opt(true) !@<= Opt(false), Wrap(Opt(true)) !@<= Wrap(Opt(false)), Opt(true) !$<= Opt(false), Wrap(Opt(true)) !$<= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@>  Opt(false), Wrap(Opt(true)) !@>  Wrap(Opt(false)), Opt(true) !$>  Opt(false), Wrap(Opt(true)) !$>  Wrap(Opt(false)))
Case(Opt(true) !@> Opt(false), Wrap(Opt(true)) !@> Wrap(Opt(false)), Opt(true) !$> Opt(false), Wrap(Opt(true)) !$> Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @<= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$> Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true) !@>= Opt(false), Wrap(Opt(true)) !@>= Wrap(Opt(false)), Opt(true) !$>= Opt(false), Wrap(Opt(true)) !$>= Wrap(Opt(false)))
Case(Opt(true) !@>= Opt(false), Wrap(Opt(true)) !@>= Wrap(Opt(false)), Opt(true) !$>= Opt(false), Wrap(Opt(true)) !$>= Wrap(Opt(false))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @< Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$>= Call(∂.Test.Wrap(Opt<b?>(false:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true)  @=  Opt(true), Wrap(Opt(true))  @=  Wrap(Opt(true)), Opt(true)  $=  Opt(true), Wrap(Opt(true))  $=  Wrap(Opt(true)))
Case(Opt(true) @= Opt(true), Wrap(Opt(true)) @= Wrap(Opt(true)), Opt(true) $= Opt(true), Wrap(Opt(true)) $= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true)  @<  Opt(true), Wrap(Opt(true))  @<  Wrap(Opt(true)), Opt(true)  $<  Opt(true), Wrap(Opt(true))  $<  Wrap(Opt(true)))
Case(Opt(true) @< Opt(true), Wrap(Opt(true)) @< Wrap(Opt(true)), Opt(true) $< Opt(true), Wrap(Opt(true)) $< Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true)  @<= Opt(true), Wrap(Opt(true))  @<= Wrap(Opt(true)), Opt(true)  $<= Opt(true), Wrap(Opt(true))  $<= Wrap(Opt(true)))
Case(Opt(true) @<= Opt(true), Wrap(Opt(true)) @<= Wrap(Opt(true)), Opt(true) $<= Opt(true), Wrap(Opt(true)) $<= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true)  @>  Opt(true), Wrap(Opt(true))  @>  Wrap(Opt(true)), Opt(true)  $>  Opt(true), Wrap(Opt(true))  $>  Wrap(Opt(true)))
Case(Opt(true) @> Opt(true), Wrap(Opt(true)) @> Wrap(Opt(true)), Opt(true) $> Opt(true), Wrap(Opt(true)) $> Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true)  @>= Opt(true), Wrap(Opt(true))  @>= Wrap(Opt(true)), Opt(true)  $>= Opt(true), Wrap(Opt(true))  $>= Wrap(Opt(true)))
Case(Opt(true) @>= Opt(true), Wrap(Opt(true)) @>= Wrap(Opt(true)), Opt(true) $>= Opt(true), Wrap(Opt(true)) $>= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) $>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@=  Opt(true), Wrap(Opt(true)) !@=  Wrap(Opt(true)), Opt(true) !$=  Opt(true), Wrap(Opt(true)) !$=  Wrap(Opt(true)))
Case(Opt(true) !@= Opt(true), Wrap(Opt(true)) !@= Wrap(Opt(true)), Opt(true) !$= Opt(true), Wrap(Opt(true)) !$= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !@= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true) !@<  Opt(true), Wrap(Opt(true)) !@<  Wrap(Opt(true)), Opt(true) !$<  Opt(true), Wrap(Opt(true)) !$<  Wrap(Opt(true)))
Case(Opt(true) !@< Opt(true), Wrap(Opt(true)) !@< Wrap(Opt(true)), Opt(true) !$< Opt(true), Wrap(Opt(true)) !$< Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@<= Opt(true), Wrap(Opt(true)) !@<= Wrap(Opt(true)), Opt(true) !$<= Opt(true), Wrap(Opt(true)) !$<= Wrap(Opt(true)))
Case(Opt(true) !@<= Opt(true), Wrap(Opt(true)) !@<= Wrap(Opt(true)), Opt(true) !$<= Opt(true), Wrap(Opt(true)) !$<= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(true) !@>  Opt(true), Wrap(Opt(true)) !@>  Wrap(Opt(true)), Opt(true) !$>  Opt(true), Wrap(Opt(true)) !$>  Wrap(Opt(true)))
Case(Opt(true) !@> Opt(true), Wrap(Opt(true)) !@> Wrap(Opt(true)), Opt(true) !$> Opt(true), Wrap(Opt(true)) !$> Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @<= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$> Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(true) !@>= Opt(true), Wrap(Opt(true)) !@>= Wrap(Opt(true)), Opt(true) !$>= Opt(true), Wrap(Opt(true)) !$>= Wrap(Opt(true)))
Case(Opt(true) !@>= Opt(true), Wrap(Opt(true)) !@>= Wrap(Opt(true)), Opt(true) !$>= Opt(true), Wrap(Opt(true)) !$>= Wrap(Opt(true))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) @< Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<b?>(true:b)):b?) !$>= Call(∂.Test.Wrap(Opt<b?>(true:b)):b?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> "*** For r8 and r4, strict treats NaN and null differently. Reductions handle non-finites."
"*** For r8 and r4, strict treats NaN and null differently. Reductions handle non-finites." : s
BndKind:Str, Type:s, Bnd:(str(*** For r8 and r4, strict treats NaN and null differently. Reductions handle non-finites.))
Func sig: () to s
Type: str, Value: *** For r8 and r4, strict treats NaN and null differently. Reductions handle non-finites.
###
> Case(3r8  @=  5r8, Wrap(3r8)  @=  Wrap(5r8), 3r8  $=  5r8, Wrap(3r8)  $=  Wrap(5r8))
Case(3 @= 5, Wrap(3) @= Wrap(5), 3 $= 5, Wrap(3) $= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8  @<  5r8, Wrap(3r8)  @<  Wrap(5r8), 3r8  $<  5r8, Wrap(3r8)  $<  Wrap(5r8))
Case(3 @< 5, Wrap(3) @< Wrap(5), 3 $< 5, Wrap(3) $< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @< Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $< Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8  @<= 5r8, Wrap(3r8)  @<= Wrap(5r8), 3r8  $<= 5r8, Wrap(3r8)  $<= Wrap(5r8))
Case(3 @<= 5, Wrap(3) @<= Wrap(5), 3 $<= 5, Wrap(3) $<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @<= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $<= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8  @>  5r8, Wrap(3r8)  @>  Wrap(5r8), 3r8  $>  5r8, Wrap(3r8)  $>  Wrap(5r8))
Case(3 @> 5, Wrap(3) @> Wrap(5), 3 $> 5, Wrap(3) $> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @> Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $> Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8  @>= 5r8, Wrap(3r8)  @>= Wrap(5r8), 3r8  $>= 5r8, Wrap(3r8)  $>= Wrap(5r8))
Case(3 @>= 5, Wrap(3) @>= Wrap(5), 3 $>= 5, Wrap(3) $>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @>= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $>= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8 !@=  5r8, Wrap(3r8) !@=  Wrap(5r8), 3r8 !$=  5r8, Wrap(3r8) !$=  Wrap(5r8))
Case(3 !@= 5, Wrap(3) !@= Wrap(5), 3 !$= 5, Wrap(3) !$= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) !@= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8 !@<  5r8, Wrap(3r8) !@<  Wrap(5r8), 3r8 !$<  5r8, Wrap(3r8) !$<  Wrap(5r8))
Case(3 !@< 5, Wrap(3) !@< Wrap(5), 3 !$< 5, Wrap(3) !$< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @>= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$< Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8 !@<= 5r8, Wrap(3r8) !@<= Wrap(5r8), 3r8 !$<= 5r8, Wrap(3r8) !$<= Wrap(5r8))
Case(3 !@<= 5, Wrap(3) !@<= Wrap(5), 3 !$<= 5, Wrap(3) !$<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @> Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$<= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8 !@>  5r8, Wrap(3r8) !@>  Wrap(5r8), 3r8 !$>  5r8, Wrap(3r8) !$>  Wrap(5r8))
Case(3 !@> 5, Wrap(3) !@> Wrap(5), 3 !$> 5, Wrap(3) !$> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @<= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$> Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8 !@>= 5r8, Wrap(3r8) !@>= Wrap(5r8), 3r8 !$>= 5r8, Wrap(3r8) !$>= Wrap(5r8))
Case(3 !@>= 5, Wrap(3) !@>= Wrap(5), 3 !$>= 5, Wrap(3) !$>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @< Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$>= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8  @=  0/0, Wrap(3r8)  @=  Wrap(0/0), 3r8  $=  0/0, Wrap(3r8)  $=  Wrap(0/0))
Case(3 @= 0 / 0, Wrap(3) @= Wrap(0 / 0), 3 $= 0 / 0, Wrap(3) $= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8  @<  0/0, Wrap(3r8)  @<  Wrap(0/0), 3r8  $<  0/0, Wrap(3r8)  $<  Wrap(0/0))
Case(3 @< 0 / 0, Wrap(3) @< Wrap(0 / 0), 3 $< 0 / 0, Wrap(3) $< Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @< Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $< Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8  @<= 0/0, Wrap(3r8)  @<= Wrap(0/0), 3r8  $<= 0/0, Wrap(3r8)  $<= Wrap(0/0))
Case(3 @<= 0 / 0, Wrap(3) @<= Wrap(0 / 0), 3 $<= 0 / 0, Wrap(3) $<= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @<= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $<= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8  @>  0/0, Wrap(3r8)  @>  Wrap(0/0), 3r8  $>  0/0, Wrap(3r8)  $>  Wrap(0/0))
Case(3 @> 0 / 0, Wrap(3) @> Wrap(0 / 0), 3 $> 0 / 0, Wrap(3) $> Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @> Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $> Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(3r8  @>= 0/0, Wrap(3r8)  @>= Wrap(0/0), 3r8  $>= 0/0, Wrap(3r8)  $>= Wrap(0/0))
Case(3 @>= 0 / 0, Wrap(3) @>= Wrap(0 / 0), 3 $>= 0 / 0, Wrap(3) $>= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @>= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $>= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(3r8 !@=  0/0, Wrap(3r8) !@=  Wrap(0/0), 3r8 !$=  0/0, Wrap(3r8) !$=  Wrap(0/0))
Case(3 !@= 0 / 0, Wrap(3) !@= Wrap(0 / 0), 3 !$= 0 / 0, Wrap(3) !$= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) !@= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8 !@<  0/0, Wrap(3r8) !@<  Wrap(0/0), 3r8 !$<  0/0, Wrap(3r8) !$<  Wrap(0/0))
Case(3 !@< 0 / 0, Wrap(3) !@< Wrap(0 / 0), 3 !$< 0 / 0, Wrap(3) !$< Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @>= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$< Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8 !@<= 0/0, Wrap(3r8) !@<= Wrap(0/0), 3r8 !$<= 0/0, Wrap(3r8) !$<= Wrap(0/0))
Case(3 !@<= 0 / 0, Wrap(3) !@<= Wrap(0 / 0), 3 !$<= 0 / 0, Wrap(3) !$<= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @> Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$<= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8 !@>  0/0, Wrap(3r8) !@>  Wrap(0/0), 3r8 !$>  0/0, Wrap(3r8) !$>  Wrap(0/0))
Case(3 !@> 0 / 0, Wrap(3) !@> Wrap(0 / 0), 3 !$> 0 / 0, Wrap(3) !$> Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @<= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$> Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(3r8 !@>= 0/0, Wrap(3r8) !@>= Wrap(0/0), 3r8 !$>= 0/0, Wrap(3r8) !$>= Wrap(0/0))
Case(3 !@>= 0 / 0, Wrap(3) !@>= Wrap(0 / 0), 3 !$>= 0 / 0, Wrap(3) !$>= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @< Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$>= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(3r8  @=  1/0, Wrap(3r8)  @=  Wrap(1/0), 3r8  $=  1/0, Wrap(3r8)  $=  Wrap(1/0))
Case(3 @= 1 / 0, Wrap(3) @= Wrap(1 / 0), 3 $= 1 / 0, Wrap(3) $= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8  @<  1/0, Wrap(3r8)  @<  Wrap(1/0), 3r8  $<  1/0, Wrap(3r8)  $<  Wrap(1/0))
Case(3 @< 1 / 0, Wrap(3) @< Wrap(1 / 0), 3 $< 1 / 0, Wrap(3) $< Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @< Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $< Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8  @<= 1/0, Wrap(3r8)  @<= Wrap(1/0), 3r8  $<= 1/0, Wrap(3r8)  $<= Wrap(1/0))
Case(3 @<= 1 / 0, Wrap(3) @<= Wrap(1 / 0), 3 $<= 1 / 0, Wrap(3) $<= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @<= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $<= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8  @>  1/0, Wrap(3r8)  @>  Wrap(1/0), 3r8  $>  1/0, Wrap(3r8)  $>  Wrap(1/0))
Case(3 @> 1 / 0, Wrap(3) @> Wrap(1 / 0), 3 $> 1 / 0, Wrap(3) $> Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @> Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $> Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8  @>= 1/0, Wrap(3r8)  @>= Wrap(1/0), 3r8  $>= 1/0, Wrap(3r8)  $>= Wrap(1/0))
Case(3 @>= 1 / 0, Wrap(3) @>= Wrap(1 / 0), 3 $>= 1 / 0, Wrap(3) $>= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @>= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $>= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8 !@=  1/0, Wrap(3r8) !@=  Wrap(1/0), 3r8 !$=  1/0, Wrap(3r8) !$=  Wrap(1/0))
Case(3 !@= 1 / 0, Wrap(3) !@= Wrap(1 / 0), 3 !$= 1 / 0, Wrap(3) !$= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) !@= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8 !@<  1/0, Wrap(3r8) !@<  Wrap(1/0), 3r8 !$<  1/0, Wrap(3r8) !$<  Wrap(1/0))
Case(3 !@< 1 / 0, Wrap(3) !@< Wrap(1 / 0), 3 !$< 1 / 0, Wrap(3) !$< Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @>= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$< Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8 !@<= 1/0, Wrap(3r8) !@<= Wrap(1/0), 3r8 !$<= 1/0, Wrap(3r8) !$<= Wrap(1/0))
Case(3 !@<= 1 / 0, Wrap(3) !@<= Wrap(1 / 0), 3 !$<= 1 / 0, Wrap(3) !$<= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @> Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$<= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8 !@>  1/0, Wrap(3r8) !@>  Wrap(1/0), 3r8 !$>  1/0, Wrap(3r8) !$>  Wrap(1/0))
Case(3 !@> 1 / 0, Wrap(3) !@> Wrap(1 / 0), 3 !$> 1 / 0, Wrap(3) !$> Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @<= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$> Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8 !@>= 1/0, Wrap(3r8) !@>= Wrap(1/0), 3r8 !$>= 1/0, Wrap(3r8) !$>= Wrap(1/0))
Case(3 !@>= 1 / 0, Wrap(3) !@>= Wrap(1 / 0), 3 !$>= 1 / 0, Wrap(3) !$>= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @< Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$>= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8  @=  -1/0, Wrap(3r8)  @=  Wrap(-1/0), 3r8  $=  -1/0, Wrap(3r8)  $=  Wrap(-1/0))
Case(3 @= -1 / 0, Wrap(3) @= Wrap(-1 / 0), 3 $= -1 / 0, Wrap(3) $= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8  @<  -1/0, Wrap(3r8)  @<  Wrap(-1/0), 3r8  $<  -1/0, Wrap(3r8)  $<  Wrap(-1/0))
Case(3 @< -1 / 0, Wrap(3) @< Wrap(-1 / 0), 3 $< -1 / 0, Wrap(3) $< Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @< Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $< Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8  @<= -1/0, Wrap(3r8)  @<= Wrap(-1/0), 3r8  $<= -1/0, Wrap(3r8)  $<= Wrap(-1/0))
Case(3 @<= -1 / 0, Wrap(3) @<= Wrap(-1 / 0), 3 $<= -1 / 0, Wrap(3) $<= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @<= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $<= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8  @>  -1/0, Wrap(3r8)  @>  Wrap(-1/0), 3r8  $>  -1/0, Wrap(3r8)  $>  Wrap(-1/0))
Case(3 @> -1 / 0, Wrap(3) @> Wrap(-1 / 0), 3 $> -1 / 0, Wrap(3) $> Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @> Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $> Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8  @>= -1/0, Wrap(3r8)  @>= Wrap(-1/0), 3r8  $>= -1/0, Wrap(3r8)  $>= Wrap(-1/0))
Case(3 @>= -1 / 0, Wrap(3) @>= Wrap(-1 / 0), 3 $>= -1 / 0, Wrap(3) $>= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @>= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $>= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8 !@=  -1/0, Wrap(3r8) !@=  Wrap(-1/0), 3r8 !$=  -1/0, Wrap(3r8) !$=  Wrap(-1/0))
Case(3 !@= -1 / 0, Wrap(3) !@= Wrap(-1 / 0), 3 !$= -1 / 0, Wrap(3) !$= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) !@= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8 !@<  -1/0, Wrap(3r8) !@<  Wrap(-1/0), 3r8 !$<  -1/0, Wrap(3r8) !$<  Wrap(-1/0))
Case(3 !@< -1 / 0, Wrap(3) !@< Wrap(-1 / 0), 3 !$< -1 / 0, Wrap(3) !$< Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @>= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$< Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8 !@<= -1/0, Wrap(3r8) !@<= Wrap(-1/0), 3r8 !$<= -1/0, Wrap(3r8) !$<= Wrap(-1/0))
Case(3 !@<= -1 / 0, Wrap(3) !@<= Wrap(-1 / 0), 3 !$<= -1 / 0, Wrap(3) !$<= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @> Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$<= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8 !@>  -1/0, Wrap(3r8) !@>  Wrap(-1/0), 3r8 !$>  -1/0, Wrap(3r8) !$>  Wrap(-1/0))
Case(3 !@> -1 / 0, Wrap(3) !@> Wrap(-1 / 0), 3 !$> -1 / 0, Wrap(3) !$> Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @<= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$> Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8 !@>= -1/0, Wrap(3r8) !@>= Wrap(-1/0), 3r8 !$>= -1/0, Wrap(3r8) !$>= Wrap(-1/0))
Case(3 !@>= -1 / 0, Wrap(3) !@>= Wrap(-1 / 0), 3 !$>= -1 / 0, Wrap(3) !$>= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @< Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$>= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8  @=  Null(5r8), Wrap(3r8)  @=  Wrap(Null(5r8)), 3r8  $=  Null(5r8), Wrap(3r8)  $=  Wrap(Null(5r8)))
Case(3 @= Null(5), Wrap(3) @= Wrap(Null(5)), 3 $= Null(5), Wrap(3) $= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8  @<  Null(5r8), Wrap(3r8)  @<  Wrap(Null(5r8)), 3r8  $<  Null(5r8), Wrap(3r8)  $<  Wrap(Null(5r8)))
Case(3 @< Null(5), Wrap(3) @< Wrap(Null(5)), 3 $< Null(5), Wrap(3) $< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @< Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $< Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8  @<= Null(5r8), Wrap(3r8)  @<= Wrap(Null(5r8)), 3r8  $<= Null(5r8), Wrap(3r8)  $<= Wrap(Null(5r8)))
Case(3 @<= Null(5), Wrap(3) @<= Wrap(Null(5)), 3 $<= Null(5), Wrap(3) $<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @<= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $<= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8  @>  Null(5r8), Wrap(3r8)  @>  Wrap(Null(5r8)), 3r8  $>  Null(5r8), Wrap(3r8)  $>  Wrap(Null(5r8)))
Case(3 @> Null(5), Wrap(3) @> Wrap(Null(5)), 3 $> Null(5), Wrap(3) $> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @> Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $> Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(3r8  @>= Null(5r8), Wrap(3r8)  @>= Wrap(Null(5r8)), 3r8  $>= Null(5r8), Wrap(3r8)  $>= Wrap(Null(5r8)))
Case(3 @>= Null(5), Wrap(3) @>= Wrap(Null(5)), 3 $>= Null(5), Wrap(3) $>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @>= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $>= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(3r8 !@=  Null(5r8), Wrap(3r8) !@=  Wrap(Null(5r8)), 3r8 !$=  Null(5r8), Wrap(3r8) !$=  Wrap(Null(5r8)))
Case(3 !@= Null(5), Wrap(3) !@= Wrap(Null(5)), 3 !$= Null(5), Wrap(3) !$= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) !@= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8 !@<  Null(5r8), Wrap(3r8) !@<  Wrap(Null(5r8)), 3r8 !$<  Null(5r8), Wrap(3r8) !$<  Wrap(Null(5r8)))
Case(3 !@< Null(5), Wrap(3) !@< Wrap(Null(5)), 3 !$< Null(5), Wrap(3) !$< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @>= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$< Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8 !@<= Null(5r8), Wrap(3r8) !@<= Wrap(Null(5r8)), 3r8 !$<= Null(5r8), Wrap(3r8) !$<= Wrap(Null(5r8)))
Case(3 !@<= Null(5), Wrap(3) !@<= Wrap(Null(5)), 3 !$<= Null(5), Wrap(3) !$<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @> Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$<= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8 !@>  Null(5r8), Wrap(3r8) !@>  Wrap(Null(5r8)), 3r8 !$>  Null(5r8), Wrap(3r8) !$>  Wrap(Null(5r8)))
Case(3 !@> Null(5), Wrap(3) !@> Wrap(Null(5)), 3 !$> Null(5), Wrap(3) !$> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @<= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$> Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(3r8 !@>= Null(5r8), Wrap(3r8) !@>= Wrap(Null(5r8)), 3r8 !$>= Null(5r8), Wrap(3r8) !$>= Wrap(Null(5r8)))
Case(3 !@>= Null(5), Wrap(3) !@>= Wrap(Null(5)), 3 !$>= Null(5), Wrap(3) !$>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @< Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$>= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(3r8  @=  Opt(5r8), Wrap(3r8)  @=  Wrap(Opt(5r8)), 3r8  $=  Opt(5r8), Wrap(3r8)  $=  Wrap(Opt(5r8)))
Case(3 @= Opt(5), Wrap(3) @= Wrap(Opt(5)), 3 $= Opt(5), Wrap(3) $= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8  @<  Opt(5r8), Wrap(3r8)  @<  Wrap(Opt(5r8)), 3r8  $<  Opt(5r8), Wrap(3r8)  $<  Wrap(Opt(5r8)))
Case(3 @< Opt(5), Wrap(3) @< Wrap(Opt(5)), 3 $< Opt(5), Wrap(3) $< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8  @<= Opt(5r8), Wrap(3r8)  @<= Wrap(Opt(5r8)), 3r8  $<= Opt(5r8), Wrap(3r8)  $<= Wrap(Opt(5r8)))
Case(3 @<= Opt(5), Wrap(3) @<= Wrap(Opt(5)), 3 $<= Opt(5), Wrap(3) $<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8  @>  Opt(5r8), Wrap(3r8)  @>  Wrap(Opt(5r8)), 3r8  $>  Opt(5r8), Wrap(3r8)  $>  Wrap(Opt(5r8)))
Case(3 @> Opt(5), Wrap(3) @> Wrap(Opt(5)), 3 $> Opt(5), Wrap(3) $> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8  @>= Opt(5r8), Wrap(3r8)  @>= Wrap(Opt(5r8)), 3r8  $>= Opt(5r8), Wrap(3r8)  $>= Wrap(Opt(5r8)))
Case(3 @>= Opt(5), Wrap(3) @>= Wrap(Opt(5)), 3 $>= Opt(5), Wrap(3) $>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) $>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8 !@=  Opt(5r8), Wrap(3r8) !@=  Wrap(Opt(5r8)), 3r8 !$=  Opt(5r8), Wrap(3r8) !$=  Wrap(Opt(5r8)))
Case(3 !@= Opt(5), Wrap(3) !@= Wrap(Opt(5)), 3 !$= Opt(5), Wrap(3) !$= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) !@= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8 !@<  Opt(5r8), Wrap(3r8) !@<  Wrap(Opt(5r8)), 3r8 !$<  Opt(5r8), Wrap(3r8) !$<  Wrap(Opt(5r8)))
Case(3 !@< Opt(5), Wrap(3) !@< Wrap(Opt(5)), 3 !$< Opt(5), Wrap(3) !$< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8 !@<= Opt(5r8), Wrap(3r8) !@<= Wrap(Opt(5r8)), 3r8 !$<= Opt(5r8), Wrap(3r8) !$<= Wrap(Opt(5r8)))
Case(3 !@<= Opt(5), Wrap(3) !@<= Wrap(Opt(5)), 3 !$<= Opt(5), Wrap(3) !$<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r8 !@>  Opt(5r8), Wrap(3r8) !@>  Wrap(Opt(5r8)), 3r8 !$>  Opt(5r8), Wrap(3r8) !$>  Wrap(Opt(5r8)))
Case(3 !@> Opt(5), Wrap(3) !@> Wrap(Opt(5)), 3 !$> Opt(5), Wrap(3) !$> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r8 !@>= Opt(5r8), Wrap(3r8) !@>= Wrap(Opt(5r8)), 3r8 !$>= Opt(5r8), Wrap(3r8) !$>= Wrap(Opt(5r8)))
Case(3 !@>= Opt(5), Wrap(3) !@>= Wrap(Opt(5)), 3 !$>= Opt(5), Wrap(3) !$>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r8):r8) @< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r8):r8) !$>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0  @=  5r8, Wrap(0/0)  @=  Wrap(5r8), 0/0  $=  5r8, Wrap(0/0)  $=  Wrap(5r8))
Case(0 / 0 @= 5, Wrap(0 / 0) @= Wrap(5), 0 / 0 $= 5, Wrap(0 / 0) $= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0  @<  5r8, Wrap(0/0)  @<  Wrap(5r8), 0/0  $<  5r8, Wrap(0/0)  $<  Wrap(5r8))
Case(0 / 0 @< 5, Wrap(0 / 0) @< Wrap(5), 0 / 0 $< 5, Wrap(0 / 0) $< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @< Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $< Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(0/0  @<= 5r8, Wrap(0/0)  @<= Wrap(5r8), 0/0  $<= 5r8, Wrap(0/0)  $<= Wrap(5r8))
Case(0 / 0 @<= 5, Wrap(0 / 0) @<= Wrap(5), 0 / 0 $<= 5, Wrap(0 / 0) $<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @<= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $<= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(0/0  @>  5r8, Wrap(0/0)  @>  Wrap(5r8), 0/0  $>  5r8, Wrap(0/0)  $>  Wrap(5r8))
Case(0 / 0 @> 5, Wrap(0 / 0) @> Wrap(5), 0 / 0 $> 5, Wrap(0 / 0) $> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @> Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $> Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0  @>= 5r8, Wrap(0/0)  @>= Wrap(5r8), 0/0  $>= 5r8, Wrap(0/0)  $>= Wrap(5r8))
Case(0 / 0 @>= 5, Wrap(0 / 0) @>= Wrap(5), 0 / 0 $>= 5, Wrap(0 / 0) $>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @>= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $>= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0 !@=  5r8, Wrap(0/0) !@=  Wrap(5r8), 0/0 !$=  5r8, Wrap(0/0) !$=  Wrap(5r8))
Case(0 / 0 !@= 5, Wrap(0 / 0) !@= Wrap(5), 0 / 0 !$= 5, Wrap(0 / 0) !$= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !@= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0 !@<  5r8, Wrap(0/0) !@<  Wrap(5r8), 0/0 !$<  5r8, Wrap(0/0) !$<  Wrap(5r8))
Case(0 / 0 !@< 5, Wrap(0 / 0) !@< Wrap(5), 0 / 0 !$< 5, Wrap(0 / 0) !$< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @>= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$< Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(0/0 !@<= 5r8, Wrap(0/0) !@<= Wrap(5r8), 0/0 !$<= 5r8, Wrap(0/0) !$<= Wrap(5r8))
Case(0 / 0 !@<= 5, Wrap(0 / 0) !@<= Wrap(5), 0 / 0 !$<= 5, Wrap(0 / 0) !$<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @> Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$<= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(0/0 !@>  5r8, Wrap(0/0) !@>  Wrap(5r8), 0/0 !$>  5r8, Wrap(0/0) !$>  Wrap(5r8))
Case(0 / 0 !@> 5, Wrap(0 / 0) !@> Wrap(5), 0 / 0 !$> 5, Wrap(0 / 0) !$> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @<= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$> Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0 !@>= 5r8, Wrap(0/0) !@>= Wrap(5r8), 0/0 !$>= 5r8, Wrap(0/0) !$>= Wrap(5r8))
Case(0 / 0 !@>= 5, Wrap(0 / 0) !@>= Wrap(5), 0 / 0 !$>= 5, Wrap(0 / 0) !$>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @< Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$>= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0  @=  0/0, Wrap(0/0)  @=  Wrap(0/0), 0/0  $=  0/0, Wrap(0/0)  $=  Wrap(0/0))
Case(0 / 0 @= 0 / 0, Wrap(0 / 0) @= Wrap(0 / 0), 0 / 0 $= 0 / 0, Wrap(0 / 0) $= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(0/0  @<  0/0, Wrap(0/0)  @<  Wrap(0/0), 0/0  $<  0/0, Wrap(0/0)  $<  Wrap(0/0))
Case(0 / 0 @< 0 / 0, Wrap(0 / 0) @< Wrap(0 / 0), 0 / 0 $< 0 / 0, Wrap(0 / 0) $< Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @< Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $< Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0  @<= 0/0, Wrap(0/0)  @<= Wrap(0/0), 0/0  $<= 0/0, Wrap(0/0)  $<= Wrap(0/0))
Case(0 / 0 @<= 0 / 0, Wrap(0 / 0) @<= Wrap(0 / 0), 0 / 0 $<= 0 / 0, Wrap(0 / 0) $<= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @<= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $<= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(0/0  @>  0/0, Wrap(0/0)  @>  Wrap(0/0), 0/0  $>  0/0, Wrap(0/0)  $>  Wrap(0/0))
Case(0 / 0 @> 0 / 0, Wrap(0 / 0) @> Wrap(0 / 0), 0 / 0 $> 0 / 0, Wrap(0 / 0) $> Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @> Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $> Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0  @>= 0/0, Wrap(0/0)  @>= Wrap(0/0), 0/0  $>= 0/0, Wrap(0/0)  $>= Wrap(0/0))
Case(0 / 0 @>= 0 / 0, Wrap(0 / 0) @>= Wrap(0 / 0), 0 / 0 $>= 0 / 0, Wrap(0 / 0) $>= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @>= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $>= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(0/0 !@=  0/0, Wrap(0/0) !@=  Wrap(0/0), 0/0 !$=  0/0, Wrap(0/0) !$=  Wrap(0/0))
Case(0 / 0 !@= 0 / 0, Wrap(0 / 0) !@= Wrap(0 / 0), 0 / 0 !$= 0 / 0, Wrap(0 / 0) !$= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !@= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(0/0 !@<  0/0, Wrap(0/0) !@<  Wrap(0/0), 0/0 !$<  0/0, Wrap(0/0) !$<  Wrap(0/0))
Case(0 / 0 !@< 0 / 0, Wrap(0 / 0) !@< Wrap(0 / 0), 0 / 0 !$< 0 / 0, Wrap(0 / 0) !$< Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @>= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$< Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0 !@<= 0/0, Wrap(0/0) !@<= Wrap(0/0), 0/0 !$<= 0/0, Wrap(0/0) !$<= Wrap(0/0))
Case(0 / 0 !@<= 0 / 0, Wrap(0 / 0) !@<= Wrap(0 / 0), 0 / 0 !$<= 0 / 0, Wrap(0 / 0) !$<= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @> Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$<= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(0/0 !@>  0/0, Wrap(0/0) !@>  Wrap(0/0), 0/0 !$>  0/0, Wrap(0/0) !$>  Wrap(0/0))
Case(0 / 0 !@> 0 / 0, Wrap(0 / 0) !@> Wrap(0 / 0), 0 / 0 !$> 0 / 0, Wrap(0 / 0) !$> Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @<= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$> Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0 !@>= 0/0, Wrap(0/0) !@>= Wrap(0/0), 0/0 !$>= 0/0, Wrap(0/0) !$>= Wrap(0/0))
Case(0 / 0 !@>= 0 / 0, Wrap(0 / 0) !@>= Wrap(0 / 0), 0 / 0 !$>= 0 / 0, Wrap(0 / 0) !$>= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @< Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$>= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(0/0  @=  1/0, Wrap(0/0)  @=  Wrap(1/0), 0/0  $=  1/0, Wrap(0/0)  $=  Wrap(1/0))
Case(0 / 0 @= 1 / 0, Wrap(0 / 0) @= Wrap(1 / 0), 0 / 0 $= 1 / 0, Wrap(0 / 0) $= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0  @<  1/0, Wrap(0/0)  @<  Wrap(1/0), 0/0  $<  1/0, Wrap(0/0)  $<  Wrap(1/0))
Case(0 / 0 @< 1 / 0, Wrap(0 / 0) @< Wrap(1 / 0), 0 / 0 $< 1 / 0, Wrap(0 / 0) $< Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @< Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $< Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(0/0  @<= 1/0, Wrap(0/0)  @<= Wrap(1/0), 0/0  $<= 1/0, Wrap(0/0)  $<= Wrap(1/0))
Case(0 / 0 @<= 1 / 0, Wrap(0 / 0) @<= Wrap(1 / 0), 0 / 0 $<= 1 / 0, Wrap(0 / 0) $<= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @<= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $<= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(0/0  @>  1/0, Wrap(0/0)  @>  Wrap(1/0), 0/0  $>  1/0, Wrap(0/0)  $>  Wrap(1/0))
Case(0 / 0 @> 1 / 0, Wrap(0 / 0) @> Wrap(1 / 0), 0 / 0 $> 1 / 0, Wrap(0 / 0) $> Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @> Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $> Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0  @>= 1/0, Wrap(0/0)  @>= Wrap(1/0), 0/0  $>= 1/0, Wrap(0/0)  $>= Wrap(1/0))
Case(0 / 0 @>= 1 / 0, Wrap(0 / 0) @>= Wrap(1 / 0), 0 / 0 $>= 1 / 0, Wrap(0 / 0) $>= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @>= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $>= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0 !@=  1/0, Wrap(0/0) !@=  Wrap(1/0), 0/0 !$=  1/0, Wrap(0/0) !$=  Wrap(1/0))
Case(0 / 0 !@= 1 / 0, Wrap(0 / 0) !@= Wrap(1 / 0), 0 / 0 !$= 1 / 0, Wrap(0 / 0) !$= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !@= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0 !@<  1/0, Wrap(0/0) !@<  Wrap(1/0), 0/0 !$<  1/0, Wrap(0/0) !$<  Wrap(1/0))
Case(0 / 0 !@< 1 / 0, Wrap(0 / 0) !@< Wrap(1 / 0), 0 / 0 !$< 1 / 0, Wrap(0 / 0) !$< Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @>= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$< Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(0/0 !@<= 1/0, Wrap(0/0) !@<= Wrap(1/0), 0/0 !$<= 1/0, Wrap(0/0) !$<= Wrap(1/0))
Case(0 / 0 !@<= 1 / 0, Wrap(0 / 0) !@<= Wrap(1 / 0), 0 / 0 !$<= 1 / 0, Wrap(0 / 0) !$<= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @> Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$<= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(0/0 !@>  1/0, Wrap(0/0) !@>  Wrap(1/0), 0/0 !$>  1/0, Wrap(0/0) !$>  Wrap(1/0))
Case(0 / 0 !@> 1 / 0, Wrap(0 / 0) !@> Wrap(1 / 0), 0 / 0 !$> 1 / 0, Wrap(0 / 0) !$> Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @<= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$> Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0 !@>= 1/0, Wrap(0/0) !@>= Wrap(1/0), 0/0 !$>= 1/0, Wrap(0/0) !$>= Wrap(1/0))
Case(0 / 0 !@>= 1 / 0, Wrap(0 / 0) !@>= Wrap(1 / 0), 0 / 0 !$>= 1 / 0, Wrap(0 / 0) !$>= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @< Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$>= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0  @=  -1/0, Wrap(0/0)  @=  Wrap(-1/0), 0/0  $=  -1/0, Wrap(0/0)  $=  Wrap(-1/0))
Case(0 / 0 @= -1 / 0, Wrap(0 / 0) @= Wrap(-1 / 0), 0 / 0 $= -1 / 0, Wrap(0 / 0) $= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0  @<  -1/0, Wrap(0/0)  @<  Wrap(-1/0), 0/0  $<  -1/0, Wrap(0/0)  $<  Wrap(-1/0))
Case(0 / 0 @< -1 / 0, Wrap(0 / 0) @< Wrap(-1 / 0), 0 / 0 $< -1 / 0, Wrap(0 / 0) $< Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @< Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $< Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(0/0  @<= -1/0, Wrap(0/0)  @<= Wrap(-1/0), 0/0  $<= -1/0, Wrap(0/0)  $<= Wrap(-1/0))
Case(0 / 0 @<= -1 / 0, Wrap(0 / 0) @<= Wrap(-1 / 0), 0 / 0 $<= -1 / 0, Wrap(0 / 0) $<= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @<= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $<= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(0/0  @>  -1/0, Wrap(0/0)  @>  Wrap(-1/0), 0/0  $>  -1/0, Wrap(0/0)  $>  Wrap(-1/0))
Case(0 / 0 @> -1 / 0, Wrap(0 / 0) @> Wrap(-1 / 0), 0 / 0 $> -1 / 0, Wrap(0 / 0) $> Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @> Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $> Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0  @>= -1/0, Wrap(0/0)  @>= Wrap(-1/0), 0/0  $>= -1/0, Wrap(0/0)  $>= Wrap(-1/0))
Case(0 / 0 @>= -1 / 0, Wrap(0 / 0) @>= Wrap(-1 / 0), 0 / 0 $>= -1 / 0, Wrap(0 / 0) $>= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @>= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $>= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0 !@=  -1/0, Wrap(0/0) !@=  Wrap(-1/0), 0/0 !$=  -1/0, Wrap(0/0) !$=  Wrap(-1/0))
Case(0 / 0 !@= -1 / 0, Wrap(0 / 0) !@= Wrap(-1 / 0), 0 / 0 !$= -1 / 0, Wrap(0 / 0) !$= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !@= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0 !@<  -1/0, Wrap(0/0) !@<  Wrap(-1/0), 0/0 !$<  -1/0, Wrap(0/0) !$<  Wrap(-1/0))
Case(0 / 0 !@< -1 / 0, Wrap(0 / 0) !@< Wrap(-1 / 0), 0 / 0 !$< -1 / 0, Wrap(0 / 0) !$< Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @>= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$< Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(0/0 !@<= -1/0, Wrap(0/0) !@<= Wrap(-1/0), 0/0 !$<= -1/0, Wrap(0/0) !$<= Wrap(-1/0))
Case(0 / 0 !@<= -1 / 0, Wrap(0 / 0) !@<= Wrap(-1 / 0), 0 / 0 !$<= -1 / 0, Wrap(0 / 0) !$<= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @> Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$<= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(0/0 !@>  -1/0, Wrap(0/0) !@>  Wrap(-1/0), 0/0 !$>  -1/0, Wrap(0/0) !$>  Wrap(-1/0))
Case(0 / 0 !@> -1 / 0, Wrap(0 / 0) !@> Wrap(-1 / 0), 0 / 0 !$> -1 / 0, Wrap(0 / 0) !$> Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @<= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$> Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0 !@>= -1/0, Wrap(0/0) !@>= Wrap(-1/0), 0/0 !$>= -1/0, Wrap(0/0) !$>= Wrap(-1/0))
Case(0 / 0 !@>= -1 / 0, Wrap(0 / 0) !@>= Wrap(-1 / 0), 0 / 0 !$>= -1 / 0, Wrap(0 / 0) !$>= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @< Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$>= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0  @=  Null(5r8), Wrap(0/0)  @=  Wrap(Null(5r8)), 0/0  $=  Null(5r8), Wrap(0/0)  $=  Wrap(Null(5r8)))
Case(0 / 0 @= Null(5), Wrap(0 / 0) @= Wrap(Null(5)), 0 / 0 $= Null(5), Wrap(0 / 0) $= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0  @<  Null(5r8), Wrap(0/0)  @<  Wrap(Null(5r8)), 0/0  $<  Null(5r8), Wrap(0/0)  $<  Wrap(Null(5r8)))
Case(0 / 0 @< Null(5), Wrap(0 / 0) @< Wrap(Null(5)), 0 / 0 $< Null(5), Wrap(0 / 0) $< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @< Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $< Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0  @<= Null(5r8), Wrap(0/0)  @<= Wrap(Null(5r8)), 0/0  $<= Null(5r8), Wrap(0/0)  $<= Wrap(Null(5r8)))
Case(0 / 0 @<= Null(5), Wrap(0 / 0) @<= Wrap(Null(5)), 0 / 0 $<= Null(5), Wrap(0 / 0) $<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @<= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $<= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0  @>  Null(5r8), Wrap(0/0)  @>  Wrap(Null(5r8)), 0/0  $>  Null(5r8), Wrap(0/0)  $>  Wrap(Null(5r8)))
Case(0 / 0 @> Null(5), Wrap(0 / 0) @> Wrap(Null(5)), 0 / 0 $> Null(5), Wrap(0 / 0) $> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @> Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $> Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(0/0  @>= Null(5r8), Wrap(0/0)  @>= Wrap(Null(5r8)), 0/0  $>= Null(5r8), Wrap(0/0)  $>= Wrap(Null(5r8)))
Case(0 / 0 @>= Null(5), Wrap(0 / 0) @>= Wrap(Null(5)), 0 / 0 $>= Null(5), Wrap(0 / 0) $>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @>= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $>= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(0/0 !@=  Null(5r8), Wrap(0/0) !@=  Wrap(Null(5r8)), 0/0 !$=  Null(5r8), Wrap(0/0) !$=  Wrap(Null(5r8)))
Case(0 / 0 !@= Null(5), Wrap(0 / 0) !@= Wrap(Null(5)), 0 / 0 !$= Null(5), Wrap(0 / 0) !$= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !@= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0 !@<  Null(5r8), Wrap(0/0) !@<  Wrap(Null(5r8)), 0/0 !$<  Null(5r8), Wrap(0/0) !$<  Wrap(Null(5r8)))
Case(0 / 0 !@< Null(5), Wrap(0 / 0) !@< Wrap(Null(5)), 0 / 0 !$< Null(5), Wrap(0 / 0) !$< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @>= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$< Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0 !@<= Null(5r8), Wrap(0/0) !@<= Wrap(Null(5r8)), 0/0 !$<= Null(5r8), Wrap(0/0) !$<= Wrap(Null(5r8)))
Case(0 / 0 !@<= Null(5), Wrap(0 / 0) !@<= Wrap(Null(5)), 0 / 0 !$<= Null(5), Wrap(0 / 0) !$<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @> Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$<= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0 !@>  Null(5r8), Wrap(0/0) !@>  Wrap(Null(5r8)), 0/0 !$>  Null(5r8), Wrap(0/0) !$>  Wrap(Null(5r8)))
Case(0 / 0 !@> Null(5), Wrap(0 / 0) !@> Wrap(Null(5)), 0 / 0 !$> Null(5), Wrap(0 / 0) !$> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @<= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$> Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(0/0 !@>= Null(5r8), Wrap(0/0) !@>= Wrap(Null(5r8)), 0/0 !$>= Null(5r8), Wrap(0/0) !$>= Wrap(Null(5r8)))
Case(0 / 0 !@>= Null(5), Wrap(0 / 0) !@>= Wrap(Null(5)), 0 / 0 !$>= Null(5), Wrap(0 / 0) !$>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @< Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$>= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(0/0  @=  Opt(5r8), Wrap(0/0)  @=  Wrap(Opt(5r8)), 0/0  $=  Opt(5r8), Wrap(0/0)  $=  Wrap(Opt(5r8)))
Case(0 / 0 @= Opt(5), Wrap(0 / 0) @= Wrap(Opt(5)), 0 / 0 $= Opt(5), Wrap(0 / 0) $= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0  @<  Opt(5r8), Wrap(0/0)  @<  Wrap(Opt(5r8)), 0/0  $<  Opt(5r8), Wrap(0/0)  $<  Wrap(Opt(5r8)))
Case(0 / 0 @< Opt(5), Wrap(0 / 0) @< Wrap(Opt(5)), 0 / 0 $< Opt(5), Wrap(0 / 0) $< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(0/0  @<= Opt(5r8), Wrap(0/0)  @<= Wrap(Opt(5r8)), 0/0  $<= Opt(5r8), Wrap(0/0)  $<= Wrap(Opt(5r8)))
Case(0 / 0 @<= Opt(5), Wrap(0 / 0) @<= Wrap(Opt(5)), 0 / 0 $<= Opt(5), Wrap(0 / 0) $<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(0/0  @>  Opt(5r8), Wrap(0/0)  @>  Wrap(Opt(5r8)), 0/0  $>  Opt(5r8), Wrap(0/0)  $>  Wrap(Opt(5r8)))
Case(0 / 0 @> Opt(5), Wrap(0 / 0) @> Wrap(Opt(5)), 0 / 0 $> Opt(5), Wrap(0 / 0) $> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0  @>= Opt(5r8), Wrap(0/0)  @>= Wrap(Opt(5r8)), 0/0  $>= Opt(5r8), Wrap(0/0)  $>= Wrap(Opt(5r8)))
Case(0 / 0 @>= Opt(5), Wrap(0 / 0) @>= Wrap(Opt(5)), 0 / 0 $>= Opt(5), Wrap(0 / 0) $>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) $>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(0/0 !@=  Opt(5r8), Wrap(0/0) !@=  Wrap(Opt(5r8)), 0/0 !$=  Opt(5r8), Wrap(0/0) !$=  Wrap(Opt(5r8)))
Case(0 / 0 !@= Opt(5), Wrap(0 / 0) !@= Wrap(Opt(5)), 0 / 0 !$= Opt(5), Wrap(0 / 0) !$= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !@= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0 !@<  Opt(5r8), Wrap(0/0) !@<  Wrap(Opt(5r8)), 0/0 !$<  Opt(5r8), Wrap(0/0) !$<  Wrap(Opt(5r8)))
Case(0 / 0 !@< Opt(5), Wrap(0 / 0) !@< Wrap(Opt(5)), 0 / 0 !$< Opt(5), Wrap(0 / 0) !$< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(0/0 !@<= Opt(5r8), Wrap(0/0) !@<= Wrap(Opt(5r8)), 0/0 !$<= Opt(5r8), Wrap(0/0) !$<= Wrap(Opt(5r8)))
Case(0 / 0 !@<= Opt(5), Wrap(0 / 0) !@<= Wrap(Opt(5)), 0 / 0 !$<= Opt(5), Wrap(0 / 0) !$<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(0/0 !@>  Opt(5r8), Wrap(0/0) !@>  Wrap(Opt(5r8)), 0/0 !$>  Opt(5r8), Wrap(0/0) !$>  Wrap(Opt(5r8)))
Case(0 / 0 !@> Opt(5), Wrap(0 / 0) !@> Wrap(Opt(5)), 0 / 0 !$> Opt(5), Wrap(0 / 0) !$> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(0/0 !@>= Opt(5r8), Wrap(0/0) !@>= Wrap(Opt(5r8)), 0/0 !$>= Opt(5r8), Wrap(0/0) !$>= Wrap(Opt(5r8)))
Case(0 / 0 !@>= Opt(5), Wrap(0 / 0) !@>= Wrap(Opt(5)), 0 / 0 !$>= Opt(5), Wrap(0 / 0) !$>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) @< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r8):r8) !$>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0  @=  5r8, Wrap(1/0)  @=  Wrap(5r8), 1/0  $=  5r8, Wrap(1/0)  $=  Wrap(5r8))
Case(1 / 0 @= 5, Wrap(1 / 0) @= Wrap(5), 1 / 0 $= 5, Wrap(1 / 0) $= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @<  5r8, Wrap(1/0)  @<  Wrap(5r8), 1/0  $<  5r8, Wrap(1/0)  $<  Wrap(5r8))
Case(1 / 0 @< 5, Wrap(1 / 0) @< Wrap(5), 1 / 0 $< 5, Wrap(1 / 0) $< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @< Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $< Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @<= 5r8, Wrap(1/0)  @<= Wrap(5r8), 1/0  $<= 5r8, Wrap(1/0)  $<= Wrap(5r8))
Case(1 / 0 @<= 5, Wrap(1 / 0) @<= Wrap(5), 1 / 0 $<= 5, Wrap(1 / 0) $<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @<= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $<= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @>  5r8, Wrap(1/0)  @>  Wrap(5r8), 1/0  $>  5r8, Wrap(1/0)  $>  Wrap(5r8))
Case(1 / 0 @> 5, Wrap(1 / 0) @> Wrap(5), 1 / 0 $> 5, Wrap(1 / 0) $> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @> Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $> Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0  @>= 5r8, Wrap(1/0)  @>= Wrap(5r8), 1/0  $>= 5r8, Wrap(1/0)  $>= Wrap(5r8))
Case(1 / 0 @>= 5, Wrap(1 / 0) @>= Wrap(5), 1 / 0 $>= 5, Wrap(1 / 0) $>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @>= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $>= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@=  5r8, Wrap(1/0) !@=  Wrap(5r8), 1/0 !$=  5r8, Wrap(1/0) !$=  Wrap(5r8))
Case(1 / 0 !@= 5, Wrap(1 / 0) !@= Wrap(5), 1 / 0 !$= 5, Wrap(1 / 0) !$= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !@= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@<  5r8, Wrap(1/0) !@<  Wrap(5r8), 1/0 !$<  5r8, Wrap(1/0) !$<  Wrap(5r8))
Case(1 / 0 !@< 5, Wrap(1 / 0) !@< Wrap(5), 1 / 0 !$< 5, Wrap(1 / 0) !$< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @>= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$< Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@<= 5r8, Wrap(1/0) !@<= Wrap(5r8), 1/0 !$<= 5r8, Wrap(1/0) !$<= Wrap(5r8))
Case(1 / 0 !@<= 5, Wrap(1 / 0) !@<= Wrap(5), 1 / 0 !$<= 5, Wrap(1 / 0) !$<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @> Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$<= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@>  5r8, Wrap(1/0) !@>  Wrap(5r8), 1/0 !$>  5r8, Wrap(1/0) !$>  Wrap(5r8))
Case(1 / 0 !@> 5, Wrap(1 / 0) !@> Wrap(5), 1 / 0 !$> 5, Wrap(1 / 0) !$> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @<= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$> Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0 !@>= 5r8, Wrap(1/0) !@>= Wrap(5r8), 1/0 !$>= 5r8, Wrap(1/0) !$>= Wrap(5r8))
Case(1 / 0 !@>= 5, Wrap(1 / 0) !@>= Wrap(5), 1 / 0 !$>= 5, Wrap(1 / 0) !$>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @< Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$>= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @=  0/0, Wrap(1/0)  @=  Wrap(0/0), 1/0  $=  0/0, Wrap(1/0)  $=  Wrap(0/0))
Case(1 / 0 @= 0 / 0, Wrap(1 / 0) @= Wrap(0 / 0), 1 / 0 $= 0 / 0, Wrap(1 / 0) $= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @<  0/0, Wrap(1/0)  @<  Wrap(0/0), 1/0  $<  0/0, Wrap(1/0)  $<  Wrap(0/0))
Case(1 / 0 @< 0 / 0, Wrap(1 / 0) @< Wrap(0 / 0), 1 / 0 $< 0 / 0, Wrap(1 / 0) $< Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @< Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $< Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @<= 0/0, Wrap(1/0)  @<= Wrap(0/0), 1/0  $<= 0/0, Wrap(1/0)  $<= Wrap(0/0))
Case(1 / 0 @<= 0 / 0, Wrap(1 / 0) @<= Wrap(0 / 0), 1 / 0 $<= 0 / 0, Wrap(1 / 0) $<= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @<= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $<= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @>  0/0, Wrap(1/0)  @>  Wrap(0/0), 1/0  $>  0/0, Wrap(1/0)  $>  Wrap(0/0))
Case(1 / 0 @> 0 / 0, Wrap(1 / 0) @> Wrap(0 / 0), 1 / 0 $> 0 / 0, Wrap(1 / 0) $> Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @> Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $> Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(1/0  @>= 0/0, Wrap(1/0)  @>= Wrap(0/0), 1/0  $>= 0/0, Wrap(1/0)  $>= Wrap(0/0))
Case(1 / 0 @>= 0 / 0, Wrap(1 / 0) @>= Wrap(0 / 0), 1 / 0 $>= 0 / 0, Wrap(1 / 0) $>= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @>= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $>= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(1/0 !@=  0/0, Wrap(1/0) !@=  Wrap(0/0), 1/0 !$=  0/0, Wrap(1/0) !$=  Wrap(0/0))
Case(1 / 0 !@= 0 / 0, Wrap(1 / 0) !@= Wrap(0 / 0), 1 / 0 !$= 0 / 0, Wrap(1 / 0) !$= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !@= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@<  0/0, Wrap(1/0) !@<  Wrap(0/0), 1/0 !$<  0/0, Wrap(1/0) !$<  Wrap(0/0))
Case(1 / 0 !@< 0 / 0, Wrap(1 / 0) !@< Wrap(0 / 0), 1 / 0 !$< 0 / 0, Wrap(1 / 0) !$< Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @>= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$< Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@<= 0/0, Wrap(1/0) !@<= Wrap(0/0), 1/0 !$<= 0/0, Wrap(1/0) !$<= Wrap(0/0))
Case(1 / 0 !@<= 0 / 0, Wrap(1 / 0) !@<= Wrap(0 / 0), 1 / 0 !$<= 0 / 0, Wrap(1 / 0) !$<= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @> Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$<= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@>  0/0, Wrap(1/0) !@>  Wrap(0/0), 1/0 !$>  0/0, Wrap(1/0) !$>  Wrap(0/0))
Case(1 / 0 !@> 0 / 0, Wrap(1 / 0) !@> Wrap(0 / 0), 1 / 0 !$> 0 / 0, Wrap(1 / 0) !$> Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @<= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$> Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(1/0 !@>= 0/0, Wrap(1/0) !@>= Wrap(0/0), 1/0 !$>= 0/0, Wrap(1/0) !$>= Wrap(0/0))
Case(1 / 0 !@>= 0 / 0, Wrap(1 / 0) !@>= Wrap(0 / 0), 1 / 0 !$>= 0 / 0, Wrap(1 / 0) !$>= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @< Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$>= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(1/0  @=  1/0, Wrap(1/0)  @=  Wrap(1/0), 1/0  $=  1/0, Wrap(1/0)  $=  Wrap(1/0))
Case(1 / 0 @= 1 / 0, Wrap(1 / 0) @= Wrap(1 / 0), 1 / 0 $= 1 / 0, Wrap(1 / 0) $= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0  @<  1/0, Wrap(1/0)  @<  Wrap(1/0), 1/0  $<  1/0, Wrap(1/0)  $<  Wrap(1/0))
Case(1 / 0 @< 1 / 0, Wrap(1 / 0) @< Wrap(1 / 0), 1 / 0 $< 1 / 0, Wrap(1 / 0) $< Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @< Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $< Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @<= 1/0, Wrap(1/0)  @<= Wrap(1/0), 1/0  $<= 1/0, Wrap(1/0)  $<= Wrap(1/0))
Case(1 / 0 @<= 1 / 0, Wrap(1 / 0) @<= Wrap(1 / 0), 1 / 0 $<= 1 / 0, Wrap(1 / 0) $<= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @<= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $<= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0  @>  1/0, Wrap(1/0)  @>  Wrap(1/0), 1/0  $>  1/0, Wrap(1/0)  $>  Wrap(1/0))
Case(1 / 0 @> 1 / 0, Wrap(1 / 0) @> Wrap(1 / 0), 1 / 0 $> 1 / 0, Wrap(1 / 0) $> Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @> Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $> Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @>= 1/0, Wrap(1/0)  @>= Wrap(1/0), 1/0  $>= 1/0, Wrap(1/0)  $>= Wrap(1/0))
Case(1 / 0 @>= 1 / 0, Wrap(1 / 0) @>= Wrap(1 / 0), 1 / 0 $>= 1 / 0, Wrap(1 / 0) $>= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @>= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $>= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@=  1/0, Wrap(1/0) !@=  Wrap(1/0), 1/0 !$=  1/0, Wrap(1/0) !$=  Wrap(1/0))
Case(1 / 0 !@= 1 / 0, Wrap(1 / 0) !@= Wrap(1 / 0), 1 / 0 !$= 1 / 0, Wrap(1 / 0) !$= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !@= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0 !@<  1/0, Wrap(1/0) !@<  Wrap(1/0), 1/0 !$<  1/0, Wrap(1/0) !$<  Wrap(1/0))
Case(1 / 0 !@< 1 / 0, Wrap(1 / 0) !@< Wrap(1 / 0), 1 / 0 !$< 1 / 0, Wrap(1 / 0) !$< Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @>= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$< Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@<= 1/0, Wrap(1/0) !@<= Wrap(1/0), 1/0 !$<= 1/0, Wrap(1/0) !$<= Wrap(1/0))
Case(1 / 0 !@<= 1 / 0, Wrap(1 / 0) !@<= Wrap(1 / 0), 1 / 0 !$<= 1 / 0, Wrap(1 / 0) !$<= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @> Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$<= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0 !@>  1/0, Wrap(1/0) !@>  Wrap(1/0), 1/0 !$>  1/0, Wrap(1/0) !$>  Wrap(1/0))
Case(1 / 0 !@> 1 / 0, Wrap(1 / 0) !@> Wrap(1 / 0), 1 / 0 !$> 1 / 0, Wrap(1 / 0) !$> Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @<= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$> Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@>= 1/0, Wrap(1/0) !@>= Wrap(1/0), 1/0 !$>= 1/0, Wrap(1/0) !$>= Wrap(1/0))
Case(1 / 0 !@>= 1 / 0, Wrap(1 / 0) !@>= Wrap(1 / 0), 1 / 0 !$>= 1 / 0, Wrap(1 / 0) !$>= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @< Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$>= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @=  -1/0, Wrap(1/0)  @=  Wrap(-1/0), 1/0  $=  -1/0, Wrap(1/0)  $=  Wrap(-1/0))
Case(1 / 0 @= -1 / 0, Wrap(1 / 0) @= Wrap(-1 / 0), 1 / 0 $= -1 / 0, Wrap(1 / 0) $= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @<  -1/0, Wrap(1/0)  @<  Wrap(-1/0), 1/0  $<  -1/0, Wrap(1/0)  $<  Wrap(-1/0))
Case(1 / 0 @< -1 / 0, Wrap(1 / 0) @< Wrap(-1 / 0), 1 / 0 $< -1 / 0, Wrap(1 / 0) $< Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @< Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $< Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @<= -1/0, Wrap(1/0)  @<= Wrap(-1/0), 1/0  $<= -1/0, Wrap(1/0)  $<= Wrap(-1/0))
Case(1 / 0 @<= -1 / 0, Wrap(1 / 0) @<= Wrap(-1 / 0), 1 / 0 $<= -1 / 0, Wrap(1 / 0) $<= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @<= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $<= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @>  -1/0, Wrap(1/0)  @>  Wrap(-1/0), 1/0  $>  -1/0, Wrap(1/0)  $>  Wrap(-1/0))
Case(1 / 0 @> -1 / 0, Wrap(1 / 0) @> Wrap(-1 / 0), 1 / 0 $> -1 / 0, Wrap(1 / 0) $> Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @> Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $> Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0  @>= -1/0, Wrap(1/0)  @>= Wrap(-1/0), 1/0  $>= -1/0, Wrap(1/0)  $>= Wrap(-1/0))
Case(1 / 0 @>= -1 / 0, Wrap(1 / 0) @>= Wrap(-1 / 0), 1 / 0 $>= -1 / 0, Wrap(1 / 0) $>= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @>= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $>= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@=  -1/0, Wrap(1/0) !@=  Wrap(-1/0), 1/0 !$=  -1/0, Wrap(1/0) !$=  Wrap(-1/0))
Case(1 / 0 !@= -1 / 0, Wrap(1 / 0) !@= Wrap(-1 / 0), 1 / 0 !$= -1 / 0, Wrap(1 / 0) !$= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !@= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@<  -1/0, Wrap(1/0) !@<  Wrap(-1/0), 1/0 !$<  -1/0, Wrap(1/0) !$<  Wrap(-1/0))
Case(1 / 0 !@< -1 / 0, Wrap(1 / 0) !@< Wrap(-1 / 0), 1 / 0 !$< -1 / 0, Wrap(1 / 0) !$< Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @>= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$< Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@<= -1/0, Wrap(1/0) !@<= Wrap(-1/0), 1/0 !$<= -1/0, Wrap(1/0) !$<= Wrap(-1/0))
Case(1 / 0 !@<= -1 / 0, Wrap(1 / 0) !@<= Wrap(-1 / 0), 1 / 0 !$<= -1 / 0, Wrap(1 / 0) !$<= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @> Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$<= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@>  -1/0, Wrap(1/0) !@>  Wrap(-1/0), 1/0 !$>  -1/0, Wrap(1/0) !$>  Wrap(-1/0))
Case(1 / 0 !@> -1 / 0, Wrap(1 / 0) !@> Wrap(-1 / 0), 1 / 0 !$> -1 / 0, Wrap(1 / 0) !$> Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @<= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$> Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0 !@>= -1/0, Wrap(1/0) !@>= Wrap(-1/0), 1/0 !$>= -1/0, Wrap(1/0) !$>= Wrap(-1/0))
Case(1 / 0 !@>= -1 / 0, Wrap(1 / 0) !@>= Wrap(-1 / 0), 1 / 0 !$>= -1 / 0, Wrap(1 / 0) !$>= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @< Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$>= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @=  Null(5r8), Wrap(1/0)  @=  Wrap(Null(5r8)), 1/0  $=  Null(5r8), Wrap(1/0)  $=  Wrap(Null(5r8)))
Case(1 / 0 @= Null(5), Wrap(1 / 0) @= Wrap(Null(5)), 1 / 0 $= Null(5), Wrap(1 / 0) $= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @<  Null(5r8), Wrap(1/0)  @<  Wrap(Null(5r8)), 1/0  $<  Null(5r8), Wrap(1/0)  $<  Wrap(Null(5r8)))
Case(1 / 0 @< Null(5), Wrap(1 / 0) @< Wrap(Null(5)), 1 / 0 $< Null(5), Wrap(1 / 0) $< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @< Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $< Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @<= Null(5r8), Wrap(1/0)  @<= Wrap(Null(5r8)), 1/0  $<= Null(5r8), Wrap(1/0)  $<= Wrap(Null(5r8)))
Case(1 / 0 @<= Null(5), Wrap(1 / 0) @<= Wrap(Null(5)), 1 / 0 $<= Null(5), Wrap(1 / 0) $<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @<= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $<= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @>  Null(5r8), Wrap(1/0)  @>  Wrap(Null(5r8)), 1/0  $>  Null(5r8), Wrap(1/0)  $>  Wrap(Null(5r8)))
Case(1 / 0 @> Null(5), Wrap(1 / 0) @> Wrap(Null(5)), 1 / 0 $> Null(5), Wrap(1 / 0) $> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @> Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $> Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(1/0  @>= Null(5r8), Wrap(1/0)  @>= Wrap(Null(5r8)), 1/0  $>= Null(5r8), Wrap(1/0)  $>= Wrap(Null(5r8)))
Case(1 / 0 @>= Null(5), Wrap(1 / 0) @>= Wrap(Null(5)), 1 / 0 $>= Null(5), Wrap(1 / 0) $>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @>= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $>= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(1/0 !@=  Null(5r8), Wrap(1/0) !@=  Wrap(Null(5r8)), 1/0 !$=  Null(5r8), Wrap(1/0) !$=  Wrap(Null(5r8)))
Case(1 / 0 !@= Null(5), Wrap(1 / 0) !@= Wrap(Null(5)), 1 / 0 !$= Null(5), Wrap(1 / 0) !$= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !@= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@<  Null(5r8), Wrap(1/0) !@<  Wrap(Null(5r8)), 1/0 !$<  Null(5r8), Wrap(1/0) !$<  Wrap(Null(5r8)))
Case(1 / 0 !@< Null(5), Wrap(1 / 0) !@< Wrap(Null(5)), 1 / 0 !$< Null(5), Wrap(1 / 0) !$< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @>= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$< Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@<= Null(5r8), Wrap(1/0) !@<= Wrap(Null(5r8)), 1/0 !$<= Null(5r8), Wrap(1/0) !$<= Wrap(Null(5r8)))
Case(1 / 0 !@<= Null(5), Wrap(1 / 0) !@<= Wrap(Null(5)), 1 / 0 !$<= Null(5), Wrap(1 / 0) !$<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @> Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$<= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@>  Null(5r8), Wrap(1/0) !@>  Wrap(Null(5r8)), 1/0 !$>  Null(5r8), Wrap(1/0) !$>  Wrap(Null(5r8)))
Case(1 / 0 !@> Null(5), Wrap(1 / 0) !@> Wrap(Null(5)), 1 / 0 !$> Null(5), Wrap(1 / 0) !$> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @<= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$> Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(1/0 !@>= Null(5r8), Wrap(1/0) !@>= Wrap(Null(5r8)), 1/0 !$>= Null(5r8), Wrap(1/0) !$>= Wrap(Null(5r8)))
Case(1 / 0 !@>= Null(5), Wrap(1 / 0) !@>= Wrap(Null(5)), 1 / 0 !$>= Null(5), Wrap(1 / 0) !$>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @< Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$>= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(1/0  @=  Opt(5r8), Wrap(1/0)  @=  Wrap(Opt(5r8)), 1/0  $=  Opt(5r8), Wrap(1/0)  $=  Wrap(Opt(5r8)))
Case(1 / 0 @= Opt(5), Wrap(1 / 0) @= Wrap(Opt(5)), 1 / 0 $= Opt(5), Wrap(1 / 0) $= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @<  Opt(5r8), Wrap(1/0)  @<  Wrap(Opt(5r8)), 1/0  $<  Opt(5r8), Wrap(1/0)  $<  Wrap(Opt(5r8)))
Case(1 / 0 @< Opt(5), Wrap(1 / 0) @< Wrap(Opt(5)), 1 / 0 $< Opt(5), Wrap(1 / 0) $< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @<= Opt(5r8), Wrap(1/0)  @<= Wrap(Opt(5r8)), 1/0  $<= Opt(5r8), Wrap(1/0)  $<= Wrap(Opt(5r8)))
Case(1 / 0 @<= Opt(5), Wrap(1 / 0) @<= Wrap(Opt(5)), 1 / 0 $<= Opt(5), Wrap(1 / 0) $<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0  @>  Opt(5r8), Wrap(1/0)  @>  Wrap(Opt(5r8)), 1/0  $>  Opt(5r8), Wrap(1/0)  $>  Wrap(Opt(5r8)))
Case(1 / 0 @> Opt(5), Wrap(1 / 0) @> Wrap(Opt(5)), 1 / 0 $> Opt(5), Wrap(1 / 0) $> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0  @>= Opt(5r8), Wrap(1/0)  @>= Wrap(Opt(5r8)), 1/0  $>= Opt(5r8), Wrap(1/0)  $>= Wrap(Opt(5r8)))
Case(1 / 0 @>= Opt(5), Wrap(1 / 0) @>= Wrap(Opt(5)), 1 / 0 $>= Opt(5), Wrap(1 / 0) $>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) $>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@=  Opt(5r8), Wrap(1/0) !@=  Wrap(Opt(5r8)), 1/0 !$=  Opt(5r8), Wrap(1/0) !$=  Wrap(Opt(5r8)))
Case(1 / 0 !@= Opt(5), Wrap(1 / 0) !@= Wrap(Opt(5)), 1 / 0 !$= Opt(5), Wrap(1 / 0) !$= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !@= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@<  Opt(5r8), Wrap(1/0) !@<  Wrap(Opt(5r8)), 1/0 !$<  Opt(5r8), Wrap(1/0) !$<  Wrap(Opt(5r8)))
Case(1 / 0 !@< Opt(5), Wrap(1 / 0) !@< Wrap(Opt(5)), 1 / 0 !$< Opt(5), Wrap(1 / 0) !$< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@<= Opt(5r8), Wrap(1/0) !@<= Wrap(Opt(5r8)), 1/0 !$<= Opt(5r8), Wrap(1/0) !$<= Wrap(Opt(5r8)))
Case(1 / 0 !@<= Opt(5), Wrap(1 / 0) !@<= Wrap(Opt(5)), 1 / 0 !$<= Opt(5), Wrap(1 / 0) !$<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(1/0 !@>  Opt(5r8), Wrap(1/0) !@>  Wrap(Opt(5r8)), 1/0 !$>  Opt(5r8), Wrap(1/0) !$>  Wrap(Opt(5r8)))
Case(1 / 0 !@> Opt(5), Wrap(1 / 0) !@> Wrap(Opt(5)), 1 / 0 !$> Opt(5), Wrap(1 / 0) !$> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(1/0 !@>= Opt(5r8), Wrap(1/0) !@>= Wrap(Opt(5r8)), 1/0 !$>= Opt(5r8), Wrap(1/0) !$>= Wrap(Opt(5r8)))
Case(1 / 0 !@>= Opt(5), Wrap(1 / 0) !@>= Wrap(Opt(5)), 1 / 0 !$>= Opt(5), Wrap(1 / 0) !$>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r8):r8) @< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r8):r8) !$>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0  @=  5r8, Wrap(-1/0)  @=  Wrap(5r8), -1/0  $=  5r8, Wrap(-1/0)  $=  Wrap(5r8))
Case(-1 / 0 @= 5, Wrap(-1 / 0) @= Wrap(5), -1 / 0 $= 5, Wrap(-1 / 0) $= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0  @<  5r8, Wrap(-1/0)  @<  Wrap(5r8), -1/0  $<  5r8, Wrap(-1/0)  $<  Wrap(5r8))
Case(-1 / 0 @< 5, Wrap(-1 / 0) @< Wrap(5), -1 / 0 $< 5, Wrap(-1 / 0) $< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @< Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $< Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0  @<= 5r8, Wrap(-1/0)  @<= Wrap(5r8), -1/0  $<= 5r8, Wrap(-1/0)  $<= Wrap(5r8))
Case(-1 / 0 @<= 5, Wrap(-1 / 0) @<= Wrap(5), -1 / 0 $<= 5, Wrap(-1 / 0) $<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @<= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $<= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0  @>  5r8, Wrap(-1/0)  @>  Wrap(5r8), -1/0  $>  5r8, Wrap(-1/0)  $>  Wrap(5r8))
Case(-1 / 0 @> 5, Wrap(-1 / 0) @> Wrap(5), -1 / 0 $> 5, Wrap(-1 / 0) $> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @> Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $> Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0  @>= 5r8, Wrap(-1/0)  @>= Wrap(5r8), -1/0  $>= 5r8, Wrap(-1/0)  $>= Wrap(5r8))
Case(-1 / 0 @>= 5, Wrap(-1 / 0) @>= Wrap(5), -1 / 0 $>= 5, Wrap(-1 / 0) $>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @>= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $>= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0 !@=  5r8, Wrap(-1/0) !@=  Wrap(5r8), -1/0 !$=  5r8, Wrap(-1/0) !$=  Wrap(5r8))
Case(-1 / 0 !@= 5, Wrap(-1 / 0) !@= Wrap(5), -1 / 0 !$= 5, Wrap(-1 / 0) !$= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !@= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0 !@<  5r8, Wrap(-1/0) !@<  Wrap(5r8), -1/0 !$<  5r8, Wrap(-1/0) !$<  Wrap(5r8))
Case(-1 / 0 !@< 5, Wrap(-1 / 0) !@< Wrap(5), -1 / 0 !$< 5, Wrap(-1 / 0) !$< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @>= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$< Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0 !@<= 5r8, Wrap(-1/0) !@<= Wrap(5r8), -1/0 !$<= 5r8, Wrap(-1/0) !$<= Wrap(5r8))
Case(-1 / 0 !@<= 5, Wrap(-1 / 0) !@<= Wrap(5), -1 / 0 !$<= 5, Wrap(-1 / 0) !$<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @> Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$<= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0 !@>  5r8, Wrap(-1/0) !@>  Wrap(5r8), -1/0 !$>  5r8, Wrap(-1/0) !$>  Wrap(5r8))
Case(-1 / 0 !@> 5, Wrap(-1 / 0) !@> Wrap(5), -1 / 0 !$> 5, Wrap(-1 / 0) !$> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @<= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$> Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0 !@>= 5r8, Wrap(-1/0) !@>= Wrap(5r8), -1/0 !$>= 5r8, Wrap(-1/0) !$>= Wrap(5r8))
Case(-1 / 0 !@>= 5, Wrap(-1 / 0) !@>= Wrap(5), -1 / 0 !$>= 5, Wrap(-1 / 0) !$>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @< Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$>= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0  @=  0/0, Wrap(-1/0)  @=  Wrap(0/0), -1/0  $=  0/0, Wrap(-1/0)  $=  Wrap(0/0))
Case(-1 / 0 @= 0 / 0, Wrap(-1 / 0) @= Wrap(0 / 0), -1 / 0 $= 0 / 0, Wrap(-1 / 0) $= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0  @<  0/0, Wrap(-1/0)  @<  Wrap(0/0), -1/0  $<  0/0, Wrap(-1/0)  $<  Wrap(0/0))
Case(-1 / 0 @< 0 / 0, Wrap(-1 / 0) @< Wrap(0 / 0), -1 / 0 $< 0 / 0, Wrap(-1 / 0) $< Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @< Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $< Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0  @<= 0/0, Wrap(-1/0)  @<= Wrap(0/0), -1/0  $<= 0/0, Wrap(-1/0)  $<= Wrap(0/0))
Case(-1 / 0 @<= 0 / 0, Wrap(-1 / 0) @<= Wrap(0 / 0), -1 / 0 $<= 0 / 0, Wrap(-1 / 0) $<= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @<= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $<= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0  @>  0/0, Wrap(-1/0)  @>  Wrap(0/0), -1/0  $>  0/0, Wrap(-1/0)  $>  Wrap(0/0))
Case(-1 / 0 @> 0 / 0, Wrap(-1 / 0) @> Wrap(0 / 0), -1 / 0 $> 0 / 0, Wrap(-1 / 0) $> Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @> Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $> Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(-1/0  @>= 0/0, Wrap(-1/0)  @>= Wrap(0/0), -1/0  $>= 0/0, Wrap(-1/0)  $>= Wrap(0/0))
Case(-1 / 0 @>= 0 / 0, Wrap(-1 / 0) @>= Wrap(0 / 0), -1 / 0 $>= 0 / 0, Wrap(-1 / 0) $>= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @>= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $>= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(-1/0 !@=  0/0, Wrap(-1/0) !@=  Wrap(0/0), -1/0 !$=  0/0, Wrap(-1/0) !$=  Wrap(0/0))
Case(-1 / 0 !@= 0 / 0, Wrap(-1 / 0) !@= Wrap(0 / 0), -1 / 0 !$= 0 / 0, Wrap(-1 / 0) !$= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !@= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0 !@<  0/0, Wrap(-1/0) !@<  Wrap(0/0), -1/0 !$<  0/0, Wrap(-1/0) !$<  Wrap(0/0))
Case(-1 / 0 !@< 0 / 0, Wrap(-1 / 0) !@< Wrap(0 / 0), -1 / 0 !$< 0 / 0, Wrap(-1 / 0) !$< Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @>= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$< Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0 !@<= 0/0, Wrap(-1/0) !@<= Wrap(0/0), -1/0 !$<= 0/0, Wrap(-1/0) !$<= Wrap(0/0))
Case(-1 / 0 !@<= 0 / 0, Wrap(-1 / 0) !@<= Wrap(0 / 0), -1 / 0 !$<= 0 / 0, Wrap(-1 / 0) !$<= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @> Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$<= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0 !@>  0/0, Wrap(-1/0) !@>  Wrap(0/0), -1/0 !$>  0/0, Wrap(-1/0) !$>  Wrap(0/0))
Case(-1 / 0 !@> 0 / 0, Wrap(-1 / 0) !@> Wrap(0 / 0), -1 / 0 !$> 0 / 0, Wrap(-1 / 0) !$> Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @<= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$> Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(-1/0 !@>= 0/0, Wrap(-1/0) !@>= Wrap(0/0), -1/0 !$>= 0/0, Wrap(-1/0) !$>= Wrap(0/0))
Case(-1 / 0 !@>= 0 / 0, Wrap(-1 / 0) !@>= Wrap(0 / 0), -1 / 0 !$>= 0 / 0, Wrap(-1 / 0) !$>= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @< Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$>= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(-1/0  @=  1/0, Wrap(-1/0)  @=  Wrap(1/0), -1/0  $=  1/0, Wrap(-1/0)  $=  Wrap(1/0))
Case(-1 / 0 @= 1 / 0, Wrap(-1 / 0) @= Wrap(1 / 0), -1 / 0 $= 1 / 0, Wrap(-1 / 0) $= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0  @<  1/0, Wrap(-1/0)  @<  Wrap(1/0), -1/0  $<  1/0, Wrap(-1/0)  $<  Wrap(1/0))
Case(-1 / 0 @< 1 / 0, Wrap(-1 / 0) @< Wrap(1 / 0), -1 / 0 $< 1 / 0, Wrap(-1 / 0) $< Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @< Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $< Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0  @<= 1/0, Wrap(-1/0)  @<= Wrap(1/0), -1/0  $<= 1/0, Wrap(-1/0)  $<= Wrap(1/0))
Case(-1 / 0 @<= 1 / 0, Wrap(-1 / 0) @<= Wrap(1 / 0), -1 / 0 $<= 1 / 0, Wrap(-1 / 0) $<= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @<= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $<= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0  @>  1/0, Wrap(-1/0)  @>  Wrap(1/0), -1/0  $>  1/0, Wrap(-1/0)  $>  Wrap(1/0))
Case(-1 / 0 @> 1 / 0, Wrap(-1 / 0) @> Wrap(1 / 0), -1 / 0 $> 1 / 0, Wrap(-1 / 0) $> Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @> Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $> Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0  @>= 1/0, Wrap(-1/0)  @>= Wrap(1/0), -1/0  $>= 1/0, Wrap(-1/0)  $>= Wrap(1/0))
Case(-1 / 0 @>= 1 / 0, Wrap(-1 / 0) @>= Wrap(1 / 0), -1 / 0 $>= 1 / 0, Wrap(-1 / 0) $>= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @>= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $>= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0 !@=  1/0, Wrap(-1/0) !@=  Wrap(1/0), -1/0 !$=  1/0, Wrap(-1/0) !$=  Wrap(1/0))
Case(-1 / 0 !@= 1 / 0, Wrap(-1 / 0) !@= Wrap(1 / 0), -1 / 0 !$= 1 / 0, Wrap(-1 / 0) !$= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !@= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0 !@<  1/0, Wrap(-1/0) !@<  Wrap(1/0), -1/0 !$<  1/0, Wrap(-1/0) !$<  Wrap(1/0))
Case(-1 / 0 !@< 1 / 0, Wrap(-1 / 0) !@< Wrap(1 / 0), -1 / 0 !$< 1 / 0, Wrap(-1 / 0) !$< Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @>= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$< Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0 !@<= 1/0, Wrap(-1/0) !@<= Wrap(1/0), -1/0 !$<= 1/0, Wrap(-1/0) !$<= Wrap(1/0))
Case(-1 / 0 !@<= 1 / 0, Wrap(-1 / 0) !@<= Wrap(1 / 0), -1 / 0 !$<= 1 / 0, Wrap(-1 / 0) !$<= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @> Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$<= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0 !@>  1/0, Wrap(-1/0) !@>  Wrap(1/0), -1/0 !$>  1/0, Wrap(-1/0) !$>  Wrap(1/0))
Case(-1 / 0 !@> 1 / 0, Wrap(-1 / 0) !@> Wrap(1 / 0), -1 / 0 !$> 1 / 0, Wrap(-1 / 0) !$> Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @<= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$> Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0 !@>= 1/0, Wrap(-1/0) !@>= Wrap(1/0), -1/0 !$>= 1/0, Wrap(-1/0) !$>= Wrap(1/0))
Case(-1 / 0 !@>= 1 / 0, Wrap(-1 / 0) !@>= Wrap(1 / 0), -1 / 0 !$>= 1 / 0, Wrap(-1 / 0) !$>= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @< Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$>= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0  @=  -1/0, Wrap(-1/0)  @=  Wrap(-1/0), -1/0  $=  -1/0, Wrap(-1/0)  $=  Wrap(-1/0))
Case(-1 / 0 @= -1 / 0, Wrap(-1 / 0) @= Wrap(-1 / 0), -1 / 0 $= -1 / 0, Wrap(-1 / 0) $= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0  @<  -1/0, Wrap(-1/0)  @<  Wrap(-1/0), -1/0  $<  -1/0, Wrap(-1/0)  $<  Wrap(-1/0))
Case(-1 / 0 @< -1 / 0, Wrap(-1 / 0) @< Wrap(-1 / 0), -1 / 0 $< -1 / 0, Wrap(-1 / 0) $< Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @< Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $< Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0  @<= -1/0, Wrap(-1/0)  @<= Wrap(-1/0), -1/0  $<= -1/0, Wrap(-1/0)  $<= Wrap(-1/0))
Case(-1 / 0 @<= -1 / 0, Wrap(-1 / 0) @<= Wrap(-1 / 0), -1 / 0 $<= -1 / 0, Wrap(-1 / 0) $<= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @<= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $<= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0  @>  -1/0, Wrap(-1/0)  @>  Wrap(-1/0), -1/0  $>  -1/0, Wrap(-1/0)  $>  Wrap(-1/0))
Case(-1 / 0 @> -1 / 0, Wrap(-1 / 0) @> Wrap(-1 / 0), -1 / 0 $> -1 / 0, Wrap(-1 / 0) $> Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @> Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $> Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0  @>= -1/0, Wrap(-1/0)  @>= Wrap(-1/0), -1/0  $>= -1/0, Wrap(-1/0)  $>= Wrap(-1/0))
Case(-1 / 0 @>= -1 / 0, Wrap(-1 / 0) @>= Wrap(-1 / 0), -1 / 0 $>= -1 / 0, Wrap(-1 / 0) $>= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @>= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $>= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0 !@=  -1/0, Wrap(-1/0) !@=  Wrap(-1/0), -1/0 !$=  -1/0, Wrap(-1/0) !$=  Wrap(-1/0))
Case(-1 / 0 !@= -1 / 0, Wrap(-1 / 0) !@= Wrap(-1 / 0), -1 / 0 !$= -1 / 0, Wrap(-1 / 0) !$= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !@= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0 !@<  -1/0, Wrap(-1/0) !@<  Wrap(-1/0), -1/0 !$<  -1/0, Wrap(-1/0) !$<  Wrap(-1/0))
Case(-1 / 0 !@< -1 / 0, Wrap(-1 / 0) !@< Wrap(-1 / 0), -1 / 0 !$< -1 / 0, Wrap(-1 / 0) !$< Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @>= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$< Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0 !@<= -1/0, Wrap(-1/0) !@<= Wrap(-1/0), -1/0 !$<= -1/0, Wrap(-1/0) !$<= Wrap(-1/0))
Case(-1 / 0 !@<= -1 / 0, Wrap(-1 / 0) !@<= Wrap(-1 / 0), -1 / 0 !$<= -1 / 0, Wrap(-1 / 0) !$<= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @> Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$<= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0 !@>  -1/0, Wrap(-1/0) !@>  Wrap(-1/0), -1/0 !$>  -1/0, Wrap(-1/0) !$>  Wrap(-1/0))
Case(-1 / 0 !@> -1 / 0, Wrap(-1 / 0) !@> Wrap(-1 / 0), -1 / 0 !$> -1 / 0, Wrap(-1 / 0) !$> Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @<= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$> Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0 !@>= -1/0, Wrap(-1/0) !@>= Wrap(-1/0), -1/0 !$>= -1/0, Wrap(-1/0) !$>= Wrap(-1/0))
Case(-1 / 0 !@>= -1 / 0, Wrap(-1 / 0) !@>= Wrap(-1 / 0), -1 / 0 !$>= -1 / 0, Wrap(-1 / 0) !$>= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @< Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$>= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0  @=  Null(5r8), Wrap(-1/0)  @=  Wrap(Null(5r8)), -1/0  $=  Null(5r8), Wrap(-1/0)  $=  Wrap(Null(5r8)))
Case(-1 / 0 @= Null(5), Wrap(-1 / 0) @= Wrap(Null(5)), -1 / 0 $= Null(5), Wrap(-1 / 0) $= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0  @<  Null(5r8), Wrap(-1/0)  @<  Wrap(Null(5r8)), -1/0  $<  Null(5r8), Wrap(-1/0)  $<  Wrap(Null(5r8)))
Case(-1 / 0 @< Null(5), Wrap(-1 / 0) @< Wrap(Null(5)), -1 / 0 $< Null(5), Wrap(-1 / 0) $< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @< Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $< Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0  @<= Null(5r8), Wrap(-1/0)  @<= Wrap(Null(5r8)), -1/0  $<= Null(5r8), Wrap(-1/0)  $<= Wrap(Null(5r8)))
Case(-1 / 0 @<= Null(5), Wrap(-1 / 0) @<= Wrap(Null(5)), -1 / 0 $<= Null(5), Wrap(-1 / 0) $<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @<= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $<= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0  @>  Null(5r8), Wrap(-1/0)  @>  Wrap(Null(5r8)), -1/0  $>  Null(5r8), Wrap(-1/0)  $>  Wrap(Null(5r8)))
Case(-1 / 0 @> Null(5), Wrap(-1 / 0) @> Wrap(Null(5)), -1 / 0 $> Null(5), Wrap(-1 / 0) $> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @> Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $> Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(-1/0  @>= Null(5r8), Wrap(-1/0)  @>= Wrap(Null(5r8)), -1/0  $>= Null(5r8), Wrap(-1/0)  $>= Wrap(Null(5r8)))
Case(-1 / 0 @>= Null(5), Wrap(-1 / 0) @>= Wrap(Null(5)), -1 / 0 $>= Null(5), Wrap(-1 / 0) $>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @>= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $>= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(-1/0 !@=  Null(5r8), Wrap(-1/0) !@=  Wrap(Null(5r8)), -1/0 !$=  Null(5r8), Wrap(-1/0) !$=  Wrap(Null(5r8)))
Case(-1 / 0 !@= Null(5), Wrap(-1 / 0) !@= Wrap(Null(5)), -1 / 0 !$= Null(5), Wrap(-1 / 0) !$= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !@= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0 !@<  Null(5r8), Wrap(-1/0) !@<  Wrap(Null(5r8)), -1/0 !$<  Null(5r8), Wrap(-1/0) !$<  Wrap(Null(5r8)))
Case(-1 / 0 !@< Null(5), Wrap(-1 / 0) !@< Wrap(Null(5)), -1 / 0 !$< Null(5), Wrap(-1 / 0) !$< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @>= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$< Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0 !@<= Null(5r8), Wrap(-1/0) !@<= Wrap(Null(5r8)), -1/0 !$<= Null(5r8), Wrap(-1/0) !$<= Wrap(Null(5r8)))
Case(-1 / 0 !@<= Null(5), Wrap(-1 / 0) !@<= Wrap(Null(5)), -1 / 0 !$<= Null(5), Wrap(-1 / 0) !$<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @> Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$<= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0 !@>  Null(5r8), Wrap(-1/0) !@>  Wrap(Null(5r8)), -1/0 !$>  Null(5r8), Wrap(-1/0) !$>  Wrap(Null(5r8)))
Case(-1 / 0 !@> Null(5), Wrap(-1 / 0) !@> Wrap(Null(5)), -1 / 0 !$> Null(5), Wrap(-1 / 0) !$> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @<= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$> Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(-1/0 !@>= Null(5r8), Wrap(-1/0) !@>= Wrap(Null(5r8)), -1/0 !$>= Null(5r8), Wrap(-1/0) !$>= Wrap(Null(5r8)))
Case(-1 / 0 !@>= Null(5), Wrap(-1 / 0) !@>= Wrap(Null(5)), -1 / 0 !$>= Null(5), Wrap(-1 / 0) !$>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @< Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$>= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(-1/0  @=  Opt(5r8), Wrap(-1/0)  @=  Wrap(Opt(5r8)), -1/0  $=  Opt(5r8), Wrap(-1/0)  $=  Wrap(Opt(5r8)))
Case(-1 / 0 @= Opt(5), Wrap(-1 / 0) @= Wrap(Opt(5)), -1 / 0 $= Opt(5), Wrap(-1 / 0) $= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0  @<  Opt(5r8), Wrap(-1/0)  @<  Wrap(Opt(5r8)), -1/0  $<  Opt(5r8), Wrap(-1/0)  $<  Wrap(Opt(5r8)))
Case(-1 / 0 @< Opt(5), Wrap(-1 / 0) @< Wrap(Opt(5)), -1 / 0 $< Opt(5), Wrap(-1 / 0) $< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0  @<= Opt(5r8), Wrap(-1/0)  @<= Wrap(Opt(5r8)), -1/0  $<= Opt(5r8), Wrap(-1/0)  $<= Wrap(Opt(5r8)))
Case(-1 / 0 @<= Opt(5), Wrap(-1 / 0) @<= Wrap(Opt(5)), -1 / 0 $<= Opt(5), Wrap(-1 / 0) $<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0  @>  Opt(5r8), Wrap(-1/0)  @>  Wrap(Opt(5r8)), -1/0  $>  Opt(5r8), Wrap(-1/0)  $>  Wrap(Opt(5r8)))
Case(-1 / 0 @> Opt(5), Wrap(-1 / 0) @> Wrap(Opt(5)), -1 / 0 $> Opt(5), Wrap(-1 / 0) $> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0  @>= Opt(5r8), Wrap(-1/0)  @>= Wrap(Opt(5r8)), -1/0  $>= Opt(5r8), Wrap(-1/0)  $>= Wrap(Opt(5r8)))
Case(-1 / 0 @>= Opt(5), Wrap(-1 / 0) @>= Wrap(Opt(5)), -1 / 0 $>= Opt(5), Wrap(-1 / 0) $>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) $>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0 !@=  Opt(5r8), Wrap(-1/0) !@=  Wrap(Opt(5r8)), -1/0 !$=  Opt(5r8), Wrap(-1/0) !$=  Wrap(Opt(5r8)))
Case(-1 / 0 !@= Opt(5), Wrap(-1 / 0) !@= Wrap(Opt(5)), -1 / 0 !$= Opt(5), Wrap(-1 / 0) !$= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !@= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0 !@<  Opt(5r8), Wrap(-1/0) !@<  Wrap(Opt(5r8)), -1/0 !$<  Opt(5r8), Wrap(-1/0) !$<  Wrap(Opt(5r8)))
Case(-1 / 0 !@< Opt(5), Wrap(-1 / 0) !@< Wrap(Opt(5)), -1 / 0 !$< Opt(5), Wrap(-1 / 0) !$< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0 !@<= Opt(5r8), Wrap(-1/0) !@<= Wrap(Opt(5r8)), -1/0 !$<= Opt(5r8), Wrap(-1/0) !$<= Wrap(Opt(5r8)))
Case(-1 / 0 !@<= Opt(5), Wrap(-1 / 0) !@<= Wrap(Opt(5)), -1 / 0 !$<= Opt(5), Wrap(-1 / 0) !$<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(-1/0 !@>  Opt(5r8), Wrap(-1/0) !@>  Wrap(Opt(5r8)), -1/0 !$>  Opt(5r8), Wrap(-1/0) !$>  Wrap(Opt(5r8)))
Case(-1 / 0 !@> Opt(5), Wrap(-1 / 0) !@> Wrap(Opt(5)), -1 / 0 !$> Opt(5), Wrap(-1 / 0) !$> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(-1/0 !@>= Opt(5r8), Wrap(-1/0) !@>= Wrap(Opt(5r8)), -1/0 !$>= Opt(5r8), Wrap(-1/0) !$>= Wrap(Opt(5r8)))
Case(-1 / 0 !@>= Opt(5), Wrap(-1 / 0) !@>= Wrap(Opt(5)), -1 / 0 !$>= Opt(5), Wrap(-1 / 0) !$>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) @< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r8):r8) !$>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8)  @=  5r8, Wrap(Null(3r8))  @=  Wrap(5r8), Null(3r8)  $=  5r8, Wrap(Null(3r8))  $=  Wrap(5r8))
Case(Null(3) @= 5, Wrap(Null(3)) @= Wrap(5), Null(3) $= 5, Wrap(Null(3)) $= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8)  @<  5r8, Wrap(Null(3r8))  @<  Wrap(5r8), Null(3r8)  $<  5r8, Wrap(Null(3r8))  $<  Wrap(5r8))
Case(Null(3) @< 5, Wrap(Null(3)) @< Wrap(5), Null(3) $< 5, Wrap(Null(3)) $< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @< Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $< Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r8)  @<= 5r8, Wrap(Null(3r8))  @<= Wrap(5r8), Null(3r8)  $<= 5r8, Wrap(Null(3r8))  $<= Wrap(5r8))
Case(Null(3) @<= 5, Wrap(Null(3)) @<= Wrap(5), Null(3) $<= 5, Wrap(Null(3)) $<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @<= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $<= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r8)  @>  5r8, Wrap(Null(3r8))  @>  Wrap(5r8), Null(3r8)  $>  5r8, Wrap(Null(3r8))  $>  Wrap(5r8))
Case(Null(3) @> 5, Wrap(Null(3)) @> Wrap(5), Null(3) $> 5, Wrap(Null(3)) $> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @> Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $> Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8)  @>= 5r8, Wrap(Null(3r8))  @>= Wrap(5r8), Null(3r8)  $>= 5r8, Wrap(Null(3r8))  $>= Wrap(5r8))
Case(Null(3) @>= 5, Wrap(Null(3)) @>= Wrap(5), Null(3) $>= 5, Wrap(Null(3)) $>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @>= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $>= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8) !@=  5r8, Wrap(Null(3r8)) !@=  Wrap(5r8), Null(3r8) !$=  5r8, Wrap(Null(3r8)) !$=  Wrap(5r8))
Case(Null(3) !@= 5, Wrap(Null(3)) !@= Wrap(5), Null(3) !$= 5, Wrap(Null(3)) !$= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !@= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8) !@<  5r8, Wrap(Null(3r8)) !@<  Wrap(5r8), Null(3r8) !$<  5r8, Wrap(Null(3r8)) !$<  Wrap(5r8))
Case(Null(3) !@< 5, Wrap(Null(3)) !@< Wrap(5), Null(3) !$< 5, Wrap(Null(3)) !$< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @>= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$< Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r8) !@<= 5r8, Wrap(Null(3r8)) !@<= Wrap(5r8), Null(3r8) !$<= 5r8, Wrap(Null(3r8)) !$<= Wrap(5r8))
Case(Null(3) !@<= 5, Wrap(Null(3)) !@<= Wrap(5), Null(3) !$<= 5, Wrap(Null(3)) !$<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @> Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$<= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r8) !@>  5r8, Wrap(Null(3r8)) !@>  Wrap(5r8), Null(3r8) !$>  5r8, Wrap(Null(3r8)) !$>  Wrap(5r8))
Case(Null(3) !@> 5, Wrap(Null(3)) !@> Wrap(5), Null(3) !$> 5, Wrap(Null(3)) !$> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @<= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$> Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8) !@>= 5r8, Wrap(Null(3r8)) !@>= Wrap(5r8), Null(3r8) !$>= 5r8, Wrap(Null(3r8)) !$>= Wrap(5r8))
Case(Null(3) !@>= 5, Wrap(Null(3)) !@>= Wrap(5), Null(3) !$>= 5, Wrap(Null(3)) !$>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @< Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$>= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8)  @=  0/0, Wrap(Null(3r8))  @=  Wrap(0/0), Null(3r8)  $=  0/0, Wrap(Null(3r8))  $=  Wrap(0/0))
Case(Null(3) @= 0 / 0, Wrap(Null(3)) @= Wrap(0 / 0), Null(3) $= 0 / 0, Wrap(Null(3)) $= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8)  @<  0/0, Wrap(Null(3r8))  @<  Wrap(0/0), Null(3r8)  $<  0/0, Wrap(Null(3r8))  $<  Wrap(0/0))
Case(Null(3) @< 0 / 0, Wrap(Null(3)) @< Wrap(0 / 0), Null(3) $< 0 / 0, Wrap(Null(3)) $< Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @< Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $< Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r8)  @<= 0/0, Wrap(Null(3r8))  @<= Wrap(0/0), Null(3r8)  $<= 0/0, Wrap(Null(3r8))  $<= Wrap(0/0))
Case(Null(3) @<= 0 / 0, Wrap(Null(3)) @<= Wrap(0 / 0), Null(3) $<= 0 / 0, Wrap(Null(3)) $<= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @<= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $<= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r8)  @>  0/0, Wrap(Null(3r8))  @>  Wrap(0/0), Null(3r8)  $>  0/0, Wrap(Null(3r8))  $>  Wrap(0/0))
Case(Null(3) @> 0 / 0, Wrap(Null(3)) @> Wrap(0 / 0), Null(3) $> 0 / 0, Wrap(Null(3)) $> Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @> Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $> Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8)  @>= 0/0, Wrap(Null(3r8))  @>= Wrap(0/0), Null(3r8)  $>= 0/0, Wrap(Null(3r8))  $>= Wrap(0/0))
Case(Null(3) @>= 0 / 0, Wrap(Null(3)) @>= Wrap(0 / 0), Null(3) $>= 0 / 0, Wrap(Null(3)) $>= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @>= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $>= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8) !@=  0/0, Wrap(Null(3r8)) !@=  Wrap(0/0), Null(3r8) !$=  0/0, Wrap(Null(3r8)) !$=  Wrap(0/0))
Case(Null(3) !@= 0 / 0, Wrap(Null(3)) !@= Wrap(0 / 0), Null(3) !$= 0 / 0, Wrap(Null(3)) !$= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !@= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8) !@<  0/0, Wrap(Null(3r8)) !@<  Wrap(0/0), Null(3r8) !$<  0/0, Wrap(Null(3r8)) !$<  Wrap(0/0))
Case(Null(3) !@< 0 / 0, Wrap(Null(3)) !@< Wrap(0 / 0), Null(3) !$< 0 / 0, Wrap(Null(3)) !$< Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @>= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$< Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r8) !@<= 0/0, Wrap(Null(3r8)) !@<= Wrap(0/0), Null(3r8) !$<= 0/0, Wrap(Null(3r8)) !$<= Wrap(0/0))
Case(Null(3) !@<= 0 / 0, Wrap(Null(3)) !@<= Wrap(0 / 0), Null(3) !$<= 0 / 0, Wrap(Null(3)) !$<= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @> Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$<= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r8) !@>  0/0, Wrap(Null(3r8)) !@>  Wrap(0/0), Null(3r8) !$>  0/0, Wrap(Null(3r8)) !$>  Wrap(0/0))
Case(Null(3) !@> 0 / 0, Wrap(Null(3)) !@> Wrap(0 / 0), Null(3) !$> 0 / 0, Wrap(Null(3)) !$> Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @<= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$> Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8) !@>= 0/0, Wrap(Null(3r8)) !@>= Wrap(0/0), Null(3r8) !$>= 0/0, Wrap(Null(3r8)) !$>= Wrap(0/0))
Case(Null(3) !@>= 0 / 0, Wrap(Null(3)) !@>= Wrap(0 / 0), Null(3) !$>= 0 / 0, Wrap(Null(3)) !$>= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @< Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$>= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8)  @=  1/0, Wrap(Null(3r8))  @=  Wrap(1/0), Null(3r8)  $=  1/0, Wrap(Null(3r8))  $=  Wrap(1/0))
Case(Null(3) @= 1 / 0, Wrap(Null(3)) @= Wrap(1 / 0), Null(3) $= 1 / 0, Wrap(Null(3)) $= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8)  @<  1/0, Wrap(Null(3r8))  @<  Wrap(1/0), Null(3r8)  $<  1/0, Wrap(Null(3r8))  $<  Wrap(1/0))
Case(Null(3) @< 1 / 0, Wrap(Null(3)) @< Wrap(1 / 0), Null(3) $< 1 / 0, Wrap(Null(3)) $< Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @< Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $< Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r8)  @<= 1/0, Wrap(Null(3r8))  @<= Wrap(1/0), Null(3r8)  $<= 1/0, Wrap(Null(3r8))  $<= Wrap(1/0))
Case(Null(3) @<= 1 / 0, Wrap(Null(3)) @<= Wrap(1 / 0), Null(3) $<= 1 / 0, Wrap(Null(3)) $<= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @<= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $<= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r8)  @>  1/0, Wrap(Null(3r8))  @>  Wrap(1/0), Null(3r8)  $>  1/0, Wrap(Null(3r8))  $>  Wrap(1/0))
Case(Null(3) @> 1 / 0, Wrap(Null(3)) @> Wrap(1 / 0), Null(3) $> 1 / 0, Wrap(Null(3)) $> Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @> Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $> Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8)  @>= 1/0, Wrap(Null(3r8))  @>= Wrap(1/0), Null(3r8)  $>= 1/0, Wrap(Null(3r8))  $>= Wrap(1/0))
Case(Null(3) @>= 1 / 0, Wrap(Null(3)) @>= Wrap(1 / 0), Null(3) $>= 1 / 0, Wrap(Null(3)) $>= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @>= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $>= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8) !@=  1/0, Wrap(Null(3r8)) !@=  Wrap(1/0), Null(3r8) !$=  1/0, Wrap(Null(3r8)) !$=  Wrap(1/0))
Case(Null(3) !@= 1 / 0, Wrap(Null(3)) !@= Wrap(1 / 0), Null(3) !$= 1 / 0, Wrap(Null(3)) !$= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !@= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8) !@<  1/0, Wrap(Null(3r8)) !@<  Wrap(1/0), Null(3r8) !$<  1/0, Wrap(Null(3r8)) !$<  Wrap(1/0))
Case(Null(3) !@< 1 / 0, Wrap(Null(3)) !@< Wrap(1 / 0), Null(3) !$< 1 / 0, Wrap(Null(3)) !$< Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @>= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$< Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r8) !@<= 1/0, Wrap(Null(3r8)) !@<= Wrap(1/0), Null(3r8) !$<= 1/0, Wrap(Null(3r8)) !$<= Wrap(1/0))
Case(Null(3) !@<= 1 / 0, Wrap(Null(3)) !@<= Wrap(1 / 0), Null(3) !$<= 1 / 0, Wrap(Null(3)) !$<= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @> Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$<= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r8) !@>  1/0, Wrap(Null(3r8)) !@>  Wrap(1/0), Null(3r8) !$>  1/0, Wrap(Null(3r8)) !$>  Wrap(1/0))
Case(Null(3) !@> 1 / 0, Wrap(Null(3)) !@> Wrap(1 / 0), Null(3) !$> 1 / 0, Wrap(Null(3)) !$> Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @<= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$> Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8) !@>= 1/0, Wrap(Null(3r8)) !@>= Wrap(1/0), Null(3r8) !$>= 1/0, Wrap(Null(3r8)) !$>= Wrap(1/0))
Case(Null(3) !@>= 1 / 0, Wrap(Null(3)) !@>= Wrap(1 / 0), Null(3) !$>= 1 / 0, Wrap(Null(3)) !$>= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @< Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$>= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8)  @=  -1/0, Wrap(Null(3r8))  @=  Wrap(-1/0), Null(3r8)  $=  -1/0, Wrap(Null(3r8))  $=  Wrap(-1/0))
Case(Null(3) @= -1 / 0, Wrap(Null(3)) @= Wrap(-1 / 0), Null(3) $= -1 / 0, Wrap(Null(3)) $= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8)  @<  -1/0, Wrap(Null(3r8))  @<  Wrap(-1/0), Null(3r8)  $<  -1/0, Wrap(Null(3r8))  $<  Wrap(-1/0))
Case(Null(3) @< -1 / 0, Wrap(Null(3)) @< Wrap(-1 / 0), Null(3) $< -1 / 0, Wrap(Null(3)) $< Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @< Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $< Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r8)  @<= -1/0, Wrap(Null(3r8))  @<= Wrap(-1/0), Null(3r8)  $<= -1/0, Wrap(Null(3r8))  $<= Wrap(-1/0))
Case(Null(3) @<= -1 / 0, Wrap(Null(3)) @<= Wrap(-1 / 0), Null(3) $<= -1 / 0, Wrap(Null(3)) $<= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @<= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $<= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r8)  @>  -1/0, Wrap(Null(3r8))  @>  Wrap(-1/0), Null(3r8)  $>  -1/0, Wrap(Null(3r8))  $>  Wrap(-1/0))
Case(Null(3) @> -1 / 0, Wrap(Null(3)) @> Wrap(-1 / 0), Null(3) $> -1 / 0, Wrap(Null(3)) $> Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @> Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $> Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8)  @>= -1/0, Wrap(Null(3r8))  @>= Wrap(-1/0), Null(3r8)  $>= -1/0, Wrap(Null(3r8))  $>= Wrap(-1/0))
Case(Null(3) @>= -1 / 0, Wrap(Null(3)) @>= Wrap(-1 / 0), Null(3) $>= -1 / 0, Wrap(Null(3)) $>= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @>= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $>= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8) !@=  -1/0, Wrap(Null(3r8)) !@=  Wrap(-1/0), Null(3r8) !$=  -1/0, Wrap(Null(3r8)) !$=  Wrap(-1/0))
Case(Null(3) !@= -1 / 0, Wrap(Null(3)) !@= Wrap(-1 / 0), Null(3) !$= -1 / 0, Wrap(Null(3)) !$= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !@= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8) !@<  -1/0, Wrap(Null(3r8)) !@<  Wrap(-1/0), Null(3r8) !$<  -1/0, Wrap(Null(3r8)) !$<  Wrap(-1/0))
Case(Null(3) !@< -1 / 0, Wrap(Null(3)) !@< Wrap(-1 / 0), Null(3) !$< -1 / 0, Wrap(Null(3)) !$< Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @>= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$< Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r8) !@<= -1/0, Wrap(Null(3r8)) !@<= Wrap(-1/0), Null(3r8) !$<= -1/0, Wrap(Null(3r8)) !$<= Wrap(-1/0))
Case(Null(3) !@<= -1 / 0, Wrap(Null(3)) !@<= Wrap(-1 / 0), Null(3) !$<= -1 / 0, Wrap(Null(3)) !$<= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @> Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$<= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r8) !@>  -1/0, Wrap(Null(3r8)) !@>  Wrap(-1/0), Null(3r8) !$>  -1/0, Wrap(Null(3r8)) !$>  Wrap(-1/0))
Case(Null(3) !@> -1 / 0, Wrap(Null(3)) !@> Wrap(-1 / 0), Null(3) !$> -1 / 0, Wrap(Null(3)) !$> Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @<= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$> Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8) !@>= -1/0, Wrap(Null(3r8)) !@>= Wrap(-1/0), Null(3r8) !$>= -1/0, Wrap(Null(3r8)) !$>= Wrap(-1/0))
Case(Null(3) !@>= -1 / 0, Wrap(Null(3)) !@>= Wrap(-1 / 0), Null(3) !$>= -1 / 0, Wrap(Null(3)) !$>= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @< Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$>= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8)  @=  Null(5r8), Wrap(Null(3r8))  @=  Wrap(Null(5r8)), Null(3r8)  $=  Null(5r8), Wrap(Null(3r8))  $=  Wrap(Null(5r8)))
Case(Null(3) @= Null(5), Wrap(Null(3)) @= Wrap(Null(5)), Null(3) $= Null(5), Wrap(Null(3)) $= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r8)  @<  Null(5r8), Wrap(Null(3r8))  @<  Wrap(Null(5r8)), Null(3r8)  $<  Null(5r8), Wrap(Null(3r8))  $<  Wrap(Null(5r8)))
Case(Null(3) @< Null(5), Wrap(Null(3)) @< Wrap(Null(5)), Null(3) $< Null(5), Wrap(Null(3)) $< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @< Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $< Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8)  @<= Null(5r8), Wrap(Null(3r8))  @<= Wrap(Null(5r8)), Null(3r8)  $<= Null(5r8), Wrap(Null(3r8))  $<= Wrap(Null(5r8)))
Case(Null(3) @<= Null(5), Wrap(Null(3)) @<= Wrap(Null(5)), Null(3) $<= Null(5), Wrap(Null(3)) $<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @<= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $<= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r8)  @>  Null(5r8), Wrap(Null(3r8))  @>  Wrap(Null(5r8)), Null(3r8)  $>  Null(5r8), Wrap(Null(3r8))  $>  Wrap(Null(5r8)))
Case(Null(3) @> Null(5), Wrap(Null(3)) @> Wrap(Null(5)), Null(3) $> Null(5), Wrap(Null(3)) $> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @> Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $> Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8)  @>= Null(5r8), Wrap(Null(3r8))  @>= Wrap(Null(5r8)), Null(3r8)  $>= Null(5r8), Wrap(Null(3r8))  $>= Wrap(Null(5r8)))
Case(Null(3) @>= Null(5), Wrap(Null(3)) @>= Wrap(Null(5)), Null(3) $>= Null(5), Wrap(Null(3)) $>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @>= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $>= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r8) !@=  Null(5r8), Wrap(Null(3r8)) !@=  Wrap(Null(5r8)), Null(3r8) !$=  Null(5r8), Wrap(Null(3r8)) !$=  Wrap(Null(5r8)))
Case(Null(3) !@= Null(5), Wrap(Null(3)) !@= Wrap(Null(5)), Null(3) !$= Null(5), Wrap(Null(3)) !$= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !@= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r8) !@<  Null(5r8), Wrap(Null(3r8)) !@<  Wrap(Null(5r8)), Null(3r8) !$<  Null(5r8), Wrap(Null(3r8)) !$<  Wrap(Null(5r8)))
Case(Null(3) !@< Null(5), Wrap(Null(3)) !@< Wrap(Null(5)), Null(3) !$< Null(5), Wrap(Null(3)) !$< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @>= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$< Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8) !@<= Null(5r8), Wrap(Null(3r8)) !@<= Wrap(Null(5r8)), Null(3r8) !$<= Null(5r8), Wrap(Null(3r8)) !$<= Wrap(Null(5r8)))
Case(Null(3) !@<= Null(5), Wrap(Null(3)) !@<= Wrap(Null(5)), Null(3) !$<= Null(5), Wrap(Null(3)) !$<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @> Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$<= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r8) !@>  Null(5r8), Wrap(Null(3r8)) !@>  Wrap(Null(5r8)), Null(3r8) !$>  Null(5r8), Wrap(Null(3r8)) !$>  Wrap(Null(5r8)))
Case(Null(3) !@> Null(5), Wrap(Null(3)) !@> Wrap(Null(5)), Null(3) !$> Null(5), Wrap(Null(3)) !$> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @<= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$> Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8) !@>= Null(5r8), Wrap(Null(3r8)) !@>= Wrap(Null(5r8)), Null(3r8) !$>= Null(5r8), Wrap(Null(3r8)) !$>= Wrap(Null(5r8)))
Case(Null(3) !@>= Null(5), Wrap(Null(3)) !@>= Wrap(Null(5)), Null(3) !$>= Null(5), Wrap(Null(3)) !$>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @< Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$>= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r8)  @=  Opt(5r8), Wrap(Null(3r8))  @=  Wrap(Opt(5r8)), Null(3r8)  $=  Opt(5r8), Wrap(Null(3r8))  $=  Wrap(Opt(5r8)))
Case(Null(3) @= Opt(5), Wrap(Null(3)) @= Wrap(Opt(5)), Null(3) $= Opt(5), Wrap(Null(3)) $= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8)  @<  Opt(5r8), Wrap(Null(3r8))  @<  Wrap(Opt(5r8)), Null(3r8)  $<  Opt(5r8), Wrap(Null(3r8))  $<  Wrap(Opt(5r8)))
Case(Null(3) @< Opt(5), Wrap(Null(3)) @< Wrap(Opt(5)), Null(3) $< Opt(5), Wrap(Null(3)) $< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r8)  @<= Opt(5r8), Wrap(Null(3r8))  @<= Wrap(Opt(5r8)), Null(3r8)  $<= Opt(5r8), Wrap(Null(3r8))  $<= Wrap(Opt(5r8)))
Case(Null(3) @<= Opt(5), Wrap(Null(3)) @<= Wrap(Opt(5)), Null(3) $<= Opt(5), Wrap(Null(3)) $<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r8)  @>  Opt(5r8), Wrap(Null(3r8))  @>  Wrap(Opt(5r8)), Null(3r8)  $>  Opt(5r8), Wrap(Null(3r8))  $>  Wrap(Opt(5r8)))
Case(Null(3) @> Opt(5), Wrap(Null(3)) @> Wrap(Opt(5)), Null(3) $> Opt(5), Wrap(Null(3)) $> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8)  @>= Opt(5r8), Wrap(Null(3r8))  @>= Wrap(Opt(5r8)), Null(3r8)  $>= Opt(5r8), Wrap(Null(3r8))  $>= Wrap(Opt(5r8)))
Case(Null(3) @>= Opt(5), Wrap(Null(3)) @>= Wrap(Opt(5)), Null(3) $>= Opt(5), Wrap(Null(3)) $>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) $>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r8) !@=  Opt(5r8), Wrap(Null(3r8)) !@=  Wrap(Opt(5r8)), Null(3r8) !$=  Opt(5r8), Wrap(Null(3r8)) !$=  Wrap(Opt(5r8)))
Case(Null(3) !@= Opt(5), Wrap(Null(3)) !@= Wrap(Opt(5)), Null(3) !$= Opt(5), Wrap(Null(3)) !$= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !@= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8) !@<  Opt(5r8), Wrap(Null(3r8)) !@<  Wrap(Opt(5r8)), Null(3r8) !$<  Opt(5r8), Wrap(Null(3r8)) !$<  Wrap(Opt(5r8)))
Case(Null(3) !@< Opt(5), Wrap(Null(3)) !@< Wrap(Opt(5)), Null(3) !$< Opt(5), Wrap(Null(3)) !$< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r8) !@<= Opt(5r8), Wrap(Null(3r8)) !@<= Wrap(Opt(5r8)), Null(3r8) !$<= Opt(5r8), Wrap(Null(3r8)) !$<= Wrap(Opt(5r8)))
Case(Null(3) !@<= Opt(5), Wrap(Null(3)) !@<= Wrap(Opt(5)), Null(3) !$<= Opt(5), Wrap(Null(3)) !$<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r8) !@>  Opt(5r8), Wrap(Null(3r8)) !@>  Wrap(Opt(5r8)), Null(3r8) !$>  Opt(5r8), Wrap(Null(3r8)) !$>  Wrap(Opt(5r8)))
Case(Null(3) !@> Opt(5), Wrap(Null(3)) !@> Wrap(Opt(5)), Null(3) !$> Opt(5), Wrap(Null(3)) !$> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r8) !@>= Opt(5r8), Wrap(Null(3r8)) !@>= Wrap(Opt(5r8)), Null(3r8) !$>= Opt(5r8), Wrap(Null(3r8)) !$>= Wrap(Opt(5r8)))
Case(Null(3) !@>= Opt(5), Wrap(Null(3)) !@>= Wrap(Opt(5)), Null(3) !$>= Opt(5), Wrap(Null(3)) !$>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) @< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r8?):r8?) !$>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8)  @=  5r8, Wrap(Opt(3r8))  @=  Wrap(5r8), Opt(3r8)  $=  5r8, Wrap(Opt(3r8))  $=  Wrap(5r8))
Case(Opt(3) @= 5, Wrap(Opt(3)) @= Wrap(5), Opt(3) $= 5, Wrap(Opt(3)) $= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8)  @<  5r8, Wrap(Opt(3r8))  @<  Wrap(5r8), Opt(3r8)  $<  5r8, Wrap(Opt(3r8))  $<  Wrap(5r8))
Case(Opt(3) @< 5, Wrap(Opt(3)) @< Wrap(5), Opt(3) $< 5, Wrap(Opt(3)) $< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @< Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $< Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8)  @<= 5r8, Wrap(Opt(3r8))  @<= Wrap(5r8), Opt(3r8)  $<= 5r8, Wrap(Opt(3r8))  $<= Wrap(5r8))
Case(Opt(3) @<= 5, Wrap(Opt(3)) @<= Wrap(5), Opt(3) $<= 5, Wrap(Opt(3)) $<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @<= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $<= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8)  @>  5r8, Wrap(Opt(3r8))  @>  Wrap(5r8), Opt(3r8)  $>  5r8, Wrap(Opt(3r8))  $>  Wrap(5r8))
Case(Opt(3) @> 5, Wrap(Opt(3)) @> Wrap(5), Opt(3) $> 5, Wrap(Opt(3)) $> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @> Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $> Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8)  @>= 5r8, Wrap(Opt(3r8))  @>= Wrap(5r8), Opt(3r8)  $>= 5r8, Wrap(Opt(3r8))  $>= Wrap(5r8))
Case(Opt(3) @>= 5, Wrap(Opt(3)) @>= Wrap(5), Opt(3) $>= 5, Wrap(Opt(3)) $>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @>= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $>= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8) !@=  5r8, Wrap(Opt(3r8)) !@=  Wrap(5r8), Opt(3r8) !$=  5r8, Wrap(Opt(3r8)) !$=  Wrap(5r8))
Case(Opt(3) !@= 5, Wrap(Opt(3)) !@= Wrap(5), Opt(3) !$= 5, Wrap(Opt(3)) !$= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !@= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8) !@<  5r8, Wrap(Opt(3r8)) !@<  Wrap(5r8), Opt(3r8) !$<  5r8, Wrap(Opt(3r8)) !$<  Wrap(5r8))
Case(Opt(3) !@< 5, Wrap(Opt(3)) !@< Wrap(5), Opt(3) !$< 5, Wrap(Opt(3)) !$< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @>= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$< Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8) !@<= 5r8, Wrap(Opt(3r8)) !@<= Wrap(5r8), Opt(3r8) !$<= 5r8, Wrap(Opt(3r8)) !$<= Wrap(5r8))
Case(Opt(3) !@<= 5, Wrap(Opt(3)) !@<= Wrap(5), Opt(3) !$<= 5, Wrap(Opt(3)) !$<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @> Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$<= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8) !@>  5r8, Wrap(Opt(3r8)) !@>  Wrap(5r8), Opt(3r8) !$>  5r8, Wrap(Opt(3r8)) !$>  Wrap(5r8))
Case(Opt(3) !@> 5, Wrap(Opt(3)) !@> Wrap(5), Opt(3) !$> 5, Wrap(Opt(3)) !$> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @<= Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$> Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8) !@>= 5r8, Wrap(Opt(3r8)) !@>= Wrap(5r8), Opt(3r8) !$>= 5r8, Wrap(Opt(3r8)) !$>= Wrap(5r8))
Case(Opt(3) !@>= 5, Wrap(Opt(3)) !@>= Wrap(5), Opt(3) !$>= 5, Wrap(Opt(3)) !$>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @< Call(∂.Test.Wrap(5:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$>= Call(∂.Test.Wrap(5:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8)  @=  0/0, Wrap(Opt(3r8))  @=  Wrap(0/0), Opt(3r8)  $=  0/0, Wrap(Opt(3r8))  $=  Wrap(0/0))
Case(Opt(3) @= 0 / 0, Wrap(Opt(3)) @= Wrap(0 / 0), Opt(3) $= 0 / 0, Wrap(Opt(3)) $= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8)  @<  0/0, Wrap(Opt(3r8))  @<  Wrap(0/0), Opt(3r8)  $<  0/0, Wrap(Opt(3r8))  $<  Wrap(0/0))
Case(Opt(3) @< 0 / 0, Wrap(Opt(3)) @< Wrap(0 / 0), Opt(3) $< 0 / 0, Wrap(Opt(3)) $< Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @< Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $< Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8)  @<= 0/0, Wrap(Opt(3r8))  @<= Wrap(0/0), Opt(3r8)  $<= 0/0, Wrap(Opt(3r8))  $<= Wrap(0/0))
Case(Opt(3) @<= 0 / 0, Wrap(Opt(3)) @<= Wrap(0 / 0), Opt(3) $<= 0 / 0, Wrap(Opt(3)) $<= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @<= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $<= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8)  @>  0/0, Wrap(Opt(3r8))  @>  Wrap(0/0), Opt(3r8)  $>  0/0, Wrap(Opt(3r8))  $>  Wrap(0/0))
Case(Opt(3) @> 0 / 0, Wrap(Opt(3)) @> Wrap(0 / 0), Opt(3) $> 0 / 0, Wrap(Opt(3)) $> Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @> Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $> Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Opt(3r8)  @>= 0/0, Wrap(Opt(3r8))  @>= Wrap(0/0), Opt(3r8)  $>= 0/0, Wrap(Opt(3r8))  $>= Wrap(0/0))
Case(Opt(3) @>= 0 / 0, Wrap(Opt(3)) @>= Wrap(0 / 0), Opt(3) $>= 0 / 0, Wrap(Opt(3)) $>= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @>= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $>= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Opt(3r8) !@=  0/0, Wrap(Opt(3r8)) !@=  Wrap(0/0), Opt(3r8) !$=  0/0, Wrap(Opt(3r8)) !$=  Wrap(0/0))
Case(Opt(3) !@= 0 / 0, Wrap(Opt(3)) !@= Wrap(0 / 0), Opt(3) !$= 0 / 0, Wrap(Opt(3)) !$= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !@= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8) !@<  0/0, Wrap(Opt(3r8)) !@<  Wrap(0/0), Opt(3r8) !$<  0/0, Wrap(Opt(3r8)) !$<  Wrap(0/0))
Case(Opt(3) !@< 0 / 0, Wrap(Opt(3)) !@< Wrap(0 / 0), Opt(3) !$< 0 / 0, Wrap(Opt(3)) !$< Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @>= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$< Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8) !@<= 0/0, Wrap(Opt(3r8)) !@<= Wrap(0/0), Opt(3r8) !$<= 0/0, Wrap(Opt(3r8)) !$<= Wrap(0/0))
Case(Opt(3) !@<= 0 / 0, Wrap(Opt(3)) !@<= Wrap(0 / 0), Opt(3) !$<= 0 / 0, Wrap(Opt(3)) !$<= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @> Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$<= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8) !@>  0/0, Wrap(Opt(3r8)) !@>  Wrap(0/0), Opt(3r8) !$>  0/0, Wrap(Opt(3r8)) !$>  Wrap(0/0))
Case(Opt(3) !@> 0 / 0, Wrap(Opt(3)) !@> Wrap(0 / 0), Opt(3) !$> 0 / 0, Wrap(Opt(3)) !$> Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @<= Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$> Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Opt(3r8) !@>= 0/0, Wrap(Opt(3r8)) !@>= Wrap(0/0), Opt(3r8) !$>= 0/0, Wrap(Opt(3r8)) !$>= Wrap(0/0))
Case(Opt(3) !@>= 0 / 0, Wrap(Opt(3)) !@>= Wrap(0 / 0), Opt(3) !$>= 0 / 0, Wrap(Opt(3)) !$>= Wrap(0 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @< Call(∂.Test.Wrap(NaN:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$>= Call(∂.Test.Wrap(NaN:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Opt(3r8)  @=  1/0, Wrap(Opt(3r8))  @=  Wrap(1/0), Opt(3r8)  $=  1/0, Wrap(Opt(3r8))  $=  Wrap(1/0))
Case(Opt(3) @= 1 / 0, Wrap(Opt(3)) @= Wrap(1 / 0), Opt(3) $= 1 / 0, Wrap(Opt(3)) $= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8)  @<  1/0, Wrap(Opt(3r8))  @<  Wrap(1/0), Opt(3r8)  $<  1/0, Wrap(Opt(3r8))  $<  Wrap(1/0))
Case(Opt(3) @< 1 / 0, Wrap(Opt(3)) @< Wrap(1 / 0), Opt(3) $< 1 / 0, Wrap(Opt(3)) $< Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @< Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $< Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8)  @<= 1/0, Wrap(Opt(3r8))  @<= Wrap(1/0), Opt(3r8)  $<= 1/0, Wrap(Opt(3r8))  $<= Wrap(1/0))
Case(Opt(3) @<= 1 / 0, Wrap(Opt(3)) @<= Wrap(1 / 0), Opt(3) $<= 1 / 0, Wrap(Opt(3)) $<= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @<= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $<= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8)  @>  1/0, Wrap(Opt(3r8))  @>  Wrap(1/0), Opt(3r8)  $>  1/0, Wrap(Opt(3r8))  $>  Wrap(1/0))
Case(Opt(3) @> 1 / 0, Wrap(Opt(3)) @> Wrap(1 / 0), Opt(3) $> 1 / 0, Wrap(Opt(3)) $> Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @> Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $> Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8)  @>= 1/0, Wrap(Opt(3r8))  @>= Wrap(1/0), Opt(3r8)  $>= 1/0, Wrap(Opt(3r8))  $>= Wrap(1/0))
Case(Opt(3) @>= 1 / 0, Wrap(Opt(3)) @>= Wrap(1 / 0), Opt(3) $>= 1 / 0, Wrap(Opt(3)) $>= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @>= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $>= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8) !@=  1/0, Wrap(Opt(3r8)) !@=  Wrap(1/0), Opt(3r8) !$=  1/0, Wrap(Opt(3r8)) !$=  Wrap(1/0))
Case(Opt(3) !@= 1 / 0, Wrap(Opt(3)) !@= Wrap(1 / 0), Opt(3) !$= 1 / 0, Wrap(Opt(3)) !$= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !@= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8) !@<  1/0, Wrap(Opt(3r8)) !@<  Wrap(1/0), Opt(3r8) !$<  1/0, Wrap(Opt(3r8)) !$<  Wrap(1/0))
Case(Opt(3) !@< 1 / 0, Wrap(Opt(3)) !@< Wrap(1 / 0), Opt(3) !$< 1 / 0, Wrap(Opt(3)) !$< Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @>= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$< Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8) !@<= 1/0, Wrap(Opt(3r8)) !@<= Wrap(1/0), Opt(3r8) !$<= 1/0, Wrap(Opt(3r8)) !$<= Wrap(1/0))
Case(Opt(3) !@<= 1 / 0, Wrap(Opt(3)) !@<= Wrap(1 / 0), Opt(3) !$<= 1 / 0, Wrap(Opt(3)) !$<= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @> Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$<= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8) !@>  1/0, Wrap(Opt(3r8)) !@>  Wrap(1/0), Opt(3r8) !$>  1/0, Wrap(Opt(3r8)) !$>  Wrap(1/0))
Case(Opt(3) !@> 1 / 0, Wrap(Opt(3)) !@> Wrap(1 / 0), Opt(3) !$> 1 / 0, Wrap(Opt(3)) !$> Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @<= Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$> Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8) !@>= 1/0, Wrap(Opt(3r8)) !@>= Wrap(1/0), Opt(3r8) !$>= 1/0, Wrap(Opt(3r8)) !$>= Wrap(1/0))
Case(Opt(3) !@>= 1 / 0, Wrap(Opt(3)) !@>= Wrap(1 / 0), Opt(3) !$>= 1 / 0, Wrap(Opt(3)) !$>= Wrap(1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @< Call(∂.Test.Wrap(∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$>= Call(∂.Test.Wrap(∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8)  @=  -1/0, Wrap(Opt(3r8))  @=  Wrap(-1/0), Opt(3r8)  $=  -1/0, Wrap(Opt(3r8))  $=  Wrap(-1/0))
Case(Opt(3) @= -1 / 0, Wrap(Opt(3)) @= Wrap(-1 / 0), Opt(3) $= -1 / 0, Wrap(Opt(3)) $= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8)  @<  -1/0, Wrap(Opt(3r8))  @<  Wrap(-1/0), Opt(3r8)  $<  -1/0, Wrap(Opt(3r8))  $<  Wrap(-1/0))
Case(Opt(3) @< -1 / 0, Wrap(Opt(3)) @< Wrap(-1 / 0), Opt(3) $< -1 / 0, Wrap(Opt(3)) $< Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @< Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $< Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8)  @<= -1/0, Wrap(Opt(3r8))  @<= Wrap(-1/0), Opt(3r8)  $<= -1/0, Wrap(Opt(3r8))  $<= Wrap(-1/0))
Case(Opt(3) @<= -1 / 0, Wrap(Opt(3)) @<= Wrap(-1 / 0), Opt(3) $<= -1 / 0, Wrap(Opt(3)) $<= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @<= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $<= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8)  @>  -1/0, Wrap(Opt(3r8))  @>  Wrap(-1/0), Opt(3r8)  $>  -1/0, Wrap(Opt(3r8))  $>  Wrap(-1/0))
Case(Opt(3) @> -1 / 0, Wrap(Opt(3)) @> Wrap(-1 / 0), Opt(3) $> -1 / 0, Wrap(Opt(3)) $> Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @> Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $> Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8)  @>= -1/0, Wrap(Opt(3r8))  @>= Wrap(-1/0), Opt(3r8)  $>= -1/0, Wrap(Opt(3r8))  $>= Wrap(-1/0))
Case(Opt(3) @>= -1 / 0, Wrap(Opt(3)) @>= Wrap(-1 / 0), Opt(3) $>= -1 / 0, Wrap(Opt(3)) $>= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @>= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $>= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8) !@=  -1/0, Wrap(Opt(3r8)) !@=  Wrap(-1/0), Opt(3r8) !$=  -1/0, Wrap(Opt(3r8)) !$=  Wrap(-1/0))
Case(Opt(3) !@= -1 / 0, Wrap(Opt(3)) !@= Wrap(-1 / 0), Opt(3) !$= -1 / 0, Wrap(Opt(3)) !$= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !@= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8) !@<  -1/0, Wrap(Opt(3r8)) !@<  Wrap(-1/0), Opt(3r8) !$<  -1/0, Wrap(Opt(3r8)) !$<  Wrap(-1/0))
Case(Opt(3) !@< -1 / 0, Wrap(Opt(3)) !@< Wrap(-1 / 0), Opt(3) !$< -1 / 0, Wrap(Opt(3)) !$< Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @>= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$< Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8) !@<= -1/0, Wrap(Opt(3r8)) !@<= Wrap(-1/0), Opt(3r8) !$<= -1/0, Wrap(Opt(3r8)) !$<= Wrap(-1/0))
Case(Opt(3) !@<= -1 / 0, Wrap(Opt(3)) !@<= Wrap(-1 / 0), Opt(3) !$<= -1 / 0, Wrap(Opt(3)) !$<= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @> Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$<= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8) !@>  -1/0, Wrap(Opt(3r8)) !@>  Wrap(-1/0), Opt(3r8) !$>  -1/0, Wrap(Opt(3r8)) !$>  Wrap(-1/0))
Case(Opt(3) !@> -1 / 0, Wrap(Opt(3)) !@> Wrap(-1 / 0), Opt(3) !$> -1 / 0, Wrap(Opt(3)) !$> Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @<= Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$> Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8) !@>= -1/0, Wrap(Opt(3r8)) !@>= Wrap(-1/0), Opt(3r8) !$>= -1/0, Wrap(Opt(3r8)) !$>= Wrap(-1/0))
Case(Opt(3) !@>= -1 / 0, Wrap(Opt(3)) !@>= Wrap(-1 / 0), Opt(3) !$>= -1 / 0, Wrap(Opt(3)) !$>= Wrap(-1 / 0)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @< Call(∂.Test.Wrap(-∞:r8):r8)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$>= Call(∂.Test.Wrap(-∞:r8):r8)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8)  @=  Null(5r8), Wrap(Opt(3r8))  @=  Wrap(Null(5r8)), Opt(3r8)  $=  Null(5r8), Wrap(Opt(3r8))  $=  Wrap(Null(5r8)))
Case(Opt(3) @= Null(5), Wrap(Opt(3)) @= Wrap(Null(5)), Opt(3) $= Null(5), Wrap(Opt(3)) $= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8)  @<  Null(5r8), Wrap(Opt(3r8))  @<  Wrap(Null(5r8)), Opt(3r8)  $<  Null(5r8), Wrap(Opt(3r8))  $<  Wrap(Null(5r8)))
Case(Opt(3) @< Null(5), Wrap(Opt(3)) @< Wrap(Null(5)), Opt(3) $< Null(5), Wrap(Opt(3)) $< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @< Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $< Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8)  @<= Null(5r8), Wrap(Opt(3r8))  @<= Wrap(Null(5r8)), Opt(3r8)  $<= Null(5r8), Wrap(Opt(3r8))  $<= Wrap(Null(5r8)))
Case(Opt(3) @<= Null(5), Wrap(Opt(3)) @<= Wrap(Null(5)), Opt(3) $<= Null(5), Wrap(Opt(3)) $<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @<= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $<= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8)  @>  Null(5r8), Wrap(Opt(3r8))  @>  Wrap(Null(5r8)), Opt(3r8)  $>  Null(5r8), Wrap(Opt(3r8))  $>  Wrap(Null(5r8)))
Case(Opt(3) @> Null(5), Wrap(Opt(3)) @> Wrap(Null(5)), Opt(3) $> Null(5), Wrap(Opt(3)) $> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @> Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $> Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Opt(3r8)  @>= Null(5r8), Wrap(Opt(3r8))  @>= Wrap(Null(5r8)), Opt(3r8)  $>= Null(5r8), Wrap(Opt(3r8))  $>= Wrap(Null(5r8)))
Case(Opt(3) @>= Null(5), Wrap(Opt(3)) @>= Wrap(Null(5)), Opt(3) $>= Null(5), Wrap(Opt(3)) $>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @>= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $>= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Opt(3r8) !@=  Null(5r8), Wrap(Opt(3r8)) !@=  Wrap(Null(5r8)), Opt(3r8) !$=  Null(5r8), Wrap(Opt(3r8)) !$=  Wrap(Null(5r8)))
Case(Opt(3) !@= Null(5), Wrap(Opt(3)) !@= Wrap(Null(5)), Opt(3) !$= Null(5), Wrap(Opt(3)) !$= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !@= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8) !@<  Null(5r8), Wrap(Opt(3r8)) !@<  Wrap(Null(5r8)), Opt(3r8) !$<  Null(5r8), Wrap(Opt(3r8)) !$<  Wrap(Null(5r8)))
Case(Opt(3) !@< Null(5), Wrap(Opt(3)) !@< Wrap(Null(5)), Opt(3) !$< Null(5), Wrap(Opt(3)) !$< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @>= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$< Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8) !@<= Null(5r8), Wrap(Opt(3r8)) !@<= Wrap(Null(5r8)), Opt(3r8) !$<= Null(5r8), Wrap(Opt(3r8)) !$<= Wrap(Null(5r8)))
Case(Opt(3) !@<= Null(5), Wrap(Opt(3)) !@<= Wrap(Null(5)), Opt(3) !$<= Null(5), Wrap(Opt(3)) !$<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @> Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$<= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8) !@>  Null(5r8), Wrap(Opt(3r8)) !@>  Wrap(Null(5r8)), Opt(3r8) !$>  Null(5r8), Wrap(Opt(3r8)) !$>  Wrap(Null(5r8)))
Case(Opt(3) !@> Null(5), Wrap(Opt(3)) !@> Wrap(Null(5)), Opt(3) !$> Null(5), Wrap(Opt(3)) !$> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @<= Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$> Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Opt(3r8) !@>= Null(5r8), Wrap(Opt(3r8)) !@>= Wrap(Null(5r8)), Opt(3r8) !$>= Null(5r8), Wrap(Opt(3r8)) !$>= Wrap(Null(5r8)))
Case(Opt(3) !@>= Null(5), Wrap(Opt(3)) !@>= Wrap(Null(5)), Opt(3) !$>= Null(5), Wrap(Opt(3)) !$>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @< Call(∂.Test.Wrap(null:r8?):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$>= Call(∂.Test.Wrap(null:r8?):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Opt(3r8)  @=  Opt(5r8), Wrap(Opt(3r8))  @=  Wrap(Opt(5r8)), Opt(3r8)  $=  Opt(5r8), Wrap(Opt(3r8))  $=  Wrap(Opt(5r8)))
Case(Opt(3) @= Opt(5), Wrap(Opt(3)) @= Wrap(Opt(5)), Opt(3) $= Opt(5), Wrap(Opt(3)) $= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8)  @<  Opt(5r8), Wrap(Opt(3r8))  @<  Wrap(Opt(5r8)), Opt(3r8)  $<  Opt(5r8), Wrap(Opt(3r8))  $<  Wrap(Opt(5r8)))
Case(Opt(3) @< Opt(5), Wrap(Opt(3)) @< Wrap(Opt(5)), Opt(3) $< Opt(5), Wrap(Opt(3)) $< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8)  @<= Opt(5r8), Wrap(Opt(3r8))  @<= Wrap(Opt(5r8)), Opt(3r8)  $<= Opt(5r8), Wrap(Opt(3r8))  $<= Wrap(Opt(5r8)))
Case(Opt(3) @<= Opt(5), Wrap(Opt(3)) @<= Wrap(Opt(5)), Opt(3) $<= Opt(5), Wrap(Opt(3)) $<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8)  @>  Opt(5r8), Wrap(Opt(3r8))  @>  Wrap(Opt(5r8)), Opt(3r8)  $>  Opt(5r8), Wrap(Opt(3r8))  $>  Wrap(Opt(5r8)))
Case(Opt(3) @> Opt(5), Wrap(Opt(3)) @> Wrap(Opt(5)), Opt(3) $> Opt(5), Wrap(Opt(3)) $> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8)  @>= Opt(5r8), Wrap(Opt(3r8))  @>= Wrap(Opt(5r8)), Opt(3r8)  $>= Opt(5r8), Wrap(Opt(3r8))  $>= Wrap(Opt(5r8)))
Case(Opt(3) @>= Opt(5), Wrap(Opt(3)) @>= Wrap(Opt(5)), Opt(3) $>= Opt(5), Wrap(Opt(3)) $>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) $>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8) !@=  Opt(5r8), Wrap(Opt(3r8)) !@=  Wrap(Opt(5r8)), Opt(3r8) !$=  Opt(5r8), Wrap(Opt(3r8)) !$=  Wrap(Opt(5r8)))
Case(Opt(3) !@= Opt(5), Wrap(Opt(3)) !@= Wrap(Opt(5)), Opt(3) !$= Opt(5), Wrap(Opt(3)) !$= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !@= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8) !@<  Opt(5r8), Wrap(Opt(3r8)) !@<  Wrap(Opt(5r8)), Opt(3r8) !$<  Opt(5r8), Wrap(Opt(3r8)) !$<  Wrap(Opt(5r8)))
Case(Opt(3) !@< Opt(5), Wrap(Opt(3)) !@< Wrap(Opt(5)), Opt(3) !$< Opt(5), Wrap(Opt(3)) !$< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8) !@<= Opt(5r8), Wrap(Opt(3r8)) !@<= Wrap(Opt(5r8)), Opt(3r8) !$<= Opt(5r8), Wrap(Opt(3r8)) !$<= Wrap(Opt(5r8)))
Case(Opt(3) !@<= Opt(5), Wrap(Opt(3)) !@<= Wrap(Opt(5)), Opt(3) !$<= Opt(5), Wrap(Opt(3)) !$<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r8) !@>  Opt(5r8), Wrap(Opt(3r8)) !@>  Wrap(Opt(5r8)), Opt(3r8) !$>  Opt(5r8), Wrap(Opt(3r8)) !$>  Wrap(Opt(5r8)))
Case(Opt(3) !@> Opt(5), Wrap(Opt(3)) !@> Wrap(Opt(5)), Opt(3) !$> Opt(5), Wrap(Opt(3)) !$> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @<= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$> Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r8) !@>= Opt(5r8), Wrap(Opt(3r8)) !@>= Wrap(Opt(5r8)), Opt(3r8) !$>= Opt(5r8), Wrap(Opt(3r8)) !$>= Wrap(Opt(5r8)))
Case(Opt(3) !@>= Opt(5), Wrap(Opt(3)) !@>= Wrap(Opt(5)), Opt(3) !$>= Opt(5), Wrap(Opt(3)) !$>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) @< Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r8?>(3:r8)):r8?) !$>= Call(∂.Test.Wrap(Opt<r8?>(5:r8)):r8?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4  @=  5r4, Wrap(3r4)  @=  Wrap(5r4), 3r4  $=  5r4, Wrap(3r4)  $=  Wrap(5r4))
Case(3 @= 5, Wrap(3) @= Wrap(5), 3 $= 5, Wrap(3) $= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4  @<  5r4, Wrap(3r4)  @<  Wrap(5r4), 3r4  $<  5r4, Wrap(3r4)  $<  Wrap(5r4))
Case(3 @< 5, Wrap(3) @< Wrap(5), 3 $< 5, Wrap(3) $< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @< Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $< Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4  @<= 5r4, Wrap(3r4)  @<= Wrap(5r4), 3r4  $<= 5r4, Wrap(3r4)  $<= Wrap(5r4))
Case(3 @<= 5, Wrap(3) @<= Wrap(5), 3 $<= 5, Wrap(3) $<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @<= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $<= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4  @>  5r4, Wrap(3r4)  @>  Wrap(5r4), 3r4  $>  5r4, Wrap(3r4)  $>  Wrap(5r4))
Case(3 @> 5, Wrap(3) @> Wrap(5), 3 $> 5, Wrap(3) $> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @> Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $> Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4  @>= 5r4, Wrap(3r4)  @>= Wrap(5r4), 3r4  $>= 5r4, Wrap(3r4)  $>= Wrap(5r4))
Case(3 @>= 5, Wrap(3) @>= Wrap(5), 3 $>= 5, Wrap(3) $>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @>= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $>= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4 !@=  5r4, Wrap(3r4) !@=  Wrap(5r4), 3r4 !$=  5r4, Wrap(3r4) !$=  Wrap(5r4))
Case(3 !@= 5, Wrap(3) !@= Wrap(5), 3 !$= 5, Wrap(3) !$= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) !@= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4 !@<  5r4, Wrap(3r4) !@<  Wrap(5r4), 3r4 !$<  5r4, Wrap(3r4) !$<  Wrap(5r4))
Case(3 !@< 5, Wrap(3) !@< Wrap(5), 3 !$< 5, Wrap(3) !$< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @>= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$< Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4 !@<= 5r4, Wrap(3r4) !@<= Wrap(5r4), 3r4 !$<= 5r4, Wrap(3r4) !$<= Wrap(5r4))
Case(3 !@<= 5, Wrap(3) !@<= Wrap(5), 3 !$<= 5, Wrap(3) !$<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @> Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$<= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4 !@>  5r4, Wrap(3r4) !@>  Wrap(5r4), 3r4 !$>  5r4, Wrap(3r4) !$>  Wrap(5r4))
Case(3 !@> 5, Wrap(3) !@> Wrap(5), 3 !$> 5, Wrap(3) !$> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @<= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$> Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4 !@>= 5r4, Wrap(3r4) !@>= Wrap(5r4), 3r4 !$>= 5r4, Wrap(3r4) !$>= Wrap(5r4))
Case(3 !@>= 5, Wrap(3) !@>= Wrap(5), 3 !$>= 5, Wrap(3) !$>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @< Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$>= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4  @=  CastR4(0/0), Wrap(3r4)  @=  Wrap(CastR4(0/0)), 3r4  $=  CastR4(0/0), Wrap(3r4)  $=  Wrap(CastR4(0/0)))
Case(3 @= CastR4(0 / 0), Wrap(3) @= Wrap(CastR4(0 / 0)), 3 $= CastR4(0 / 0), Wrap(3) $= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4  @<  CastR4(0/0), Wrap(3r4)  @<  Wrap(CastR4(0/0)), 3r4  $<  CastR4(0/0), Wrap(3r4)  $<  Wrap(CastR4(0/0)))
Case(3 @< CastR4(0 / 0), Wrap(3) @< Wrap(CastR4(0 / 0)), 3 $< CastR4(0 / 0), Wrap(3) $< Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @< Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $< Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4  @<= CastR4(0/0), Wrap(3r4)  @<= Wrap(CastR4(0/0)), 3r4  $<= CastR4(0/0), Wrap(3r4)  $<= Wrap(CastR4(0/0)))
Case(3 @<= CastR4(0 / 0), Wrap(3) @<= Wrap(CastR4(0 / 0)), 3 $<= CastR4(0 / 0), Wrap(3) $<= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @<= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $<= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4  @>  CastR4(0/0), Wrap(3r4)  @>  Wrap(CastR4(0/0)), 3r4  $>  CastR4(0/0), Wrap(3r4)  $>  Wrap(CastR4(0/0)))
Case(3 @> CastR4(0 / 0), Wrap(3) @> Wrap(CastR4(0 / 0)), 3 $> CastR4(0 / 0), Wrap(3) $> Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @> Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $> Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(3r4  @>= CastR4(0/0), Wrap(3r4)  @>= Wrap(CastR4(0/0)), 3r4  $>= CastR4(0/0), Wrap(3r4)  $>= Wrap(CastR4(0/0)))
Case(3 @>= CastR4(0 / 0), Wrap(3) @>= Wrap(CastR4(0 / 0)), 3 $>= CastR4(0 / 0), Wrap(3) $>= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @>= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $>= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(3r4 !@=  CastR4(0/0), Wrap(3r4) !@=  Wrap(CastR4(0/0)), 3r4 !$=  CastR4(0/0), Wrap(3r4) !$=  Wrap(CastR4(0/0)))
Case(3 !@= CastR4(0 / 0), Wrap(3) !@= Wrap(CastR4(0 / 0)), 3 !$= CastR4(0 / 0), Wrap(3) !$= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) !@= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4 !@<  CastR4(0/0), Wrap(3r4) !@<  Wrap(CastR4(0/0)), 3r4 !$<  CastR4(0/0), Wrap(3r4) !$<  Wrap(CastR4(0/0)))
Case(3 !@< CastR4(0 / 0), Wrap(3) !@< Wrap(CastR4(0 / 0)), 3 !$< CastR4(0 / 0), Wrap(3) !$< Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @>= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$< Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4 !@<= CastR4(0/0), Wrap(3r4) !@<= Wrap(CastR4(0/0)), 3r4 !$<= CastR4(0/0), Wrap(3r4) !$<= Wrap(CastR4(0/0)))
Case(3 !@<= CastR4(0 / 0), Wrap(3) !@<= Wrap(CastR4(0 / 0)), 3 !$<= CastR4(0 / 0), Wrap(3) !$<= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @> Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$<= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4 !@>  CastR4(0/0), Wrap(3r4) !@>  Wrap(CastR4(0/0)), 3r4 !$>  CastR4(0/0), Wrap(3r4) !$>  Wrap(CastR4(0/0)))
Case(3 !@> CastR4(0 / 0), Wrap(3) !@> Wrap(CastR4(0 / 0)), 3 !$> CastR4(0 / 0), Wrap(3) !$> Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @<= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$> Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(3r4 !@>= CastR4(0/0), Wrap(3r4) !@>= Wrap(CastR4(0/0)), 3r4 !$>= CastR4(0/0), Wrap(3r4) !$>= Wrap(CastR4(0/0)))
Case(3 !@>= CastR4(0 / 0), Wrap(3) !@>= Wrap(CastR4(0 / 0)), 3 !$>= CastR4(0 / 0), Wrap(3) !$>= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @< Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$>= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(3r4  @=  CastR4(1/0), Wrap(3r4)  @=  Wrap(CastR4(1/0)), 3r4  $=  CastR4(1/0), Wrap(3r4)  $=  Wrap(CastR4(1/0)))
Case(3 @= CastR4(1 / 0), Wrap(3) @= Wrap(CastR4(1 / 0)), 3 $= CastR4(1 / 0), Wrap(3) $= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4  @<  CastR4(1/0), Wrap(3r4)  @<  Wrap(CastR4(1/0)), 3r4  $<  CastR4(1/0), Wrap(3r4)  $<  Wrap(CastR4(1/0)))
Case(3 @< CastR4(1 / 0), Wrap(3) @< Wrap(CastR4(1 / 0)), 3 $< CastR4(1 / 0), Wrap(3) $< Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @< Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $< Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4  @<= CastR4(1/0), Wrap(3r4)  @<= Wrap(CastR4(1/0)), 3r4  $<= CastR4(1/0), Wrap(3r4)  $<= Wrap(CastR4(1/0)))
Case(3 @<= CastR4(1 / 0), Wrap(3) @<= Wrap(CastR4(1 / 0)), 3 $<= CastR4(1 / 0), Wrap(3) $<= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @<= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $<= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4  @>  CastR4(1/0), Wrap(3r4)  @>  Wrap(CastR4(1/0)), 3r4  $>  CastR4(1/0), Wrap(3r4)  $>  Wrap(CastR4(1/0)))
Case(3 @> CastR4(1 / 0), Wrap(3) @> Wrap(CastR4(1 / 0)), 3 $> CastR4(1 / 0), Wrap(3) $> Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @> Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $> Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4  @>= CastR4(1/0), Wrap(3r4)  @>= Wrap(CastR4(1/0)), 3r4  $>= CastR4(1/0), Wrap(3r4)  $>= Wrap(CastR4(1/0)))
Case(3 @>= CastR4(1 / 0), Wrap(3) @>= Wrap(CastR4(1 / 0)), 3 $>= CastR4(1 / 0), Wrap(3) $>= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @>= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $>= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4 !@=  CastR4(1/0), Wrap(3r4) !@=  Wrap(CastR4(1/0)), 3r4 !$=  CastR4(1/0), Wrap(3r4) !$=  Wrap(CastR4(1/0)))
Case(3 !@= CastR4(1 / 0), Wrap(3) !@= Wrap(CastR4(1 / 0)), 3 !$= CastR4(1 / 0), Wrap(3) !$= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) !@= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4 !@<  CastR4(1/0), Wrap(3r4) !@<  Wrap(CastR4(1/0)), 3r4 !$<  CastR4(1/0), Wrap(3r4) !$<  Wrap(CastR4(1/0)))
Case(3 !@< CastR4(1 / 0), Wrap(3) !@< Wrap(CastR4(1 / 0)), 3 !$< CastR4(1 / 0), Wrap(3) !$< Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @>= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$< Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4 !@<= CastR4(1/0), Wrap(3r4) !@<= Wrap(CastR4(1/0)), 3r4 !$<= CastR4(1/0), Wrap(3r4) !$<= Wrap(CastR4(1/0)))
Case(3 !@<= CastR4(1 / 0), Wrap(3) !@<= Wrap(CastR4(1 / 0)), 3 !$<= CastR4(1 / 0), Wrap(3) !$<= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @> Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$<= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4 !@>  CastR4(1/0), Wrap(3r4) !@>  Wrap(CastR4(1/0)), 3r4 !$>  CastR4(1/0), Wrap(3r4) !$>  Wrap(CastR4(1/0)))
Case(3 !@> CastR4(1 / 0), Wrap(3) !@> Wrap(CastR4(1 / 0)), 3 !$> CastR4(1 / 0), Wrap(3) !$> Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @<= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$> Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4 !@>= CastR4(1/0), Wrap(3r4) !@>= Wrap(CastR4(1/0)), 3r4 !$>= CastR4(1/0), Wrap(3r4) !$>= Wrap(CastR4(1/0)))
Case(3 !@>= CastR4(1 / 0), Wrap(3) !@>= Wrap(CastR4(1 / 0)), 3 !$>= CastR4(1 / 0), Wrap(3) !$>= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @< Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$>= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4  @=  CastR4(-1/0), Wrap(3r4)  @=  Wrap(CastR4(-1/0)), 3r4  $=  CastR4(-1/0), Wrap(3r4)  $=  Wrap(CastR4(-1/0)))
Case(3 @= CastR4(-1 / 0), Wrap(3) @= Wrap(CastR4(-1 / 0)), 3 $= CastR4(-1 / 0), Wrap(3) $= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4  @<  CastR4(-1/0), Wrap(3r4)  @<  Wrap(CastR4(-1/0)), 3r4  $<  CastR4(-1/0), Wrap(3r4)  $<  Wrap(CastR4(-1/0)))
Case(3 @< CastR4(-1 / 0), Wrap(3) @< Wrap(CastR4(-1 / 0)), 3 $< CastR4(-1 / 0), Wrap(3) $< Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @< Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $< Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4  @<= CastR4(-1/0), Wrap(3r4)  @<= Wrap(CastR4(-1/0)), 3r4  $<= CastR4(-1/0), Wrap(3r4)  $<= Wrap(CastR4(-1/0)))
Case(3 @<= CastR4(-1 / 0), Wrap(3) @<= Wrap(CastR4(-1 / 0)), 3 $<= CastR4(-1 / 0), Wrap(3) $<= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @<= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $<= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4  @>  CastR4(-1/0), Wrap(3r4)  @>  Wrap(CastR4(-1/0)), 3r4  $>  CastR4(-1/0), Wrap(3r4)  $>  Wrap(CastR4(-1/0)))
Case(3 @> CastR4(-1 / 0), Wrap(3) @> Wrap(CastR4(-1 / 0)), 3 $> CastR4(-1 / 0), Wrap(3) $> Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @> Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $> Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4  @>= CastR4(-1/0), Wrap(3r4)  @>= Wrap(CastR4(-1/0)), 3r4  $>= CastR4(-1/0), Wrap(3r4)  $>= Wrap(CastR4(-1/0)))
Case(3 @>= CastR4(-1 / 0), Wrap(3) @>= Wrap(CastR4(-1 / 0)), 3 $>= CastR4(-1 / 0), Wrap(3) $>= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @>= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $>= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4 !@=  CastR4(-1/0), Wrap(3r4) !@=  Wrap(CastR4(-1/0)), 3r4 !$=  CastR4(-1/0), Wrap(3r4) !$=  Wrap(CastR4(-1/0)))
Case(3 !@= CastR4(-1 / 0), Wrap(3) !@= Wrap(CastR4(-1 / 0)), 3 !$= CastR4(-1 / 0), Wrap(3) !$= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) !@= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4 !@<  CastR4(-1/0), Wrap(3r4) !@<  Wrap(CastR4(-1/0)), 3r4 !$<  CastR4(-1/0), Wrap(3r4) !$<  Wrap(CastR4(-1/0)))
Case(3 !@< CastR4(-1 / 0), Wrap(3) !@< Wrap(CastR4(-1 / 0)), 3 !$< CastR4(-1 / 0), Wrap(3) !$< Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @>= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$< Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4 !@<= CastR4(-1/0), Wrap(3r4) !@<= Wrap(CastR4(-1/0)), 3r4 !$<= CastR4(-1/0), Wrap(3r4) !$<= Wrap(CastR4(-1/0)))
Case(3 !@<= CastR4(-1 / 0), Wrap(3) !@<= Wrap(CastR4(-1 / 0)), 3 !$<= CastR4(-1 / 0), Wrap(3) !$<= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @> Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$<= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4 !@>  CastR4(-1/0), Wrap(3r4) !@>  Wrap(CastR4(-1/0)), 3r4 !$>  CastR4(-1/0), Wrap(3r4) !$>  Wrap(CastR4(-1/0)))
Case(3 !@> CastR4(-1 / 0), Wrap(3) !@> Wrap(CastR4(-1 / 0)), 3 !$> CastR4(-1 / 0), Wrap(3) !$> Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @<= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$> Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4 !@>= CastR4(-1/0), Wrap(3r4) !@>= Wrap(CastR4(-1/0)), 3r4 !$>= CastR4(-1/0), Wrap(3r4) !$>= Wrap(CastR4(-1/0)))
Case(3 !@>= CastR4(-1 / 0), Wrap(3) !@>= Wrap(CastR4(-1 / 0)), 3 !$>= CastR4(-1 / 0), Wrap(3) !$>= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @< Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$>= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4  @=  Null(5r4), Wrap(3r4)  @=  Wrap(Null(5r4)), 3r4  $=  Null(5r4), Wrap(3r4)  $=  Wrap(Null(5r4)))
Case(3 @= Null(5), Wrap(3) @= Wrap(Null(5)), 3 $= Null(5), Wrap(3) $= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4  @<  Null(5r4), Wrap(3r4)  @<  Wrap(Null(5r4)), 3r4  $<  Null(5r4), Wrap(3r4)  $<  Wrap(Null(5r4)))
Case(3 @< Null(5), Wrap(3) @< Wrap(Null(5)), 3 $< Null(5), Wrap(3) $< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @< Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $< Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4  @<= Null(5r4), Wrap(3r4)  @<= Wrap(Null(5r4)), 3r4  $<= Null(5r4), Wrap(3r4)  $<= Wrap(Null(5r4)))
Case(3 @<= Null(5), Wrap(3) @<= Wrap(Null(5)), 3 $<= Null(5), Wrap(3) $<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @<= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $<= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4  @>  Null(5r4), Wrap(3r4)  @>  Wrap(Null(5r4)), 3r4  $>  Null(5r4), Wrap(3r4)  $>  Wrap(Null(5r4)))
Case(3 @> Null(5), Wrap(3) @> Wrap(Null(5)), 3 $> Null(5), Wrap(3) $> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @> Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $> Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(3r4  @>= Null(5r4), Wrap(3r4)  @>= Wrap(Null(5r4)), 3r4  $>= Null(5r4), Wrap(3r4)  $>= Wrap(Null(5r4)))
Case(3 @>= Null(5), Wrap(3) @>= Wrap(Null(5)), 3 $>= Null(5), Wrap(3) $>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @>= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $>= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(3r4 !@=  Null(5r4), Wrap(3r4) !@=  Wrap(Null(5r4)), 3r4 !$=  Null(5r4), Wrap(3r4) !$=  Wrap(Null(5r4)))
Case(3 !@= Null(5), Wrap(3) !@= Wrap(Null(5)), 3 !$= Null(5), Wrap(3) !$= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) !@= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4 !@<  Null(5r4), Wrap(3r4) !@<  Wrap(Null(5r4)), 3r4 !$<  Null(5r4), Wrap(3r4) !$<  Wrap(Null(5r4)))
Case(3 !@< Null(5), Wrap(3) !@< Wrap(Null(5)), 3 !$< Null(5), Wrap(3) !$< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @>= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$< Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4 !@<= Null(5r4), Wrap(3r4) !@<= Wrap(Null(5r4)), 3r4 !$<= Null(5r4), Wrap(3r4) !$<= Wrap(Null(5r4)))
Case(3 !@<= Null(5), Wrap(3) !@<= Wrap(Null(5)), 3 !$<= Null(5), Wrap(3) !$<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @> Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$<= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4 !@>  Null(5r4), Wrap(3r4) !@>  Wrap(Null(5r4)), 3r4 !$>  Null(5r4), Wrap(3r4) !$>  Wrap(Null(5r4)))
Case(3 !@> Null(5), Wrap(3) !@> Wrap(Null(5)), 3 !$> Null(5), Wrap(3) !$> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @<= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$> Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(3r4 !@>= Null(5r4), Wrap(3r4) !@>= Wrap(Null(5r4)), 3r4 !$>= Null(5r4), Wrap(3r4) !$>= Wrap(Null(5r4)))
Case(3 !@>= Null(5), Wrap(3) !@>= Wrap(Null(5)), 3 !$>= Null(5), Wrap(3) !$>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @< Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$>= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(3r4  @=  Opt(5r4), Wrap(3r4)  @=  Wrap(Opt(5r4)), 3r4  $=  Opt(5r4), Wrap(3r4)  $=  Wrap(Opt(5r4)))
Case(3 @= Opt(5), Wrap(3) @= Wrap(Opt(5)), 3 $= Opt(5), Wrap(3) $= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4  @<  Opt(5r4), Wrap(3r4)  @<  Wrap(Opt(5r4)), 3r4  $<  Opt(5r4), Wrap(3r4)  $<  Wrap(Opt(5r4)))
Case(3 @< Opt(5), Wrap(3) @< Wrap(Opt(5)), 3 $< Opt(5), Wrap(3) $< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4  @<= Opt(5r4), Wrap(3r4)  @<= Wrap(Opt(5r4)), 3r4  $<= Opt(5r4), Wrap(3r4)  $<= Wrap(Opt(5r4)))
Case(3 @<= Opt(5), Wrap(3) @<= Wrap(Opt(5)), 3 $<= Opt(5), Wrap(3) $<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4  @>  Opt(5r4), Wrap(3r4)  @>  Wrap(Opt(5r4)), 3r4  $>  Opt(5r4), Wrap(3r4)  $>  Wrap(Opt(5r4)))
Case(3 @> Opt(5), Wrap(3) @> Wrap(Opt(5)), 3 $> Opt(5), Wrap(3) $> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4  @>= Opt(5r4), Wrap(3r4)  @>= Wrap(Opt(5r4)), 3r4  $>= Opt(5r4), Wrap(3r4)  $>= Wrap(Opt(5r4)))
Case(3 @>= Opt(5), Wrap(3) @>= Wrap(Opt(5)), 3 $>= Opt(5), Wrap(3) $>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) $>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4 !@=  Opt(5r4), Wrap(3r4) !@=  Wrap(Opt(5r4)), 3r4 !$=  Opt(5r4), Wrap(3r4) !$=  Wrap(Opt(5r4)))
Case(3 !@= Opt(5), Wrap(3) !@= Wrap(Opt(5)), 3 !$= Opt(5), Wrap(3) !$= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) !@= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4 !@<  Opt(5r4), Wrap(3r4) !@<  Wrap(Opt(5r4)), 3r4 !$<  Opt(5r4), Wrap(3r4) !$<  Wrap(Opt(5r4)))
Case(3 !@< Opt(5), Wrap(3) !@< Wrap(Opt(5)), 3 !$< Opt(5), Wrap(3) !$< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4 !@<= Opt(5r4), Wrap(3r4) !@<= Wrap(Opt(5r4)), 3r4 !$<= Opt(5r4), Wrap(3r4) !$<= Wrap(Opt(5r4)))
Case(3 !@<= Opt(5), Wrap(3) !@<= Wrap(Opt(5)), 3 !$<= Opt(5), Wrap(3) !$<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(3r4 !@>  Opt(5r4), Wrap(3r4) !@>  Wrap(Opt(5r4)), 3r4 !$>  Opt(5r4), Wrap(3r4) !$>  Wrap(Opt(5r4)))
Case(3 !@> Opt(5), Wrap(3) !@> Wrap(Opt(5)), 3 !$> Opt(5), Wrap(3) !$> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(3r4 !@>= Opt(5r4), Wrap(3r4) !@>= Wrap(Opt(5r4)), 3r4 !$>= Opt(5r4), Wrap(3r4) !$>= Wrap(Opt(5r4)))
Case(3 !@>= Opt(5), Wrap(3) !@>= Wrap(Opt(5)), 3 !$>= Opt(5), Wrap(3) !$>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(3:r4):r4) @< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(3:r4):r4) !$>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0)  @=  5r4, Wrap(CastR4(0/0))  @=  Wrap(5r4), CastR4(0/0)  $=  5r4, Wrap(CastR4(0/0))  $=  Wrap(5r4))
Case(CastR4(0 / 0) @= 5, Wrap(CastR4(0 / 0)) @= Wrap(5), CastR4(0 / 0) $= 5, Wrap(CastR4(0 / 0)) $= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0)  @<  5r4, Wrap(CastR4(0/0))  @<  Wrap(5r4), CastR4(0/0)  $<  5r4, Wrap(CastR4(0/0))  $<  Wrap(5r4))
Case(CastR4(0 / 0) @< 5, Wrap(CastR4(0 / 0)) @< Wrap(5), CastR4(0 / 0) $< 5, Wrap(CastR4(0 / 0)) $< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @< Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $< Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(0/0)  @<= 5r4, Wrap(CastR4(0/0))  @<= Wrap(5r4), CastR4(0/0)  $<= 5r4, Wrap(CastR4(0/0))  $<= Wrap(5r4))
Case(CastR4(0 / 0) @<= 5, Wrap(CastR4(0 / 0)) @<= Wrap(5), CastR4(0 / 0) $<= 5, Wrap(CastR4(0 / 0)) $<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @<= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $<= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(0/0)  @>  5r4, Wrap(CastR4(0/0))  @>  Wrap(5r4), CastR4(0/0)  $>  5r4, Wrap(CastR4(0/0))  $>  Wrap(5r4))
Case(CastR4(0 / 0) @> 5, Wrap(CastR4(0 / 0)) @> Wrap(5), CastR4(0 / 0) $> 5, Wrap(CastR4(0 / 0)) $> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @> Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $> Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0)  @>= 5r4, Wrap(CastR4(0/0))  @>= Wrap(5r4), CastR4(0/0)  $>= 5r4, Wrap(CastR4(0/0))  $>= Wrap(5r4))
Case(CastR4(0 / 0) @>= 5, Wrap(CastR4(0 / 0)) @>= Wrap(5), CastR4(0 / 0) $>= 5, Wrap(CastR4(0 / 0)) $>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @>= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $>= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0) !@=  5r4, Wrap(CastR4(0/0)) !@=  Wrap(5r4), CastR4(0/0) !$=  5r4, Wrap(CastR4(0/0)) !$=  Wrap(5r4))
Case(CastR4(0 / 0) !@= 5, Wrap(CastR4(0 / 0)) !@= Wrap(5), CastR4(0 / 0) !$= 5, Wrap(CastR4(0 / 0)) !$= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !@= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0) !@<  5r4, Wrap(CastR4(0/0)) !@<  Wrap(5r4), CastR4(0/0) !$<  5r4, Wrap(CastR4(0/0)) !$<  Wrap(5r4))
Case(CastR4(0 / 0) !@< 5, Wrap(CastR4(0 / 0)) !@< Wrap(5), CastR4(0 / 0) !$< 5, Wrap(CastR4(0 / 0)) !$< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @>= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$< Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(0/0) !@<= 5r4, Wrap(CastR4(0/0)) !@<= Wrap(5r4), CastR4(0/0) !$<= 5r4, Wrap(CastR4(0/0)) !$<= Wrap(5r4))
Case(CastR4(0 / 0) !@<= 5, Wrap(CastR4(0 / 0)) !@<= Wrap(5), CastR4(0 / 0) !$<= 5, Wrap(CastR4(0 / 0)) !$<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @> Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$<= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(0/0) !@>  5r4, Wrap(CastR4(0/0)) !@>  Wrap(5r4), CastR4(0/0) !$>  5r4, Wrap(CastR4(0/0)) !$>  Wrap(5r4))
Case(CastR4(0 / 0) !@> 5, Wrap(CastR4(0 / 0)) !@> Wrap(5), CastR4(0 / 0) !$> 5, Wrap(CastR4(0 / 0)) !$> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @<= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$> Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0) !@>= 5r4, Wrap(CastR4(0/0)) !@>= Wrap(5r4), CastR4(0/0) !$>= 5r4, Wrap(CastR4(0/0)) !$>= Wrap(5r4))
Case(CastR4(0 / 0) !@>= 5, Wrap(CastR4(0 / 0)) !@>= Wrap(5), CastR4(0 / 0) !$>= 5, Wrap(CastR4(0 / 0)) !$>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @< Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$>= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0)  @=  CastR4(0/0), Wrap(CastR4(0/0))  @=  Wrap(CastR4(0/0)), CastR4(0/0)  $=  CastR4(0/0), Wrap(CastR4(0/0))  $=  Wrap(CastR4(0/0)))
Case(CastR4(0 / 0) @= CastR4(0 / 0), Wrap(CastR4(0 / 0)) @= Wrap(CastR4(0 / 0)), CastR4(0 / 0) $= CastR4(0 / 0), Wrap(CastR4(0 / 0)) $= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(0/0)  @<  CastR4(0/0), Wrap(CastR4(0/0))  @<  Wrap(CastR4(0/0)), CastR4(0/0)  $<  CastR4(0/0), Wrap(CastR4(0/0))  $<  Wrap(CastR4(0/0)))
Case(CastR4(0 / 0) @< CastR4(0 / 0), Wrap(CastR4(0 / 0)) @< Wrap(CastR4(0 / 0)), CastR4(0 / 0) $< CastR4(0 / 0), Wrap(CastR4(0 / 0)) $< Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @< Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $< Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0)  @<= CastR4(0/0), Wrap(CastR4(0/0))  @<= Wrap(CastR4(0/0)), CastR4(0/0)  $<= CastR4(0/0), Wrap(CastR4(0/0))  $<= Wrap(CastR4(0/0)))
Case(CastR4(0 / 0) @<= CastR4(0 / 0), Wrap(CastR4(0 / 0)) @<= Wrap(CastR4(0 / 0)), CastR4(0 / 0) $<= CastR4(0 / 0), Wrap(CastR4(0 / 0)) $<= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @<= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $<= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(0/0)  @>  CastR4(0/0), Wrap(CastR4(0/0))  @>  Wrap(CastR4(0/0)), CastR4(0/0)  $>  CastR4(0/0), Wrap(CastR4(0/0))  $>  Wrap(CastR4(0/0)))
Case(CastR4(0 / 0) @> CastR4(0 / 0), Wrap(CastR4(0 / 0)) @> Wrap(CastR4(0 / 0)), CastR4(0 / 0) $> CastR4(0 / 0), Wrap(CastR4(0 / 0)) $> Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @> Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $> Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0)  @>= CastR4(0/0), Wrap(CastR4(0/0))  @>= Wrap(CastR4(0/0)), CastR4(0/0)  $>= CastR4(0/0), Wrap(CastR4(0/0))  $>= Wrap(CastR4(0/0)))
Case(CastR4(0 / 0) @>= CastR4(0 / 0), Wrap(CastR4(0 / 0)) @>= Wrap(CastR4(0 / 0)), CastR4(0 / 0) $>= CastR4(0 / 0), Wrap(CastR4(0 / 0)) $>= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @>= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $>= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(0/0) !@=  CastR4(0/0), Wrap(CastR4(0/0)) !@=  Wrap(CastR4(0/0)), CastR4(0/0) !$=  CastR4(0/0), Wrap(CastR4(0/0)) !$=  Wrap(CastR4(0/0)))
Case(CastR4(0 / 0) !@= CastR4(0 / 0), Wrap(CastR4(0 / 0)) !@= Wrap(CastR4(0 / 0)), CastR4(0 / 0) !$= CastR4(0 / 0), Wrap(CastR4(0 / 0)) !$= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !@= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(0/0) !@<  CastR4(0/0), Wrap(CastR4(0/0)) !@<  Wrap(CastR4(0/0)), CastR4(0/0) !$<  CastR4(0/0), Wrap(CastR4(0/0)) !$<  Wrap(CastR4(0/0)))
Case(CastR4(0 / 0) !@< CastR4(0 / 0), Wrap(CastR4(0 / 0)) !@< Wrap(CastR4(0 / 0)), CastR4(0 / 0) !$< CastR4(0 / 0), Wrap(CastR4(0 / 0)) !$< Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @>= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$< Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0) !@<= CastR4(0/0), Wrap(CastR4(0/0)) !@<= Wrap(CastR4(0/0)), CastR4(0/0) !$<= CastR4(0/0), Wrap(CastR4(0/0)) !$<= Wrap(CastR4(0/0)))
Case(CastR4(0 / 0) !@<= CastR4(0 / 0), Wrap(CastR4(0 / 0)) !@<= Wrap(CastR4(0 / 0)), CastR4(0 / 0) !$<= CastR4(0 / 0), Wrap(CastR4(0 / 0)) !$<= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @> Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$<= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(0/0) !@>  CastR4(0/0), Wrap(CastR4(0/0)) !@>  Wrap(CastR4(0/0)), CastR4(0/0) !$>  CastR4(0/0), Wrap(CastR4(0/0)) !$>  Wrap(CastR4(0/0)))
Case(CastR4(0 / 0) !@> CastR4(0 / 0), Wrap(CastR4(0 / 0)) !@> Wrap(CastR4(0 / 0)), CastR4(0 / 0) !$> CastR4(0 / 0), Wrap(CastR4(0 / 0)) !$> Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @<= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$> Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0) !@>= CastR4(0/0), Wrap(CastR4(0/0)) !@>= Wrap(CastR4(0/0)), CastR4(0/0) !$>= CastR4(0/0), Wrap(CastR4(0/0)) !$>= Wrap(CastR4(0/0)))
Case(CastR4(0 / 0) !@>= CastR4(0 / 0), Wrap(CastR4(0 / 0)) !@>= Wrap(CastR4(0 / 0)), CastR4(0 / 0) !$>= CastR4(0 / 0), Wrap(CastR4(0 / 0)) !$>= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @< Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$>= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(0/0)  @=  CastR4(1/0), Wrap(CastR4(0/0))  @=  Wrap(CastR4(1/0)), CastR4(0/0)  $=  CastR4(1/0), Wrap(CastR4(0/0))  $=  Wrap(CastR4(1/0)))
Case(CastR4(0 / 0) @= CastR4(1 / 0), Wrap(CastR4(0 / 0)) @= Wrap(CastR4(1 / 0)), CastR4(0 / 0) $= CastR4(1 / 0), Wrap(CastR4(0 / 0)) $= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0)  @<  CastR4(1/0), Wrap(CastR4(0/0))  @<  Wrap(CastR4(1/0)), CastR4(0/0)  $<  CastR4(1/0), Wrap(CastR4(0/0))  $<  Wrap(CastR4(1/0)))
Case(CastR4(0 / 0) @< CastR4(1 / 0), Wrap(CastR4(0 / 0)) @< Wrap(CastR4(1 / 0)), CastR4(0 / 0) $< CastR4(1 / 0), Wrap(CastR4(0 / 0)) $< Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @< Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $< Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(0/0)  @<= CastR4(1/0), Wrap(CastR4(0/0))  @<= Wrap(CastR4(1/0)), CastR4(0/0)  $<= CastR4(1/0), Wrap(CastR4(0/0))  $<= Wrap(CastR4(1/0)))
Case(CastR4(0 / 0) @<= CastR4(1 / 0), Wrap(CastR4(0 / 0)) @<= Wrap(CastR4(1 / 0)), CastR4(0 / 0) $<= CastR4(1 / 0), Wrap(CastR4(0 / 0)) $<= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @<= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $<= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(0/0)  @>  CastR4(1/0), Wrap(CastR4(0/0))  @>  Wrap(CastR4(1/0)), CastR4(0/0)  $>  CastR4(1/0), Wrap(CastR4(0/0))  $>  Wrap(CastR4(1/0)))
Case(CastR4(0 / 0) @> CastR4(1 / 0), Wrap(CastR4(0 / 0)) @> Wrap(CastR4(1 / 0)), CastR4(0 / 0) $> CastR4(1 / 0), Wrap(CastR4(0 / 0)) $> Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @> Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $> Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0)  @>= CastR4(1/0), Wrap(CastR4(0/0))  @>= Wrap(CastR4(1/0)), CastR4(0/0)  $>= CastR4(1/0), Wrap(CastR4(0/0))  $>= Wrap(CastR4(1/0)))
Case(CastR4(0 / 0) @>= CastR4(1 / 0), Wrap(CastR4(0 / 0)) @>= Wrap(CastR4(1 / 0)), CastR4(0 / 0) $>= CastR4(1 / 0), Wrap(CastR4(0 / 0)) $>= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @>= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $>= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0) !@=  CastR4(1/0), Wrap(CastR4(0/0)) !@=  Wrap(CastR4(1/0)), CastR4(0/0) !$=  CastR4(1/0), Wrap(CastR4(0/0)) !$=  Wrap(CastR4(1/0)))
Case(CastR4(0 / 0) !@= CastR4(1 / 0), Wrap(CastR4(0 / 0)) !@= Wrap(CastR4(1 / 0)), CastR4(0 / 0) !$= CastR4(1 / 0), Wrap(CastR4(0 / 0)) !$= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !@= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0) !@<  CastR4(1/0), Wrap(CastR4(0/0)) !@<  Wrap(CastR4(1/0)), CastR4(0/0) !$<  CastR4(1/0), Wrap(CastR4(0/0)) !$<  Wrap(CastR4(1/0)))
Case(CastR4(0 / 0) !@< CastR4(1 / 0), Wrap(CastR4(0 / 0)) !@< Wrap(CastR4(1 / 0)), CastR4(0 / 0) !$< CastR4(1 / 0), Wrap(CastR4(0 / 0)) !$< Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @>= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$< Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(0/0) !@<= CastR4(1/0), Wrap(CastR4(0/0)) !@<= Wrap(CastR4(1/0)), CastR4(0/0) !$<= CastR4(1/0), Wrap(CastR4(0/0)) !$<= Wrap(CastR4(1/0)))
Case(CastR4(0 / 0) !@<= CastR4(1 / 0), Wrap(CastR4(0 / 0)) !@<= Wrap(CastR4(1 / 0)), CastR4(0 / 0) !$<= CastR4(1 / 0), Wrap(CastR4(0 / 0)) !$<= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @> Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$<= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(0/0) !@>  CastR4(1/0), Wrap(CastR4(0/0)) !@>  Wrap(CastR4(1/0)), CastR4(0/0) !$>  CastR4(1/0), Wrap(CastR4(0/0)) !$>  Wrap(CastR4(1/0)))
Case(CastR4(0 / 0) !@> CastR4(1 / 0), Wrap(CastR4(0 / 0)) !@> Wrap(CastR4(1 / 0)), CastR4(0 / 0) !$> CastR4(1 / 0), Wrap(CastR4(0 / 0)) !$> Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @<= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$> Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0) !@>= CastR4(1/0), Wrap(CastR4(0/0)) !@>= Wrap(CastR4(1/0)), CastR4(0/0) !$>= CastR4(1/0), Wrap(CastR4(0/0)) !$>= Wrap(CastR4(1/0)))
Case(CastR4(0 / 0) !@>= CastR4(1 / 0), Wrap(CastR4(0 / 0)) !@>= Wrap(CastR4(1 / 0)), CastR4(0 / 0) !$>= CastR4(1 / 0), Wrap(CastR4(0 / 0)) !$>= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @< Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$>= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0)  @=  CastR4(-1/0), Wrap(CastR4(0/0))  @=  Wrap(CastR4(-1/0)), CastR4(0/0)  $=  CastR4(-1/0), Wrap(CastR4(0/0))  $=  Wrap(CastR4(-1/0)))
Case(CastR4(0 / 0) @= CastR4(-1 / 0), Wrap(CastR4(0 / 0)) @= Wrap(CastR4(-1 / 0)), CastR4(0 / 0) $= CastR4(-1 / 0), Wrap(CastR4(0 / 0)) $= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0)  @<  CastR4(-1/0), Wrap(CastR4(0/0))  @<  Wrap(CastR4(-1/0)), CastR4(0/0)  $<  CastR4(-1/0), Wrap(CastR4(0/0))  $<  Wrap(CastR4(-1/0)))
Case(CastR4(0 / 0) @< CastR4(-1 / 0), Wrap(CastR4(0 / 0)) @< Wrap(CastR4(-1 / 0)), CastR4(0 / 0) $< CastR4(-1 / 0), Wrap(CastR4(0 / 0)) $< Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @< Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $< Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(0/0)  @<= CastR4(-1/0), Wrap(CastR4(0/0))  @<= Wrap(CastR4(-1/0)), CastR4(0/0)  $<= CastR4(-1/0), Wrap(CastR4(0/0))  $<= Wrap(CastR4(-1/0)))
Case(CastR4(0 / 0) @<= CastR4(-1 / 0), Wrap(CastR4(0 / 0)) @<= Wrap(CastR4(-1 / 0)), CastR4(0 / 0) $<= CastR4(-1 / 0), Wrap(CastR4(0 / 0)) $<= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @<= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $<= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(0/0)  @>  CastR4(-1/0), Wrap(CastR4(0/0))  @>  Wrap(CastR4(-1/0)), CastR4(0/0)  $>  CastR4(-1/0), Wrap(CastR4(0/0))  $>  Wrap(CastR4(-1/0)))
Case(CastR4(0 / 0) @> CastR4(-1 / 0), Wrap(CastR4(0 / 0)) @> Wrap(CastR4(-1 / 0)), CastR4(0 / 0) $> CastR4(-1 / 0), Wrap(CastR4(0 / 0)) $> Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @> Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $> Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0)  @>= CastR4(-1/0), Wrap(CastR4(0/0))  @>= Wrap(CastR4(-1/0)), CastR4(0/0)  $>= CastR4(-1/0), Wrap(CastR4(0/0))  $>= Wrap(CastR4(-1/0)))
Case(CastR4(0 / 0) @>= CastR4(-1 / 0), Wrap(CastR4(0 / 0)) @>= Wrap(CastR4(-1 / 0)), CastR4(0 / 0) $>= CastR4(-1 / 0), Wrap(CastR4(0 / 0)) $>= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @>= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $>= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0) !@=  CastR4(-1/0), Wrap(CastR4(0/0)) !@=  Wrap(CastR4(-1/0)), CastR4(0/0) !$=  CastR4(-1/0), Wrap(CastR4(0/0)) !$=  Wrap(CastR4(-1/0)))
Case(CastR4(0 / 0) !@= CastR4(-1 / 0), Wrap(CastR4(0 / 0)) !@= Wrap(CastR4(-1 / 0)), CastR4(0 / 0) !$= CastR4(-1 / 0), Wrap(CastR4(0 / 0)) !$= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !@= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0) !@<  CastR4(-1/0), Wrap(CastR4(0/0)) !@<  Wrap(CastR4(-1/0)), CastR4(0/0) !$<  CastR4(-1/0), Wrap(CastR4(0/0)) !$<  Wrap(CastR4(-1/0)))
Case(CastR4(0 / 0) !@< CastR4(-1 / 0), Wrap(CastR4(0 / 0)) !@< Wrap(CastR4(-1 / 0)), CastR4(0 / 0) !$< CastR4(-1 / 0), Wrap(CastR4(0 / 0)) !$< Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @>= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$< Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(0/0) !@<= CastR4(-1/0), Wrap(CastR4(0/0)) !@<= Wrap(CastR4(-1/0)), CastR4(0/0) !$<= CastR4(-1/0), Wrap(CastR4(0/0)) !$<= Wrap(CastR4(-1/0)))
Case(CastR4(0 / 0) !@<= CastR4(-1 / 0), Wrap(CastR4(0 / 0)) !@<= Wrap(CastR4(-1 / 0)), CastR4(0 / 0) !$<= CastR4(-1 / 0), Wrap(CastR4(0 / 0)) !$<= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @> Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$<= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(0/0) !@>  CastR4(-1/0), Wrap(CastR4(0/0)) !@>  Wrap(CastR4(-1/0)), CastR4(0/0) !$>  CastR4(-1/0), Wrap(CastR4(0/0)) !$>  Wrap(CastR4(-1/0)))
Case(CastR4(0 / 0) !@> CastR4(-1 / 0), Wrap(CastR4(0 / 0)) !@> Wrap(CastR4(-1 / 0)), CastR4(0 / 0) !$> CastR4(-1 / 0), Wrap(CastR4(0 / 0)) !$> Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @<= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$> Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0) !@>= CastR4(-1/0), Wrap(CastR4(0/0)) !@>= Wrap(CastR4(-1/0)), CastR4(0/0) !$>= CastR4(-1/0), Wrap(CastR4(0/0)) !$>= Wrap(CastR4(-1/0)))
Case(CastR4(0 / 0) !@>= CastR4(-1 / 0), Wrap(CastR4(0 / 0)) !@>= Wrap(CastR4(-1 / 0)), CastR4(0 / 0) !$>= CastR4(-1 / 0), Wrap(CastR4(0 / 0)) !$>= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @< Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$>= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0)  @=  Null(5r4), Wrap(CastR4(0/0))  @=  Wrap(Null(5r4)), CastR4(0/0)  $=  Null(5r4), Wrap(CastR4(0/0))  $=  Wrap(Null(5r4)))
Case(CastR4(0 / 0) @= Null(5), Wrap(CastR4(0 / 0)) @= Wrap(Null(5)), CastR4(0 / 0) $= Null(5), Wrap(CastR4(0 / 0)) $= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0)  @<  Null(5r4), Wrap(CastR4(0/0))  @<  Wrap(Null(5r4)), CastR4(0/0)  $<  Null(5r4), Wrap(CastR4(0/0))  $<  Wrap(Null(5r4)))
Case(CastR4(0 / 0) @< Null(5), Wrap(CastR4(0 / 0)) @< Wrap(Null(5)), CastR4(0 / 0) $< Null(5), Wrap(CastR4(0 / 0)) $< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @< Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $< Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0)  @<= Null(5r4), Wrap(CastR4(0/0))  @<= Wrap(Null(5r4)), CastR4(0/0)  $<= Null(5r4), Wrap(CastR4(0/0))  $<= Wrap(Null(5r4)))
Case(CastR4(0 / 0) @<= Null(5), Wrap(CastR4(0 / 0)) @<= Wrap(Null(5)), CastR4(0 / 0) $<= Null(5), Wrap(CastR4(0 / 0)) $<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @<= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $<= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0)  @>  Null(5r4), Wrap(CastR4(0/0))  @>  Wrap(Null(5r4)), CastR4(0/0)  $>  Null(5r4), Wrap(CastR4(0/0))  $>  Wrap(Null(5r4)))
Case(CastR4(0 / 0) @> Null(5), Wrap(CastR4(0 / 0)) @> Wrap(Null(5)), CastR4(0 / 0) $> Null(5), Wrap(CastR4(0 / 0)) $> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @> Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $> Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(0/0)  @>= Null(5r4), Wrap(CastR4(0/0))  @>= Wrap(Null(5r4)), CastR4(0/0)  $>= Null(5r4), Wrap(CastR4(0/0))  $>= Wrap(Null(5r4)))
Case(CastR4(0 / 0) @>= Null(5), Wrap(CastR4(0 / 0)) @>= Wrap(Null(5)), CastR4(0 / 0) $>= Null(5), Wrap(CastR4(0 / 0)) $>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @>= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $>= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(0/0) !@=  Null(5r4), Wrap(CastR4(0/0)) !@=  Wrap(Null(5r4)), CastR4(0/0) !$=  Null(5r4), Wrap(CastR4(0/0)) !$=  Wrap(Null(5r4)))
Case(CastR4(0 / 0) !@= Null(5), Wrap(CastR4(0 / 0)) !@= Wrap(Null(5)), CastR4(0 / 0) !$= Null(5), Wrap(CastR4(0 / 0)) !$= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !@= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0) !@<  Null(5r4), Wrap(CastR4(0/0)) !@<  Wrap(Null(5r4)), CastR4(0/0) !$<  Null(5r4), Wrap(CastR4(0/0)) !$<  Wrap(Null(5r4)))
Case(CastR4(0 / 0) !@< Null(5), Wrap(CastR4(0 / 0)) !@< Wrap(Null(5)), CastR4(0 / 0) !$< Null(5), Wrap(CastR4(0 / 0)) !$< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @>= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$< Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0) !@<= Null(5r4), Wrap(CastR4(0/0)) !@<= Wrap(Null(5r4)), CastR4(0/0) !$<= Null(5r4), Wrap(CastR4(0/0)) !$<= Wrap(Null(5r4)))
Case(CastR4(0 / 0) !@<= Null(5), Wrap(CastR4(0 / 0)) !@<= Wrap(Null(5)), CastR4(0 / 0) !$<= Null(5), Wrap(CastR4(0 / 0)) !$<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @> Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$<= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0) !@>  Null(5r4), Wrap(CastR4(0/0)) !@>  Wrap(Null(5r4)), CastR4(0/0) !$>  Null(5r4), Wrap(CastR4(0/0)) !$>  Wrap(Null(5r4)))
Case(CastR4(0 / 0) !@> Null(5), Wrap(CastR4(0 / 0)) !@> Wrap(Null(5)), CastR4(0 / 0) !$> Null(5), Wrap(CastR4(0 / 0)) !$> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @<= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$> Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(0/0) !@>= Null(5r4), Wrap(CastR4(0/0)) !@>= Wrap(Null(5r4)), CastR4(0/0) !$>= Null(5r4), Wrap(CastR4(0/0)) !$>= Wrap(Null(5r4)))
Case(CastR4(0 / 0) !@>= Null(5), Wrap(CastR4(0 / 0)) !@>= Wrap(Null(5)), CastR4(0 / 0) !$>= Null(5), Wrap(CastR4(0 / 0)) !$>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @< Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$>= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(0/0)  @=  Opt(5r4), Wrap(CastR4(0/0))  @=  Wrap(Opt(5r4)), CastR4(0/0)  $=  Opt(5r4), Wrap(CastR4(0/0))  $=  Wrap(Opt(5r4)))
Case(CastR4(0 / 0) @= Opt(5), Wrap(CastR4(0 / 0)) @= Wrap(Opt(5)), CastR4(0 / 0) $= Opt(5), Wrap(CastR4(0 / 0)) $= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0)  @<  Opt(5r4), Wrap(CastR4(0/0))  @<  Wrap(Opt(5r4)), CastR4(0/0)  $<  Opt(5r4), Wrap(CastR4(0/0))  $<  Wrap(Opt(5r4)))
Case(CastR4(0 / 0) @< Opt(5), Wrap(CastR4(0 / 0)) @< Wrap(Opt(5)), CastR4(0 / 0) $< Opt(5), Wrap(CastR4(0 / 0)) $< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(0/0)  @<= Opt(5r4), Wrap(CastR4(0/0))  @<= Wrap(Opt(5r4)), CastR4(0/0)  $<= Opt(5r4), Wrap(CastR4(0/0))  $<= Wrap(Opt(5r4)))
Case(CastR4(0 / 0) @<= Opt(5), Wrap(CastR4(0 / 0)) @<= Wrap(Opt(5)), CastR4(0 / 0) $<= Opt(5), Wrap(CastR4(0 / 0)) $<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(0/0)  @>  Opt(5r4), Wrap(CastR4(0/0))  @>  Wrap(Opt(5r4)), CastR4(0/0)  $>  Opt(5r4), Wrap(CastR4(0/0))  $>  Wrap(Opt(5r4)))
Case(CastR4(0 / 0) @> Opt(5), Wrap(CastR4(0 / 0)) @> Wrap(Opt(5)), CastR4(0 / 0) $> Opt(5), Wrap(CastR4(0 / 0)) $> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0)  @>= Opt(5r4), Wrap(CastR4(0/0))  @>= Wrap(Opt(5r4)), CastR4(0/0)  $>= Opt(5r4), Wrap(CastR4(0/0))  $>= Wrap(Opt(5r4)))
Case(CastR4(0 / 0) @>= Opt(5), Wrap(CastR4(0 / 0)) @>= Wrap(Opt(5)), CastR4(0 / 0) $>= Opt(5), Wrap(CastR4(0 / 0)) $>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) $>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(0/0) !@=  Opt(5r4), Wrap(CastR4(0/0)) !@=  Wrap(Opt(5r4)), CastR4(0/0) !$=  Opt(5r4), Wrap(CastR4(0/0)) !$=  Wrap(Opt(5r4)))
Case(CastR4(0 / 0) !@= Opt(5), Wrap(CastR4(0 / 0)) !@= Wrap(Opt(5)), CastR4(0 / 0) !$= Opt(5), Wrap(CastR4(0 / 0)) !$= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !@= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0) !@<  Opt(5r4), Wrap(CastR4(0/0)) !@<  Wrap(Opt(5r4)), CastR4(0/0) !$<  Opt(5r4), Wrap(CastR4(0/0)) !$<  Wrap(Opt(5r4)))
Case(CastR4(0 / 0) !@< Opt(5), Wrap(CastR4(0 / 0)) !@< Wrap(Opt(5)), CastR4(0 / 0) !$< Opt(5), Wrap(CastR4(0 / 0)) !$< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(0/0) !@<= Opt(5r4), Wrap(CastR4(0/0)) !@<= Wrap(Opt(5r4)), CastR4(0/0) !$<= Opt(5r4), Wrap(CastR4(0/0)) !$<= Wrap(Opt(5r4)))
Case(CastR4(0 / 0) !@<= Opt(5), Wrap(CastR4(0 / 0)) !@<= Wrap(Opt(5)), CastR4(0 / 0) !$<= Opt(5), Wrap(CastR4(0 / 0)) !$<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(0/0) !@>  Opt(5r4), Wrap(CastR4(0/0)) !@>  Wrap(Opt(5r4)), CastR4(0/0) !$>  Opt(5r4), Wrap(CastR4(0/0)) !$>  Wrap(Opt(5r4)))
Case(CastR4(0 / 0) !@> Opt(5), Wrap(CastR4(0 / 0)) !@> Wrap(Opt(5)), CastR4(0 / 0) !$> Opt(5), Wrap(CastR4(0 / 0)) !$> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(0/0) !@>= Opt(5r4), Wrap(CastR4(0/0)) !@>= Wrap(Opt(5r4)), CastR4(0/0) !$>= Opt(5r4), Wrap(CastR4(0/0)) !$>= Wrap(Opt(5r4)))
Case(CastR4(0 / 0) !@>= Opt(5), Wrap(CastR4(0 / 0)) !@>= Wrap(Opt(5)), CastR4(0 / 0) !$>= Opt(5), Wrap(CastR4(0 / 0)) !$>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) @< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(NaN:r4):r4) !$>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0)  @=  5r4, Wrap(CastR4(1/0))  @=  Wrap(5r4), CastR4(1/0)  $=  5r4, Wrap(CastR4(1/0))  $=  Wrap(5r4))
Case(CastR4(1 / 0) @= 5, Wrap(CastR4(1 / 0)) @= Wrap(5), CastR4(1 / 0) $= 5, Wrap(CastR4(1 / 0)) $= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @<  5r4, Wrap(CastR4(1/0))  @<  Wrap(5r4), CastR4(1/0)  $<  5r4, Wrap(CastR4(1/0))  $<  Wrap(5r4))
Case(CastR4(1 / 0) @< 5, Wrap(CastR4(1 / 0)) @< Wrap(5), CastR4(1 / 0) $< 5, Wrap(CastR4(1 / 0)) $< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @< Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $< Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @<= 5r4, Wrap(CastR4(1/0))  @<= Wrap(5r4), CastR4(1/0)  $<= 5r4, Wrap(CastR4(1/0))  $<= Wrap(5r4))
Case(CastR4(1 / 0) @<= 5, Wrap(CastR4(1 / 0)) @<= Wrap(5), CastR4(1 / 0) $<= 5, Wrap(CastR4(1 / 0)) $<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @<= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $<= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @>  5r4, Wrap(CastR4(1/0))  @>  Wrap(5r4), CastR4(1/0)  $>  5r4, Wrap(CastR4(1/0))  $>  Wrap(5r4))
Case(CastR4(1 / 0) @> 5, Wrap(CastR4(1 / 0)) @> Wrap(5), CastR4(1 / 0) $> 5, Wrap(CastR4(1 / 0)) $> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @> Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $> Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0)  @>= 5r4, Wrap(CastR4(1/0))  @>= Wrap(5r4), CastR4(1/0)  $>= 5r4, Wrap(CastR4(1/0))  $>= Wrap(5r4))
Case(CastR4(1 / 0) @>= 5, Wrap(CastR4(1 / 0)) @>= Wrap(5), CastR4(1 / 0) $>= 5, Wrap(CastR4(1 / 0)) $>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @>= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $>= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@=  5r4, Wrap(CastR4(1/0)) !@=  Wrap(5r4), CastR4(1/0) !$=  5r4, Wrap(CastR4(1/0)) !$=  Wrap(5r4))
Case(CastR4(1 / 0) !@= 5, Wrap(CastR4(1 / 0)) !@= Wrap(5), CastR4(1 / 0) !$= 5, Wrap(CastR4(1 / 0)) !$= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !@= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@<  5r4, Wrap(CastR4(1/0)) !@<  Wrap(5r4), CastR4(1/0) !$<  5r4, Wrap(CastR4(1/0)) !$<  Wrap(5r4))
Case(CastR4(1 / 0) !@< 5, Wrap(CastR4(1 / 0)) !@< Wrap(5), CastR4(1 / 0) !$< 5, Wrap(CastR4(1 / 0)) !$< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @>= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$< Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@<= 5r4, Wrap(CastR4(1/0)) !@<= Wrap(5r4), CastR4(1/0) !$<= 5r4, Wrap(CastR4(1/0)) !$<= Wrap(5r4))
Case(CastR4(1 / 0) !@<= 5, Wrap(CastR4(1 / 0)) !@<= Wrap(5), CastR4(1 / 0) !$<= 5, Wrap(CastR4(1 / 0)) !$<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @> Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$<= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@>  5r4, Wrap(CastR4(1/0)) !@>  Wrap(5r4), CastR4(1/0) !$>  5r4, Wrap(CastR4(1/0)) !$>  Wrap(5r4))
Case(CastR4(1 / 0) !@> 5, Wrap(CastR4(1 / 0)) !@> Wrap(5), CastR4(1 / 0) !$> 5, Wrap(CastR4(1 / 0)) !$> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @<= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$> Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0) !@>= 5r4, Wrap(CastR4(1/0)) !@>= Wrap(5r4), CastR4(1/0) !$>= 5r4, Wrap(CastR4(1/0)) !$>= Wrap(5r4))
Case(CastR4(1 / 0) !@>= 5, Wrap(CastR4(1 / 0)) !@>= Wrap(5), CastR4(1 / 0) !$>= 5, Wrap(CastR4(1 / 0)) !$>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @< Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$>= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @=  CastR4(0/0), Wrap(CastR4(1/0))  @=  Wrap(CastR4(0/0)), CastR4(1/0)  $=  CastR4(0/0), Wrap(CastR4(1/0))  $=  Wrap(CastR4(0/0)))
Case(CastR4(1 / 0) @= CastR4(0 / 0), Wrap(CastR4(1 / 0)) @= Wrap(CastR4(0 / 0)), CastR4(1 / 0) $= CastR4(0 / 0), Wrap(CastR4(1 / 0)) $= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @<  CastR4(0/0), Wrap(CastR4(1/0))  @<  Wrap(CastR4(0/0)), CastR4(1/0)  $<  CastR4(0/0), Wrap(CastR4(1/0))  $<  Wrap(CastR4(0/0)))
Case(CastR4(1 / 0) @< CastR4(0 / 0), Wrap(CastR4(1 / 0)) @< Wrap(CastR4(0 / 0)), CastR4(1 / 0) $< CastR4(0 / 0), Wrap(CastR4(1 / 0)) $< Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @< Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $< Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @<= CastR4(0/0), Wrap(CastR4(1/0))  @<= Wrap(CastR4(0/0)), CastR4(1/0)  $<= CastR4(0/0), Wrap(CastR4(1/0))  $<= Wrap(CastR4(0/0)))
Case(CastR4(1 / 0) @<= CastR4(0 / 0), Wrap(CastR4(1 / 0)) @<= Wrap(CastR4(0 / 0)), CastR4(1 / 0) $<= CastR4(0 / 0), Wrap(CastR4(1 / 0)) $<= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @<= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $<= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @>  CastR4(0/0), Wrap(CastR4(1/0))  @>  Wrap(CastR4(0/0)), CastR4(1/0)  $>  CastR4(0/0), Wrap(CastR4(1/0))  $>  Wrap(CastR4(0/0)))
Case(CastR4(1 / 0) @> CastR4(0 / 0), Wrap(CastR4(1 / 0)) @> Wrap(CastR4(0 / 0)), CastR4(1 / 0) $> CastR4(0 / 0), Wrap(CastR4(1 / 0)) $> Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @> Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $> Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(1/0)  @>= CastR4(0/0), Wrap(CastR4(1/0))  @>= Wrap(CastR4(0/0)), CastR4(1/0)  $>= CastR4(0/0), Wrap(CastR4(1/0))  $>= Wrap(CastR4(0/0)))
Case(CastR4(1 / 0) @>= CastR4(0 / 0), Wrap(CastR4(1 / 0)) @>= Wrap(CastR4(0 / 0)), CastR4(1 / 0) $>= CastR4(0 / 0), Wrap(CastR4(1 / 0)) $>= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @>= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $>= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(1/0) !@=  CastR4(0/0), Wrap(CastR4(1/0)) !@=  Wrap(CastR4(0/0)), CastR4(1/0) !$=  CastR4(0/0), Wrap(CastR4(1/0)) !$=  Wrap(CastR4(0/0)))
Case(CastR4(1 / 0) !@= CastR4(0 / 0), Wrap(CastR4(1 / 0)) !@= Wrap(CastR4(0 / 0)), CastR4(1 / 0) !$= CastR4(0 / 0), Wrap(CastR4(1 / 0)) !$= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !@= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@<  CastR4(0/0), Wrap(CastR4(1/0)) !@<  Wrap(CastR4(0/0)), CastR4(1/0) !$<  CastR4(0/0), Wrap(CastR4(1/0)) !$<  Wrap(CastR4(0/0)))
Case(CastR4(1 / 0) !@< CastR4(0 / 0), Wrap(CastR4(1 / 0)) !@< Wrap(CastR4(0 / 0)), CastR4(1 / 0) !$< CastR4(0 / 0), Wrap(CastR4(1 / 0)) !$< Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @>= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$< Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@<= CastR4(0/0), Wrap(CastR4(1/0)) !@<= Wrap(CastR4(0/0)), CastR4(1/0) !$<= CastR4(0/0), Wrap(CastR4(1/0)) !$<= Wrap(CastR4(0/0)))
Case(CastR4(1 / 0) !@<= CastR4(0 / 0), Wrap(CastR4(1 / 0)) !@<= Wrap(CastR4(0 / 0)), CastR4(1 / 0) !$<= CastR4(0 / 0), Wrap(CastR4(1 / 0)) !$<= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @> Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$<= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@>  CastR4(0/0), Wrap(CastR4(1/0)) !@>  Wrap(CastR4(0/0)), CastR4(1/0) !$>  CastR4(0/0), Wrap(CastR4(1/0)) !$>  Wrap(CastR4(0/0)))
Case(CastR4(1 / 0) !@> CastR4(0 / 0), Wrap(CastR4(1 / 0)) !@> Wrap(CastR4(0 / 0)), CastR4(1 / 0) !$> CastR4(0 / 0), Wrap(CastR4(1 / 0)) !$> Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @<= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$> Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(1/0) !@>= CastR4(0/0), Wrap(CastR4(1/0)) !@>= Wrap(CastR4(0/0)), CastR4(1/0) !$>= CastR4(0/0), Wrap(CastR4(1/0)) !$>= Wrap(CastR4(0/0)))
Case(CastR4(1 / 0) !@>= CastR4(0 / 0), Wrap(CastR4(1 / 0)) !@>= Wrap(CastR4(0 / 0)), CastR4(1 / 0) !$>= CastR4(0 / 0), Wrap(CastR4(1 / 0)) !$>= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @< Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$>= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(1/0)  @=  CastR4(1/0), Wrap(CastR4(1/0))  @=  Wrap(CastR4(1/0)), CastR4(1/0)  $=  CastR4(1/0), Wrap(CastR4(1/0))  $=  Wrap(CastR4(1/0)))
Case(CastR4(1 / 0) @= CastR4(1 / 0), Wrap(CastR4(1 / 0)) @= Wrap(CastR4(1 / 0)), CastR4(1 / 0) $= CastR4(1 / 0), Wrap(CastR4(1 / 0)) $= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0)  @<  CastR4(1/0), Wrap(CastR4(1/0))  @<  Wrap(CastR4(1/0)), CastR4(1/0)  $<  CastR4(1/0), Wrap(CastR4(1/0))  $<  Wrap(CastR4(1/0)))
Case(CastR4(1 / 0) @< CastR4(1 / 0), Wrap(CastR4(1 / 0)) @< Wrap(CastR4(1 / 0)), CastR4(1 / 0) $< CastR4(1 / 0), Wrap(CastR4(1 / 0)) $< Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @< Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $< Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @<= CastR4(1/0), Wrap(CastR4(1/0))  @<= Wrap(CastR4(1/0)), CastR4(1/0)  $<= CastR4(1/0), Wrap(CastR4(1/0))  $<= Wrap(CastR4(1/0)))
Case(CastR4(1 / 0) @<= CastR4(1 / 0), Wrap(CastR4(1 / 0)) @<= Wrap(CastR4(1 / 0)), CastR4(1 / 0) $<= CastR4(1 / 0), Wrap(CastR4(1 / 0)) $<= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @<= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $<= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0)  @>  CastR4(1/0), Wrap(CastR4(1/0))  @>  Wrap(CastR4(1/0)), CastR4(1/0)  $>  CastR4(1/0), Wrap(CastR4(1/0))  $>  Wrap(CastR4(1/0)))
Case(CastR4(1 / 0) @> CastR4(1 / 0), Wrap(CastR4(1 / 0)) @> Wrap(CastR4(1 / 0)), CastR4(1 / 0) $> CastR4(1 / 0), Wrap(CastR4(1 / 0)) $> Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @> Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $> Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @>= CastR4(1/0), Wrap(CastR4(1/0))  @>= Wrap(CastR4(1/0)), CastR4(1/0)  $>= CastR4(1/0), Wrap(CastR4(1/0))  $>= Wrap(CastR4(1/0)))
Case(CastR4(1 / 0) @>= CastR4(1 / 0), Wrap(CastR4(1 / 0)) @>= Wrap(CastR4(1 / 0)), CastR4(1 / 0) $>= CastR4(1 / 0), Wrap(CastR4(1 / 0)) $>= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @>= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $>= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@=  CastR4(1/0), Wrap(CastR4(1/0)) !@=  Wrap(CastR4(1/0)), CastR4(1/0) !$=  CastR4(1/0), Wrap(CastR4(1/0)) !$=  Wrap(CastR4(1/0)))
Case(CastR4(1 / 0) !@= CastR4(1 / 0), Wrap(CastR4(1 / 0)) !@= Wrap(CastR4(1 / 0)), CastR4(1 / 0) !$= CastR4(1 / 0), Wrap(CastR4(1 / 0)) !$= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !@= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0) !@<  CastR4(1/0), Wrap(CastR4(1/0)) !@<  Wrap(CastR4(1/0)), CastR4(1/0) !$<  CastR4(1/0), Wrap(CastR4(1/0)) !$<  Wrap(CastR4(1/0)))
Case(CastR4(1 / 0) !@< CastR4(1 / 0), Wrap(CastR4(1 / 0)) !@< Wrap(CastR4(1 / 0)), CastR4(1 / 0) !$< CastR4(1 / 0), Wrap(CastR4(1 / 0)) !$< Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @>= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$< Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@<= CastR4(1/0), Wrap(CastR4(1/0)) !@<= Wrap(CastR4(1/0)), CastR4(1/0) !$<= CastR4(1/0), Wrap(CastR4(1/0)) !$<= Wrap(CastR4(1/0)))
Case(CastR4(1 / 0) !@<= CastR4(1 / 0), Wrap(CastR4(1 / 0)) !@<= Wrap(CastR4(1 / 0)), CastR4(1 / 0) !$<= CastR4(1 / 0), Wrap(CastR4(1 / 0)) !$<= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @> Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$<= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0) !@>  CastR4(1/0), Wrap(CastR4(1/0)) !@>  Wrap(CastR4(1/0)), CastR4(1/0) !$>  CastR4(1/0), Wrap(CastR4(1/0)) !$>  Wrap(CastR4(1/0)))
Case(CastR4(1 / 0) !@> CastR4(1 / 0), Wrap(CastR4(1 / 0)) !@> Wrap(CastR4(1 / 0)), CastR4(1 / 0) !$> CastR4(1 / 0), Wrap(CastR4(1 / 0)) !$> Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @<= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$> Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@>= CastR4(1/0), Wrap(CastR4(1/0)) !@>= Wrap(CastR4(1/0)), CastR4(1/0) !$>= CastR4(1/0), Wrap(CastR4(1/0)) !$>= Wrap(CastR4(1/0)))
Case(CastR4(1 / 0) !@>= CastR4(1 / 0), Wrap(CastR4(1 / 0)) !@>= Wrap(CastR4(1 / 0)), CastR4(1 / 0) !$>= CastR4(1 / 0), Wrap(CastR4(1 / 0)) !$>= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @< Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$>= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @=  CastR4(-1/0), Wrap(CastR4(1/0))  @=  Wrap(CastR4(-1/0)), CastR4(1/0)  $=  CastR4(-1/0), Wrap(CastR4(1/0))  $=  Wrap(CastR4(-1/0)))
Case(CastR4(1 / 0) @= CastR4(-1 / 0), Wrap(CastR4(1 / 0)) @= Wrap(CastR4(-1 / 0)), CastR4(1 / 0) $= CastR4(-1 / 0), Wrap(CastR4(1 / 0)) $= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @<  CastR4(-1/0), Wrap(CastR4(1/0))  @<  Wrap(CastR4(-1/0)), CastR4(1/0)  $<  CastR4(-1/0), Wrap(CastR4(1/0))  $<  Wrap(CastR4(-1/0)))
Case(CastR4(1 / 0) @< CastR4(-1 / 0), Wrap(CastR4(1 / 0)) @< Wrap(CastR4(-1 / 0)), CastR4(1 / 0) $< CastR4(-1 / 0), Wrap(CastR4(1 / 0)) $< Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @< Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $< Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @<= CastR4(-1/0), Wrap(CastR4(1/0))  @<= Wrap(CastR4(-1/0)), CastR4(1/0)  $<= CastR4(-1/0), Wrap(CastR4(1/0))  $<= Wrap(CastR4(-1/0)))
Case(CastR4(1 / 0) @<= CastR4(-1 / 0), Wrap(CastR4(1 / 0)) @<= Wrap(CastR4(-1 / 0)), CastR4(1 / 0) $<= CastR4(-1 / 0), Wrap(CastR4(1 / 0)) $<= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @<= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $<= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @>  CastR4(-1/0), Wrap(CastR4(1/0))  @>  Wrap(CastR4(-1/0)), CastR4(1/0)  $>  CastR4(-1/0), Wrap(CastR4(1/0))  $>  Wrap(CastR4(-1/0)))
Case(CastR4(1 / 0) @> CastR4(-1 / 0), Wrap(CastR4(1 / 0)) @> Wrap(CastR4(-1 / 0)), CastR4(1 / 0) $> CastR4(-1 / 0), Wrap(CastR4(1 / 0)) $> Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @> Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $> Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0)  @>= CastR4(-1/0), Wrap(CastR4(1/0))  @>= Wrap(CastR4(-1/0)), CastR4(1/0)  $>= CastR4(-1/0), Wrap(CastR4(1/0))  $>= Wrap(CastR4(-1/0)))
Case(CastR4(1 / 0) @>= CastR4(-1 / 0), Wrap(CastR4(1 / 0)) @>= Wrap(CastR4(-1 / 0)), CastR4(1 / 0) $>= CastR4(-1 / 0), Wrap(CastR4(1 / 0)) $>= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @>= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $>= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@=  CastR4(-1/0), Wrap(CastR4(1/0)) !@=  Wrap(CastR4(-1/0)), CastR4(1/0) !$=  CastR4(-1/0), Wrap(CastR4(1/0)) !$=  Wrap(CastR4(-1/0)))
Case(CastR4(1 / 0) !@= CastR4(-1 / 0), Wrap(CastR4(1 / 0)) !@= Wrap(CastR4(-1 / 0)), CastR4(1 / 0) !$= CastR4(-1 / 0), Wrap(CastR4(1 / 0)) !$= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !@= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@<  CastR4(-1/0), Wrap(CastR4(1/0)) !@<  Wrap(CastR4(-1/0)), CastR4(1/0) !$<  CastR4(-1/0), Wrap(CastR4(1/0)) !$<  Wrap(CastR4(-1/0)))
Case(CastR4(1 / 0) !@< CastR4(-1 / 0), Wrap(CastR4(1 / 0)) !@< Wrap(CastR4(-1 / 0)), CastR4(1 / 0) !$< CastR4(-1 / 0), Wrap(CastR4(1 / 0)) !$< Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @>= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$< Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@<= CastR4(-1/0), Wrap(CastR4(1/0)) !@<= Wrap(CastR4(-1/0)), CastR4(1/0) !$<= CastR4(-1/0), Wrap(CastR4(1/0)) !$<= Wrap(CastR4(-1/0)))
Case(CastR4(1 / 0) !@<= CastR4(-1 / 0), Wrap(CastR4(1 / 0)) !@<= Wrap(CastR4(-1 / 0)), CastR4(1 / 0) !$<= CastR4(-1 / 0), Wrap(CastR4(1 / 0)) !$<= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @> Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$<= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@>  CastR4(-1/0), Wrap(CastR4(1/0)) !@>  Wrap(CastR4(-1/0)), CastR4(1/0) !$>  CastR4(-1/0), Wrap(CastR4(1/0)) !$>  Wrap(CastR4(-1/0)))
Case(CastR4(1 / 0) !@> CastR4(-1 / 0), Wrap(CastR4(1 / 0)) !@> Wrap(CastR4(-1 / 0)), CastR4(1 / 0) !$> CastR4(-1 / 0), Wrap(CastR4(1 / 0)) !$> Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @<= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$> Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0) !@>= CastR4(-1/0), Wrap(CastR4(1/0)) !@>= Wrap(CastR4(-1/0)), CastR4(1/0) !$>= CastR4(-1/0), Wrap(CastR4(1/0)) !$>= Wrap(CastR4(-1/0)))
Case(CastR4(1 / 0) !@>= CastR4(-1 / 0), Wrap(CastR4(1 / 0)) !@>= Wrap(CastR4(-1 / 0)), CastR4(1 / 0) !$>= CastR4(-1 / 0), Wrap(CastR4(1 / 0)) !$>= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @< Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$>= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @=  Null(5r4), Wrap(CastR4(1/0))  @=  Wrap(Null(5r4)), CastR4(1/0)  $=  Null(5r4), Wrap(CastR4(1/0))  $=  Wrap(Null(5r4)))
Case(CastR4(1 / 0) @= Null(5), Wrap(CastR4(1 / 0)) @= Wrap(Null(5)), CastR4(1 / 0) $= Null(5), Wrap(CastR4(1 / 0)) $= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @<  Null(5r4), Wrap(CastR4(1/0))  @<  Wrap(Null(5r4)), CastR4(1/0)  $<  Null(5r4), Wrap(CastR4(1/0))  $<  Wrap(Null(5r4)))
Case(CastR4(1 / 0) @< Null(5), Wrap(CastR4(1 / 0)) @< Wrap(Null(5)), CastR4(1 / 0) $< Null(5), Wrap(CastR4(1 / 0)) $< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @< Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $< Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @<= Null(5r4), Wrap(CastR4(1/0))  @<= Wrap(Null(5r4)), CastR4(1/0)  $<= Null(5r4), Wrap(CastR4(1/0))  $<= Wrap(Null(5r4)))
Case(CastR4(1 / 0) @<= Null(5), Wrap(CastR4(1 / 0)) @<= Wrap(Null(5)), CastR4(1 / 0) $<= Null(5), Wrap(CastR4(1 / 0)) $<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @<= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $<= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @>  Null(5r4), Wrap(CastR4(1/0))  @>  Wrap(Null(5r4)), CastR4(1/0)  $>  Null(5r4), Wrap(CastR4(1/0))  $>  Wrap(Null(5r4)))
Case(CastR4(1 / 0) @> Null(5), Wrap(CastR4(1 / 0)) @> Wrap(Null(5)), CastR4(1 / 0) $> Null(5), Wrap(CastR4(1 / 0)) $> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @> Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $> Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(1/0)  @>= Null(5r4), Wrap(CastR4(1/0))  @>= Wrap(Null(5r4)), CastR4(1/0)  $>= Null(5r4), Wrap(CastR4(1/0))  $>= Wrap(Null(5r4)))
Case(CastR4(1 / 0) @>= Null(5), Wrap(CastR4(1 / 0)) @>= Wrap(Null(5)), CastR4(1 / 0) $>= Null(5), Wrap(CastR4(1 / 0)) $>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @>= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $>= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(1/0) !@=  Null(5r4), Wrap(CastR4(1/0)) !@=  Wrap(Null(5r4)), CastR4(1/0) !$=  Null(5r4), Wrap(CastR4(1/0)) !$=  Wrap(Null(5r4)))
Case(CastR4(1 / 0) !@= Null(5), Wrap(CastR4(1 / 0)) !@= Wrap(Null(5)), CastR4(1 / 0) !$= Null(5), Wrap(CastR4(1 / 0)) !$= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !@= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@<  Null(5r4), Wrap(CastR4(1/0)) !@<  Wrap(Null(5r4)), CastR4(1/0) !$<  Null(5r4), Wrap(CastR4(1/0)) !$<  Wrap(Null(5r4)))
Case(CastR4(1 / 0) !@< Null(5), Wrap(CastR4(1 / 0)) !@< Wrap(Null(5)), CastR4(1 / 0) !$< Null(5), Wrap(CastR4(1 / 0)) !$< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @>= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$< Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@<= Null(5r4), Wrap(CastR4(1/0)) !@<= Wrap(Null(5r4)), CastR4(1/0) !$<= Null(5r4), Wrap(CastR4(1/0)) !$<= Wrap(Null(5r4)))
Case(CastR4(1 / 0) !@<= Null(5), Wrap(CastR4(1 / 0)) !@<= Wrap(Null(5)), CastR4(1 / 0) !$<= Null(5), Wrap(CastR4(1 / 0)) !$<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @> Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$<= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@>  Null(5r4), Wrap(CastR4(1/0)) !@>  Wrap(Null(5r4)), CastR4(1/0) !$>  Null(5r4), Wrap(CastR4(1/0)) !$>  Wrap(Null(5r4)))
Case(CastR4(1 / 0) !@> Null(5), Wrap(CastR4(1 / 0)) !@> Wrap(Null(5)), CastR4(1 / 0) !$> Null(5), Wrap(CastR4(1 / 0)) !$> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @<= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$> Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(1/0) !@>= Null(5r4), Wrap(CastR4(1/0)) !@>= Wrap(Null(5r4)), CastR4(1/0) !$>= Null(5r4), Wrap(CastR4(1/0)) !$>= Wrap(Null(5r4)))
Case(CastR4(1 / 0) !@>= Null(5), Wrap(CastR4(1 / 0)) !@>= Wrap(Null(5)), CastR4(1 / 0) !$>= Null(5), Wrap(CastR4(1 / 0)) !$>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @< Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$>= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(1/0)  @=  Opt(5r4), Wrap(CastR4(1/0))  @=  Wrap(Opt(5r4)), CastR4(1/0)  $=  Opt(5r4), Wrap(CastR4(1/0))  $=  Wrap(Opt(5r4)))
Case(CastR4(1 / 0) @= Opt(5), Wrap(CastR4(1 / 0)) @= Wrap(Opt(5)), CastR4(1 / 0) $= Opt(5), Wrap(CastR4(1 / 0)) $= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @<  Opt(5r4), Wrap(CastR4(1/0))  @<  Wrap(Opt(5r4)), CastR4(1/0)  $<  Opt(5r4), Wrap(CastR4(1/0))  $<  Wrap(Opt(5r4)))
Case(CastR4(1 / 0) @< Opt(5), Wrap(CastR4(1 / 0)) @< Wrap(Opt(5)), CastR4(1 / 0) $< Opt(5), Wrap(CastR4(1 / 0)) $< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @<= Opt(5r4), Wrap(CastR4(1/0))  @<= Wrap(Opt(5r4)), CastR4(1/0)  $<= Opt(5r4), Wrap(CastR4(1/0))  $<= Wrap(Opt(5r4)))
Case(CastR4(1 / 0) @<= Opt(5), Wrap(CastR4(1 / 0)) @<= Wrap(Opt(5)), CastR4(1 / 0) $<= Opt(5), Wrap(CastR4(1 / 0)) $<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0)  @>  Opt(5r4), Wrap(CastR4(1/0))  @>  Wrap(Opt(5r4)), CastR4(1/0)  $>  Opt(5r4), Wrap(CastR4(1/0))  $>  Wrap(Opt(5r4)))
Case(CastR4(1 / 0) @> Opt(5), Wrap(CastR4(1 / 0)) @> Wrap(Opt(5)), CastR4(1 / 0) $> Opt(5), Wrap(CastR4(1 / 0)) $> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0)  @>= Opt(5r4), Wrap(CastR4(1/0))  @>= Wrap(Opt(5r4)), CastR4(1/0)  $>= Opt(5r4), Wrap(CastR4(1/0))  $>= Wrap(Opt(5r4)))
Case(CastR4(1 / 0) @>= Opt(5), Wrap(CastR4(1 / 0)) @>= Wrap(Opt(5)), CastR4(1 / 0) $>= Opt(5), Wrap(CastR4(1 / 0)) $>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) $>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@=  Opt(5r4), Wrap(CastR4(1/0)) !@=  Wrap(Opt(5r4)), CastR4(1/0) !$=  Opt(5r4), Wrap(CastR4(1/0)) !$=  Wrap(Opt(5r4)))
Case(CastR4(1 / 0) !@= Opt(5), Wrap(CastR4(1 / 0)) !@= Wrap(Opt(5)), CastR4(1 / 0) !$= Opt(5), Wrap(CastR4(1 / 0)) !$= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !@= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@<  Opt(5r4), Wrap(CastR4(1/0)) !@<  Wrap(Opt(5r4)), CastR4(1/0) !$<  Opt(5r4), Wrap(CastR4(1/0)) !$<  Wrap(Opt(5r4)))
Case(CastR4(1 / 0) !@< Opt(5), Wrap(CastR4(1 / 0)) !@< Wrap(Opt(5)), CastR4(1 / 0) !$< Opt(5), Wrap(CastR4(1 / 0)) !$< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@<= Opt(5r4), Wrap(CastR4(1/0)) !@<= Wrap(Opt(5r4)), CastR4(1/0) !$<= Opt(5r4), Wrap(CastR4(1/0)) !$<= Wrap(Opt(5r4)))
Case(CastR4(1 / 0) !@<= Opt(5), Wrap(CastR4(1 / 0)) !@<= Wrap(Opt(5)), CastR4(1 / 0) !$<= Opt(5), Wrap(CastR4(1 / 0)) !$<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(1/0) !@>  Opt(5r4), Wrap(CastR4(1/0)) !@>  Wrap(Opt(5r4)), CastR4(1/0) !$>  Opt(5r4), Wrap(CastR4(1/0)) !$>  Wrap(Opt(5r4)))
Case(CastR4(1 / 0) !@> Opt(5), Wrap(CastR4(1 / 0)) !@> Wrap(Opt(5)), CastR4(1 / 0) !$> Opt(5), Wrap(CastR4(1 / 0)) !$> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(1/0) !@>= Opt(5r4), Wrap(CastR4(1/0)) !@>= Wrap(Opt(5r4)), CastR4(1/0) !$>= Opt(5r4), Wrap(CastR4(1/0)) !$>= Wrap(Opt(5r4)))
Case(CastR4(1 / 0) !@>= Opt(5), Wrap(CastR4(1 / 0)) !@>= Wrap(Opt(5)), CastR4(1 / 0) !$>= Opt(5), Wrap(CastR4(1 / 0)) !$>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(∞:r4):r4) @< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(∞:r4):r4) !$>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0)  @=  5r4, Wrap(CastR4(-1/0))  @=  Wrap(5r4), CastR4(-1/0)  $=  5r4, Wrap(CastR4(-1/0))  $=  Wrap(5r4))
Case(CastR4(-1 / 0) @= 5, Wrap(CastR4(-1 / 0)) @= Wrap(5), CastR4(-1 / 0) $= 5, Wrap(CastR4(-1 / 0)) $= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0)  @<  5r4, Wrap(CastR4(-1/0))  @<  Wrap(5r4), CastR4(-1/0)  $<  5r4, Wrap(CastR4(-1/0))  $<  Wrap(5r4))
Case(CastR4(-1 / 0) @< 5, Wrap(CastR4(-1 / 0)) @< Wrap(5), CastR4(-1 / 0) $< 5, Wrap(CastR4(-1 / 0)) $< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @< Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $< Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0)  @<= 5r4, Wrap(CastR4(-1/0))  @<= Wrap(5r4), CastR4(-1/0)  $<= 5r4, Wrap(CastR4(-1/0))  $<= Wrap(5r4))
Case(CastR4(-1 / 0) @<= 5, Wrap(CastR4(-1 / 0)) @<= Wrap(5), CastR4(-1 / 0) $<= 5, Wrap(CastR4(-1 / 0)) $<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @<= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $<= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0)  @>  5r4, Wrap(CastR4(-1/0))  @>  Wrap(5r4), CastR4(-1/0)  $>  5r4, Wrap(CastR4(-1/0))  $>  Wrap(5r4))
Case(CastR4(-1 / 0) @> 5, Wrap(CastR4(-1 / 0)) @> Wrap(5), CastR4(-1 / 0) $> 5, Wrap(CastR4(-1 / 0)) $> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @> Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $> Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0)  @>= 5r4, Wrap(CastR4(-1/0))  @>= Wrap(5r4), CastR4(-1/0)  $>= 5r4, Wrap(CastR4(-1/0))  $>= Wrap(5r4))
Case(CastR4(-1 / 0) @>= 5, Wrap(CastR4(-1 / 0)) @>= Wrap(5), CastR4(-1 / 0) $>= 5, Wrap(CastR4(-1 / 0)) $>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @>= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $>= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0) !@=  5r4, Wrap(CastR4(-1/0)) !@=  Wrap(5r4), CastR4(-1/0) !$=  5r4, Wrap(CastR4(-1/0)) !$=  Wrap(5r4))
Case(CastR4(-1 / 0) !@= 5, Wrap(CastR4(-1 / 0)) !@= Wrap(5), CastR4(-1 / 0) !$= 5, Wrap(CastR4(-1 / 0)) !$= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !@= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0) !@<  5r4, Wrap(CastR4(-1/0)) !@<  Wrap(5r4), CastR4(-1/0) !$<  5r4, Wrap(CastR4(-1/0)) !$<  Wrap(5r4))
Case(CastR4(-1 / 0) !@< 5, Wrap(CastR4(-1 / 0)) !@< Wrap(5), CastR4(-1 / 0) !$< 5, Wrap(CastR4(-1 / 0)) !$< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @>= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$< Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0) !@<= 5r4, Wrap(CastR4(-1/0)) !@<= Wrap(5r4), CastR4(-1/0) !$<= 5r4, Wrap(CastR4(-1/0)) !$<= Wrap(5r4))
Case(CastR4(-1 / 0) !@<= 5, Wrap(CastR4(-1 / 0)) !@<= Wrap(5), CastR4(-1 / 0) !$<= 5, Wrap(CastR4(-1 / 0)) !$<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @> Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$<= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0) !@>  5r4, Wrap(CastR4(-1/0)) !@>  Wrap(5r4), CastR4(-1/0) !$>  5r4, Wrap(CastR4(-1/0)) !$>  Wrap(5r4))
Case(CastR4(-1 / 0) !@> 5, Wrap(CastR4(-1 / 0)) !@> Wrap(5), CastR4(-1 / 0) !$> 5, Wrap(CastR4(-1 / 0)) !$> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @<= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$> Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0) !@>= 5r4, Wrap(CastR4(-1/0)) !@>= Wrap(5r4), CastR4(-1/0) !$>= 5r4, Wrap(CastR4(-1/0)) !$>= Wrap(5r4))
Case(CastR4(-1 / 0) !@>= 5, Wrap(CastR4(-1 / 0)) !@>= Wrap(5), CastR4(-1 / 0) !$>= 5, Wrap(CastR4(-1 / 0)) !$>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @< Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$>= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0)  @=  CastR4(0/0), Wrap(CastR4(-1/0))  @=  Wrap(CastR4(0/0)), CastR4(-1/0)  $=  CastR4(0/0), Wrap(CastR4(-1/0))  $=  Wrap(CastR4(0/0)))
Case(CastR4(-1 / 0) @= CastR4(0 / 0), Wrap(CastR4(-1 / 0)) @= Wrap(CastR4(0 / 0)), CastR4(-1 / 0) $= CastR4(0 / 0), Wrap(CastR4(-1 / 0)) $= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0)  @<  CastR4(0/0), Wrap(CastR4(-1/0))  @<  Wrap(CastR4(0/0)), CastR4(-1/0)  $<  CastR4(0/0), Wrap(CastR4(-1/0))  $<  Wrap(CastR4(0/0)))
Case(CastR4(-1 / 0) @< CastR4(0 / 0), Wrap(CastR4(-1 / 0)) @< Wrap(CastR4(0 / 0)), CastR4(-1 / 0) $< CastR4(0 / 0), Wrap(CastR4(-1 / 0)) $< Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @< Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $< Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0)  @<= CastR4(0/0), Wrap(CastR4(-1/0))  @<= Wrap(CastR4(0/0)), CastR4(-1/0)  $<= CastR4(0/0), Wrap(CastR4(-1/0))  $<= Wrap(CastR4(0/0)))
Case(CastR4(-1 / 0) @<= CastR4(0 / 0), Wrap(CastR4(-1 / 0)) @<= Wrap(CastR4(0 / 0)), CastR4(-1 / 0) $<= CastR4(0 / 0), Wrap(CastR4(-1 / 0)) $<= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @<= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $<= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0)  @>  CastR4(0/0), Wrap(CastR4(-1/0))  @>  Wrap(CastR4(0/0)), CastR4(-1/0)  $>  CastR4(0/0), Wrap(CastR4(-1/0))  $>  Wrap(CastR4(0/0)))
Case(CastR4(-1 / 0) @> CastR4(0 / 0), Wrap(CastR4(-1 / 0)) @> Wrap(CastR4(0 / 0)), CastR4(-1 / 0) $> CastR4(0 / 0), Wrap(CastR4(-1 / 0)) $> Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @> Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $> Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(-1/0)  @>= CastR4(0/0), Wrap(CastR4(-1/0))  @>= Wrap(CastR4(0/0)), CastR4(-1/0)  $>= CastR4(0/0), Wrap(CastR4(-1/0))  $>= Wrap(CastR4(0/0)))
Case(CastR4(-1 / 0) @>= CastR4(0 / 0), Wrap(CastR4(-1 / 0)) @>= Wrap(CastR4(0 / 0)), CastR4(-1 / 0) $>= CastR4(0 / 0), Wrap(CastR4(-1 / 0)) $>= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @>= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $>= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(-1/0) !@=  CastR4(0/0), Wrap(CastR4(-1/0)) !@=  Wrap(CastR4(0/0)), CastR4(-1/0) !$=  CastR4(0/0), Wrap(CastR4(-1/0)) !$=  Wrap(CastR4(0/0)))
Case(CastR4(-1 / 0) !@= CastR4(0 / 0), Wrap(CastR4(-1 / 0)) !@= Wrap(CastR4(0 / 0)), CastR4(-1 / 0) !$= CastR4(0 / 0), Wrap(CastR4(-1 / 0)) !$= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !@= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0) !@<  CastR4(0/0), Wrap(CastR4(-1/0)) !@<  Wrap(CastR4(0/0)), CastR4(-1/0) !$<  CastR4(0/0), Wrap(CastR4(-1/0)) !$<  Wrap(CastR4(0/0)))
Case(CastR4(-1 / 0) !@< CastR4(0 / 0), Wrap(CastR4(-1 / 0)) !@< Wrap(CastR4(0 / 0)), CastR4(-1 / 0) !$< CastR4(0 / 0), Wrap(CastR4(-1 / 0)) !$< Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @>= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$< Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0) !@<= CastR4(0/0), Wrap(CastR4(-1/0)) !@<= Wrap(CastR4(0/0)), CastR4(-1/0) !$<= CastR4(0/0), Wrap(CastR4(-1/0)) !$<= Wrap(CastR4(0/0)))
Case(CastR4(-1 / 0) !@<= CastR4(0 / 0), Wrap(CastR4(-1 / 0)) !@<= Wrap(CastR4(0 / 0)), CastR4(-1 / 0) !$<= CastR4(0 / 0), Wrap(CastR4(-1 / 0)) !$<= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @> Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$<= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0) !@>  CastR4(0/0), Wrap(CastR4(-1/0)) !@>  Wrap(CastR4(0/0)), CastR4(-1/0) !$>  CastR4(0/0), Wrap(CastR4(-1/0)) !$>  Wrap(CastR4(0/0)))
Case(CastR4(-1 / 0) !@> CastR4(0 / 0), Wrap(CastR4(-1 / 0)) !@> Wrap(CastR4(0 / 0)), CastR4(-1 / 0) !$> CastR4(0 / 0), Wrap(CastR4(-1 / 0)) !$> Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @<= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$> Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(-1/0) !@>= CastR4(0/0), Wrap(CastR4(-1/0)) !@>= Wrap(CastR4(0/0)), CastR4(-1/0) !$>= CastR4(0/0), Wrap(CastR4(-1/0)) !$>= Wrap(CastR4(0/0)))
Case(CastR4(-1 / 0) !@>= CastR4(0 / 0), Wrap(CastR4(-1 / 0)) !@>= Wrap(CastR4(0 / 0)), CastR4(-1 / 0) !$>= CastR4(0 / 0), Wrap(CastR4(-1 / 0)) !$>= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @< Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$>= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(-1/0)  @=  CastR4(1/0), Wrap(CastR4(-1/0))  @=  Wrap(CastR4(1/0)), CastR4(-1/0)  $=  CastR4(1/0), Wrap(CastR4(-1/0))  $=  Wrap(CastR4(1/0)))
Case(CastR4(-1 / 0) @= CastR4(1 / 0), Wrap(CastR4(-1 / 0)) @= Wrap(CastR4(1 / 0)), CastR4(-1 / 0) $= CastR4(1 / 0), Wrap(CastR4(-1 / 0)) $= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0)  @<  CastR4(1/0), Wrap(CastR4(-1/0))  @<  Wrap(CastR4(1/0)), CastR4(-1/0)  $<  CastR4(1/0), Wrap(CastR4(-1/0))  $<  Wrap(CastR4(1/0)))
Case(CastR4(-1 / 0) @< CastR4(1 / 0), Wrap(CastR4(-1 / 0)) @< Wrap(CastR4(1 / 0)), CastR4(-1 / 0) $< CastR4(1 / 0), Wrap(CastR4(-1 / 0)) $< Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @< Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $< Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0)  @<= CastR4(1/0), Wrap(CastR4(-1/0))  @<= Wrap(CastR4(1/0)), CastR4(-1/0)  $<= CastR4(1/0), Wrap(CastR4(-1/0))  $<= Wrap(CastR4(1/0)))
Case(CastR4(-1 / 0) @<= CastR4(1 / 0), Wrap(CastR4(-1 / 0)) @<= Wrap(CastR4(1 / 0)), CastR4(-1 / 0) $<= CastR4(1 / 0), Wrap(CastR4(-1 / 0)) $<= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @<= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $<= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0)  @>  CastR4(1/0), Wrap(CastR4(-1/0))  @>  Wrap(CastR4(1/0)), CastR4(-1/0)  $>  CastR4(1/0), Wrap(CastR4(-1/0))  $>  Wrap(CastR4(1/0)))
Case(CastR4(-1 / 0) @> CastR4(1 / 0), Wrap(CastR4(-1 / 0)) @> Wrap(CastR4(1 / 0)), CastR4(-1 / 0) $> CastR4(1 / 0), Wrap(CastR4(-1 / 0)) $> Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @> Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $> Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0)  @>= CastR4(1/0), Wrap(CastR4(-1/0))  @>= Wrap(CastR4(1/0)), CastR4(-1/0)  $>= CastR4(1/0), Wrap(CastR4(-1/0))  $>= Wrap(CastR4(1/0)))
Case(CastR4(-1 / 0) @>= CastR4(1 / 0), Wrap(CastR4(-1 / 0)) @>= Wrap(CastR4(1 / 0)), CastR4(-1 / 0) $>= CastR4(1 / 0), Wrap(CastR4(-1 / 0)) $>= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @>= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $>= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0) !@=  CastR4(1/0), Wrap(CastR4(-1/0)) !@=  Wrap(CastR4(1/0)), CastR4(-1/0) !$=  CastR4(1/0), Wrap(CastR4(-1/0)) !$=  Wrap(CastR4(1/0)))
Case(CastR4(-1 / 0) !@= CastR4(1 / 0), Wrap(CastR4(-1 / 0)) !@= Wrap(CastR4(1 / 0)), CastR4(-1 / 0) !$= CastR4(1 / 0), Wrap(CastR4(-1 / 0)) !$= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !@= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0) !@<  CastR4(1/0), Wrap(CastR4(-1/0)) !@<  Wrap(CastR4(1/0)), CastR4(-1/0) !$<  CastR4(1/0), Wrap(CastR4(-1/0)) !$<  Wrap(CastR4(1/0)))
Case(CastR4(-1 / 0) !@< CastR4(1 / 0), Wrap(CastR4(-1 / 0)) !@< Wrap(CastR4(1 / 0)), CastR4(-1 / 0) !$< CastR4(1 / 0), Wrap(CastR4(-1 / 0)) !$< Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @>= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$< Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0) !@<= CastR4(1/0), Wrap(CastR4(-1/0)) !@<= Wrap(CastR4(1/0)), CastR4(-1/0) !$<= CastR4(1/0), Wrap(CastR4(-1/0)) !$<= Wrap(CastR4(1/0)))
Case(CastR4(-1 / 0) !@<= CastR4(1 / 0), Wrap(CastR4(-1 / 0)) !@<= Wrap(CastR4(1 / 0)), CastR4(-1 / 0) !$<= CastR4(1 / 0), Wrap(CastR4(-1 / 0)) !$<= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @> Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$<= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0) !@>  CastR4(1/0), Wrap(CastR4(-1/0)) !@>  Wrap(CastR4(1/0)), CastR4(-1/0) !$>  CastR4(1/0), Wrap(CastR4(-1/0)) !$>  Wrap(CastR4(1/0)))
Case(CastR4(-1 / 0) !@> CastR4(1 / 0), Wrap(CastR4(-1 / 0)) !@> Wrap(CastR4(1 / 0)), CastR4(-1 / 0) !$> CastR4(1 / 0), Wrap(CastR4(-1 / 0)) !$> Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @<= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$> Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0) !@>= CastR4(1/0), Wrap(CastR4(-1/0)) !@>= Wrap(CastR4(1/0)), CastR4(-1/0) !$>= CastR4(1/0), Wrap(CastR4(-1/0)) !$>= Wrap(CastR4(1/0)))
Case(CastR4(-1 / 0) !@>= CastR4(1 / 0), Wrap(CastR4(-1 / 0)) !@>= Wrap(CastR4(1 / 0)), CastR4(-1 / 0) !$>= CastR4(1 / 0), Wrap(CastR4(-1 / 0)) !$>= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @< Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$>= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0)  @=  CastR4(-1/0), Wrap(CastR4(-1/0))  @=  Wrap(CastR4(-1/0)), CastR4(-1/0)  $=  CastR4(-1/0), Wrap(CastR4(-1/0))  $=  Wrap(CastR4(-1/0)))
Case(CastR4(-1 / 0) @= CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) @= Wrap(CastR4(-1 / 0)), CastR4(-1 / 0) $= CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) $= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0)  @<  CastR4(-1/0), Wrap(CastR4(-1/0))  @<  Wrap(CastR4(-1/0)), CastR4(-1/0)  $<  CastR4(-1/0), Wrap(CastR4(-1/0))  $<  Wrap(CastR4(-1/0)))
Case(CastR4(-1 / 0) @< CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) @< Wrap(CastR4(-1 / 0)), CastR4(-1 / 0) $< CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) $< Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @< Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $< Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0)  @<= CastR4(-1/0), Wrap(CastR4(-1/0))  @<= Wrap(CastR4(-1/0)), CastR4(-1/0)  $<= CastR4(-1/0), Wrap(CastR4(-1/0))  $<= Wrap(CastR4(-1/0)))
Case(CastR4(-1 / 0) @<= CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) @<= Wrap(CastR4(-1 / 0)), CastR4(-1 / 0) $<= CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) $<= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @<= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $<= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0)  @>  CastR4(-1/0), Wrap(CastR4(-1/0))  @>  Wrap(CastR4(-1/0)), CastR4(-1/0)  $>  CastR4(-1/0), Wrap(CastR4(-1/0))  $>  Wrap(CastR4(-1/0)))
Case(CastR4(-1 / 0) @> CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) @> Wrap(CastR4(-1 / 0)), CastR4(-1 / 0) $> CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) $> Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @> Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $> Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0)  @>= CastR4(-1/0), Wrap(CastR4(-1/0))  @>= Wrap(CastR4(-1/0)), CastR4(-1/0)  $>= CastR4(-1/0), Wrap(CastR4(-1/0))  $>= Wrap(CastR4(-1/0)))
Case(CastR4(-1 / 0) @>= CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) @>= Wrap(CastR4(-1 / 0)), CastR4(-1 / 0) $>= CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) $>= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @>= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $>= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0) !@=  CastR4(-1/0), Wrap(CastR4(-1/0)) !@=  Wrap(CastR4(-1/0)), CastR4(-1/0) !$=  CastR4(-1/0), Wrap(CastR4(-1/0)) !$=  Wrap(CastR4(-1/0)))
Case(CastR4(-1 / 0) !@= CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) !@= Wrap(CastR4(-1 / 0)), CastR4(-1 / 0) !$= CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) !$= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !@= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0) !@<  CastR4(-1/0), Wrap(CastR4(-1/0)) !@<  Wrap(CastR4(-1/0)), CastR4(-1/0) !$<  CastR4(-1/0), Wrap(CastR4(-1/0)) !$<  Wrap(CastR4(-1/0)))
Case(CastR4(-1 / 0) !@< CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) !@< Wrap(CastR4(-1 / 0)), CastR4(-1 / 0) !$< CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) !$< Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @>= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$< Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0) !@<= CastR4(-1/0), Wrap(CastR4(-1/0)) !@<= Wrap(CastR4(-1/0)), CastR4(-1/0) !$<= CastR4(-1/0), Wrap(CastR4(-1/0)) !$<= Wrap(CastR4(-1/0)))
Case(CastR4(-1 / 0) !@<= CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) !@<= Wrap(CastR4(-1 / 0)), CastR4(-1 / 0) !$<= CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) !$<= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @> Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$<= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0) !@>  CastR4(-1/0), Wrap(CastR4(-1/0)) !@>  Wrap(CastR4(-1/0)), CastR4(-1/0) !$>  CastR4(-1/0), Wrap(CastR4(-1/0)) !$>  Wrap(CastR4(-1/0)))
Case(CastR4(-1 / 0) !@> CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) !@> Wrap(CastR4(-1 / 0)), CastR4(-1 / 0) !$> CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) !$> Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @<= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$> Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0) !@>= CastR4(-1/0), Wrap(CastR4(-1/0)) !@>= Wrap(CastR4(-1/0)), CastR4(-1/0) !$>= CastR4(-1/0), Wrap(CastR4(-1/0)) !$>= Wrap(CastR4(-1/0)))
Case(CastR4(-1 / 0) !@>= CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) !@>= Wrap(CastR4(-1 / 0)), CastR4(-1 / 0) !$>= CastR4(-1 / 0), Wrap(CastR4(-1 / 0)) !$>= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @< Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$>= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0)  @=  Null(5r4), Wrap(CastR4(-1/0))  @=  Wrap(Null(5r4)), CastR4(-1/0)  $=  Null(5r4), Wrap(CastR4(-1/0))  $=  Wrap(Null(5r4)))
Case(CastR4(-1 / 0) @= Null(5), Wrap(CastR4(-1 / 0)) @= Wrap(Null(5)), CastR4(-1 / 0) $= Null(5), Wrap(CastR4(-1 / 0)) $= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0)  @<  Null(5r4), Wrap(CastR4(-1/0))  @<  Wrap(Null(5r4)), CastR4(-1/0)  $<  Null(5r4), Wrap(CastR4(-1/0))  $<  Wrap(Null(5r4)))
Case(CastR4(-1 / 0) @< Null(5), Wrap(CastR4(-1 / 0)) @< Wrap(Null(5)), CastR4(-1 / 0) $< Null(5), Wrap(CastR4(-1 / 0)) $< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @< Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $< Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0)  @<= Null(5r4), Wrap(CastR4(-1/0))  @<= Wrap(Null(5r4)), CastR4(-1/0)  $<= Null(5r4), Wrap(CastR4(-1/0))  $<= Wrap(Null(5r4)))
Case(CastR4(-1 / 0) @<= Null(5), Wrap(CastR4(-1 / 0)) @<= Wrap(Null(5)), CastR4(-1 / 0) $<= Null(5), Wrap(CastR4(-1 / 0)) $<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @<= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $<= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0)  @>  Null(5r4), Wrap(CastR4(-1/0))  @>  Wrap(Null(5r4)), CastR4(-1/0)  $>  Null(5r4), Wrap(CastR4(-1/0))  $>  Wrap(Null(5r4)))
Case(CastR4(-1 / 0) @> Null(5), Wrap(CastR4(-1 / 0)) @> Wrap(Null(5)), CastR4(-1 / 0) $> Null(5), Wrap(CastR4(-1 / 0)) $> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @> Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $> Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(-1/0)  @>= Null(5r4), Wrap(CastR4(-1/0))  @>= Wrap(Null(5r4)), CastR4(-1/0)  $>= Null(5r4), Wrap(CastR4(-1/0))  $>= Wrap(Null(5r4)))
Case(CastR4(-1 / 0) @>= Null(5), Wrap(CastR4(-1 / 0)) @>= Wrap(Null(5)), CastR4(-1 / 0) $>= Null(5), Wrap(CastR4(-1 / 0)) $>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @>= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $>= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(CastR4(-1/0) !@=  Null(5r4), Wrap(CastR4(-1/0)) !@=  Wrap(Null(5r4)), CastR4(-1/0) !$=  Null(5r4), Wrap(CastR4(-1/0)) !$=  Wrap(Null(5r4)))
Case(CastR4(-1 / 0) !@= Null(5), Wrap(CastR4(-1 / 0)) !@= Wrap(Null(5)), CastR4(-1 / 0) !$= Null(5), Wrap(CastR4(-1 / 0)) !$= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !@= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0) !@<  Null(5r4), Wrap(CastR4(-1/0)) !@<  Wrap(Null(5r4)), CastR4(-1/0) !$<  Null(5r4), Wrap(CastR4(-1/0)) !$<  Wrap(Null(5r4)))
Case(CastR4(-1 / 0) !@< Null(5), Wrap(CastR4(-1 / 0)) !@< Wrap(Null(5)), CastR4(-1 / 0) !$< Null(5), Wrap(CastR4(-1 / 0)) !$< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @>= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$< Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0) !@<= Null(5r4), Wrap(CastR4(-1/0)) !@<= Wrap(Null(5r4)), CastR4(-1/0) !$<= Null(5r4), Wrap(CastR4(-1/0)) !$<= Wrap(Null(5r4)))
Case(CastR4(-1 / 0) !@<= Null(5), Wrap(CastR4(-1 / 0)) !@<= Wrap(Null(5)), CastR4(-1 / 0) !$<= Null(5), Wrap(CastR4(-1 / 0)) !$<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @> Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$<= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0) !@>  Null(5r4), Wrap(CastR4(-1/0)) !@>  Wrap(Null(5r4)), CastR4(-1/0) !$>  Null(5r4), Wrap(CastR4(-1/0)) !$>  Wrap(Null(5r4)))
Case(CastR4(-1 / 0) !@> Null(5), Wrap(CastR4(-1 / 0)) !@> Wrap(Null(5)), CastR4(-1 / 0) !$> Null(5), Wrap(CastR4(-1 / 0)) !$> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @<= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$> Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(-1/0) !@>= Null(5r4), Wrap(CastR4(-1/0)) !@>= Wrap(Null(5r4)), CastR4(-1/0) !$>= Null(5r4), Wrap(CastR4(-1/0)) !$>= Wrap(Null(5r4)))
Case(CastR4(-1 / 0) !@>= Null(5), Wrap(CastR4(-1 / 0)) !@>= Wrap(Null(5)), CastR4(-1 / 0) !$>= Null(5), Wrap(CastR4(-1 / 0)) !$>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @< Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$>= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(CastR4(-1/0)  @=  Opt(5r4), Wrap(CastR4(-1/0))  @=  Wrap(Opt(5r4)), CastR4(-1/0)  $=  Opt(5r4), Wrap(CastR4(-1/0))  $=  Wrap(Opt(5r4)))
Case(CastR4(-1 / 0) @= Opt(5), Wrap(CastR4(-1 / 0)) @= Wrap(Opt(5)), CastR4(-1 / 0) $= Opt(5), Wrap(CastR4(-1 / 0)) $= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0)  @<  Opt(5r4), Wrap(CastR4(-1/0))  @<  Wrap(Opt(5r4)), CastR4(-1/0)  $<  Opt(5r4), Wrap(CastR4(-1/0))  $<  Wrap(Opt(5r4)))
Case(CastR4(-1 / 0) @< Opt(5), Wrap(CastR4(-1 / 0)) @< Wrap(Opt(5)), CastR4(-1 / 0) $< Opt(5), Wrap(CastR4(-1 / 0)) $< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0)  @<= Opt(5r4), Wrap(CastR4(-1/0))  @<= Wrap(Opt(5r4)), CastR4(-1/0)  $<= Opt(5r4), Wrap(CastR4(-1/0))  $<= Wrap(Opt(5r4)))
Case(CastR4(-1 / 0) @<= Opt(5), Wrap(CastR4(-1 / 0)) @<= Wrap(Opt(5)), CastR4(-1 / 0) $<= Opt(5), Wrap(CastR4(-1 / 0)) $<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0)  @>  Opt(5r4), Wrap(CastR4(-1/0))  @>  Wrap(Opt(5r4)), CastR4(-1/0)  $>  Opt(5r4), Wrap(CastR4(-1/0))  $>  Wrap(Opt(5r4)))
Case(CastR4(-1 / 0) @> Opt(5), Wrap(CastR4(-1 / 0)) @> Wrap(Opt(5)), CastR4(-1 / 0) $> Opt(5), Wrap(CastR4(-1 / 0)) $> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0)  @>= Opt(5r4), Wrap(CastR4(-1/0))  @>= Wrap(Opt(5r4)), CastR4(-1/0)  $>= Opt(5r4), Wrap(CastR4(-1/0))  $>= Wrap(Opt(5r4)))
Case(CastR4(-1 / 0) @>= Opt(5), Wrap(CastR4(-1 / 0)) @>= Wrap(Opt(5)), CastR4(-1 / 0) $>= Opt(5), Wrap(CastR4(-1 / 0)) $>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) $>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0) !@=  Opt(5r4), Wrap(CastR4(-1/0)) !@=  Wrap(Opt(5r4)), CastR4(-1/0) !$=  Opt(5r4), Wrap(CastR4(-1/0)) !$=  Wrap(Opt(5r4)))
Case(CastR4(-1 / 0) !@= Opt(5), Wrap(CastR4(-1 / 0)) !@= Wrap(Opt(5)), CastR4(-1 / 0) !$= Opt(5), Wrap(CastR4(-1 / 0)) !$= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !@= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0) !@<  Opt(5r4), Wrap(CastR4(-1/0)) !@<  Wrap(Opt(5r4)), CastR4(-1/0) !$<  Opt(5r4), Wrap(CastR4(-1/0)) !$<  Wrap(Opt(5r4)))
Case(CastR4(-1 / 0) !@< Opt(5), Wrap(CastR4(-1 / 0)) !@< Wrap(Opt(5)), CastR4(-1 / 0) !$< Opt(5), Wrap(CastR4(-1 / 0)) !$< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0) !@<= Opt(5r4), Wrap(CastR4(-1/0)) !@<= Wrap(Opt(5r4)), CastR4(-1/0) !$<= Opt(5r4), Wrap(CastR4(-1/0)) !$<= Wrap(Opt(5r4)))
Case(CastR4(-1 / 0) !@<= Opt(5), Wrap(CastR4(-1 / 0)) !@<= Wrap(Opt(5)), CastR4(-1 / 0) !$<= Opt(5), Wrap(CastR4(-1 / 0)) !$<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(CastR4(-1/0) !@>  Opt(5r4), Wrap(CastR4(-1/0)) !@>  Wrap(Opt(5r4)), CastR4(-1/0) !$>  Opt(5r4), Wrap(CastR4(-1/0)) !$>  Wrap(Opt(5r4)))
Case(CastR4(-1 / 0) !@> Opt(5), Wrap(CastR4(-1 / 0)) !@> Wrap(Opt(5)), CastR4(-1 / 0) !$> Opt(5), Wrap(CastR4(-1 / 0)) !$> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(CastR4(-1/0) !@>= Opt(5r4), Wrap(CastR4(-1/0)) !@>= Wrap(Opt(5r4)), CastR4(-1/0) !$>= Opt(5r4), Wrap(CastR4(-1/0)) !$>= Wrap(Opt(5r4)))
Case(CastR4(-1 / 0) !@>= Opt(5), Wrap(CastR4(-1 / 0)) !@>= Wrap(Opt(5)), CastR4(-1 / 0) !$>= Opt(5), Wrap(CastR4(-1 / 0)) !$>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) @< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(-∞:r4):r4) !$>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4)  @=  5r4, Wrap(Null(3r4))  @=  Wrap(5r4), Null(3r4)  $=  5r4, Wrap(Null(3r4))  $=  Wrap(5r4))
Case(Null(3) @= 5, Wrap(Null(3)) @= Wrap(5), Null(3) $= 5, Wrap(Null(3)) $= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4)  @<  5r4, Wrap(Null(3r4))  @<  Wrap(5r4), Null(3r4)  $<  5r4, Wrap(Null(3r4))  $<  Wrap(5r4))
Case(Null(3) @< 5, Wrap(Null(3)) @< Wrap(5), Null(3) $< 5, Wrap(Null(3)) $< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @< Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $< Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r4)  @<= 5r4, Wrap(Null(3r4))  @<= Wrap(5r4), Null(3r4)  $<= 5r4, Wrap(Null(3r4))  $<= Wrap(5r4))
Case(Null(3) @<= 5, Wrap(Null(3)) @<= Wrap(5), Null(3) $<= 5, Wrap(Null(3)) $<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @<= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $<= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r4)  @>  5r4, Wrap(Null(3r4))  @>  Wrap(5r4), Null(3r4)  $>  5r4, Wrap(Null(3r4))  $>  Wrap(5r4))
Case(Null(3) @> 5, Wrap(Null(3)) @> Wrap(5), Null(3) $> 5, Wrap(Null(3)) $> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @> Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $> Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4)  @>= 5r4, Wrap(Null(3r4))  @>= Wrap(5r4), Null(3r4)  $>= 5r4, Wrap(Null(3r4))  $>= Wrap(5r4))
Case(Null(3) @>= 5, Wrap(Null(3)) @>= Wrap(5), Null(3) $>= 5, Wrap(Null(3)) $>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @>= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $>= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4) !@=  5r4, Wrap(Null(3r4)) !@=  Wrap(5r4), Null(3r4) !$=  5r4, Wrap(Null(3r4)) !$=  Wrap(5r4))
Case(Null(3) !@= 5, Wrap(Null(3)) !@= Wrap(5), Null(3) !$= 5, Wrap(Null(3)) !$= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !@= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4) !@<  5r4, Wrap(Null(3r4)) !@<  Wrap(5r4), Null(3r4) !$<  5r4, Wrap(Null(3r4)) !$<  Wrap(5r4))
Case(Null(3) !@< 5, Wrap(Null(3)) !@< Wrap(5), Null(3) !$< 5, Wrap(Null(3)) !$< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @>= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$< Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r4) !@<= 5r4, Wrap(Null(3r4)) !@<= Wrap(5r4), Null(3r4) !$<= 5r4, Wrap(Null(3r4)) !$<= Wrap(5r4))
Case(Null(3) !@<= 5, Wrap(Null(3)) !@<= Wrap(5), Null(3) !$<= 5, Wrap(Null(3)) !$<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @> Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$<= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r4) !@>  5r4, Wrap(Null(3r4)) !@>  Wrap(5r4), Null(3r4) !$>  5r4, Wrap(Null(3r4)) !$>  Wrap(5r4))
Case(Null(3) !@> 5, Wrap(Null(3)) !@> Wrap(5), Null(3) !$> 5, Wrap(Null(3)) !$> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @<= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$> Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4) !@>= 5r4, Wrap(Null(3r4)) !@>= Wrap(5r4), Null(3r4) !$>= 5r4, Wrap(Null(3r4)) !$>= Wrap(5r4))
Case(Null(3) !@>= 5, Wrap(Null(3)) !@>= Wrap(5), Null(3) !$>= 5, Wrap(Null(3)) !$>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @< Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$>= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4)  @=  CastR4(0/0), Wrap(Null(3r4))  @=  Wrap(CastR4(0/0)), Null(3r4)  $=  CastR4(0/0), Wrap(Null(3r4))  $=  Wrap(CastR4(0/0)))
Case(Null(3) @= CastR4(0 / 0), Wrap(Null(3)) @= Wrap(CastR4(0 / 0)), Null(3) $= CastR4(0 / 0), Wrap(Null(3)) $= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4)  @<  CastR4(0/0), Wrap(Null(3r4))  @<  Wrap(CastR4(0/0)), Null(3r4)  $<  CastR4(0/0), Wrap(Null(3r4))  $<  Wrap(CastR4(0/0)))
Case(Null(3) @< CastR4(0 / 0), Wrap(Null(3)) @< Wrap(CastR4(0 / 0)), Null(3) $< CastR4(0 / 0), Wrap(Null(3)) $< Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @< Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $< Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r4)  @<= CastR4(0/0), Wrap(Null(3r4))  @<= Wrap(CastR4(0/0)), Null(3r4)  $<= CastR4(0/0), Wrap(Null(3r4))  $<= Wrap(CastR4(0/0)))
Case(Null(3) @<= CastR4(0 / 0), Wrap(Null(3)) @<= Wrap(CastR4(0 / 0)), Null(3) $<= CastR4(0 / 0), Wrap(Null(3)) $<= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @<= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $<= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r4)  @>  CastR4(0/0), Wrap(Null(3r4))  @>  Wrap(CastR4(0/0)), Null(3r4)  $>  CastR4(0/0), Wrap(Null(3r4))  $>  Wrap(CastR4(0/0)))
Case(Null(3) @> CastR4(0 / 0), Wrap(Null(3)) @> Wrap(CastR4(0 / 0)), Null(3) $> CastR4(0 / 0), Wrap(Null(3)) $> Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @> Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $> Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4)  @>= CastR4(0/0), Wrap(Null(3r4))  @>= Wrap(CastR4(0/0)), Null(3r4)  $>= CastR4(0/0), Wrap(Null(3r4))  $>= Wrap(CastR4(0/0)))
Case(Null(3) @>= CastR4(0 / 0), Wrap(Null(3)) @>= Wrap(CastR4(0 / 0)), Null(3) $>= CastR4(0 / 0), Wrap(Null(3)) $>= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @>= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $>= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4) !@=  CastR4(0/0), Wrap(Null(3r4)) !@=  Wrap(CastR4(0/0)), Null(3r4) !$=  CastR4(0/0), Wrap(Null(3r4)) !$=  Wrap(CastR4(0/0)))
Case(Null(3) !@= CastR4(0 / 0), Wrap(Null(3)) !@= Wrap(CastR4(0 / 0)), Null(3) !$= CastR4(0 / 0), Wrap(Null(3)) !$= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !@= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4) !@<  CastR4(0/0), Wrap(Null(3r4)) !@<  Wrap(CastR4(0/0)), Null(3r4) !$<  CastR4(0/0), Wrap(Null(3r4)) !$<  Wrap(CastR4(0/0)))
Case(Null(3) !@< CastR4(0 / 0), Wrap(Null(3)) !@< Wrap(CastR4(0 / 0)), Null(3) !$< CastR4(0 / 0), Wrap(Null(3)) !$< Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @>= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$< Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r4) !@<= CastR4(0/0), Wrap(Null(3r4)) !@<= Wrap(CastR4(0/0)), Null(3r4) !$<= CastR4(0/0), Wrap(Null(3r4)) !$<= Wrap(CastR4(0/0)))
Case(Null(3) !@<= CastR4(0 / 0), Wrap(Null(3)) !@<= Wrap(CastR4(0 / 0)), Null(3) !$<= CastR4(0 / 0), Wrap(Null(3)) !$<= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @> Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$<= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r4) !@>  CastR4(0/0), Wrap(Null(3r4)) !@>  Wrap(CastR4(0/0)), Null(3r4) !$>  CastR4(0/0), Wrap(Null(3r4)) !$>  Wrap(CastR4(0/0)))
Case(Null(3) !@> CastR4(0 / 0), Wrap(Null(3)) !@> Wrap(CastR4(0 / 0)), Null(3) !$> CastR4(0 / 0), Wrap(Null(3)) !$> Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @<= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$> Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4) !@>= CastR4(0/0), Wrap(Null(3r4)) !@>= Wrap(CastR4(0/0)), Null(3r4) !$>= CastR4(0/0), Wrap(Null(3r4)) !$>= Wrap(CastR4(0/0)))
Case(Null(3) !@>= CastR4(0 / 0), Wrap(Null(3)) !@>= Wrap(CastR4(0 / 0)), Null(3) !$>= CastR4(0 / 0), Wrap(Null(3)) !$>= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @< Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$>= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4)  @=  CastR4(1/0), Wrap(Null(3r4))  @=  Wrap(CastR4(1/0)), Null(3r4)  $=  CastR4(1/0), Wrap(Null(3r4))  $=  Wrap(CastR4(1/0)))
Case(Null(3) @= CastR4(1 / 0), Wrap(Null(3)) @= Wrap(CastR4(1 / 0)), Null(3) $= CastR4(1 / 0), Wrap(Null(3)) $= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4)  @<  CastR4(1/0), Wrap(Null(3r4))  @<  Wrap(CastR4(1/0)), Null(3r4)  $<  CastR4(1/0), Wrap(Null(3r4))  $<  Wrap(CastR4(1/0)))
Case(Null(3) @< CastR4(1 / 0), Wrap(Null(3)) @< Wrap(CastR4(1 / 0)), Null(3) $< CastR4(1 / 0), Wrap(Null(3)) $< Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @< Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $< Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r4)  @<= CastR4(1/0), Wrap(Null(3r4))  @<= Wrap(CastR4(1/0)), Null(3r4)  $<= CastR4(1/0), Wrap(Null(3r4))  $<= Wrap(CastR4(1/0)))
Case(Null(3) @<= CastR4(1 / 0), Wrap(Null(3)) @<= Wrap(CastR4(1 / 0)), Null(3) $<= CastR4(1 / 0), Wrap(Null(3)) $<= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @<= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $<= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r4)  @>  CastR4(1/0), Wrap(Null(3r4))  @>  Wrap(CastR4(1/0)), Null(3r4)  $>  CastR4(1/0), Wrap(Null(3r4))  $>  Wrap(CastR4(1/0)))
Case(Null(3) @> CastR4(1 / 0), Wrap(Null(3)) @> Wrap(CastR4(1 / 0)), Null(3) $> CastR4(1 / 0), Wrap(Null(3)) $> Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @> Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $> Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4)  @>= CastR4(1/0), Wrap(Null(3r4))  @>= Wrap(CastR4(1/0)), Null(3r4)  $>= CastR4(1/0), Wrap(Null(3r4))  $>= Wrap(CastR4(1/0)))
Case(Null(3) @>= CastR4(1 / 0), Wrap(Null(3)) @>= Wrap(CastR4(1 / 0)), Null(3) $>= CastR4(1 / 0), Wrap(Null(3)) $>= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @>= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $>= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4) !@=  CastR4(1/0), Wrap(Null(3r4)) !@=  Wrap(CastR4(1/0)), Null(3r4) !$=  CastR4(1/0), Wrap(Null(3r4)) !$=  Wrap(CastR4(1/0)))
Case(Null(3) !@= CastR4(1 / 0), Wrap(Null(3)) !@= Wrap(CastR4(1 / 0)), Null(3) !$= CastR4(1 / 0), Wrap(Null(3)) !$= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !@= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4) !@<  CastR4(1/0), Wrap(Null(3r4)) !@<  Wrap(CastR4(1/0)), Null(3r4) !$<  CastR4(1/0), Wrap(Null(3r4)) !$<  Wrap(CastR4(1/0)))
Case(Null(3) !@< CastR4(1 / 0), Wrap(Null(3)) !@< Wrap(CastR4(1 / 0)), Null(3) !$< CastR4(1 / 0), Wrap(Null(3)) !$< Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @>= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$< Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r4) !@<= CastR4(1/0), Wrap(Null(3r4)) !@<= Wrap(CastR4(1/0)), Null(3r4) !$<= CastR4(1/0), Wrap(Null(3r4)) !$<= Wrap(CastR4(1/0)))
Case(Null(3) !@<= CastR4(1 / 0), Wrap(Null(3)) !@<= Wrap(CastR4(1 / 0)), Null(3) !$<= CastR4(1 / 0), Wrap(Null(3)) !$<= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @> Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$<= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r4) !@>  CastR4(1/0), Wrap(Null(3r4)) !@>  Wrap(CastR4(1/0)), Null(3r4) !$>  CastR4(1/0), Wrap(Null(3r4)) !$>  Wrap(CastR4(1/0)))
Case(Null(3) !@> CastR4(1 / 0), Wrap(Null(3)) !@> Wrap(CastR4(1 / 0)), Null(3) !$> CastR4(1 / 0), Wrap(Null(3)) !$> Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @<= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$> Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4) !@>= CastR4(1/0), Wrap(Null(3r4)) !@>= Wrap(CastR4(1/0)), Null(3r4) !$>= CastR4(1/0), Wrap(Null(3r4)) !$>= Wrap(CastR4(1/0)))
Case(Null(3) !@>= CastR4(1 / 0), Wrap(Null(3)) !@>= Wrap(CastR4(1 / 0)), Null(3) !$>= CastR4(1 / 0), Wrap(Null(3)) !$>= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @< Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$>= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4)  @=  CastR4(-1/0), Wrap(Null(3r4))  @=  Wrap(CastR4(-1/0)), Null(3r4)  $=  CastR4(-1/0), Wrap(Null(3r4))  $=  Wrap(CastR4(-1/0)))
Case(Null(3) @= CastR4(-1 / 0), Wrap(Null(3)) @= Wrap(CastR4(-1 / 0)), Null(3) $= CastR4(-1 / 0), Wrap(Null(3)) $= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4)  @<  CastR4(-1/0), Wrap(Null(3r4))  @<  Wrap(CastR4(-1/0)), Null(3r4)  $<  CastR4(-1/0), Wrap(Null(3r4))  $<  Wrap(CastR4(-1/0)))
Case(Null(3) @< CastR4(-1 / 0), Wrap(Null(3)) @< Wrap(CastR4(-1 / 0)), Null(3) $< CastR4(-1 / 0), Wrap(Null(3)) $< Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @< Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $< Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r4)  @<= CastR4(-1/0), Wrap(Null(3r4))  @<= Wrap(CastR4(-1/0)), Null(3r4)  $<= CastR4(-1/0), Wrap(Null(3r4))  $<= Wrap(CastR4(-1/0)))
Case(Null(3) @<= CastR4(-1 / 0), Wrap(Null(3)) @<= Wrap(CastR4(-1 / 0)), Null(3) $<= CastR4(-1 / 0), Wrap(Null(3)) $<= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @<= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $<= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r4)  @>  CastR4(-1/0), Wrap(Null(3r4))  @>  Wrap(CastR4(-1/0)), Null(3r4)  $>  CastR4(-1/0), Wrap(Null(3r4))  $>  Wrap(CastR4(-1/0)))
Case(Null(3) @> CastR4(-1 / 0), Wrap(Null(3)) @> Wrap(CastR4(-1 / 0)), Null(3) $> CastR4(-1 / 0), Wrap(Null(3)) $> Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @> Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $> Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4)  @>= CastR4(-1/0), Wrap(Null(3r4))  @>= Wrap(CastR4(-1/0)), Null(3r4)  $>= CastR4(-1/0), Wrap(Null(3r4))  $>= Wrap(CastR4(-1/0)))
Case(Null(3) @>= CastR4(-1 / 0), Wrap(Null(3)) @>= Wrap(CastR4(-1 / 0)), Null(3) $>= CastR4(-1 / 0), Wrap(Null(3)) $>= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @>= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $>= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4) !@=  CastR4(-1/0), Wrap(Null(3r4)) !@=  Wrap(CastR4(-1/0)), Null(3r4) !$=  CastR4(-1/0), Wrap(Null(3r4)) !$=  Wrap(CastR4(-1/0)))
Case(Null(3) !@= CastR4(-1 / 0), Wrap(Null(3)) !@= Wrap(CastR4(-1 / 0)), Null(3) !$= CastR4(-1 / 0), Wrap(Null(3)) !$= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !@= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4) !@<  CastR4(-1/0), Wrap(Null(3r4)) !@<  Wrap(CastR4(-1/0)), Null(3r4) !$<  CastR4(-1/0), Wrap(Null(3r4)) !$<  Wrap(CastR4(-1/0)))
Case(Null(3) !@< CastR4(-1 / 0), Wrap(Null(3)) !@< Wrap(CastR4(-1 / 0)), Null(3) !$< CastR4(-1 / 0), Wrap(Null(3)) !$< Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @>= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$< Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r4) !@<= CastR4(-1/0), Wrap(Null(3r4)) !@<= Wrap(CastR4(-1/0)), Null(3r4) !$<= CastR4(-1/0), Wrap(Null(3r4)) !$<= Wrap(CastR4(-1/0)))
Case(Null(3) !@<= CastR4(-1 / 0), Wrap(Null(3)) !@<= Wrap(CastR4(-1 / 0)), Null(3) !$<= CastR4(-1 / 0), Wrap(Null(3)) !$<= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @> Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$<= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r4) !@>  CastR4(-1/0), Wrap(Null(3r4)) !@>  Wrap(CastR4(-1/0)), Null(3r4) !$>  CastR4(-1/0), Wrap(Null(3r4)) !$>  Wrap(CastR4(-1/0)))
Case(Null(3) !@> CastR4(-1 / 0), Wrap(Null(3)) !@> Wrap(CastR4(-1 / 0)), Null(3) !$> CastR4(-1 / 0), Wrap(Null(3)) !$> Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @<= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$> Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4) !@>= CastR4(-1/0), Wrap(Null(3r4)) !@>= Wrap(CastR4(-1/0)), Null(3r4) !$>= CastR4(-1/0), Wrap(Null(3r4)) !$>= Wrap(CastR4(-1/0)))
Case(Null(3) !@>= CastR4(-1 / 0), Wrap(Null(3)) !@>= Wrap(CastR4(-1 / 0)), Null(3) !$>= CastR4(-1 / 0), Wrap(Null(3)) !$>= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @< Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$>= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4)  @=  Null(5r4), Wrap(Null(3r4))  @=  Wrap(Null(5r4)), Null(3r4)  $=  Null(5r4), Wrap(Null(3r4))  $=  Wrap(Null(5r4)))
Case(Null(3) @= Null(5), Wrap(Null(3)) @= Wrap(Null(5)), Null(3) $= Null(5), Wrap(Null(3)) $= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r4)  @<  Null(5r4), Wrap(Null(3r4))  @<  Wrap(Null(5r4)), Null(3r4)  $<  Null(5r4), Wrap(Null(3r4))  $<  Wrap(Null(5r4)))
Case(Null(3) @< Null(5), Wrap(Null(3)) @< Wrap(Null(5)), Null(3) $< Null(5), Wrap(Null(3)) $< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @< Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $< Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4)  @<= Null(5r4), Wrap(Null(3r4))  @<= Wrap(Null(5r4)), Null(3r4)  $<= Null(5r4), Wrap(Null(3r4))  $<= Wrap(Null(5r4)))
Case(Null(3) @<= Null(5), Wrap(Null(3)) @<= Wrap(Null(5)), Null(3) $<= Null(5), Wrap(Null(3)) $<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @<= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $<= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r4)  @>  Null(5r4), Wrap(Null(3r4))  @>  Wrap(Null(5r4)), Null(3r4)  $>  Null(5r4), Wrap(Null(3r4))  $>  Wrap(Null(5r4)))
Case(Null(3) @> Null(5), Wrap(Null(3)) @> Wrap(Null(5)), Null(3) $> Null(5), Wrap(Null(3)) $> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @> Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $> Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4)  @>= Null(5r4), Wrap(Null(3r4))  @>= Wrap(Null(5r4)), Null(3r4)  $>= Null(5r4), Wrap(Null(3r4))  $>= Wrap(Null(5r4)))
Case(Null(3) @>= Null(5), Wrap(Null(3)) @>= Wrap(Null(5)), Null(3) $>= Null(5), Wrap(Null(3)) $>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @>= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $>= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r4) !@=  Null(5r4), Wrap(Null(3r4)) !@=  Wrap(Null(5r4)), Null(3r4) !$=  Null(5r4), Wrap(Null(3r4)) !$=  Wrap(Null(5r4)))
Case(Null(3) !@= Null(5), Wrap(Null(3)) !@= Wrap(Null(5)), Null(3) !$= Null(5), Wrap(Null(3)) !$= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !@= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r4) !@<  Null(5r4), Wrap(Null(3r4)) !@<  Wrap(Null(5r4)), Null(3r4) !$<  Null(5r4), Wrap(Null(3r4)) !$<  Wrap(Null(5r4)))
Case(Null(3) !@< Null(5), Wrap(Null(3)) !@< Wrap(Null(5)), Null(3) !$< Null(5), Wrap(Null(3)) !$< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @>= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$< Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4) !@<= Null(5r4), Wrap(Null(3r4)) !@<= Wrap(Null(5r4)), Null(3r4) !$<= Null(5r4), Wrap(Null(3r4)) !$<= Wrap(Null(5r4)))
Case(Null(3) !@<= Null(5), Wrap(Null(3)) !@<= Wrap(Null(5)), Null(3) !$<= Null(5), Wrap(Null(3)) !$<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @> Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$<= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r4) !@>  Null(5r4), Wrap(Null(3r4)) !@>  Wrap(Null(5r4)), Null(3r4) !$>  Null(5r4), Wrap(Null(3r4)) !$>  Wrap(Null(5r4)))
Case(Null(3) !@> Null(5), Wrap(Null(3)) !@> Wrap(Null(5)), Null(3) !$> Null(5), Wrap(Null(3)) !$> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @<= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$> Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4) !@>= Null(5r4), Wrap(Null(3r4)) !@>= Wrap(Null(5r4)), Null(3r4) !$>= Null(5r4), Wrap(Null(3r4)) !$>= Wrap(Null(5r4)))
Case(Null(3) !@>= Null(5), Wrap(Null(3)) !@>= Wrap(Null(5)), Null(3) !$>= Null(5), Wrap(Null(3)) !$>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @< Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$>= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r4)  @=  Opt(5r4), Wrap(Null(3r4))  @=  Wrap(Opt(5r4)), Null(3r4)  $=  Opt(5r4), Wrap(Null(3r4))  $=  Wrap(Opt(5r4)))
Case(Null(3) @= Opt(5), Wrap(Null(3)) @= Wrap(Opt(5)), Null(3) $= Opt(5), Wrap(Null(3)) $= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4)  @<  Opt(5r4), Wrap(Null(3r4))  @<  Wrap(Opt(5r4)), Null(3r4)  $<  Opt(5r4), Wrap(Null(3r4))  $<  Wrap(Opt(5r4)))
Case(Null(3) @< Opt(5), Wrap(Null(3)) @< Wrap(Opt(5)), Null(3) $< Opt(5), Wrap(Null(3)) $< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r4)  @<= Opt(5r4), Wrap(Null(3r4))  @<= Wrap(Opt(5r4)), Null(3r4)  $<= Opt(5r4), Wrap(Null(3r4))  $<= Wrap(Opt(5r4)))
Case(Null(3) @<= Opt(5), Wrap(Null(3)) @<= Wrap(Opt(5)), Null(3) $<= Opt(5), Wrap(Null(3)) $<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Null(3r4)  @>  Opt(5r4), Wrap(Null(3r4))  @>  Wrap(Opt(5r4)), Null(3r4)  $>  Opt(5r4), Wrap(Null(3r4))  $>  Wrap(Opt(5r4)))
Case(Null(3) @> Opt(5), Wrap(Null(3)) @> Wrap(Opt(5)), Null(3) $> Opt(5), Wrap(Null(3)) $> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4)  @>= Opt(5r4), Wrap(Null(3r4))  @>= Wrap(Opt(5r4)), Null(3r4)  $>= Opt(5r4), Wrap(Null(3r4))  $>= Wrap(Opt(5r4)))
Case(Null(3) @>= Opt(5), Wrap(Null(3)) @>= Wrap(Opt(5)), Null(3) $>= Opt(5), Wrap(Null(3)) $>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) $>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Null(3r4) !@=  Opt(5r4), Wrap(Null(3r4)) !@=  Wrap(Opt(5r4)), Null(3r4) !$=  Opt(5r4), Wrap(Null(3r4)) !$=  Wrap(Opt(5r4)))
Case(Null(3) !@= Opt(5), Wrap(Null(3)) !@= Wrap(Opt(5)), Null(3) !$= Opt(5), Wrap(Null(3)) !$= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !@= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4) !@<  Opt(5r4), Wrap(Null(3r4)) !@<  Wrap(Opt(5r4)), Null(3r4) !$<  Opt(5r4), Wrap(Null(3r4)) !$<  Wrap(Opt(5r4)))
Case(Null(3) !@< Opt(5), Wrap(Null(3)) !@< Wrap(Opt(5)), Null(3) !$< Opt(5), Wrap(Null(3)) !$< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r4) !@<= Opt(5r4), Wrap(Null(3r4)) !@<= Wrap(Opt(5r4)), Null(3r4) !$<= Opt(5r4), Wrap(Null(3r4)) !$<= Wrap(Opt(5r4)))
Case(Null(3) !@<= Opt(5), Wrap(Null(3)) !@<= Wrap(Opt(5)), Null(3) !$<= Opt(5), Wrap(Null(3)) !$<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Null(3r4) !@>  Opt(5r4), Wrap(Null(3r4)) !@>  Wrap(Opt(5r4)), Null(3r4) !$>  Opt(5r4), Wrap(Null(3r4)) !$>  Wrap(Opt(5r4)))
Case(Null(3) !@> Opt(5), Wrap(Null(3)) !@> Wrap(Opt(5)), Null(3) !$> Opt(5), Wrap(Null(3)) !$> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Null(3r4) !@>= Opt(5r4), Wrap(Null(3r4)) !@>= Wrap(Opt(5r4)), Null(3r4) !$>= Opt(5r4), Wrap(Null(3r4)) !$>= Wrap(Opt(5r4)))
Case(Null(3) !@>= Opt(5), Wrap(Null(3)) !@>= Wrap(Opt(5)), Null(3) !$>= Opt(5), Wrap(Null(3)) !$>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) @< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(null:r4?):r4?) !$>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4)  @=  5r4, Wrap(Opt(3r4))  @=  Wrap(5r4), Opt(3r4)  $=  5r4, Wrap(Opt(3r4))  $=  Wrap(5r4))
Case(Opt(3) @= 5, Wrap(Opt(3)) @= Wrap(5), Opt(3) $= 5, Wrap(Opt(3)) $= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4)  @<  5r4, Wrap(Opt(3r4))  @<  Wrap(5r4), Opt(3r4)  $<  5r4, Wrap(Opt(3r4))  $<  Wrap(5r4))
Case(Opt(3) @< 5, Wrap(Opt(3)) @< Wrap(5), Opt(3) $< 5, Wrap(Opt(3)) $< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @< Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $< Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4)  @<= 5r4, Wrap(Opt(3r4))  @<= Wrap(5r4), Opt(3r4)  $<= 5r4, Wrap(Opt(3r4))  $<= Wrap(5r4))
Case(Opt(3) @<= 5, Wrap(Opt(3)) @<= Wrap(5), Opt(3) $<= 5, Wrap(Opt(3)) $<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @<= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $<= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4)  @>  5r4, Wrap(Opt(3r4))  @>  Wrap(5r4), Opt(3r4)  $>  5r4, Wrap(Opt(3r4))  $>  Wrap(5r4))
Case(Opt(3) @> 5, Wrap(Opt(3)) @> Wrap(5), Opt(3) $> 5, Wrap(Opt(3)) $> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @> Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $> Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4)  @>= 5r4, Wrap(Opt(3r4))  @>= Wrap(5r4), Opt(3r4)  $>= 5r4, Wrap(Opt(3r4))  $>= Wrap(5r4))
Case(Opt(3) @>= 5, Wrap(Opt(3)) @>= Wrap(5), Opt(3) $>= 5, Wrap(Opt(3)) $>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @>= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $>= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4) !@=  5r4, Wrap(Opt(3r4)) !@=  Wrap(5r4), Opt(3r4) !$=  5r4, Wrap(Opt(3r4)) !$=  Wrap(5r4))
Case(Opt(3) !@= 5, Wrap(Opt(3)) !@= Wrap(5), Opt(3) !$= 5, Wrap(Opt(3)) !$= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !@= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4) !@<  5r4, Wrap(Opt(3r4)) !@<  Wrap(5r4), Opt(3r4) !$<  5r4, Wrap(Opt(3r4)) !$<  Wrap(5r4))
Case(Opt(3) !@< 5, Wrap(Opt(3)) !@< Wrap(5), Opt(3) !$< 5, Wrap(Opt(3)) !$< Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @>= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$< Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4) !@<= 5r4, Wrap(Opt(3r4)) !@<= Wrap(5r4), Opt(3r4) !$<= 5r4, Wrap(Opt(3r4)) !$<= Wrap(5r4))
Case(Opt(3) !@<= 5, Wrap(Opt(3)) !@<= Wrap(5), Opt(3) !$<= 5, Wrap(Opt(3)) !$<= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @> Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$<= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4) !@>  5r4, Wrap(Opt(3r4)) !@>  Wrap(5r4), Opt(3r4) !$>  5r4, Wrap(Opt(3r4)) !$>  Wrap(5r4))
Case(Opt(3) !@> 5, Wrap(Opt(3)) !@> Wrap(5), Opt(3) !$> 5, Wrap(Opt(3)) !$> Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @<= Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$> Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4) !@>= 5r4, Wrap(Opt(3r4)) !@>= Wrap(5r4), Opt(3r4) !$>= 5r4, Wrap(Opt(3r4)) !$>= Wrap(5r4))
Case(Opt(3) !@>= 5, Wrap(Opt(3)) !@>= Wrap(5), Opt(3) !$>= 5, Wrap(Opt(3)) !$>= Wrap(5)) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @< Call(∂.Test.Wrap(5:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$>= Call(∂.Test.Wrap(5:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4)  @=  CastR4(0/0), Wrap(Opt(3r4))  @=  Wrap(CastR4(0/0)), Opt(3r4)  $=  CastR4(0/0), Wrap(Opt(3r4))  $=  Wrap(CastR4(0/0)))
Case(Opt(3) @= CastR4(0 / 0), Wrap(Opt(3)) @= Wrap(CastR4(0 / 0)), Opt(3) $= CastR4(0 / 0), Wrap(Opt(3)) $= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4)  @<  CastR4(0/0), Wrap(Opt(3r4))  @<  Wrap(CastR4(0/0)), Opt(3r4)  $<  CastR4(0/0), Wrap(Opt(3r4))  $<  Wrap(CastR4(0/0)))
Case(Opt(3) @< CastR4(0 / 0), Wrap(Opt(3)) @< Wrap(CastR4(0 / 0)), Opt(3) $< CastR4(0 / 0), Wrap(Opt(3)) $< Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @< Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $< Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4)  @<= CastR4(0/0), Wrap(Opt(3r4))  @<= Wrap(CastR4(0/0)), Opt(3r4)  $<= CastR4(0/0), Wrap(Opt(3r4))  $<= Wrap(CastR4(0/0)))
Case(Opt(3) @<= CastR4(0 / 0), Wrap(Opt(3)) @<= Wrap(CastR4(0 / 0)), Opt(3) $<= CastR4(0 / 0), Wrap(Opt(3)) $<= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @<= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $<= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4)  @>  CastR4(0/0), Wrap(Opt(3r4))  @>  Wrap(CastR4(0/0)), Opt(3r4)  $>  CastR4(0/0), Wrap(Opt(3r4))  $>  Wrap(CastR4(0/0)))
Case(Opt(3) @> CastR4(0 / 0), Wrap(Opt(3)) @> Wrap(CastR4(0 / 0)), Opt(3) $> CastR4(0 / 0), Wrap(Opt(3)) $> Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @> Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $> Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Opt(3r4)  @>= CastR4(0/0), Wrap(Opt(3r4))  @>= Wrap(CastR4(0/0)), Opt(3r4)  $>= CastR4(0/0), Wrap(Opt(3r4))  $>= Wrap(CastR4(0/0)))
Case(Opt(3) @>= CastR4(0 / 0), Wrap(Opt(3)) @>= Wrap(CastR4(0 / 0)), Opt(3) $>= CastR4(0 / 0), Wrap(Opt(3)) $>= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @>= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $>= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Opt(3r4) !@=  CastR4(0/0), Wrap(Opt(3r4)) !@=  Wrap(CastR4(0/0)), Opt(3r4) !$=  CastR4(0/0), Wrap(Opt(3r4)) !$=  Wrap(CastR4(0/0)))
Case(Opt(3) !@= CastR4(0 / 0), Wrap(Opt(3)) !@= Wrap(CastR4(0 / 0)), Opt(3) !$= CastR4(0 / 0), Wrap(Opt(3)) !$= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !@= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4) !@<  CastR4(0/0), Wrap(Opt(3r4)) !@<  Wrap(CastR4(0/0)), Opt(3r4) !$<  CastR4(0/0), Wrap(Opt(3r4)) !$<  Wrap(CastR4(0/0)))
Case(Opt(3) !@< CastR4(0 / 0), Wrap(Opt(3)) !@< Wrap(CastR4(0 / 0)), Opt(3) !$< CastR4(0 / 0), Wrap(Opt(3)) !$< Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @>= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$< Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4) !@<= CastR4(0/0), Wrap(Opt(3r4)) !@<= Wrap(CastR4(0/0)), Opt(3r4) !$<= CastR4(0/0), Wrap(Opt(3r4)) !$<= Wrap(CastR4(0/0)))
Case(Opt(3) !@<= CastR4(0 / 0), Wrap(Opt(3)) !@<= Wrap(CastR4(0 / 0)), Opt(3) !$<= CastR4(0 / 0), Wrap(Opt(3)) !$<= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @> Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$<= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4) !@>  CastR4(0/0), Wrap(Opt(3r4)) !@>  Wrap(CastR4(0/0)), Opt(3r4) !$>  CastR4(0/0), Wrap(Opt(3r4)) !$>  Wrap(CastR4(0/0)))
Case(Opt(3) !@> CastR4(0 / 0), Wrap(Opt(3)) !@> Wrap(CastR4(0 / 0)), Opt(3) !$> CastR4(0 / 0), Wrap(Opt(3)) !$> Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @<= Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$> Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Opt(3r4) !@>= CastR4(0/0), Wrap(Opt(3r4)) !@>= Wrap(CastR4(0/0)), Opt(3r4) !$>= CastR4(0/0), Wrap(Opt(3r4)) !$>= Wrap(CastR4(0/0)))
Case(Opt(3) !@>= CastR4(0 / 0), Wrap(Opt(3)) !@>= Wrap(CastR4(0 / 0)), Opt(3) !$>= CastR4(0 / 0), Wrap(Opt(3)) !$>= Wrap(CastR4(0 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @< Call(∂.Test.Wrap(NaN:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$>= Call(∂.Test.Wrap(NaN:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Opt(3r4)  @=  CastR4(1/0), Wrap(Opt(3r4))  @=  Wrap(CastR4(1/0)), Opt(3r4)  $=  CastR4(1/0), Wrap(Opt(3r4))  $=  Wrap(CastR4(1/0)))
Case(Opt(3) @= CastR4(1 / 0), Wrap(Opt(3)) @= Wrap(CastR4(1 / 0)), Opt(3) $= CastR4(1 / 0), Wrap(Opt(3)) $= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4)  @<  CastR4(1/0), Wrap(Opt(3r4))  @<  Wrap(CastR4(1/0)), Opt(3r4)  $<  CastR4(1/0), Wrap(Opt(3r4))  $<  Wrap(CastR4(1/0)))
Case(Opt(3) @< CastR4(1 / 0), Wrap(Opt(3)) @< Wrap(CastR4(1 / 0)), Opt(3) $< CastR4(1 / 0), Wrap(Opt(3)) $< Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @< Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $< Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4)  @<= CastR4(1/0), Wrap(Opt(3r4))  @<= Wrap(CastR4(1/0)), Opt(3r4)  $<= CastR4(1/0), Wrap(Opt(3r4))  $<= Wrap(CastR4(1/0)))
Case(Opt(3) @<= CastR4(1 / 0), Wrap(Opt(3)) @<= Wrap(CastR4(1 / 0)), Opt(3) $<= CastR4(1 / 0), Wrap(Opt(3)) $<= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @<= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $<= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4)  @>  CastR4(1/0), Wrap(Opt(3r4))  @>  Wrap(CastR4(1/0)), Opt(3r4)  $>  CastR4(1/0), Wrap(Opt(3r4))  $>  Wrap(CastR4(1/0)))
Case(Opt(3) @> CastR4(1 / 0), Wrap(Opt(3)) @> Wrap(CastR4(1 / 0)), Opt(3) $> CastR4(1 / 0), Wrap(Opt(3)) $> Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @> Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $> Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4)  @>= CastR4(1/0), Wrap(Opt(3r4))  @>= Wrap(CastR4(1/0)), Opt(3r4)  $>= CastR4(1/0), Wrap(Opt(3r4))  $>= Wrap(CastR4(1/0)))
Case(Opt(3) @>= CastR4(1 / 0), Wrap(Opt(3)) @>= Wrap(CastR4(1 / 0)), Opt(3) $>= CastR4(1 / 0), Wrap(Opt(3)) $>= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @>= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $>= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4) !@=  CastR4(1/0), Wrap(Opt(3r4)) !@=  Wrap(CastR4(1/0)), Opt(3r4) !$=  CastR4(1/0), Wrap(Opt(3r4)) !$=  Wrap(CastR4(1/0)))
Case(Opt(3) !@= CastR4(1 / 0), Wrap(Opt(3)) !@= Wrap(CastR4(1 / 0)), Opt(3) !$= CastR4(1 / 0), Wrap(Opt(3)) !$= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !@= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4) !@<  CastR4(1/0), Wrap(Opt(3r4)) !@<  Wrap(CastR4(1/0)), Opt(3r4) !$<  CastR4(1/0), Wrap(Opt(3r4)) !$<  Wrap(CastR4(1/0)))
Case(Opt(3) !@< CastR4(1 / 0), Wrap(Opt(3)) !@< Wrap(CastR4(1 / 0)), Opt(3) !$< CastR4(1 / 0), Wrap(Opt(3)) !$< Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @>= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$< Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4) !@<= CastR4(1/0), Wrap(Opt(3r4)) !@<= Wrap(CastR4(1/0)), Opt(3r4) !$<= CastR4(1/0), Wrap(Opt(3r4)) !$<= Wrap(CastR4(1/0)))
Case(Opt(3) !@<= CastR4(1 / 0), Wrap(Opt(3)) !@<= Wrap(CastR4(1 / 0)), Opt(3) !$<= CastR4(1 / 0), Wrap(Opt(3)) !$<= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @> Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$<= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4) !@>  CastR4(1/0), Wrap(Opt(3r4)) !@>  Wrap(CastR4(1/0)), Opt(3r4) !$>  CastR4(1/0), Wrap(Opt(3r4)) !$>  Wrap(CastR4(1/0)))
Case(Opt(3) !@> CastR4(1 / 0), Wrap(Opt(3)) !@> Wrap(CastR4(1 / 0)), Opt(3) !$> CastR4(1 / 0), Wrap(Opt(3)) !$> Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @<= Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$> Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4) !@>= CastR4(1/0), Wrap(Opt(3r4)) !@>= Wrap(CastR4(1/0)), Opt(3r4) !$>= CastR4(1/0), Wrap(Opt(3r4)) !$>= Wrap(CastR4(1/0)))
Case(Opt(3) !@>= CastR4(1 / 0), Wrap(Opt(3)) !@>= Wrap(CastR4(1 / 0)), Opt(3) !$>= CastR4(1 / 0), Wrap(Opt(3)) !$>= Wrap(CastR4(1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @< Call(∂.Test.Wrap(∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$>= Call(∂.Test.Wrap(∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4)  @=  CastR4(-1/0), Wrap(Opt(3r4))  @=  Wrap(CastR4(-1/0)), Opt(3r4)  $=  CastR4(-1/0), Wrap(Opt(3r4))  $=  Wrap(CastR4(-1/0)))
Case(Opt(3) @= CastR4(-1 / 0), Wrap(Opt(3)) @= Wrap(CastR4(-1 / 0)), Opt(3) $= CastR4(-1 / 0), Wrap(Opt(3)) $= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4)  @<  CastR4(-1/0), Wrap(Opt(3r4))  @<  Wrap(CastR4(-1/0)), Opt(3r4)  $<  CastR4(-1/0), Wrap(Opt(3r4))  $<  Wrap(CastR4(-1/0)))
Case(Opt(3) @< CastR4(-1 / 0), Wrap(Opt(3)) @< Wrap(CastR4(-1 / 0)), Opt(3) $< CastR4(-1 / 0), Wrap(Opt(3)) $< Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @< Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $< Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4)  @<= CastR4(-1/0), Wrap(Opt(3r4))  @<= Wrap(CastR4(-1/0)), Opt(3r4)  $<= CastR4(-1/0), Wrap(Opt(3r4))  $<= Wrap(CastR4(-1/0)))
Case(Opt(3) @<= CastR4(-1 / 0), Wrap(Opt(3)) @<= Wrap(CastR4(-1 / 0)), Opt(3) $<= CastR4(-1 / 0), Wrap(Opt(3)) $<= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @<= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $<= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4)  @>  CastR4(-1/0), Wrap(Opt(3r4))  @>  Wrap(CastR4(-1/0)), Opt(3r4)  $>  CastR4(-1/0), Wrap(Opt(3r4))  $>  Wrap(CastR4(-1/0)))
Case(Opt(3) @> CastR4(-1 / 0), Wrap(Opt(3)) @> Wrap(CastR4(-1 / 0)), Opt(3) $> CastR4(-1 / 0), Wrap(Opt(3)) $> Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @> Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $> Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4)  @>= CastR4(-1/0), Wrap(Opt(3r4))  @>= Wrap(CastR4(-1/0)), Opt(3r4)  $>= CastR4(-1/0), Wrap(Opt(3r4))  $>= Wrap(CastR4(-1/0)))
Case(Opt(3) @>= CastR4(-1 / 0), Wrap(Opt(3)) @>= Wrap(CastR4(-1 / 0)), Opt(3) $>= CastR4(-1 / 0), Wrap(Opt(3)) $>= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @>= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $>= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4) !@=  CastR4(-1/0), Wrap(Opt(3r4)) !@=  Wrap(CastR4(-1/0)), Opt(3r4) !$=  CastR4(-1/0), Wrap(Opt(3r4)) !$=  Wrap(CastR4(-1/0)))
Case(Opt(3) !@= CastR4(-1 / 0), Wrap(Opt(3)) !@= Wrap(CastR4(-1 / 0)), Opt(3) !$= CastR4(-1 / 0), Wrap(Opt(3)) !$= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !@= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4) !@<  CastR4(-1/0), Wrap(Opt(3r4)) !@<  Wrap(CastR4(-1/0)), Opt(3r4) !$<  CastR4(-1/0), Wrap(Opt(3r4)) !$<  Wrap(CastR4(-1/0)))
Case(Opt(3) !@< CastR4(-1 / 0), Wrap(Opt(3)) !@< Wrap(CastR4(-1 / 0)), Opt(3) !$< CastR4(-1 / 0), Wrap(Opt(3)) !$< Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @>= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$< Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4) !@<= CastR4(-1/0), Wrap(Opt(3r4)) !@<= Wrap(CastR4(-1/0)), Opt(3r4) !$<= CastR4(-1/0), Wrap(Opt(3r4)) !$<= Wrap(CastR4(-1/0)))
Case(Opt(3) !@<= CastR4(-1 / 0), Wrap(Opt(3)) !@<= Wrap(CastR4(-1 / 0)), Opt(3) !$<= CastR4(-1 / 0), Wrap(Opt(3)) !$<= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @> Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$<= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4) !@>  CastR4(-1/0), Wrap(Opt(3r4)) !@>  Wrap(CastR4(-1/0)), Opt(3r4) !$>  CastR4(-1/0), Wrap(Opt(3r4)) !$>  Wrap(CastR4(-1/0)))
Case(Opt(3) !@> CastR4(-1 / 0), Wrap(Opt(3)) !@> Wrap(CastR4(-1 / 0)), Opt(3) !$> CastR4(-1 / 0), Wrap(Opt(3)) !$> Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @<= Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$> Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4) !@>= CastR4(-1/0), Wrap(Opt(3r4)) !@>= Wrap(CastR4(-1/0)), Opt(3r4) !$>= CastR4(-1/0), Wrap(Opt(3r4)) !$>= Wrap(CastR4(-1/0)))
Case(Opt(3) !@>= CastR4(-1 / 0), Wrap(Opt(3)) !@>= Wrap(CastR4(-1 / 0)), Opt(3) !$>= CastR4(-1 / 0), Wrap(Opt(3)) !$>= Wrap(CastR4(-1 / 0))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @< Call(∂.Test.Wrap(-∞:r4):r4)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$>= Call(∂.Test.Wrap(-∞:r4):r4)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4)  @=  Null(5r4), Wrap(Opt(3r4))  @=  Wrap(Null(5r4)), Opt(3r4)  $=  Null(5r4), Wrap(Opt(3r4))  $=  Wrap(Null(5r4)))
Case(Opt(3) @= Null(5), Wrap(Opt(3)) @= Wrap(Null(5)), Opt(3) $= Null(5), Wrap(Opt(3)) $= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4)  @<  Null(5r4), Wrap(Opt(3r4))  @<  Wrap(Null(5r4)), Opt(3r4)  $<  Null(5r4), Wrap(Opt(3r4))  $<  Wrap(Null(5r4)))
Case(Opt(3) @< Null(5), Wrap(Opt(3)) @< Wrap(Null(5)), Opt(3) $< Null(5), Wrap(Opt(3)) $< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @< Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $< Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4)  @<= Null(5r4), Wrap(Opt(3r4))  @<= Wrap(Null(5r4)), Opt(3r4)  $<= Null(5r4), Wrap(Opt(3r4))  $<= Wrap(Null(5r4)))
Case(Opt(3) @<= Null(5), Wrap(Opt(3)) @<= Wrap(Null(5)), Opt(3) $<= Null(5), Wrap(Opt(3)) $<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @<= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $<= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4)  @>  Null(5r4), Wrap(Opt(3r4))  @>  Wrap(Null(5r4)), Opt(3r4)  $>  Null(5r4), Wrap(Opt(3r4))  $>  Wrap(Null(5r4)))
Case(Opt(3) @> Null(5), Wrap(Opt(3)) @> Wrap(Null(5)), Opt(3) $> Null(5), Wrap(Opt(3)) $> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @> Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $> Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Opt(3r4)  @>= Null(5r4), Wrap(Opt(3r4))  @>= Wrap(Null(5r4)), Opt(3r4)  $>= Null(5r4), Wrap(Opt(3r4))  $>= Wrap(Null(5r4)))
Case(Opt(3) @>= Null(5), Wrap(Opt(3)) @>= Wrap(Null(5)), Opt(3) $>= Null(5), Wrap(Opt(3)) $>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @>= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $>= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , false, false)
###
> Case(Opt(3r4) !@=  Null(5r4), Wrap(Opt(3r4)) !@=  Wrap(Null(5r4)), Opt(3r4) !$=  Null(5r4), Wrap(Opt(3r4)) !$=  Wrap(Null(5r4)))
Case(Opt(3) !@= Null(5), Wrap(Opt(3)) !@= Wrap(Null(5)), Opt(3) !$= Null(5), Wrap(Opt(3)) !$= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !@= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4) !@<  Null(5r4), Wrap(Opt(3r4)) !@<  Wrap(Null(5r4)), Opt(3r4) !$<  Null(5r4), Wrap(Opt(3r4)) !$<  Wrap(Null(5r4)))
Case(Opt(3) !@< Null(5), Wrap(Opt(3)) !@< Wrap(Null(5)), Opt(3) !$< Null(5), Wrap(Opt(3)) !$< Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @>= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$< Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4) !@<= Null(5r4), Wrap(Opt(3r4)) !@<= Wrap(Null(5r4)), Opt(3r4) !$<= Null(5r4), Wrap(Opt(3r4)) !$<= Wrap(Null(5r4)))
Case(Opt(3) !@<= Null(5), Wrap(Opt(3)) !@<= Wrap(Null(5)), Opt(3) !$<= Null(5), Wrap(Opt(3)) !$<= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @> Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$<= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4) !@>  Null(5r4), Wrap(Opt(3r4)) !@>  Wrap(Null(5r4)), Opt(3r4) !$>  Null(5r4), Wrap(Opt(3r4)) !$>  Wrap(Null(5r4)))
Case(Opt(3) !@> Null(5), Wrap(Opt(3)) !@> Wrap(Null(5)), Opt(3) !$> Null(5), Wrap(Opt(3)) !$> Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @<= Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$> Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Opt(3r4) !@>= Null(5r4), Wrap(Opt(3r4)) !@>= Wrap(Null(5r4)), Opt(3r4) !$>= Null(5r4), Wrap(Opt(3r4)) !$>= Wrap(Null(5r4)))
Case(Opt(3) !@>= Null(5), Wrap(Opt(3)) !@>= Wrap(Null(5)), Opt(3) !$>= Null(5), Wrap(Opt(3)) !$>= Wrap(Null(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @< Call(∂.Test.Wrap(null:r4?):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$>= Call(∂.Test.Wrap(null:r4?):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, true , true )
###
> Case(Opt(3r4)  @=  Opt(5r4), Wrap(Opt(3r4))  @=  Wrap(Opt(5r4)), Opt(3r4)  $=  Opt(5r4), Wrap(Opt(3r4))  $=  Wrap(Opt(5r4)))
Case(Opt(3) @= Opt(5), Wrap(Opt(3)) @= Wrap(Opt(5)), Opt(3) $= Opt(5), Wrap(Opt(3)) $= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4)  @<  Opt(5r4), Wrap(Opt(3r4))  @<  Wrap(Opt(5r4)), Opt(3r4)  $<  Opt(5r4), Wrap(Opt(3r4))  $<  Wrap(Opt(5r4)))
Case(Opt(3) @< Opt(5), Wrap(Opt(3)) @< Wrap(Opt(5)), Opt(3) $< Opt(5), Wrap(Opt(3)) $< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4)  @<= Opt(5r4), Wrap(Opt(3r4))  @<= Wrap(Opt(5r4)), Opt(3r4)  $<= Opt(5r4), Wrap(Opt(3r4))  $<= Wrap(Opt(5r4)))
Case(Opt(3) @<= Opt(5), Wrap(Opt(3)) @<= Wrap(Opt(5)), Opt(3) $<= Opt(5), Wrap(Opt(3)) $<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4)  @>  Opt(5r4), Wrap(Opt(3r4))  @>  Wrap(Opt(5r4)), Opt(3r4)  $>  Opt(5r4), Wrap(Opt(3r4))  $>  Wrap(Opt(5r4)))
Case(Opt(3) @> Opt(5), Wrap(Opt(3)) @> Wrap(Opt(5)), Opt(3) $> Opt(5), Wrap(Opt(3)) $> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4)  @>= Opt(5r4), Wrap(Opt(3r4))  @>= Wrap(Opt(5r4)), Opt(3r4)  $>= Opt(5r4), Wrap(Opt(3r4))  $>= Wrap(Opt(5r4)))
Case(Opt(3) @>= Opt(5), Wrap(Opt(3)) @>= Wrap(Opt(5)), Opt(3) $>= Opt(5), Wrap(Opt(3)) $>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) $>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4) !@=  Opt(5r4), Wrap(Opt(3r4)) !@=  Wrap(Opt(5r4)), Opt(3r4) !$=  Opt(5r4), Wrap(Opt(3r4)) !$=  Wrap(Opt(5r4)))
Case(Opt(3) !@= Opt(5), Wrap(Opt(3)) !@= Wrap(Opt(5)), Opt(3) !$= Opt(5), Wrap(Opt(3)) !$= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !@= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4) !@<  Opt(5r4), Wrap(Opt(3r4)) !@<  Wrap(Opt(5r4)), Opt(3r4) !$<  Opt(5r4), Wrap(Opt(3r4)) !$<  Wrap(Opt(5r4)))
Case(Opt(3) !@< Opt(5), Wrap(Opt(3)) !@< Wrap(Opt(5)), Opt(3) !$< Opt(5), Wrap(Opt(3)) !$< Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4) !@<= Opt(5r4), Wrap(Opt(3r4)) !@<= Wrap(Opt(5r4)), Opt(3r4) !$<= Opt(5r4), Wrap(Opt(3r4)) !$<= Wrap(Opt(5r4)))
Case(Opt(3) !@<= Opt(5), Wrap(Opt(3)) !@<= Wrap(Opt(5)), Opt(3) !$<= Opt(5), Wrap(Opt(3)) !$<= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(false:b @= Scope(1)), Cmp(false:b @= Scope(2))), str(GOOD), str(BAD!)), false:b, Scope(1), false:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, false, false, false, false)
###
> Case(Opt(3r4) !@>  Opt(5r4), Wrap(Opt(3r4)) !@>  Wrap(Opt(5r4)), Opt(3r4) !$>  Opt(5r4), Wrap(Opt(3r4)) !$>  Wrap(Opt(5r4)))
Case(Opt(3) !@> Opt(5), Wrap(Opt(3)) !@> Wrap(Opt(5)), Opt(3) !$> Opt(5), Wrap(Opt(3)) !$> Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @<= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$> Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> Case(Opt(3r4) !@>= Opt(5r4), Wrap(Opt(3r4)) !@>= Wrap(Opt(5r4)), Opt(3r4) !$>= Opt(5r4), Wrap(Opt(3r4)) !$>= Wrap(Opt(5r4)))
Case(Opt(3) !@>= Opt(5), Wrap(Opt(3)) !@>= Wrap(Opt(5)), Opt(3) !$>= Opt(5), Wrap(Opt(3)) !$>= Wrap(Opt(5))) : (s, b, b, b, b)
BndKind:Call, Type:(s, b, b, b, b), Bnd:(Call(∂.With([with:1] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) @< Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), [with:2] Cmp(Call(∂.Test.Wrap(Opt<r4?>(3:r4)):r4?) !$>= Call(∂.Test.Wrap(Opt<r4?>(5:r4)):r4?)), (If(And(Cmp(true:b @= Scope(1)), Cmp(true:b @= Scope(2))), str(GOOD), str(BAD!)), true:b, Scope(1), true:b, Scope(2)):(s, b, b, b, b)):(s, b, b, b, b)))
Func sig: () to (s, b, b, b, b)
Type: (str,bool,bool,bool,bool), Value: (GOOD, true , true , true , true )
###
> "*** For text, strict treats null differently."
"*** For text, strict treats null differently." : s
BndKind:Str, Type:s, Bnd:(str(*** For text, strict treats null differently.))
Func sig: () to s
Type: str, Value: *** For text, strict treats null differently.
###
> (""  @=  "", Wrap("")  @=  Wrap(""), ""  ~@=  "", Wrap("")  ~@=  Wrap(""), ""  $=  "", Wrap("")  $=  Wrap(""), ""  ~$=  "", Wrap("")  ~$=  Wrap(""))
("" @= "", Wrap("") @= Wrap(""), "" ~@= "", Wrap("") ~@= Wrap(""), "" $= "", Wrap("") $= Wrap(""), "" ~$= "", Wrap("") ~$= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) $= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (""  @<  "", Wrap("")  @<  Wrap(""), ""  ~@<  "", Wrap("")  ~@<  Wrap(""), ""  $<  "", Wrap("")  $<  Wrap(""), ""  ~$<  "", Wrap("")  ~$<  Wrap(""))
("" @< "", Wrap("") @< Wrap(""), "" ~@< "", Wrap("") ~@< Wrap(""), "" $< "", Wrap("") $< Wrap(""), "" ~$< "", Wrap("") ~$< Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$< Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (""  @<= "", Wrap("")  @<= Wrap(""), ""  ~@<= "", Wrap("")  ~@<= Wrap(""), ""  $<= "", Wrap("")  $<= Wrap(""), ""  ~$<= "", Wrap("")  ~$<= Wrap(""))
("" @<= "", Wrap("") @<= Wrap(""), "" ~@<= "", Wrap("") ~@<= Wrap(""), "" $<= "", Wrap("") $<= Wrap(""), "" ~$<= "", Wrap("") ~$<= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @<= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@<= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) $<= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$<= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (""  @>  "", Wrap("")  @>  Wrap(""), ""  ~@>  "", Wrap("")  ~@>  Wrap(""), ""  $>  "", Wrap("")  $>  Wrap(""), ""  ~$>  "", Wrap("")  ~$>  Wrap(""))
("" @> "", Wrap("") @> Wrap(""), "" ~@> "", Wrap("") ~@> Wrap(""), "" $> "", Wrap("") $> Wrap(""), "" ~$> "", Wrap("") ~$> Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @> Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@> Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $> Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$> Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (""  @>= "", Wrap("")  @>= Wrap(""), ""  ~@>= "", Wrap("")  ~@>= Wrap(""), ""  $>= "", Wrap("")  $>= Wrap(""), ""  ~$>= "", Wrap("")  ~$>= Wrap(""))
("" @>= "", Wrap("") @>= Wrap(""), "" ~@>= "", Wrap("") ~@>= Wrap(""), "" $>= "", Wrap("") $>= Wrap(""), "" ~$>= "", Wrap("") ~$>= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) $>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$>= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("" !@=  "", Wrap("") !@=  Wrap(""), "" !~@=  "", Wrap("") !~@=  Wrap(""), "" !$=  "", Wrap("") !$=  Wrap(""), "" !~$=  "", Wrap("") !~$=  Wrap(""))
("" !@= "", Wrap("") !@= Wrap(""), "" !~@= "", Wrap("") !~@= Wrap(""), "" !$= "", Wrap("") !$= Wrap(""), "" !~$= "", Wrap("") !~$= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) !@= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !~@= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !$= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("" !@<  "", Wrap("") !@<  Wrap(""), "" !~@<  "", Wrap("") !~@<  Wrap(""), "" !$<  "", Wrap("") !$<  Wrap(""), "" !~$<  "", Wrap("") !~$<  Wrap(""))
("" !@< "", Wrap("") !@< Wrap(""), "" !~@< "", Wrap("") !~@< Wrap(""), "" !$< "", Wrap("") !$< Wrap(""), "" !~$< "", Wrap("") !~$< Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$< Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$< Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("" !@<= "", Wrap("") !@<= Wrap(""), "" !~@<= "", Wrap("") !~@<= Wrap(""), "" !$<= "", Wrap("") !$<= Wrap(""), "" !~$<= "", Wrap("") !~$<= Wrap(""))
("" !@<= "", Wrap("") !@<= Wrap(""), "" !~@<= "", Wrap("") !~@<= Wrap(""), "" !$<= "", Wrap("") !$<= Wrap(""), "" !~$<= "", Wrap("") !~$<= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @> Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@> Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !$<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$<= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("" !@>  "", Wrap("") !@>  Wrap(""), "" !~@>  "", Wrap("") !~@>  Wrap(""), "" !$>  "", Wrap("") !$>  Wrap(""), "" !~$>  "", Wrap("") !~$>  Wrap(""))
("" !@> "", Wrap("") !@> Wrap(""), "" !~@> "", Wrap("") !~@> Wrap(""), "" !$> "", Wrap("") !$> Wrap(""), "" !~$> "", Wrap("") !~$> Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @<= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@<= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$> Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("" !@>= "", Wrap("") !@>= Wrap(""), "" !~@>= "", Wrap("") !~@>= Wrap(""), "" !$>= "", Wrap("") !$>= Wrap(""), "" !~$>= "", Wrap("") !~$>= Wrap(""))
("" !@>= "", Wrap("") !@>= Wrap(""), "" !~@>= "", Wrap("") !~@>= Wrap(""), "" !$>= "", Wrap("") !$>= Wrap(""), "" !~$>= "", Wrap("") !~$>= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !$>= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$>= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (""  @=  "AA", Wrap("")  @=  Wrap("AA"), ""  ~@=  "AA", Wrap("")  ~@=  Wrap("AA"), ""  $=  "AA", Wrap("")  $=  Wrap("AA"), ""  ~$=  "AA", Wrap("")  ~$=  Wrap("AA"))
("" @= "AA", Wrap("") @= Wrap("AA"), "" ~@= "AA", Wrap("") ~@= Wrap("AA"), "" $= "AA", Wrap("") $= Wrap("AA"), "" ~$= "AA", Wrap("") ~$= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (""  @<  "AA", Wrap("")  @<  Wrap("AA"), ""  ~@<  "AA", Wrap("")  ~@<  Wrap("AA"), ""  $<  "AA", Wrap("")  $<  Wrap("AA"), ""  ~$<  "AA", Wrap("")  ~$<  Wrap("AA"))
("" @< "AA", Wrap("") @< Wrap("AA"), "" ~@< "AA", Wrap("") ~@< Wrap("AA"), "" $< "AA", Wrap("") $< Wrap("AA"), "" ~$< "AA", Wrap("") ~$< Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) $< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$< Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (""  @<= "AA", Wrap("")  @<= Wrap("AA"), ""  ~@<= "AA", Wrap("")  ~@<= Wrap("AA"), ""  $<= "AA", Wrap("")  $<= Wrap("AA"), ""  ~$<= "AA", Wrap("")  ~$<= Wrap("AA"))
("" @<= "AA", Wrap("") @<= Wrap("AA"), "" ~@<= "AA", Wrap("") ~@<= Wrap("AA"), "" $<= "AA", Wrap("") $<= Wrap("AA"), "" ~$<= "AA", Wrap("") ~$<= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) $<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$<= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (""  @>  "AA", Wrap("")  @>  Wrap("AA"), ""  ~@>  "AA", Wrap("")  ~@>  Wrap("AA"), ""  $>  "AA", Wrap("")  $>  Wrap("AA"), ""  ~$>  "AA", Wrap("")  ~$>  Wrap("AA"))
("" @> "AA", Wrap("") @> Wrap("AA"), "" ~@> "AA", Wrap("") ~@> Wrap("AA"), "" $> "AA", Wrap("") $> Wrap("AA"), "" ~$> "AA", Wrap("") ~$> Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$> Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (""  @>= "AA", Wrap("")  @>= Wrap("AA"), ""  ~@>= "AA", Wrap("")  ~@>= Wrap("AA"), ""  $>= "AA", Wrap("")  $>= Wrap("AA"), ""  ~$>= "AA", Wrap("")  ~$>= Wrap("AA"))
("" @>= "AA", Wrap("") @>= Wrap("AA"), "" ~@>= "AA", Wrap("") ~@>= Wrap("AA"), "" $>= "AA", Wrap("") $>= Wrap("AA"), "" ~$>= "AA", Wrap("") ~$>= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$>= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("" !@=  "AA", Wrap("") !@=  Wrap("AA"), "" !~@=  "AA", Wrap("") !~@=  Wrap("AA"), "" !$=  "AA", Wrap("") !$=  Wrap("AA"), "" !~$=  "AA", Wrap("") !~$=  Wrap("AA"))
("" !@= "AA", Wrap("") !@= Wrap("AA"), "" !~@= "AA", Wrap("") !~@= Wrap("AA"), "" !$= "AA", Wrap("") !$= Wrap("AA"), "" !~$= "AA", Wrap("") !~$= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) !@= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~@= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("" !@<  "AA", Wrap("") !@<  Wrap("AA"), "" !~@<  "AA", Wrap("") !~@<  Wrap("AA"), "" !$<  "AA", Wrap("") !$<  Wrap("AA"), "" !~$<  "AA", Wrap("") !~$<  Wrap("AA"))
("" !@< "AA", Wrap("") !@< Wrap("AA"), "" !~@< "AA", Wrap("") !~@< Wrap("AA"), "" !$< "AA", Wrap("") !$< Wrap("AA"), "" !~$< "AA", Wrap("") !~$< Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !$< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$< Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("" !@<= "AA", Wrap("") !@<= Wrap("AA"), "" !~@<= "AA", Wrap("") !~@<= Wrap("AA"), "" !$<= "AA", Wrap("") !$<= Wrap("AA"), "" !~$<= "AA", Wrap("") !~$<= Wrap("AA"))
("" !@<= "AA", Wrap("") !@<= Wrap("AA"), "" !~@<= "AA", Wrap("") !~@<= Wrap("AA"), "" !$<= "AA", Wrap("") !$<= Wrap("AA"), "" !~$<= "AA", Wrap("") !~$<= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !$<= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$<= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("" !@>  "AA", Wrap("") !@>  Wrap("AA"), "" !~@>  "AA", Wrap("") !~@>  Wrap("AA"), "" !$>  "AA", Wrap("") !$>  Wrap("AA"), "" !~$>  "AA", Wrap("") !~$>  Wrap("AA"))
("" !@> "AA", Wrap("") !@> Wrap("AA"), "" !~@> "AA", Wrap("") !~@> Wrap("AA"), "" !$> "AA", Wrap("") !$> Wrap("AA"), "" !~$> "AA", Wrap("") !~$> Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$> Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$> Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("" !@>= "AA", Wrap("") !@>= Wrap("AA"), "" !~@>= "AA", Wrap("") !~@>= Wrap("AA"), "" !$>= "AA", Wrap("") !$>= Wrap("AA"), "" !~$>= "AA", Wrap("") !~$>= Wrap("AA"))
("" !@>= "AA", Wrap("") !@>= Wrap("AA"), "" !~@>= "AA", Wrap("") !~@>= Wrap("AA"), "" !$>= "AA", Wrap("") !$>= Wrap("AA"), "" !~$>= "AA", Wrap("") !~$>= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$>= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (""  @=  "aA", Wrap("")  @=  Wrap("aA"), ""  ~@=  "aA", Wrap("")  ~@=  Wrap("aA"), ""  $=  "aA", Wrap("")  $=  Wrap("aA"), ""  ~$=  "aA", Wrap("")  ~$=  Wrap("aA"))
("" @= "aA", Wrap("") @= Wrap("aA"), "" ~@= "aA", Wrap("") ~@= Wrap("aA"), "" $= "aA", Wrap("") $= Wrap("aA"), "" ~$= "aA", Wrap("") ~$= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (""  @<  "aA", Wrap("")  @<  Wrap("aA"), ""  ~@<  "aA", Wrap("")  ~@<  Wrap("aA"), ""  $<  "aA", Wrap("")  $<  Wrap("aA"), ""  ~$<  "aA", Wrap("")  ~$<  Wrap("aA"))
("" @< "aA", Wrap("") @< Wrap("aA"), "" ~@< "aA", Wrap("") ~@< Wrap("aA"), "" $< "aA", Wrap("") $< Wrap("aA"), "" ~$< "aA", Wrap("") ~$< Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @< Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@< Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) $< Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$< Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (""  @<= "aA", Wrap("")  @<= Wrap("aA"), ""  ~@<= "aA", Wrap("")  ~@<= Wrap("aA"), ""  $<= "aA", Wrap("")  $<= Wrap("aA"), ""  ~$<= "aA", Wrap("")  ~$<= Wrap("aA"))
("" @<= "aA", Wrap("") @<= Wrap("aA"), "" ~@<= "aA", Wrap("") ~@<= Wrap("aA"), "" $<= "aA", Wrap("") $<= Wrap("aA"), "" ~$<= "aA", Wrap("") ~$<= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) $<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$<= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (""  @>  "aA", Wrap("")  @>  Wrap("aA"), ""  ~@>  "aA", Wrap("")  ~@>  Wrap("aA"), ""  $>  "aA", Wrap("")  $>  Wrap("aA"), ""  ~$>  "aA", Wrap("")  ~$>  Wrap("aA"))
("" @> "aA", Wrap("") @> Wrap("aA"), "" ~@> "aA", Wrap("") ~@> Wrap("aA"), "" $> "aA", Wrap("") $> Wrap("aA"), "" ~$> "aA", Wrap("") ~$> Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$> Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (""  @>= "aA", Wrap("")  @>= Wrap("aA"), ""  ~@>= "aA", Wrap("")  ~@>= Wrap("aA"), ""  $>= "aA", Wrap("")  $>= Wrap("aA"), ""  ~$>= "aA", Wrap("")  ~$>= Wrap("aA"))
("" @>= "aA", Wrap("") @>= Wrap("aA"), "" ~@>= "aA", Wrap("") ~@>= Wrap("aA"), "" $>= "aA", Wrap("") $>= Wrap("aA"), "" ~$>= "aA", Wrap("") ~$>= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @>= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@>= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $>= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$>= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("" !@=  "aA", Wrap("") !@=  Wrap("aA"), "" !~@=  "aA", Wrap("") !~@=  Wrap("aA"), "" !$=  "aA", Wrap("") !$=  Wrap("aA"), "" !~$=  "aA", Wrap("") !~$=  Wrap("aA"))
("" !@= "aA", Wrap("") !@= Wrap("aA"), "" !~@= "aA", Wrap("") !~@= Wrap("aA"), "" !$= "aA", Wrap("") !$= Wrap("aA"), "" !~$= "aA", Wrap("") !~$= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) !@= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~@= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("" !@<  "aA", Wrap("") !@<  Wrap("aA"), "" !~@<  "aA", Wrap("") !~@<  Wrap("aA"), "" !$<  "aA", Wrap("") !$<  Wrap("aA"), "" !~$<  "aA", Wrap("") !~$<  Wrap("aA"))
("" !@< "aA", Wrap("") !@< Wrap("aA"), "" !~@< "aA", Wrap("") !~@< Wrap("aA"), "" !$< "aA", Wrap("") !$< Wrap("aA"), "" !~$< "aA", Wrap("") !~$< Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @>= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@>= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !$< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$< Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("" !@<= "aA", Wrap("") !@<= Wrap("aA"), "" !~@<= "aA", Wrap("") !~@<= Wrap("aA"), "" !$<= "aA", Wrap("") !$<= Wrap("aA"), "" !~$<= "aA", Wrap("") !~$<= Wrap("aA"))
("" !@<= "aA", Wrap("") !@<= Wrap("aA"), "" !~@<= "aA", Wrap("") !~@<= Wrap("aA"), "" !$<= "aA", Wrap("") !$<= Wrap("aA"), "" !~$<= "aA", Wrap("") !~$<= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !$<= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$<= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("" !@>  "aA", Wrap("") !@>  Wrap("aA"), "" !~@>  "aA", Wrap("") !~@>  Wrap("aA"), "" !$>  "aA", Wrap("") !$>  Wrap("aA"), "" !~$>  "aA", Wrap("") !~$>  Wrap("aA"))
("" !@> "aA", Wrap("") !@> Wrap("aA"), "" !~@> "aA", Wrap("") !~@> Wrap("aA"), "" !$> "aA", Wrap("") !$> Wrap("aA"), "" !~$> "aA", Wrap("") !~$> Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$> Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$> Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("" !@>= "aA", Wrap("") !@>= Wrap("aA"), "" !~@>= "aA", Wrap("") !~@>= Wrap("aA"), "" !$>= "aA", Wrap("") !$>= Wrap("aA"), "" !~$>= "aA", Wrap("") !~$>= Wrap("aA"))
("" !@>= "aA", Wrap("") !@>= Wrap("aA"), "" !~@>= "aA", Wrap("") !~@>= Wrap("aA"), "" !$>= "aA", Wrap("") !$>= Wrap("aA"), "" !~$>= "aA", Wrap("") !~$>= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @< Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@< Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$>= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (""  @=  "Aa", Wrap("")  @=  Wrap("Aa"), ""  ~@=  "Aa", Wrap("")  ~@=  Wrap("Aa"), ""  $=  "Aa", Wrap("")  $=  Wrap("Aa"), ""  ~$=  "Aa", Wrap("")  ~$=  Wrap("Aa"))
("" @= "Aa", Wrap("") @= Wrap("Aa"), "" ~@= "Aa", Wrap("") ~@= Wrap("Aa"), "" $= "Aa", Wrap("") $= Wrap("Aa"), "" ~$= "Aa", Wrap("") ~$= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (""  @<  "Aa", Wrap("")  @<  Wrap("Aa"), ""  ~@<  "Aa", Wrap("")  ~@<  Wrap("Aa"), ""  $<  "Aa", Wrap("")  $<  Wrap("Aa"), ""  ~$<  "Aa", Wrap("")  ~$<  Wrap("Aa"))
("" @< "Aa", Wrap("") @< Wrap("Aa"), "" ~@< "Aa", Wrap("") ~@< Wrap("Aa"), "" $< "Aa", Wrap("") $< Wrap("Aa"), "" ~$< "Aa", Wrap("") ~$< Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @< Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@< Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) $< Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$< Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (""  @<= "Aa", Wrap("")  @<= Wrap("Aa"), ""  ~@<= "Aa", Wrap("")  ~@<= Wrap("Aa"), ""  $<= "Aa", Wrap("")  $<= Wrap("Aa"), ""  ~$<= "Aa", Wrap("")  ~$<= Wrap("Aa"))
("" @<= "Aa", Wrap("") @<= Wrap("Aa"), "" ~@<= "Aa", Wrap("") ~@<= Wrap("Aa"), "" $<= "Aa", Wrap("") $<= Wrap("Aa"), "" ~$<= "Aa", Wrap("") ~$<= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) $<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$<= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (""  @>  "Aa", Wrap("")  @>  Wrap("Aa"), ""  ~@>  "Aa", Wrap("")  ~@>  Wrap("Aa"), ""  $>  "Aa", Wrap("")  $>  Wrap("Aa"), ""  ~$>  "Aa", Wrap("")  ~$>  Wrap("Aa"))
("" @> "Aa", Wrap("") @> Wrap("Aa"), "" ~@> "Aa", Wrap("") ~@> Wrap("Aa"), "" $> "Aa", Wrap("") $> Wrap("Aa"), "" ~$> "Aa", Wrap("") ~$> Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$> Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (""  @>= "Aa", Wrap("")  @>= Wrap("Aa"), ""  ~@>= "Aa", Wrap("")  ~@>= Wrap("Aa"), ""  $>= "Aa", Wrap("")  $>= Wrap("Aa"), ""  ~$>= "Aa", Wrap("")  ~$>= Wrap("Aa"))
("" @>= "Aa", Wrap("") @>= Wrap("Aa"), "" ~@>= "Aa", Wrap("") ~@>= Wrap("Aa"), "" $>= "Aa", Wrap("") $>= Wrap("Aa"), "" ~$>= "Aa", Wrap("") ~$>= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @>= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@>= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $>= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$>= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("" !@=  "Aa", Wrap("") !@=  Wrap("Aa"), "" !~@=  "Aa", Wrap("") !~@=  Wrap("Aa"), "" !$=  "Aa", Wrap("") !$=  Wrap("Aa"), "" !~$=  "Aa", Wrap("") !~$=  Wrap("Aa"))
("" !@= "Aa", Wrap("") !@= Wrap("Aa"), "" !~@= "Aa", Wrap("") !~@= Wrap("Aa"), "" !$= "Aa", Wrap("") !$= Wrap("Aa"), "" !~$= "Aa", Wrap("") !~$= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) !@= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~@= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("" !@<  "Aa", Wrap("") !@<  Wrap("Aa"), "" !~@<  "Aa", Wrap("") !~@<  Wrap("Aa"), "" !$<  "Aa", Wrap("") !$<  Wrap("Aa"), "" !~$<  "Aa", Wrap("") !~$<  Wrap("Aa"))
("" !@< "Aa", Wrap("") !@< Wrap("Aa"), "" !~@< "Aa", Wrap("") !~@< Wrap("Aa"), "" !$< "Aa", Wrap("") !$< Wrap("Aa"), "" !~$< "Aa", Wrap("") !~$< Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @>= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@>= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !$< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$< Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("" !@<= "Aa", Wrap("") !@<= Wrap("Aa"), "" !~@<= "Aa", Wrap("") !~@<= Wrap("Aa"), "" !$<= "Aa", Wrap("") !$<= Wrap("Aa"), "" !~$<= "Aa", Wrap("") !~$<= Wrap("Aa"))
("" !@<= "Aa", Wrap("") !@<= Wrap("Aa"), "" !~@<= "Aa", Wrap("") !~@<= Wrap("Aa"), "" !$<= "Aa", Wrap("") !$<= Wrap("Aa"), "" !~$<= "Aa", Wrap("") !~$<= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !$<= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$<= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("" !@>  "Aa", Wrap("") !@>  Wrap("Aa"), "" !~@>  "Aa", Wrap("") !~@>  Wrap("Aa"), "" !$>  "Aa", Wrap("") !$>  Wrap("Aa"), "" !~$>  "Aa", Wrap("") !~$>  Wrap("Aa"))
("" !@> "Aa", Wrap("") !@> Wrap("Aa"), "" !~@> "Aa", Wrap("") !~@> Wrap("Aa"), "" !$> "Aa", Wrap("") !$> Wrap("Aa"), "" !~$> "Aa", Wrap("") !~$> Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$> Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$> Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("" !@>= "Aa", Wrap("") !@>= Wrap("Aa"), "" !~@>= "Aa", Wrap("") !~@>= Wrap("Aa"), "" !$>= "Aa", Wrap("") !$>= Wrap("Aa"), "" !~$>= "Aa", Wrap("") !~$>= Wrap("Aa"))
("" !@>= "Aa", Wrap("") !@>= Wrap("Aa"), "" !~@>= "Aa", Wrap("") !~@>= Wrap("Aa"), "" !$>= "Aa", Wrap("") !$>= Wrap("Aa"), "" !~$>= "Aa", Wrap("") !~$>= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @< Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@< Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$>= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (""  @=  "BB", Wrap("")  @=  Wrap("BB"), ""  ~@=  "BB", Wrap("")  ~@=  Wrap("BB"), ""  $=  "BB", Wrap("")  $=  Wrap("BB"), ""  ~$=  "BB", Wrap("")  ~$=  Wrap("BB"))
("" @= "BB", Wrap("") @= Wrap("BB"), "" ~@= "BB", Wrap("") ~@= Wrap("BB"), "" $= "BB", Wrap("") $= Wrap("BB"), "" ~$= "BB", Wrap("") ~$= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (""  @<  "BB", Wrap("")  @<  Wrap("BB"), ""  ~@<  "BB", Wrap("")  ~@<  Wrap("BB"), ""  $<  "BB", Wrap("")  $<  Wrap("BB"), ""  ~$<  "BB", Wrap("")  ~$<  Wrap("BB"))
("" @< "BB", Wrap("") @< Wrap("BB"), "" ~@< "BB", Wrap("") ~@< Wrap("BB"), "" $< "BB", Wrap("") $< Wrap("BB"), "" ~$< "BB", Wrap("") ~$< Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) $< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$< Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (""  @<= "BB", Wrap("")  @<= Wrap("BB"), ""  ~@<= "BB", Wrap("")  ~@<= Wrap("BB"), ""  $<= "BB", Wrap("")  $<= Wrap("BB"), ""  ~$<= "BB", Wrap("")  ~$<= Wrap("BB"))
("" @<= "BB", Wrap("") @<= Wrap("BB"), "" ~@<= "BB", Wrap("") ~@<= Wrap("BB"), "" $<= "BB", Wrap("") $<= Wrap("BB"), "" ~$<= "BB", Wrap("") ~$<= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) $<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$<= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (""  @>  "BB", Wrap("")  @>  Wrap("BB"), ""  ~@>  "BB", Wrap("")  ~@>  Wrap("BB"), ""  $>  "BB", Wrap("")  $>  Wrap("BB"), ""  ~$>  "BB", Wrap("")  ~$>  Wrap("BB"))
("" @> "BB", Wrap("") @> Wrap("BB"), "" ~@> "BB", Wrap("") ~@> Wrap("BB"), "" $> "BB", Wrap("") $> Wrap("BB"), "" ~$> "BB", Wrap("") ~$> Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$> Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (""  @>= "BB", Wrap("")  @>= Wrap("BB"), ""  ~@>= "BB", Wrap("")  ~@>= Wrap("BB"), ""  $>= "BB", Wrap("")  $>= Wrap("BB"), ""  ~$>= "BB", Wrap("")  ~$>= Wrap("BB"))
("" @>= "BB", Wrap("") @>= Wrap("BB"), "" ~@>= "BB", Wrap("") ~@>= Wrap("BB"), "" $>= "BB", Wrap("") $>= Wrap("BB"), "" ~$>= "BB", Wrap("") ~$>= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$>= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("" !@=  "BB", Wrap("") !@=  Wrap("BB"), "" !~@=  "BB", Wrap("") !~@=  Wrap("BB"), "" !$=  "BB", Wrap("") !$=  Wrap("BB"), "" !~$=  "BB", Wrap("") !~$=  Wrap("BB"))
("" !@= "BB", Wrap("") !@= Wrap("BB"), "" !~@= "BB", Wrap("") !~@= Wrap("BB"), "" !$= "BB", Wrap("") !$= Wrap("BB"), "" !~$= "BB", Wrap("") !~$= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) !@= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~@= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("" !@<  "BB", Wrap("") !@<  Wrap("BB"), "" !~@<  "BB", Wrap("") !~@<  Wrap("BB"), "" !$<  "BB", Wrap("") !$<  Wrap("BB"), "" !~$<  "BB", Wrap("") !~$<  Wrap("BB"))
("" !@< "BB", Wrap("") !@< Wrap("BB"), "" !~@< "BB", Wrap("") !~@< Wrap("BB"), "" !$< "BB", Wrap("") !$< Wrap("BB"), "" !~$< "BB", Wrap("") !~$< Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !$< Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$< Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("" !@<= "BB", Wrap("") !@<= Wrap("BB"), "" !~@<= "BB", Wrap("") !~@<= Wrap("BB"), "" !$<= "BB", Wrap("") !$<= Wrap("BB"), "" !~$<= "BB", Wrap("") !~$<= Wrap("BB"))
("" !@<= "BB", Wrap("") !@<= Wrap("BB"), "" !~@<= "BB", Wrap("") !~@<= Wrap("BB"), "" !$<= "BB", Wrap("") !$<= Wrap("BB"), "" !~$<= "BB", Wrap("") !~$<= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !$<= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$<= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("" !@>  "BB", Wrap("") !@>  Wrap("BB"), "" !~@>  "BB", Wrap("") !~@>  Wrap("BB"), "" !$>  "BB", Wrap("") !$>  Wrap("BB"), "" !~$>  "BB", Wrap("") !~$>  Wrap("BB"))
("" !@> "BB", Wrap("") !@> Wrap("BB"), "" !~@> "BB", Wrap("") !~@> Wrap("BB"), "" !$> "BB", Wrap("") !$> Wrap("BB"), "" !~$> "BB", Wrap("") !~$> Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$> Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$> Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("" !@>= "BB", Wrap("") !@>= Wrap("BB"), "" !~@>= "BB", Wrap("") !~@>= Wrap("BB"), "" !$>= "BB", Wrap("") !$>= Wrap("BB"), "" !~$>= "BB", Wrap("") !~$>= Wrap("BB"))
("" !@>= "BB", Wrap("") !@>= Wrap("BB"), "" !~@>= "BB", Wrap("") !~@>= Wrap("BB"), "" !$>= "BB", Wrap("") !$>= Wrap("BB"), "" !~$>= "BB", Wrap("") !~$>= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$>= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$>= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (""  @=  Null(""), Wrap("")  @=  Wrap(Null("")), ""  ~@=  Null(""), Wrap("")  ~@=  Wrap(Null("")), ""  $=  Null(""), Wrap("")  $=  Wrap(Null("")), ""  ~$=  Null(""), Wrap("")  ~$=  Wrap(Null("")))
("" @= Null(""), Wrap("") @= Wrap(Null("")), "" ~@= Null(""), Wrap("") ~@= Wrap(Null("")), "" $= Null(""), Wrap("") $= Wrap(Null("")), "" ~$= Null(""), Wrap("") ~$= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (""  @<  Null(""), Wrap("")  @<  Wrap(Null("")), ""  ~@<  Null(""), Wrap("")  ~@<  Wrap(Null("")), ""  $<  Null(""), Wrap("")  $<  Wrap(Null("")), ""  ~$<  Null(""), Wrap("")  ~$<  Wrap(Null("")))
("" @< Null(""), Wrap("") @< Wrap(Null("")), "" ~@< Null(""), Wrap("") ~@< Wrap(Null("")), "" $< Null(""), Wrap("") $< Wrap(Null("")), "" ~$< Null(""), Wrap("") ~$< Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$< Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (""  @<= Null(""), Wrap("")  @<= Wrap(Null("")), ""  ~@<= Null(""), Wrap("")  ~@<= Wrap(Null("")), ""  $<= Null(""), Wrap("")  $<= Wrap(Null("")), ""  ~$<= Null(""), Wrap("")  ~$<= Wrap(Null("")))
("" @<= Null(""), Wrap("") @<= Wrap(Null("")), "" ~@<= Null(""), Wrap("") ~@<= Wrap(Null("")), "" $<= Null(""), Wrap("") $<= Wrap(Null("")), "" ~$<= Null(""), Wrap("") ~$<= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$<= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (""  @>  Null(""), Wrap("")  @>  Wrap(Null("")), ""  ~@>  Null(""), Wrap("")  ~@>  Wrap(Null("")), ""  $>  Null(""), Wrap("")  $>  Wrap(Null("")), ""  ~$>  Null(""), Wrap("")  ~$>  Wrap(Null("")))
("" @> Null(""), Wrap("") @> Wrap(Null("")), "" ~@> Null(""), Wrap("") ~@> Wrap(Null("")), "" $> Null(""), Wrap("") $> Wrap(Null("")), "" ~$> Null(""), Wrap("") ~$> Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@> Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $> Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$> Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> (""  @>= Null(""), Wrap("")  @>= Wrap(Null("")), ""  ~@>= Null(""), Wrap("")  ~@>= Wrap(Null("")), ""  $>= Null(""), Wrap("")  $>= Wrap(Null("")), ""  ~$>= Null(""), Wrap("")  ~$>= Wrap(Null("")))
("" @>= Null(""), Wrap("") @>= Wrap(Null("")), "" ~@>= Null(""), Wrap("") ~@>= Wrap(Null("")), "" $>= Null(""), Wrap("") $>= Wrap(Null("")), "" ~$>= Null(""), Wrap("") ~$>= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@>= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) $>= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~$>= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> ("" !@=  Null(""), Wrap("") !@=  Wrap(Null("")), "" !~@=  Null(""), Wrap("") !~@=  Wrap(Null("")), "" !$=  Null(""), Wrap("") !$=  Wrap(Null("")), "" !~$=  Null(""), Wrap("") !~$=  Wrap(Null("")))
("" !@= Null(""), Wrap("") !@= Wrap(Null("")), "" !~@= Null(""), Wrap("") !~@= Wrap(Null("")), "" !$= Null(""), Wrap("") !$= Wrap(Null("")), "" !~$= Null(""), Wrap("") !~$= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) !@= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~@= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("" !@<  Null(""), Wrap("") !@<  Wrap(Null("")), "" !~@<  Null(""), Wrap("") !~@<  Wrap(Null("")), "" !$<  Null(""), Wrap("") !$<  Wrap(Null("")), "" !~$<  Null(""), Wrap("") !~$<  Wrap(Null("")))
("" !@< Null(""), Wrap("") !@< Wrap(Null("")), "" !~@< Null(""), Wrap("") !~@< Wrap(Null("")), "" !$< Null(""), Wrap("") !$< Wrap(Null("")), "" !~$< Null(""), Wrap("") !~$< Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$< Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$< Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("" !@<= Null(""), Wrap("") !@<= Wrap(Null("")), "" !~@<= Null(""), Wrap("") !~@<= Wrap(Null("")), "" !$<= Null(""), Wrap("") !$<= Wrap(Null("")), "" !~$<= Null(""), Wrap("") !~$<= Wrap(Null("")))
("" !@<= Null(""), Wrap("") !@<= Wrap(Null("")), "" !~@<= Null(""), Wrap("") !~@<= Wrap(Null("")), "" !$<= Null(""), Wrap("") !$<= Wrap(Null("")), "" !~$<= Null(""), Wrap("") !~$<= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str()):s) @> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$<= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$<= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("" !@>  Null(""), Wrap("") !@>  Wrap(Null("")), "" !~@>  Null(""), Wrap("") !~@>  Wrap(Null("")), "" !$>  Null(""), Wrap("") !$>  Wrap(Null("")), "" !~$>  Null(""), Wrap("") !~$>  Wrap(Null("")))
("" !@> Null(""), Wrap("") !@> Wrap(Null("")), "" !~@> Null(""), Wrap("") !~@> Wrap(Null("")), "" !$> Null(""), Wrap("") !$> Wrap(Null("")), "" !~$> Null(""), Wrap("") !~$> Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@<= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$> Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> ("" !@>= Null(""), Wrap("") !@>= Wrap(Null("")), "" !~@>= Null(""), Wrap("") !~@>= Wrap(Null("")), "" !$>= Null(""), Wrap("") !$>= Wrap(Null("")), "" !~$>= Null(""), Wrap("") !~$>= Wrap(Null("")))
("" !@>= Null(""), Wrap("") !@>= Wrap(Null("")), "" !~@>= Null(""), Wrap("") !~@>= Wrap(Null("")), "" !$>= Null(""), Wrap("") !$>= Wrap(Null("")), "" !~$>= Null(""), Wrap("") !~$>= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str()):s) @< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str()):s) ~@< Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !$>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str()):s) !~$>= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> ("AA"  @=  "", Wrap("AA")  @=  Wrap(""), "AA"  ~@=  "", Wrap("AA")  ~@=  Wrap(""), "AA"  $=  "", Wrap("AA")  $=  Wrap(""), "AA"  ~$=  "", Wrap("AA")  ~$=  Wrap(""))
("AA" @= "", Wrap("AA") @= Wrap(""), "AA" ~@= "", Wrap("AA") ~@= Wrap(""), "AA" $= "", Wrap("AA") $= Wrap(""), "AA" ~$= "", Wrap("AA") ~$= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA"  @<  "", Wrap("AA")  @<  Wrap(""), "AA"  ~@<  "", Wrap("AA")  ~@<  Wrap(""), "AA"  $<  "", Wrap("AA")  $<  Wrap(""), "AA"  ~$<  "", Wrap("AA")  ~$<  Wrap(""))
("AA" @< "", Wrap("AA") @< Wrap(""), "AA" ~@< "", Wrap("AA") ~@< Wrap(""), "AA" $< "", Wrap("AA") $< Wrap(""), "AA" ~$< "", Wrap("AA") ~$< Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$< Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA"  @<= "", Wrap("AA")  @<= Wrap(""), "AA"  ~@<= "", Wrap("AA")  ~@<= Wrap(""), "AA"  $<= "", Wrap("AA")  $<= Wrap(""), "AA"  ~$<= "", Wrap("AA")  ~$<= Wrap(""))
("AA" @<= "", Wrap("AA") @<= Wrap(""), "AA" ~@<= "", Wrap("AA") ~@<= Wrap(""), "AA" $<= "", Wrap("AA") $<= Wrap(""), "AA" ~$<= "", Wrap("AA") ~$<= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$<= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA"  @>  "", Wrap("AA")  @>  Wrap(""), "AA"  ~@>  "", Wrap("AA")  ~@>  Wrap(""), "AA"  $>  "", Wrap("AA")  $>  Wrap(""), "AA"  ~$>  "", Wrap("AA")  ~$>  Wrap(""))
("AA" @> "", Wrap("AA") @> Wrap(""), "AA" ~@> "", Wrap("AA") ~@> Wrap(""), "AA" $> "", Wrap("AA") $> Wrap(""), "AA" ~$> "", Wrap("AA") ~$> Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$> Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA"  @>= "", Wrap("AA")  @>= Wrap(""), "AA"  ~@>= "", Wrap("AA")  ~@>= Wrap(""), "AA"  $>= "", Wrap("AA")  $>= Wrap(""), "AA"  ~$>= "", Wrap("AA")  ~$>= Wrap(""))
("AA" @>= "", Wrap("AA") @>= Wrap(""), "AA" ~@>= "", Wrap("AA") ~@>= Wrap(""), "AA" $>= "", Wrap("AA") $>= Wrap(""), "AA" ~$>= "", Wrap("AA") ~$>= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$>= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA" !@=  "", Wrap("AA") !@=  Wrap(""), "AA" !~@=  "", Wrap("AA") !~@=  Wrap(""), "AA" !$=  "", Wrap("AA") !$=  Wrap(""), "AA" !~$=  "", Wrap("AA") !~$=  Wrap(""))
("AA" !@= "", Wrap("AA") !@= Wrap(""), "AA" !~@= "", Wrap("AA") !~@= Wrap(""), "AA" !$= "", Wrap("AA") !$= Wrap(""), "AA" !~$= "", Wrap("AA") !~$= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !@= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~@= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA" !@<  "", Wrap("AA") !@<  Wrap(""), "AA" !~@<  "", Wrap("AA") !~@<  Wrap(""), "AA" !$<  "", Wrap("AA") !$<  Wrap(""), "AA" !~$<  "", Wrap("AA") !~$<  Wrap(""))
("AA" !@< "", Wrap("AA") !@< Wrap(""), "AA" !~@< "", Wrap("AA") !~@< Wrap(""), "AA" !$< "", Wrap("AA") !$< Wrap(""), "AA" !~$< "", Wrap("AA") !~$< Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$< Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$< Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA" !@<= "", Wrap("AA") !@<= Wrap(""), "AA" !~@<= "", Wrap("AA") !~@<= Wrap(""), "AA" !$<= "", Wrap("AA") !$<= Wrap(""), "AA" !~$<= "", Wrap("AA") !~$<= Wrap(""))
("AA" !@<= "", Wrap("AA") !@<= Wrap(""), "AA" !~@<= "", Wrap("AA") !~@<= Wrap(""), "AA" !$<= "", Wrap("AA") !$<= Wrap(""), "AA" !~$<= "", Wrap("AA") !~$<= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$<= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$<= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA" !@>  "", Wrap("AA") !@>  Wrap(""), "AA" !~@>  "", Wrap("AA") !~@>  Wrap(""), "AA" !$>  "", Wrap("AA") !$>  Wrap(""), "AA" !~$>  "", Wrap("AA") !~$>  Wrap(""))
("AA" !@> "", Wrap("AA") !@> Wrap(""), "AA" !~@> "", Wrap("AA") !~@> Wrap(""), "AA" !$> "", Wrap("AA") !$> Wrap(""), "AA" !~$> "", Wrap("AA") !~$> Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$> Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$> Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA" !@>= "", Wrap("AA") !@>= Wrap(""), "AA" !~@>= "", Wrap("AA") !~@>= Wrap(""), "AA" !$>= "", Wrap("AA") !$>= Wrap(""), "AA" !~$>= "", Wrap("AA") !~$>= Wrap(""))
("AA" !@>= "", Wrap("AA") !@>= Wrap(""), "AA" !~@>= "", Wrap("AA") !~@>= Wrap(""), "AA" !$>= "", Wrap("AA") !$>= Wrap(""), "AA" !~$>= "", Wrap("AA") !~$>= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$>= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$>= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA"  @=  "AA", Wrap("AA")  @=  Wrap("AA"), "AA"  ~@=  "AA", Wrap("AA")  ~@=  Wrap("AA"), "AA"  $=  "AA", Wrap("AA")  $=  Wrap("AA"), "AA"  ~$=  "AA", Wrap("AA")  ~$=  Wrap("AA"))
("AA" @= "AA", Wrap("AA") @= Wrap("AA"), "AA" ~@= "AA", Wrap("AA") ~@= Wrap("AA"), "AA" $= "AA", Wrap("AA") $= Wrap("AA"), "AA" ~$= "AA", Wrap("AA") ~$= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA"  @<  "AA", Wrap("AA")  @<  Wrap("AA"), "AA"  ~@<  "AA", Wrap("AA")  ~@<  Wrap("AA"), "AA"  $<  "AA", Wrap("AA")  $<  Wrap("AA"), "AA"  ~$<  "AA", Wrap("AA")  ~$<  Wrap("AA"))
("AA" @< "AA", Wrap("AA") @< Wrap("AA"), "AA" ~@< "AA", Wrap("AA") ~@< Wrap("AA"), "AA" $< "AA", Wrap("AA") $< Wrap("AA"), "AA" ~$< "AA", Wrap("AA") ~$< Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$< Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA"  @<= "AA", Wrap("AA")  @<= Wrap("AA"), "AA"  ~@<= "AA", Wrap("AA")  ~@<= Wrap("AA"), "AA"  $<= "AA", Wrap("AA")  $<= Wrap("AA"), "AA"  ~$<= "AA", Wrap("AA")  ~$<= Wrap("AA"))
("AA" @<= "AA", Wrap("AA") @<= Wrap("AA"), "AA" ~@<= "AA", Wrap("AA") ~@<= Wrap("AA"), "AA" $<= "AA", Wrap("AA") $<= Wrap("AA"), "AA" ~$<= "AA", Wrap("AA") ~$<= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$<= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA"  @>  "AA", Wrap("AA")  @>  Wrap("AA"), "AA"  ~@>  "AA", Wrap("AA")  ~@>  Wrap("AA"), "AA"  $>  "AA", Wrap("AA")  $>  Wrap("AA"), "AA"  ~$>  "AA", Wrap("AA")  ~$>  Wrap("AA"))
("AA" @> "AA", Wrap("AA") @> Wrap("AA"), "AA" ~@> "AA", Wrap("AA") ~@> Wrap("AA"), "AA" $> "AA", Wrap("AA") $> Wrap("AA"), "AA" ~$> "AA", Wrap("AA") ~$> Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$> Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA"  @>= "AA", Wrap("AA")  @>= Wrap("AA"), "AA"  ~@>= "AA", Wrap("AA")  ~@>= Wrap("AA"), "AA"  $>= "AA", Wrap("AA")  $>= Wrap("AA"), "AA"  ~$>= "AA", Wrap("AA")  ~$>= Wrap("AA"))
("AA" @>= "AA", Wrap("AA") @>= Wrap("AA"), "AA" ~@>= "AA", Wrap("AA") ~@>= Wrap("AA"), "AA" $>= "AA", Wrap("AA") $>= Wrap("AA"), "AA" ~$>= "AA", Wrap("AA") ~$>= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$>= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA" !@=  "AA", Wrap("AA") !@=  Wrap("AA"), "AA" !~@=  "AA", Wrap("AA") !~@=  Wrap("AA"), "AA" !$=  "AA", Wrap("AA") !$=  Wrap("AA"), "AA" !~$=  "AA", Wrap("AA") !~$=  Wrap("AA"))
("AA" !@= "AA", Wrap("AA") !@= Wrap("AA"), "AA" !~@= "AA", Wrap("AA") !~@= Wrap("AA"), "AA" !$= "AA", Wrap("AA") !$= Wrap("AA"), "AA" !~$= "AA", Wrap("AA") !~$= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !@= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~@= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA" !@<  "AA", Wrap("AA") !@<  Wrap("AA"), "AA" !~@<  "AA", Wrap("AA") !~@<  Wrap("AA"), "AA" !$<  "AA", Wrap("AA") !$<  Wrap("AA"), "AA" !~$<  "AA", Wrap("AA") !~$<  Wrap("AA"))
("AA" !@< "AA", Wrap("AA") !@< Wrap("AA"), "AA" !~@< "AA", Wrap("AA") !~@< Wrap("AA"), "AA" !$< "AA", Wrap("AA") !$< Wrap("AA"), "AA" !~$< "AA", Wrap("AA") !~$< Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$< Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA" !@<= "AA", Wrap("AA") !@<= Wrap("AA"), "AA" !~@<= "AA", Wrap("AA") !~@<= Wrap("AA"), "AA" !$<= "AA", Wrap("AA") !$<= Wrap("AA"), "AA" !~$<= "AA", Wrap("AA") !~$<= Wrap("AA"))
("AA" !@<= "AA", Wrap("AA") !@<= Wrap("AA"), "AA" !~@<= "AA", Wrap("AA") !~@<= Wrap("AA"), "AA" !$<= "AA", Wrap("AA") !$<= Wrap("AA"), "AA" !~$<= "AA", Wrap("AA") !~$<= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$<= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$<= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA" !@>  "AA", Wrap("AA") !@>  Wrap("AA"), "AA" !~@>  "AA", Wrap("AA") !~@>  Wrap("AA"), "AA" !$>  "AA", Wrap("AA") !$>  Wrap("AA"), "AA" !~$>  "AA", Wrap("AA") !~$>  Wrap("AA"))
("AA" !@> "AA", Wrap("AA") !@> Wrap("AA"), "AA" !~@> "AA", Wrap("AA") !~@> Wrap("AA"), "AA" !$> "AA", Wrap("AA") !$> Wrap("AA"), "AA" !~$> "AA", Wrap("AA") !~$> Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$> Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$> Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA" !@>= "AA", Wrap("AA") !@>= Wrap("AA"), "AA" !~@>= "AA", Wrap("AA") !~@>= Wrap("AA"), "AA" !$>= "AA", Wrap("AA") !$>= Wrap("AA"), "AA" !~$>= "AA", Wrap("AA") !~$>= Wrap("AA"))
("AA" !@>= "AA", Wrap("AA") !@>= Wrap("AA"), "AA" !~@>= "AA", Wrap("AA") !~@>= Wrap("AA"), "AA" !$>= "AA", Wrap("AA") !$>= Wrap("AA"), "AA" !~$>= "AA", Wrap("AA") !~$>= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$>= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA"  @=  "aA", Wrap("AA")  @=  Wrap("aA"), "AA"  ~@=  "aA", Wrap("AA")  ~@=  Wrap("aA"), "AA"  $=  "aA", Wrap("AA")  $=  Wrap("aA"), "AA"  ~$=  "aA", Wrap("AA")  ~$=  Wrap("aA"))
("AA" @= "aA", Wrap("AA") @= Wrap("aA"), "AA" ~@= "aA", Wrap("AA") ~@= Wrap("aA"), "AA" $= "aA", Wrap("AA") $= Wrap("aA"), "AA" ~$= "aA", Wrap("AA") ~$= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("AA"  @<  "aA", Wrap("AA")  @<  Wrap("aA"), "AA"  ~@<  "aA", Wrap("AA")  ~@<  Wrap("aA"), "AA"  $<  "aA", Wrap("AA")  $<  Wrap("aA"), "AA"  ~$<  "aA", Wrap("AA")  ~$<  Wrap("aA"))
("AA" @< "aA", Wrap("AA") @< Wrap("aA"), "AA" ~@< "aA", Wrap("AA") ~@< Wrap("aA"), "AA" $< "aA", Wrap("AA") $< Wrap("aA"), "AA" ~$< "aA", Wrap("AA") ~$< Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$< Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA"  @<= "aA", Wrap("AA")  @<= Wrap("aA"), "AA"  ~@<= "aA", Wrap("AA")  ~@<= Wrap("aA"), "AA"  $<= "aA", Wrap("AA")  $<= Wrap("aA"), "AA"  ~$<= "aA", Wrap("AA")  ~$<= Wrap("aA"))
("AA" @<= "aA", Wrap("AA") @<= Wrap("aA"), "AA" ~@<= "aA", Wrap("AA") ~@<= Wrap("aA"), "AA" $<= "aA", Wrap("AA") $<= Wrap("aA"), "AA" ~$<= "aA", Wrap("AA") ~$<= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@<= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$<= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("AA"  @>  "aA", Wrap("AA")  @>  Wrap("aA"), "AA"  ~@>  "aA", Wrap("AA")  ~@>  Wrap("aA"), "AA"  $>  "aA", Wrap("AA")  $>  Wrap("aA"), "AA"  ~$>  "aA", Wrap("AA")  ~$>  Wrap("aA"))
("AA" @> "aA", Wrap("AA") @> Wrap("aA"), "AA" ~@> "aA", Wrap("AA") ~@> Wrap("aA"), "AA" $> "aA", Wrap("AA") $> Wrap("aA"), "AA" ~$> "aA", Wrap("AA") ~$> Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@> Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$> Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("AA"  @>= "aA", Wrap("AA")  @>= Wrap("aA"), "AA"  ~@>= "aA", Wrap("AA")  ~@>= Wrap("aA"), "AA"  $>= "aA", Wrap("AA")  $>= Wrap("aA"), "AA"  ~$>= "aA", Wrap("AA")  ~$>= Wrap("aA"))
("AA" @>= "aA", Wrap("AA") @>= Wrap("aA"), "AA" ~@>= "aA", Wrap("AA") ~@>= Wrap("aA"), "AA" $>= "aA", Wrap("AA") $>= Wrap("aA"), "AA" ~$>= "aA", Wrap("AA") ~$>= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$>= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA" !@=  "aA", Wrap("AA") !@=  Wrap("aA"), "AA" !~@=  "aA", Wrap("AA") !~@=  Wrap("aA"), "AA" !$=  "aA", Wrap("AA") !$=  Wrap("aA"), "AA" !~$=  "aA", Wrap("AA") !~$=  Wrap("aA"))
("AA" !@= "aA", Wrap("AA") !@= Wrap("aA"), "AA" !~@= "aA", Wrap("AA") !~@= Wrap("aA"), "AA" !$= "aA", Wrap("AA") !$= Wrap("aA"), "AA" !~$= "aA", Wrap("AA") !~$= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !@= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~@= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("AA" !@<  "aA", Wrap("AA") !@<  Wrap("aA"), "AA" !~@<  "aA", Wrap("AA") !~@<  Wrap("aA"), "AA" !$<  "aA", Wrap("AA") !$<  Wrap("aA"), "AA" !~$<  "aA", Wrap("AA") !~$<  Wrap("aA"))
("AA" !@< "aA", Wrap("AA") !@< Wrap("aA"), "AA" !~@< "aA", Wrap("AA") !~@< Wrap("aA"), "AA" !$< "aA", Wrap("AA") !$< Wrap("aA"), "AA" !~$< "aA", Wrap("AA") !~$< Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$< Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$< Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA" !@<= "aA", Wrap("AA") !@<= Wrap("aA"), "AA" !~@<= "aA", Wrap("AA") !~@<= Wrap("aA"), "AA" !$<= "aA", Wrap("AA") !$<= Wrap("aA"), "AA" !~$<= "aA", Wrap("AA") !~$<= Wrap("aA"))
("AA" !@<= "aA", Wrap("AA") !@<= Wrap("aA"), "AA" !~@<= "aA", Wrap("AA") !~@<= Wrap("aA"), "AA" !$<= "aA", Wrap("AA") !$<= Wrap("aA"), "AA" !~$<= "aA", Wrap("AA") !~$<= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@> Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$<= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$<= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("AA" !@>  "aA", Wrap("AA") !@>  Wrap("aA"), "AA" !~@>  "aA", Wrap("AA") !~@>  Wrap("aA"), "AA" !$>  "aA", Wrap("AA") !$>  Wrap("aA"), "AA" !~$>  "aA", Wrap("AA") !~$>  Wrap("aA"))
("AA" !@> "aA", Wrap("AA") !@> Wrap("aA"), "AA" !~@> "aA", Wrap("AA") !~@> Wrap("aA"), "AA" !$> "aA", Wrap("AA") !$> Wrap("aA"), "AA" !~$> "aA", Wrap("AA") !~$> Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@<= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$> Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$> Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("AA" !@>= "aA", Wrap("AA") !@>= Wrap("aA"), "AA" !~@>= "aA", Wrap("AA") !~@>= Wrap("aA"), "AA" !$>= "aA", Wrap("AA") !$>= Wrap("aA"), "AA" !~$>= "aA", Wrap("AA") !~$>= Wrap("aA"))
("AA" !@>= "aA", Wrap("AA") !@>= Wrap("aA"), "AA" !~@>= "aA", Wrap("AA") !~@>= Wrap("aA"), "AA" !$>= "aA", Wrap("AA") !$>= Wrap("aA"), "AA" !~$>= "aA", Wrap("AA") !~$>= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$>= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$>= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA"  @=  "Aa", Wrap("AA")  @=  Wrap("Aa"), "AA"  ~@=  "Aa", Wrap("AA")  ~@=  Wrap("Aa"), "AA"  $=  "Aa", Wrap("AA")  $=  Wrap("Aa"), "AA"  ~$=  "Aa", Wrap("AA")  ~$=  Wrap("Aa"))
("AA" @= "Aa", Wrap("AA") @= Wrap("Aa"), "AA" ~@= "Aa", Wrap("AA") ~@= Wrap("Aa"), "AA" $= "Aa", Wrap("AA") $= Wrap("Aa"), "AA" ~$= "Aa", Wrap("AA") ~$= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("AA"  @<  "Aa", Wrap("AA")  @<  Wrap("Aa"), "AA"  ~@<  "Aa", Wrap("AA")  ~@<  Wrap("Aa"), "AA"  $<  "Aa", Wrap("AA")  $<  Wrap("Aa"), "AA"  ~$<  "Aa", Wrap("AA")  ~$<  Wrap("Aa"))
("AA" @< "Aa", Wrap("AA") @< Wrap("Aa"), "AA" ~@< "Aa", Wrap("AA") ~@< Wrap("Aa"), "AA" $< "Aa", Wrap("AA") $< Wrap("Aa"), "AA" ~$< "Aa", Wrap("AA") ~$< Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$< Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA"  @<= "Aa", Wrap("AA")  @<= Wrap("Aa"), "AA"  ~@<= "Aa", Wrap("AA")  ~@<= Wrap("Aa"), "AA"  $<= "Aa", Wrap("AA")  $<= Wrap("Aa"), "AA"  ~$<= "Aa", Wrap("AA")  ~$<= Wrap("Aa"))
("AA" @<= "Aa", Wrap("AA") @<= Wrap("Aa"), "AA" ~@<= "Aa", Wrap("AA") ~@<= Wrap("Aa"), "AA" $<= "Aa", Wrap("AA") $<= Wrap("Aa"), "AA" ~$<= "Aa", Wrap("AA") ~$<= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@<= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$<= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("AA"  @>  "Aa", Wrap("AA")  @>  Wrap("Aa"), "AA"  ~@>  "Aa", Wrap("AA")  ~@>  Wrap("Aa"), "AA"  $>  "Aa", Wrap("AA")  $>  Wrap("Aa"), "AA"  ~$>  "Aa", Wrap("AA")  ~$>  Wrap("Aa"))
("AA" @> "Aa", Wrap("AA") @> Wrap("Aa"), "AA" ~@> "Aa", Wrap("AA") ~@> Wrap("Aa"), "AA" $> "Aa", Wrap("AA") $> Wrap("Aa"), "AA" ~$> "Aa", Wrap("AA") ~$> Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@> Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$> Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("AA"  @>= "Aa", Wrap("AA")  @>= Wrap("Aa"), "AA"  ~@>= "Aa", Wrap("AA")  ~@>= Wrap("Aa"), "AA"  $>= "Aa", Wrap("AA")  $>= Wrap("Aa"), "AA"  ~$>= "Aa", Wrap("AA")  ~$>= Wrap("Aa"))
("AA" @>= "Aa", Wrap("AA") @>= Wrap("Aa"), "AA" ~@>= "Aa", Wrap("AA") ~@>= Wrap("Aa"), "AA" $>= "Aa", Wrap("AA") $>= Wrap("Aa"), "AA" ~$>= "Aa", Wrap("AA") ~$>= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$>= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA" !@=  "Aa", Wrap("AA") !@=  Wrap("Aa"), "AA" !~@=  "Aa", Wrap("AA") !~@=  Wrap("Aa"), "AA" !$=  "Aa", Wrap("AA") !$=  Wrap("Aa"), "AA" !~$=  "Aa", Wrap("AA") !~$=  Wrap("Aa"))
("AA" !@= "Aa", Wrap("AA") !@= Wrap("Aa"), "AA" !~@= "Aa", Wrap("AA") !~@= Wrap("Aa"), "AA" !$= "Aa", Wrap("AA") !$= Wrap("Aa"), "AA" !~$= "Aa", Wrap("AA") !~$= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !@= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~@= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("AA" !@<  "Aa", Wrap("AA") !@<  Wrap("Aa"), "AA" !~@<  "Aa", Wrap("AA") !~@<  Wrap("Aa"), "AA" !$<  "Aa", Wrap("AA") !$<  Wrap("Aa"), "AA" !~$<  "Aa", Wrap("AA") !~$<  Wrap("Aa"))
("AA" !@< "Aa", Wrap("AA") !@< Wrap("Aa"), "AA" !~@< "Aa", Wrap("AA") !~@< Wrap("Aa"), "AA" !$< "Aa", Wrap("AA") !$< Wrap("Aa"), "AA" !~$< "Aa", Wrap("AA") !~$< Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$< Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$< Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA" !@<= "Aa", Wrap("AA") !@<= Wrap("Aa"), "AA" !~@<= "Aa", Wrap("AA") !~@<= Wrap("Aa"), "AA" !$<= "Aa", Wrap("AA") !$<= Wrap("Aa"), "AA" !~$<= "Aa", Wrap("AA") !~$<= Wrap("Aa"))
("AA" !@<= "Aa", Wrap("AA") !@<= Wrap("Aa"), "AA" !~@<= "Aa", Wrap("AA") !~@<= Wrap("Aa"), "AA" !$<= "Aa", Wrap("AA") !$<= Wrap("Aa"), "AA" !~$<= "Aa", Wrap("AA") !~$<= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@> Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$<= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$<= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("AA" !@>  "Aa", Wrap("AA") !@>  Wrap("Aa"), "AA" !~@>  "Aa", Wrap("AA") !~@>  Wrap("Aa"), "AA" !$>  "Aa", Wrap("AA") !$>  Wrap("Aa"), "AA" !~$>  "Aa", Wrap("AA") !~$>  Wrap("Aa"))
("AA" !@> "Aa", Wrap("AA") !@> Wrap("Aa"), "AA" !~@> "Aa", Wrap("AA") !~@> Wrap("Aa"), "AA" !$> "Aa", Wrap("AA") !$> Wrap("Aa"), "AA" !~$> "Aa", Wrap("AA") !~$> Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@<= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$> Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$> Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("AA" !@>= "Aa", Wrap("AA") !@>= Wrap("Aa"), "AA" !~@>= "Aa", Wrap("AA") !~@>= Wrap("Aa"), "AA" !$>= "Aa", Wrap("AA") !$>= Wrap("Aa"), "AA" !~$>= "Aa", Wrap("AA") !~$>= Wrap("Aa"))
("AA" !@>= "Aa", Wrap("AA") !@>= Wrap("Aa"), "AA" !~@>= "Aa", Wrap("AA") !~@>= Wrap("Aa"), "AA" !$>= "Aa", Wrap("AA") !$>= Wrap("Aa"), "AA" !~$>= "Aa", Wrap("AA") !~$>= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$>= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$>= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA"  @=  "BB", Wrap("AA")  @=  Wrap("BB"), "AA"  ~@=  "BB", Wrap("AA")  ~@=  Wrap("BB"), "AA"  $=  "BB", Wrap("AA")  $=  Wrap("BB"), "AA"  ~$=  "BB", Wrap("AA")  ~$=  Wrap("BB"))
("AA" @= "BB", Wrap("AA") @= Wrap("BB"), "AA" ~@= "BB", Wrap("AA") ~@= Wrap("BB"), "AA" $= "BB", Wrap("AA") $= Wrap("BB"), "AA" ~$= "BB", Wrap("AA") ~$= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA"  @<  "BB", Wrap("AA")  @<  Wrap("BB"), "AA"  ~@<  "BB", Wrap("AA")  ~@<  Wrap("BB"), "AA"  $<  "BB", Wrap("AA")  $<  Wrap("BB"), "AA"  ~$<  "BB", Wrap("AA")  ~$<  Wrap("BB"))
("AA" @< "BB", Wrap("AA") @< Wrap("BB"), "AA" ~@< "BB", Wrap("AA") ~@< Wrap("BB"), "AA" $< "BB", Wrap("AA") $< Wrap("BB"), "AA" ~$< "BB", Wrap("AA") ~$< Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$< Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA"  @<= "BB", Wrap("AA")  @<= Wrap("BB"), "AA"  ~@<= "BB", Wrap("AA")  ~@<= Wrap("BB"), "AA"  $<= "BB", Wrap("AA")  $<= Wrap("BB"), "AA"  ~$<= "BB", Wrap("AA")  ~$<= Wrap("BB"))
("AA" @<= "BB", Wrap("AA") @<= Wrap("BB"), "AA" ~@<= "BB", Wrap("AA") ~@<= Wrap("BB"), "AA" $<= "BB", Wrap("AA") $<= Wrap("BB"), "AA" ~$<= "BB", Wrap("AA") ~$<= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$<= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA"  @>  "BB", Wrap("AA")  @>  Wrap("BB"), "AA"  ~@>  "BB", Wrap("AA")  ~@>  Wrap("BB"), "AA"  $>  "BB", Wrap("AA")  $>  Wrap("BB"), "AA"  ~$>  "BB", Wrap("AA")  ~$>  Wrap("BB"))
("AA" @> "BB", Wrap("AA") @> Wrap("BB"), "AA" ~@> "BB", Wrap("AA") ~@> Wrap("BB"), "AA" $> "BB", Wrap("AA") $> Wrap("BB"), "AA" ~$> "BB", Wrap("AA") ~$> Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$> Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA"  @>= "BB", Wrap("AA")  @>= Wrap("BB"), "AA"  ~@>= "BB", Wrap("AA")  ~@>= Wrap("BB"), "AA"  $>= "BB", Wrap("AA")  $>= Wrap("BB"), "AA"  ~$>= "BB", Wrap("AA")  ~$>= Wrap("BB"))
("AA" @>= "BB", Wrap("AA") @>= Wrap("BB"), "AA" ~@>= "BB", Wrap("AA") ~@>= Wrap("BB"), "AA" $>= "BB", Wrap("AA") $>= Wrap("BB"), "AA" ~$>= "BB", Wrap("AA") ~$>= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$>= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA" !@=  "BB", Wrap("AA") !@=  Wrap("BB"), "AA" !~@=  "BB", Wrap("AA") !~@=  Wrap("BB"), "AA" !$=  "BB", Wrap("AA") !$=  Wrap("BB"), "AA" !~$=  "BB", Wrap("AA") !~$=  Wrap("BB"))
("AA" !@= "BB", Wrap("AA") !@= Wrap("BB"), "AA" !~@= "BB", Wrap("AA") !~@= Wrap("BB"), "AA" !$= "BB", Wrap("AA") !$= Wrap("BB"), "AA" !~$= "BB", Wrap("AA") !~$= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !@= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~@= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA" !@<  "BB", Wrap("AA") !@<  Wrap("BB"), "AA" !~@<  "BB", Wrap("AA") !~@<  Wrap("BB"), "AA" !$<  "BB", Wrap("AA") !$<  Wrap("BB"), "AA" !~$<  "BB", Wrap("AA") !~$<  Wrap("BB"))
("AA" !@< "BB", Wrap("AA") !@< Wrap("BB"), "AA" !~@< "BB", Wrap("AA") !~@< Wrap("BB"), "AA" !$< "BB", Wrap("AA") !$< Wrap("BB"), "AA" !~$< "BB", Wrap("AA") !~$< Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$< Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$< Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA" !@<= "BB", Wrap("AA") !@<= Wrap("BB"), "AA" !~@<= "BB", Wrap("AA") !~@<= Wrap("BB"), "AA" !$<= "BB", Wrap("AA") !$<= Wrap("BB"), "AA" !~$<= "BB", Wrap("AA") !~$<= Wrap("BB"))
("AA" !@<= "BB", Wrap("AA") !@<= Wrap("BB"), "AA" !~@<= "BB", Wrap("AA") !~@<= Wrap("BB"), "AA" !$<= "BB", Wrap("AA") !$<= Wrap("BB"), "AA" !~$<= "BB", Wrap("AA") !~$<= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$<= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$<= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA" !@>  "BB", Wrap("AA") !@>  Wrap("BB"), "AA" !~@>  "BB", Wrap("AA") !~@>  Wrap("BB"), "AA" !$>  "BB", Wrap("AA") !$>  Wrap("BB"), "AA" !~$>  "BB", Wrap("AA") !~$>  Wrap("BB"))
("AA" !@> "BB", Wrap("AA") !@> Wrap("BB"), "AA" !~@> "BB", Wrap("AA") !~@> Wrap("BB"), "AA" !$> "BB", Wrap("AA") !$> Wrap("BB"), "AA" !~$> "BB", Wrap("AA") !~$> Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$> Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$> Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA" !@>= "BB", Wrap("AA") !@>= Wrap("BB"), "AA" !~@>= "BB", Wrap("AA") !~@>= Wrap("BB"), "AA" !$>= "BB", Wrap("AA") !$>= Wrap("BB"), "AA" !~$>= "BB", Wrap("AA") !~$>= Wrap("BB"))
("AA" !@>= "BB", Wrap("AA") !@>= Wrap("BB"), "AA" !~@>= "BB", Wrap("AA") !~@>= Wrap("BB"), "AA" !$>= "BB", Wrap("AA") !$>= Wrap("BB"), "AA" !~$>= "BB", Wrap("AA") !~$>= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$>= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$>= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA"  @=  Null(""), Wrap("AA")  @=  Wrap(Null("")), "AA"  ~@=  Null(""), Wrap("AA")  ~@=  Wrap(Null("")), "AA"  $=  Null(""), Wrap("AA")  $=  Wrap(Null("")), "AA"  ~$=  Null(""), Wrap("AA")  ~$=  Wrap(Null("")))
("AA" @= Null(""), Wrap("AA") @= Wrap(Null("")), "AA" ~@= Null(""), Wrap("AA") ~@= Wrap(Null("")), "AA" $= Null(""), Wrap("AA") $= Wrap(Null("")), "AA" ~$= Null(""), Wrap("AA") ~$= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA"  @<  Null(""), Wrap("AA")  @<  Wrap(Null("")), "AA"  ~@<  Null(""), Wrap("AA")  ~@<  Wrap(Null("")), "AA"  $<  Null(""), Wrap("AA")  $<  Wrap(Null("")), "AA"  ~$<  Null(""), Wrap("AA")  ~$<  Wrap(Null("")))
("AA" @< Null(""), Wrap("AA") @< Wrap(Null("")), "AA" ~@< Null(""), Wrap("AA") ~@< Wrap(Null("")), "AA" $< Null(""), Wrap("AA") $< Wrap(Null("")), "AA" ~$< Null(""), Wrap("AA") ~$< Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$< Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA"  @<= Null(""), Wrap("AA")  @<= Wrap(Null("")), "AA"  ~@<= Null(""), Wrap("AA")  ~@<= Wrap(Null("")), "AA"  $<= Null(""), Wrap("AA")  $<= Wrap(Null("")), "AA"  ~$<= Null(""), Wrap("AA")  ~$<= Wrap(Null("")))
("AA" @<= Null(""), Wrap("AA") @<= Wrap(Null("")), "AA" ~@<= Null(""), Wrap("AA") ~@<= Wrap(Null("")), "AA" $<= Null(""), Wrap("AA") $<= Wrap(Null("")), "AA" ~$<= Null(""), Wrap("AA") ~$<= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$<= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("AA"  @>  Null(""), Wrap("AA")  @>  Wrap(Null("")), "AA"  ~@>  Null(""), Wrap("AA")  ~@>  Wrap(Null("")), "AA"  $>  Null(""), Wrap("AA")  $>  Wrap(Null("")), "AA"  ~$>  Null(""), Wrap("AA")  ~$>  Wrap(Null("")))
("AA" @> Null(""), Wrap("AA") @> Wrap(Null("")), "AA" ~@> Null(""), Wrap("AA") ~@> Wrap(Null("")), "AA" $> Null(""), Wrap("AA") $> Wrap(Null("")), "AA" ~$> Null(""), Wrap("AA") ~$> Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@> Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $> Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$> Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> ("AA"  @>= Null(""), Wrap("AA")  @>= Wrap(Null("")), "AA"  ~@>= Null(""), Wrap("AA")  ~@>= Wrap(Null("")), "AA"  $>= Null(""), Wrap("AA")  $>= Wrap(Null("")), "AA"  ~$>= Null(""), Wrap("AA")  ~$>= Wrap(Null("")))
("AA" @>= Null(""), Wrap("AA") @>= Wrap(Null("")), "AA" ~@>= Null(""), Wrap("AA") ~@>= Wrap(Null("")), "AA" $>= Null(""), Wrap("AA") $>= Wrap(Null("")), "AA" ~$>= Null(""), Wrap("AA") ~$>= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@>= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) $>= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~$>= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> ("AA" !@=  Null(""), Wrap("AA") !@=  Wrap(Null("")), "AA" !~@=  Null(""), Wrap("AA") !~@=  Wrap(Null("")), "AA" !$=  Null(""), Wrap("AA") !$=  Wrap(Null("")), "AA" !~$=  Null(""), Wrap("AA") !~$=  Wrap(Null("")))
("AA" !@= Null(""), Wrap("AA") !@= Wrap(Null("")), "AA" !~@= Null(""), Wrap("AA") !~@= Wrap(Null("")), "AA" !$= Null(""), Wrap("AA") !$= Wrap(Null("")), "AA" !~$= Null(""), Wrap("AA") !~$= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !@= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~@= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA" !@<  Null(""), Wrap("AA") !@<  Wrap(Null("")), "AA" !~@<  Null(""), Wrap("AA") !~@<  Wrap(Null("")), "AA" !$<  Null(""), Wrap("AA") !$<  Wrap(Null("")), "AA" !~$<  Null(""), Wrap("AA") !~$<  Wrap(Null("")))
("AA" !@< Null(""), Wrap("AA") !@< Wrap(Null("")), "AA" !~@< Null(""), Wrap("AA") !~@< Wrap(Null("")), "AA" !$< Null(""), Wrap("AA") !$< Wrap(Null("")), "AA" !~$< Null(""), Wrap("AA") !~$< Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$< Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$< Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA" !@<= Null(""), Wrap("AA") !@<= Wrap(Null("")), "AA" !~@<= Null(""), Wrap("AA") !~@<= Wrap(Null("")), "AA" !$<= Null(""), Wrap("AA") !$<= Wrap(Null("")), "AA" !~$<= Null(""), Wrap("AA") !~$<= Wrap(Null("")))
("AA" !@<= Null(""), Wrap("AA") !@<= Wrap(Null("")), "AA" !~@<= Null(""), Wrap("AA") !~@<= Wrap(Null("")), "AA" !$<= Null(""), Wrap("AA") !$<= Wrap(Null("")), "AA" !~$<= Null(""), Wrap("AA") !~$<= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$<= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$<= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("AA" !@>  Null(""), Wrap("AA") !@>  Wrap(Null("")), "AA" !~@>  Null(""), Wrap("AA") !~@>  Wrap(Null("")), "AA" !$>  Null(""), Wrap("AA") !$>  Wrap(Null("")), "AA" !~$>  Null(""), Wrap("AA") !~$>  Wrap(Null("")))
("AA" !@> Null(""), Wrap("AA") !@> Wrap(Null("")), "AA" !~@> Null(""), Wrap("AA") !~@> Wrap(Null("")), "AA" !$> Null(""), Wrap("AA") !$> Wrap(Null("")), "AA" !~$> Null(""), Wrap("AA") !~$> Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@<= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$> Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> ("AA" !@>= Null(""), Wrap("AA") !@>= Wrap(Null("")), "AA" !~@>= Null(""), Wrap("AA") !~@>= Wrap(Null("")), "AA" !$>= Null(""), Wrap("AA") !$>= Wrap(Null("")), "AA" !~$>= Null(""), Wrap("AA") !~$>= Wrap(Null("")))
("AA" !@>= Null(""), Wrap("AA") !@>= Wrap(Null("")), "AA" !~@>= Null(""), Wrap("AA") !~@>= Wrap(Null("")), "AA" !$>= Null(""), Wrap("AA") !$>= Wrap(Null("")), "AA" !~$>= Null(""), Wrap("AA") !~$>= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) @< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) ~@< Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !$>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(AA)):s) !~$>= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> ("aA"  @=  "", Wrap("aA")  @=  Wrap(""), "aA"  ~@=  "", Wrap("aA")  ~@=  Wrap(""), "aA"  $=  "", Wrap("aA")  $=  Wrap(""), "aA"  ~$=  "", Wrap("aA")  ~$=  Wrap(""))
("aA" @= "", Wrap("aA") @= Wrap(""), "aA" ~@= "", Wrap("aA") ~@= Wrap(""), "aA" $= "", Wrap("aA") $= Wrap(""), "aA" ~$= "", Wrap("aA") ~$= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA"  @<  "", Wrap("aA")  @<  Wrap(""), "aA"  ~@<  "", Wrap("aA")  ~@<  Wrap(""), "aA"  $<  "", Wrap("aA")  $<  Wrap(""), "aA"  ~$<  "", Wrap("aA")  ~$<  Wrap(""))
("aA" @< "", Wrap("aA") @< Wrap(""), "aA" ~@< "", Wrap("aA") ~@< Wrap(""), "aA" $< "", Wrap("aA") $< Wrap(""), "aA" ~$< "", Wrap("aA") ~$< Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$< Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA"  @<= "", Wrap("aA")  @<= Wrap(""), "aA"  ~@<= "", Wrap("aA")  ~@<= Wrap(""), "aA"  $<= "", Wrap("aA")  $<= Wrap(""), "aA"  ~$<= "", Wrap("aA")  ~$<= Wrap(""))
("aA" @<= "", Wrap("aA") @<= Wrap(""), "aA" ~@<= "", Wrap("aA") ~@<= Wrap(""), "aA" $<= "", Wrap("aA") $<= Wrap(""), "aA" ~$<= "", Wrap("aA") ~$<= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$<= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA"  @>  "", Wrap("aA")  @>  Wrap(""), "aA"  ~@>  "", Wrap("aA")  ~@>  Wrap(""), "aA"  $>  "", Wrap("aA")  $>  Wrap(""), "aA"  ~$>  "", Wrap("aA")  ~$>  Wrap(""))
("aA" @> "", Wrap("aA") @> Wrap(""), "aA" ~@> "", Wrap("aA") ~@> Wrap(""), "aA" $> "", Wrap("aA") $> Wrap(""), "aA" ~$> "", Wrap("aA") ~$> Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$> Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA"  @>= "", Wrap("aA")  @>= Wrap(""), "aA"  ~@>= "", Wrap("aA")  ~@>= Wrap(""), "aA"  $>= "", Wrap("aA")  $>= Wrap(""), "aA"  ~$>= "", Wrap("aA")  ~$>= Wrap(""))
("aA" @>= "", Wrap("aA") @>= Wrap(""), "aA" ~@>= "", Wrap("aA") ~@>= Wrap(""), "aA" $>= "", Wrap("aA") $>= Wrap(""), "aA" ~$>= "", Wrap("aA") ~$>= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$>= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA" !@=  "", Wrap("aA") !@=  Wrap(""), "aA" !~@=  "", Wrap("aA") !~@=  Wrap(""), "aA" !$=  "", Wrap("aA") !$=  Wrap(""), "aA" !~$=  "", Wrap("aA") !~$=  Wrap(""))
("aA" !@= "", Wrap("aA") !@= Wrap(""), "aA" !~@= "", Wrap("aA") !~@= Wrap(""), "aA" !$= "", Wrap("aA") !$= Wrap(""), "aA" !~$= "", Wrap("aA") !~$= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !@= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~@= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA" !@<  "", Wrap("aA") !@<  Wrap(""), "aA" !~@<  "", Wrap("aA") !~@<  Wrap(""), "aA" !$<  "", Wrap("aA") !$<  Wrap(""), "aA" !~$<  "", Wrap("aA") !~$<  Wrap(""))
("aA" !@< "", Wrap("aA") !@< Wrap(""), "aA" !~@< "", Wrap("aA") !~@< Wrap(""), "aA" !$< "", Wrap("aA") !$< Wrap(""), "aA" !~$< "", Wrap("aA") !~$< Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$< Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$< Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA" !@<= "", Wrap("aA") !@<= Wrap(""), "aA" !~@<= "", Wrap("aA") !~@<= Wrap(""), "aA" !$<= "", Wrap("aA") !$<= Wrap(""), "aA" !~$<= "", Wrap("aA") !~$<= Wrap(""))
("aA" !@<= "", Wrap("aA") !@<= Wrap(""), "aA" !~@<= "", Wrap("aA") !~@<= Wrap(""), "aA" !$<= "", Wrap("aA") !$<= Wrap(""), "aA" !~$<= "", Wrap("aA") !~$<= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$<= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$<= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA" !@>  "", Wrap("aA") !@>  Wrap(""), "aA" !~@>  "", Wrap("aA") !~@>  Wrap(""), "aA" !$>  "", Wrap("aA") !$>  Wrap(""), "aA" !~$>  "", Wrap("aA") !~$>  Wrap(""))
("aA" !@> "", Wrap("aA") !@> Wrap(""), "aA" !~@> "", Wrap("aA") !~@> Wrap(""), "aA" !$> "", Wrap("aA") !$> Wrap(""), "aA" !~$> "", Wrap("aA") !~$> Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$> Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$> Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA" !@>= "", Wrap("aA") !@>= Wrap(""), "aA" !~@>= "", Wrap("aA") !~@>= Wrap(""), "aA" !$>= "", Wrap("aA") !$>= Wrap(""), "aA" !~$>= "", Wrap("aA") !~$>= Wrap(""))
("aA" !@>= "", Wrap("aA") !@>= Wrap(""), "aA" !~@>= "", Wrap("aA") !~@>= Wrap(""), "aA" !$>= "", Wrap("aA") !$>= Wrap(""), "aA" !~$>= "", Wrap("aA") !~$>= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$>= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$>= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA"  @=  "AA", Wrap("aA")  @=  Wrap("AA"), "aA"  ~@=  "AA", Wrap("aA")  ~@=  Wrap("AA"), "aA"  $=  "AA", Wrap("aA")  $=  Wrap("AA"), "aA"  ~$=  "AA", Wrap("aA")  ~$=  Wrap("AA"))
("aA" @= "AA", Wrap("aA") @= Wrap("AA"), "aA" ~@= "AA", Wrap("aA") ~@= Wrap("AA"), "aA" $= "AA", Wrap("aA") $= Wrap("AA"), "aA" ~$= "AA", Wrap("aA") ~$= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("aA"  @<  "AA", Wrap("aA")  @<  Wrap("AA"), "aA"  ~@<  "AA", Wrap("aA")  ~@<  Wrap("AA"), "aA"  $<  "AA", Wrap("aA")  $<  Wrap("AA"), "aA"  ~$<  "AA", Wrap("aA")  ~$<  Wrap("AA"))
("aA" @< "AA", Wrap("aA") @< Wrap("AA"), "aA" ~@< "AA", Wrap("aA") ~@< Wrap("AA"), "aA" $< "AA", Wrap("aA") $< Wrap("AA"), "aA" ~$< "AA", Wrap("aA") ~$< Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$< Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("aA"  @<= "AA", Wrap("aA")  @<= Wrap("AA"), "aA"  ~@<= "AA", Wrap("aA")  ~@<= Wrap("AA"), "aA"  $<= "AA", Wrap("aA")  $<= Wrap("AA"), "aA"  ~$<= "AA", Wrap("aA")  ~$<= Wrap("AA"))
("aA" @<= "AA", Wrap("aA") @<= Wrap("AA"), "aA" ~@<= "AA", Wrap("aA") ~@<= Wrap("AA"), "aA" $<= "AA", Wrap("aA") $<= Wrap("AA"), "aA" ~$<= "AA", Wrap("aA") ~$<= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$<= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA"  @>  "AA", Wrap("aA")  @>  Wrap("AA"), "aA"  ~@>  "AA", Wrap("aA")  ~@>  Wrap("AA"), "aA"  $>  "AA", Wrap("aA")  $>  Wrap("AA"), "aA"  ~$>  "AA", Wrap("aA")  ~$>  Wrap("AA"))
("aA" @> "AA", Wrap("aA") @> Wrap("AA"), "aA" ~@> "AA", Wrap("aA") ~@> Wrap("AA"), "aA" $> "AA", Wrap("aA") $> Wrap("AA"), "aA" ~$> "AA", Wrap("aA") ~$> Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$> Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA"  @>= "AA", Wrap("aA")  @>= Wrap("AA"), "aA"  ~@>= "AA", Wrap("aA")  ~@>= Wrap("AA"), "aA"  $>= "AA", Wrap("aA")  $>= Wrap("AA"), "aA"  ~$>= "AA", Wrap("aA")  ~$>= Wrap("AA"))
("aA" @>= "AA", Wrap("aA") @>= Wrap("AA"), "aA" ~@>= "AA", Wrap("aA") ~@>= Wrap("AA"), "aA" $>= "AA", Wrap("aA") $>= Wrap("AA"), "aA" ~$>= "AA", Wrap("aA") ~$>= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$>= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("aA" !@=  "AA", Wrap("aA") !@=  Wrap("AA"), "aA" !~@=  "AA", Wrap("aA") !~@=  Wrap("AA"), "aA" !$=  "AA", Wrap("aA") !$=  Wrap("AA"), "aA" !~$=  "AA", Wrap("aA") !~$=  Wrap("AA"))
("aA" !@= "AA", Wrap("aA") !@= Wrap("AA"), "aA" !~@= "AA", Wrap("aA") !~@= Wrap("AA"), "aA" !$= "AA", Wrap("aA") !$= Wrap("AA"), "aA" !~$= "AA", Wrap("aA") !~$= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !@= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~@= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("aA" !@<  "AA", Wrap("aA") !@<  Wrap("AA"), "aA" !~@<  "AA", Wrap("aA") !~@<  Wrap("AA"), "aA" !$<  "AA", Wrap("aA") !$<  Wrap("AA"), "aA" !~$<  "AA", Wrap("aA") !~$<  Wrap("AA"))
("aA" !@< "AA", Wrap("aA") !@< Wrap("AA"), "aA" !~@< "AA", Wrap("aA") !~@< Wrap("AA"), "aA" !$< "AA", Wrap("aA") !$< Wrap("AA"), "aA" !~$< "AA", Wrap("aA") !~$< Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$< Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("aA" !@<= "AA", Wrap("aA") !@<= Wrap("AA"), "aA" !~@<= "AA", Wrap("aA") !~@<= Wrap("AA"), "aA" !$<= "AA", Wrap("aA") !$<= Wrap("AA"), "aA" !~$<= "AA", Wrap("aA") !~$<= Wrap("AA"))
("aA" !@<= "AA", Wrap("aA") !@<= Wrap("AA"), "aA" !~@<= "AA", Wrap("aA") !~@<= Wrap("AA"), "aA" !$<= "AA", Wrap("aA") !$<= Wrap("AA"), "aA" !~$<= "AA", Wrap("aA") !~$<= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$<= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$<= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA" !@>  "AA", Wrap("aA") !@>  Wrap("AA"), "aA" !~@>  "AA", Wrap("aA") !~@>  Wrap("AA"), "aA" !$>  "AA", Wrap("aA") !$>  Wrap("AA"), "aA" !~$>  "AA", Wrap("aA") !~$>  Wrap("AA"))
("aA" !@> "AA", Wrap("aA") !@> Wrap("AA"), "aA" !~@> "AA", Wrap("aA") !~@> Wrap("AA"), "aA" !$> "AA", Wrap("aA") !$> Wrap("AA"), "aA" !~$> "AA", Wrap("aA") !~$> Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$> Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$> Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA" !@>= "AA", Wrap("aA") !@>= Wrap("AA"), "aA" !~@>= "AA", Wrap("aA") !~@>= Wrap("AA"), "aA" !$>= "AA", Wrap("aA") !$>= Wrap("AA"), "aA" !~$>= "AA", Wrap("aA") !~$>= Wrap("AA"))
("aA" !@>= "AA", Wrap("aA") !@>= Wrap("AA"), "aA" !~@>= "AA", Wrap("aA") !~@>= Wrap("AA"), "aA" !$>= "AA", Wrap("aA") !$>= Wrap("AA"), "aA" !~$>= "AA", Wrap("aA") !~$>= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$>= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("aA"  @=  "aA", Wrap("aA")  @=  Wrap("aA"), "aA"  ~@=  "aA", Wrap("aA")  ~@=  Wrap("aA"), "aA"  $=  "aA", Wrap("aA")  $=  Wrap("aA"), "aA"  ~$=  "aA", Wrap("aA")  ~$=  Wrap("aA"))
("aA" @= "aA", Wrap("aA") @= Wrap("aA"), "aA" ~@= "aA", Wrap("aA") ~@= Wrap("aA"), "aA" $= "aA", Wrap("aA") $= Wrap("aA"), "aA" ~$= "aA", Wrap("aA") ~$= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA"  @<  "aA", Wrap("aA")  @<  Wrap("aA"), "aA"  ~@<  "aA", Wrap("aA")  ~@<  Wrap("aA"), "aA"  $<  "aA", Wrap("aA")  $<  Wrap("aA"), "aA"  ~$<  "aA", Wrap("aA")  ~$<  Wrap("aA"))
("aA" @< "aA", Wrap("aA") @< Wrap("aA"), "aA" ~@< "aA", Wrap("aA") ~@< Wrap("aA"), "aA" $< "aA", Wrap("aA") $< Wrap("aA"), "aA" ~$< "aA", Wrap("aA") ~$< Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$< Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA"  @<= "aA", Wrap("aA")  @<= Wrap("aA"), "aA"  ~@<= "aA", Wrap("aA")  ~@<= Wrap("aA"), "aA"  $<= "aA", Wrap("aA")  $<= Wrap("aA"), "aA"  ~$<= "aA", Wrap("aA")  ~$<= Wrap("aA"))
("aA" @<= "aA", Wrap("aA") @<= Wrap("aA"), "aA" ~@<= "aA", Wrap("aA") ~@<= Wrap("aA"), "aA" $<= "aA", Wrap("aA") $<= Wrap("aA"), "aA" ~$<= "aA", Wrap("aA") ~$<= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$<= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA"  @>  "aA", Wrap("aA")  @>  Wrap("aA"), "aA"  ~@>  "aA", Wrap("aA")  ~@>  Wrap("aA"), "aA"  $>  "aA", Wrap("aA")  $>  Wrap("aA"), "aA"  ~$>  "aA", Wrap("aA")  ~$>  Wrap("aA"))
("aA" @> "aA", Wrap("aA") @> Wrap("aA"), "aA" ~@> "aA", Wrap("aA") ~@> Wrap("aA"), "aA" $> "aA", Wrap("aA") $> Wrap("aA"), "aA" ~$> "aA", Wrap("aA") ~$> Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$> Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA"  @>= "aA", Wrap("aA")  @>= Wrap("aA"), "aA"  ~@>= "aA", Wrap("aA")  ~@>= Wrap("aA"), "aA"  $>= "aA", Wrap("aA")  $>= Wrap("aA"), "aA"  ~$>= "aA", Wrap("aA")  ~$>= Wrap("aA"))
("aA" @>= "aA", Wrap("aA") @>= Wrap("aA"), "aA" ~@>= "aA", Wrap("aA") ~@>= Wrap("aA"), "aA" $>= "aA", Wrap("aA") $>= Wrap("aA"), "aA" ~$>= "aA", Wrap("aA") ~$>= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$>= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA" !@=  "aA", Wrap("aA") !@=  Wrap("aA"), "aA" !~@=  "aA", Wrap("aA") !~@=  Wrap("aA"), "aA" !$=  "aA", Wrap("aA") !$=  Wrap("aA"), "aA" !~$=  "aA", Wrap("aA") !~$=  Wrap("aA"))
("aA" !@= "aA", Wrap("aA") !@= Wrap("aA"), "aA" !~@= "aA", Wrap("aA") !~@= Wrap("aA"), "aA" !$= "aA", Wrap("aA") !$= Wrap("aA"), "aA" !~$= "aA", Wrap("aA") !~$= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !@= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~@= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA" !@<  "aA", Wrap("aA") !@<  Wrap("aA"), "aA" !~@<  "aA", Wrap("aA") !~@<  Wrap("aA"), "aA" !$<  "aA", Wrap("aA") !$<  Wrap("aA"), "aA" !~$<  "aA", Wrap("aA") !~$<  Wrap("aA"))
("aA" !@< "aA", Wrap("aA") !@< Wrap("aA"), "aA" !~@< "aA", Wrap("aA") !~@< Wrap("aA"), "aA" !$< "aA", Wrap("aA") !$< Wrap("aA"), "aA" !~$< "aA", Wrap("aA") !~$< Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$< Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$< Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA" !@<= "aA", Wrap("aA") !@<= Wrap("aA"), "aA" !~@<= "aA", Wrap("aA") !~@<= Wrap("aA"), "aA" !$<= "aA", Wrap("aA") !$<= Wrap("aA"), "aA" !~$<= "aA", Wrap("aA") !~$<= Wrap("aA"))
("aA" !@<= "aA", Wrap("aA") !@<= Wrap("aA"), "aA" !~@<= "aA", Wrap("aA") !~@<= Wrap("aA"), "aA" !$<= "aA", Wrap("aA") !$<= Wrap("aA"), "aA" !~$<= "aA", Wrap("aA") !~$<= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$<= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$<= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA" !@>  "aA", Wrap("aA") !@>  Wrap("aA"), "aA" !~@>  "aA", Wrap("aA") !~@>  Wrap("aA"), "aA" !$>  "aA", Wrap("aA") !$>  Wrap("aA"), "aA" !~$>  "aA", Wrap("aA") !~$>  Wrap("aA"))
("aA" !@> "aA", Wrap("aA") !@> Wrap("aA"), "aA" !~@> "aA", Wrap("aA") !~@> Wrap("aA"), "aA" !$> "aA", Wrap("aA") !$> Wrap("aA"), "aA" !~$> "aA", Wrap("aA") !~$> Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$> Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$> Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA" !@>= "aA", Wrap("aA") !@>= Wrap("aA"), "aA" !~@>= "aA", Wrap("aA") !~@>= Wrap("aA"), "aA" !$>= "aA", Wrap("aA") !$>= Wrap("aA"), "aA" !~$>= "aA", Wrap("aA") !~$>= Wrap("aA"))
("aA" !@>= "aA", Wrap("aA") !@>= Wrap("aA"), "aA" !~@>= "aA", Wrap("aA") !~@>= Wrap("aA"), "aA" !$>= "aA", Wrap("aA") !$>= Wrap("aA"), "aA" !~$>= "aA", Wrap("aA") !~$>= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$>= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$>= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA"  @=  "Aa", Wrap("aA")  @=  Wrap("Aa"), "aA"  ~@=  "Aa", Wrap("aA")  ~@=  Wrap("Aa"), "aA"  $=  "Aa", Wrap("aA")  $=  Wrap("Aa"), "aA"  ~$=  "Aa", Wrap("aA")  ~$=  Wrap("Aa"))
("aA" @= "Aa", Wrap("aA") @= Wrap("Aa"), "aA" ~@= "Aa", Wrap("aA") ~@= Wrap("Aa"), "aA" $= "Aa", Wrap("aA") $= Wrap("Aa"), "aA" ~$= "Aa", Wrap("aA") ~$= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("aA"  @<  "Aa", Wrap("aA")  @<  Wrap("Aa"), "aA"  ~@<  "Aa", Wrap("aA")  ~@<  Wrap("Aa"), "aA"  $<  "Aa", Wrap("aA")  $<  Wrap("Aa"), "aA"  ~$<  "Aa", Wrap("aA")  ~$<  Wrap("Aa"))
("aA" @< "Aa", Wrap("aA") @< Wrap("Aa"), "aA" ~@< "Aa", Wrap("aA") ~@< Wrap("Aa"), "aA" $< "Aa", Wrap("aA") $< Wrap("Aa"), "aA" ~$< "Aa", Wrap("aA") ~$< Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@< Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$< Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("aA"  @<= "Aa", Wrap("aA")  @<= Wrap("Aa"), "aA"  ~@<= "Aa", Wrap("aA")  ~@<= Wrap("Aa"), "aA"  $<= "Aa", Wrap("aA")  $<= Wrap("Aa"), "aA"  ~$<= "Aa", Wrap("aA")  ~$<= Wrap("Aa"))
("aA" @<= "Aa", Wrap("aA") @<= Wrap("Aa"), "aA" ~@<= "Aa", Wrap("aA") ~@<= Wrap("Aa"), "aA" $<= "Aa", Wrap("aA") $<= Wrap("Aa"), "aA" ~$<= "Aa", Wrap("aA") ~$<= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$<= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA"  @>  "Aa", Wrap("aA")  @>  Wrap("Aa"), "aA"  ~@>  "Aa", Wrap("aA")  ~@>  Wrap("Aa"), "aA"  $>  "Aa", Wrap("aA")  $>  Wrap("Aa"), "aA"  ~$>  "Aa", Wrap("aA")  ~$>  Wrap("Aa"))
("aA" @> "Aa", Wrap("aA") @> Wrap("Aa"), "aA" ~@> "Aa", Wrap("aA") ~@> Wrap("Aa"), "aA" $> "Aa", Wrap("aA") $> Wrap("Aa"), "aA" ~$> "Aa", Wrap("aA") ~$> Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$> Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA"  @>= "Aa", Wrap("aA")  @>= Wrap("Aa"), "aA"  ~@>= "Aa", Wrap("aA")  ~@>= Wrap("Aa"), "aA"  $>= "Aa", Wrap("aA")  $>= Wrap("Aa"), "aA"  ~$>= "Aa", Wrap("aA")  ~$>= Wrap("Aa"))
("aA" @>= "Aa", Wrap("aA") @>= Wrap("Aa"), "aA" ~@>= "Aa", Wrap("aA") ~@>= Wrap("Aa"), "aA" $>= "Aa", Wrap("aA") $>= Wrap("Aa"), "aA" ~$>= "Aa", Wrap("aA") ~$>= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@>= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$>= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("aA" !@=  "Aa", Wrap("aA") !@=  Wrap("Aa"), "aA" !~@=  "Aa", Wrap("aA") !~@=  Wrap("Aa"), "aA" !$=  "Aa", Wrap("aA") !$=  Wrap("Aa"), "aA" !~$=  "Aa", Wrap("aA") !~$=  Wrap("Aa"))
("aA" !@= "Aa", Wrap("aA") !@= Wrap("Aa"), "aA" !~@= "Aa", Wrap("aA") !~@= Wrap("Aa"), "aA" !$= "Aa", Wrap("aA") !$= Wrap("Aa"), "aA" !~$= "Aa", Wrap("aA") !~$= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !@= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~@= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("aA" !@<  "Aa", Wrap("aA") !@<  Wrap("Aa"), "aA" !~@<  "Aa", Wrap("aA") !~@<  Wrap("Aa"), "aA" !$<  "Aa", Wrap("aA") !$<  Wrap("Aa"), "aA" !~$<  "Aa", Wrap("aA") !~$<  Wrap("Aa"))
("aA" !@< "Aa", Wrap("aA") !@< Wrap("Aa"), "aA" !~@< "Aa", Wrap("aA") !~@< Wrap("Aa"), "aA" !$< "Aa", Wrap("aA") !$< Wrap("Aa"), "aA" !~$< "Aa", Wrap("aA") !~$< Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@>= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$< Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$< Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("aA" !@<= "Aa", Wrap("aA") !@<= Wrap("Aa"), "aA" !~@<= "Aa", Wrap("aA") !~@<= Wrap("Aa"), "aA" !$<= "Aa", Wrap("aA") !$<= Wrap("Aa"), "aA" !~$<= "Aa", Wrap("aA") !~$<= Wrap("Aa"))
("aA" !@<= "Aa", Wrap("aA") !@<= Wrap("Aa"), "aA" !~@<= "Aa", Wrap("aA") !~@<= Wrap("Aa"), "aA" !$<= "Aa", Wrap("aA") !$<= Wrap("Aa"), "aA" !~$<= "Aa", Wrap("aA") !~$<= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$<= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$<= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA" !@>  "Aa", Wrap("aA") !@>  Wrap("Aa"), "aA" !~@>  "Aa", Wrap("aA") !~@>  Wrap("Aa"), "aA" !$>  "Aa", Wrap("aA") !$>  Wrap("Aa"), "aA" !~$>  "Aa", Wrap("aA") !~$>  Wrap("Aa"))
("aA" !@> "Aa", Wrap("aA") !@> Wrap("Aa"), "aA" !~@> "Aa", Wrap("aA") !~@> Wrap("Aa"), "aA" !$> "Aa", Wrap("aA") !$> Wrap("Aa"), "aA" !~$> "Aa", Wrap("aA") !~$> Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$> Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$> Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA" !@>= "Aa", Wrap("aA") !@>= Wrap("Aa"), "aA" !~@>= "Aa", Wrap("aA") !~@>= Wrap("Aa"), "aA" !$>= "Aa", Wrap("aA") !$>= Wrap("Aa"), "aA" !~$>= "Aa", Wrap("aA") !~$>= Wrap("Aa"))
("aA" !@>= "Aa", Wrap("aA") !@>= Wrap("Aa"), "aA" !~@>= "Aa", Wrap("aA") !~@>= Wrap("Aa"), "aA" !$>= "Aa", Wrap("aA") !$>= Wrap("Aa"), "aA" !~$>= "Aa", Wrap("aA") !~$>= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@< Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$>= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$>= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("aA"  @=  "BB", Wrap("aA")  @=  Wrap("BB"), "aA"  ~@=  "BB", Wrap("aA")  ~@=  Wrap("BB"), "aA"  $=  "BB", Wrap("aA")  $=  Wrap("BB"), "aA"  ~$=  "BB", Wrap("aA")  ~$=  Wrap("BB"))
("aA" @= "BB", Wrap("aA") @= Wrap("BB"), "aA" ~@= "BB", Wrap("aA") ~@= Wrap("BB"), "aA" $= "BB", Wrap("aA") $= Wrap("BB"), "aA" ~$= "BB", Wrap("aA") ~$= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA"  @<  "BB", Wrap("aA")  @<  Wrap("BB"), "aA"  ~@<  "BB", Wrap("aA")  ~@<  Wrap("BB"), "aA"  $<  "BB", Wrap("aA")  $<  Wrap("BB"), "aA"  ~$<  "BB", Wrap("aA")  ~$<  Wrap("BB"))
("aA" @< "BB", Wrap("aA") @< Wrap("BB"), "aA" ~@< "BB", Wrap("aA") ~@< Wrap("BB"), "aA" $< "BB", Wrap("aA") $< Wrap("BB"), "aA" ~$< "BB", Wrap("aA") ~$< Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$< Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA"  @<= "BB", Wrap("aA")  @<= Wrap("BB"), "aA"  ~@<= "BB", Wrap("aA")  ~@<= Wrap("BB"), "aA"  $<= "BB", Wrap("aA")  $<= Wrap("BB"), "aA"  ~$<= "BB", Wrap("aA")  ~$<= Wrap("BB"))
("aA" @<= "BB", Wrap("aA") @<= Wrap("BB"), "aA" ~@<= "BB", Wrap("aA") ~@<= Wrap("BB"), "aA" $<= "BB", Wrap("aA") $<= Wrap("BB"), "aA" ~$<= "BB", Wrap("aA") ~$<= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$<= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA"  @>  "BB", Wrap("aA")  @>  Wrap("BB"), "aA"  ~@>  "BB", Wrap("aA")  ~@>  Wrap("BB"), "aA"  $>  "BB", Wrap("aA")  $>  Wrap("BB"), "aA"  ~$>  "BB", Wrap("aA")  ~$>  Wrap("BB"))
("aA" @> "BB", Wrap("aA") @> Wrap("BB"), "aA" ~@> "BB", Wrap("aA") ~@> Wrap("BB"), "aA" $> "BB", Wrap("aA") $> Wrap("BB"), "aA" ~$> "BB", Wrap("aA") ~$> Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$> Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA"  @>= "BB", Wrap("aA")  @>= Wrap("BB"), "aA"  ~@>= "BB", Wrap("aA")  ~@>= Wrap("BB"), "aA"  $>= "BB", Wrap("aA")  $>= Wrap("BB"), "aA"  ~$>= "BB", Wrap("aA")  ~$>= Wrap("BB"))
("aA" @>= "BB", Wrap("aA") @>= Wrap("BB"), "aA" ~@>= "BB", Wrap("aA") ~@>= Wrap("BB"), "aA" $>= "BB", Wrap("aA") $>= Wrap("BB"), "aA" ~$>= "BB", Wrap("aA") ~$>= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$>= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA" !@=  "BB", Wrap("aA") !@=  Wrap("BB"), "aA" !~@=  "BB", Wrap("aA") !~@=  Wrap("BB"), "aA" !$=  "BB", Wrap("aA") !$=  Wrap("BB"), "aA" !~$=  "BB", Wrap("aA") !~$=  Wrap("BB"))
("aA" !@= "BB", Wrap("aA") !@= Wrap("BB"), "aA" !~@= "BB", Wrap("aA") !~@= Wrap("BB"), "aA" !$= "BB", Wrap("aA") !$= Wrap("BB"), "aA" !~$= "BB", Wrap("aA") !~$= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !@= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~@= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA" !@<  "BB", Wrap("aA") !@<  Wrap("BB"), "aA" !~@<  "BB", Wrap("aA") !~@<  Wrap("BB"), "aA" !$<  "BB", Wrap("aA") !$<  Wrap("BB"), "aA" !~$<  "BB", Wrap("aA") !~$<  Wrap("BB"))
("aA" !@< "BB", Wrap("aA") !@< Wrap("BB"), "aA" !~@< "BB", Wrap("aA") !~@< Wrap("BB"), "aA" !$< "BB", Wrap("aA") !$< Wrap("BB"), "aA" !~$< "BB", Wrap("aA") !~$< Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$< Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$< Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA" !@<= "BB", Wrap("aA") !@<= Wrap("BB"), "aA" !~@<= "BB", Wrap("aA") !~@<= Wrap("BB"), "aA" !$<= "BB", Wrap("aA") !$<= Wrap("BB"), "aA" !~$<= "BB", Wrap("aA") !~$<= Wrap("BB"))
("aA" !@<= "BB", Wrap("aA") !@<= Wrap("BB"), "aA" !~@<= "BB", Wrap("aA") !~@<= Wrap("BB"), "aA" !$<= "BB", Wrap("aA") !$<= Wrap("BB"), "aA" !~$<= "BB", Wrap("aA") !~$<= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$<= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$<= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA" !@>  "BB", Wrap("aA") !@>  Wrap("BB"), "aA" !~@>  "BB", Wrap("aA") !~@>  Wrap("BB"), "aA" !$>  "BB", Wrap("aA") !$>  Wrap("BB"), "aA" !~$>  "BB", Wrap("aA") !~$>  Wrap("BB"))
("aA" !@> "BB", Wrap("aA") !@> Wrap("BB"), "aA" !~@> "BB", Wrap("aA") !~@> Wrap("BB"), "aA" !$> "BB", Wrap("aA") !$> Wrap("BB"), "aA" !~$> "BB", Wrap("aA") !~$> Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$> Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$> Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA" !@>= "BB", Wrap("aA") !@>= Wrap("BB"), "aA" !~@>= "BB", Wrap("aA") !~@>= Wrap("BB"), "aA" !$>= "BB", Wrap("aA") !$>= Wrap("BB"), "aA" !~$>= "BB", Wrap("aA") !~$>= Wrap("BB"))
("aA" !@>= "BB", Wrap("aA") !@>= Wrap("BB"), "aA" !~@>= "BB", Wrap("aA") !~@>= Wrap("BB"), "aA" !$>= "BB", Wrap("aA") !$>= Wrap("BB"), "aA" !~$>= "BB", Wrap("aA") !~$>= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$>= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$>= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA"  @=  Null(""), Wrap("aA")  @=  Wrap(Null("")), "aA"  ~@=  Null(""), Wrap("aA")  ~@=  Wrap(Null("")), "aA"  $=  Null(""), Wrap("aA")  $=  Wrap(Null("")), "aA"  ~$=  Null(""), Wrap("aA")  ~$=  Wrap(Null("")))
("aA" @= Null(""), Wrap("aA") @= Wrap(Null("")), "aA" ~@= Null(""), Wrap("aA") ~@= Wrap(Null("")), "aA" $= Null(""), Wrap("aA") $= Wrap(Null("")), "aA" ~$= Null(""), Wrap("aA") ~$= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA"  @<  Null(""), Wrap("aA")  @<  Wrap(Null("")), "aA"  ~@<  Null(""), Wrap("aA")  ~@<  Wrap(Null("")), "aA"  $<  Null(""), Wrap("aA")  $<  Wrap(Null("")), "aA"  ~$<  Null(""), Wrap("aA")  ~$<  Wrap(Null("")))
("aA" @< Null(""), Wrap("aA") @< Wrap(Null("")), "aA" ~@< Null(""), Wrap("aA") ~@< Wrap(Null("")), "aA" $< Null(""), Wrap("aA") $< Wrap(Null("")), "aA" ~$< Null(""), Wrap("aA") ~$< Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$< Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA"  @<= Null(""), Wrap("aA")  @<= Wrap(Null("")), "aA"  ~@<= Null(""), Wrap("aA")  ~@<= Wrap(Null("")), "aA"  $<= Null(""), Wrap("aA")  $<= Wrap(Null("")), "aA"  ~$<= Null(""), Wrap("aA")  ~$<= Wrap(Null("")))
("aA" @<= Null(""), Wrap("aA") @<= Wrap(Null("")), "aA" ~@<= Null(""), Wrap("aA") ~@<= Wrap(Null("")), "aA" $<= Null(""), Wrap("aA") $<= Wrap(Null("")), "aA" ~$<= Null(""), Wrap("aA") ~$<= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$<= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("aA"  @>  Null(""), Wrap("aA")  @>  Wrap(Null("")), "aA"  ~@>  Null(""), Wrap("aA")  ~@>  Wrap(Null("")), "aA"  $>  Null(""), Wrap("aA")  $>  Wrap(Null("")), "aA"  ~$>  Null(""), Wrap("aA")  ~$>  Wrap(Null("")))
("aA" @> Null(""), Wrap("aA") @> Wrap(Null("")), "aA" ~@> Null(""), Wrap("aA") ~@> Wrap(Null("")), "aA" $> Null(""), Wrap("aA") $> Wrap(Null("")), "aA" ~$> Null(""), Wrap("aA") ~$> Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@> Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $> Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$> Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> ("aA"  @>= Null(""), Wrap("aA")  @>= Wrap(Null("")), "aA"  ~@>= Null(""), Wrap("aA")  ~@>= Wrap(Null("")), "aA"  $>= Null(""), Wrap("aA")  $>= Wrap(Null("")), "aA"  ~$>= Null(""), Wrap("aA")  ~$>= Wrap(Null("")))
("aA" @>= Null(""), Wrap("aA") @>= Wrap(Null("")), "aA" ~@>= Null(""), Wrap("aA") ~@>= Wrap(Null("")), "aA" $>= Null(""), Wrap("aA") $>= Wrap(Null("")), "aA" ~$>= Null(""), Wrap("aA") ~$>= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@>= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) $>= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~$>= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> ("aA" !@=  Null(""), Wrap("aA") !@=  Wrap(Null("")), "aA" !~@=  Null(""), Wrap("aA") !~@=  Wrap(Null("")), "aA" !$=  Null(""), Wrap("aA") !$=  Wrap(Null("")), "aA" !~$=  Null(""), Wrap("aA") !~$=  Wrap(Null("")))
("aA" !@= Null(""), Wrap("aA") !@= Wrap(Null("")), "aA" !~@= Null(""), Wrap("aA") !~@= Wrap(Null("")), "aA" !$= Null(""), Wrap("aA") !$= Wrap(Null("")), "aA" !~$= Null(""), Wrap("aA") !~$= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !@= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~@= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA" !@<  Null(""), Wrap("aA") !@<  Wrap(Null("")), "aA" !~@<  Null(""), Wrap("aA") !~@<  Wrap(Null("")), "aA" !$<  Null(""), Wrap("aA") !$<  Wrap(Null("")), "aA" !~$<  Null(""), Wrap("aA") !~$<  Wrap(Null("")))
("aA" !@< Null(""), Wrap("aA") !@< Wrap(Null("")), "aA" !~@< Null(""), Wrap("aA") !~@< Wrap(Null("")), "aA" !$< Null(""), Wrap("aA") !$< Wrap(Null("")), "aA" !~$< Null(""), Wrap("aA") !~$< Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$< Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$< Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA" !@<= Null(""), Wrap("aA") !@<= Wrap(Null("")), "aA" !~@<= Null(""), Wrap("aA") !~@<= Wrap(Null("")), "aA" !$<= Null(""), Wrap("aA") !$<= Wrap(Null("")), "aA" !~$<= Null(""), Wrap("aA") !~$<= Wrap(Null("")))
("aA" !@<= Null(""), Wrap("aA") !@<= Wrap(Null("")), "aA" !~@<= Null(""), Wrap("aA") !~@<= Wrap(Null("")), "aA" !$<= Null(""), Wrap("aA") !$<= Wrap(Null("")), "aA" !~$<= Null(""), Wrap("aA") !~$<= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$<= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$<= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("aA" !@>  Null(""), Wrap("aA") !@>  Wrap(Null("")), "aA" !~@>  Null(""), Wrap("aA") !~@>  Wrap(Null("")), "aA" !$>  Null(""), Wrap("aA") !$>  Wrap(Null("")), "aA" !~$>  Null(""), Wrap("aA") !~$>  Wrap(Null("")))
("aA" !@> Null(""), Wrap("aA") !@> Wrap(Null("")), "aA" !~@> Null(""), Wrap("aA") !~@> Wrap(Null("")), "aA" !$> Null(""), Wrap("aA") !$> Wrap(Null("")), "aA" !~$> Null(""), Wrap("aA") !~$> Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@<= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$> Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> ("aA" !@>= Null(""), Wrap("aA") !@>= Wrap(Null("")), "aA" !~@>= Null(""), Wrap("aA") !~@>= Wrap(Null("")), "aA" !$>= Null(""), Wrap("aA") !$>= Wrap(Null("")), "aA" !~$>= Null(""), Wrap("aA") !~$>= Wrap(Null("")))
("aA" !@>= Null(""), Wrap("aA") !@>= Wrap(Null("")), "aA" !~@>= Null(""), Wrap("aA") !~@>= Wrap(Null("")), "aA" !$>= Null(""), Wrap("aA") !$>= Wrap(Null("")), "aA" !~$>= Null(""), Wrap("aA") !~$>= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) @< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) ~@< Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !$>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(aA)):s) !~$>= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> ("Aa"  @=  "", Wrap("Aa")  @=  Wrap(""), "Aa"  ~@=  "", Wrap("Aa")  ~@=  Wrap(""), "Aa"  $=  "", Wrap("Aa")  $=  Wrap(""), "Aa"  ~$=  "", Wrap("Aa")  ~$=  Wrap(""))
("Aa" @= "", Wrap("Aa") @= Wrap(""), "Aa" ~@= "", Wrap("Aa") ~@= Wrap(""), "Aa" $= "", Wrap("Aa") $= Wrap(""), "Aa" ~$= "", Wrap("Aa") ~$= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa"  @<  "", Wrap("Aa")  @<  Wrap(""), "Aa"  ~@<  "", Wrap("Aa")  ~@<  Wrap(""), "Aa"  $<  "", Wrap("Aa")  $<  Wrap(""), "Aa"  ~$<  "", Wrap("Aa")  ~$<  Wrap(""))
("Aa" @< "", Wrap("Aa") @< Wrap(""), "Aa" ~@< "", Wrap("Aa") ~@< Wrap(""), "Aa" $< "", Wrap("Aa") $< Wrap(""), "Aa" ~$< "", Wrap("Aa") ~$< Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$< Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa"  @<= "", Wrap("Aa")  @<= Wrap(""), "Aa"  ~@<= "", Wrap("Aa")  ~@<= Wrap(""), "Aa"  $<= "", Wrap("Aa")  $<= Wrap(""), "Aa"  ~$<= "", Wrap("Aa")  ~$<= Wrap(""))
("Aa" @<= "", Wrap("Aa") @<= Wrap(""), "Aa" ~@<= "", Wrap("Aa") ~@<= Wrap(""), "Aa" $<= "", Wrap("Aa") $<= Wrap(""), "Aa" ~$<= "", Wrap("Aa") ~$<= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$<= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa"  @>  "", Wrap("Aa")  @>  Wrap(""), "Aa"  ~@>  "", Wrap("Aa")  ~@>  Wrap(""), "Aa"  $>  "", Wrap("Aa")  $>  Wrap(""), "Aa"  ~$>  "", Wrap("Aa")  ~$>  Wrap(""))
("Aa" @> "", Wrap("Aa") @> Wrap(""), "Aa" ~@> "", Wrap("Aa") ~@> Wrap(""), "Aa" $> "", Wrap("Aa") $> Wrap(""), "Aa" ~$> "", Wrap("Aa") ~$> Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$> Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa"  @>= "", Wrap("Aa")  @>= Wrap(""), "Aa"  ~@>= "", Wrap("Aa")  ~@>= Wrap(""), "Aa"  $>= "", Wrap("Aa")  $>= Wrap(""), "Aa"  ~$>= "", Wrap("Aa")  ~$>= Wrap(""))
("Aa" @>= "", Wrap("Aa") @>= Wrap(""), "Aa" ~@>= "", Wrap("Aa") ~@>= Wrap(""), "Aa" $>= "", Wrap("Aa") $>= Wrap(""), "Aa" ~$>= "", Wrap("Aa") ~$>= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$>= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa" !@=  "", Wrap("Aa") !@=  Wrap(""), "Aa" !~@=  "", Wrap("Aa") !~@=  Wrap(""), "Aa" !$=  "", Wrap("Aa") !$=  Wrap(""), "Aa" !~$=  "", Wrap("Aa") !~$=  Wrap(""))
("Aa" !@= "", Wrap("Aa") !@= Wrap(""), "Aa" !~@= "", Wrap("Aa") !~@= Wrap(""), "Aa" !$= "", Wrap("Aa") !$= Wrap(""), "Aa" !~$= "", Wrap("Aa") !~$= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !@= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~@= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa" !@<  "", Wrap("Aa") !@<  Wrap(""), "Aa" !~@<  "", Wrap("Aa") !~@<  Wrap(""), "Aa" !$<  "", Wrap("Aa") !$<  Wrap(""), "Aa" !~$<  "", Wrap("Aa") !~$<  Wrap(""))
("Aa" !@< "", Wrap("Aa") !@< Wrap(""), "Aa" !~@< "", Wrap("Aa") !~@< Wrap(""), "Aa" !$< "", Wrap("Aa") !$< Wrap(""), "Aa" !~$< "", Wrap("Aa") !~$< Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$< Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$< Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa" !@<= "", Wrap("Aa") !@<= Wrap(""), "Aa" !~@<= "", Wrap("Aa") !~@<= Wrap(""), "Aa" !$<= "", Wrap("Aa") !$<= Wrap(""), "Aa" !~$<= "", Wrap("Aa") !~$<= Wrap(""))
("Aa" !@<= "", Wrap("Aa") !@<= Wrap(""), "Aa" !~@<= "", Wrap("Aa") !~@<= Wrap(""), "Aa" !$<= "", Wrap("Aa") !$<= Wrap(""), "Aa" !~$<= "", Wrap("Aa") !~$<= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$<= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$<= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa" !@>  "", Wrap("Aa") !@>  Wrap(""), "Aa" !~@>  "", Wrap("Aa") !~@>  Wrap(""), "Aa" !$>  "", Wrap("Aa") !$>  Wrap(""), "Aa" !~$>  "", Wrap("Aa") !~$>  Wrap(""))
("Aa" !@> "", Wrap("Aa") !@> Wrap(""), "Aa" !~@> "", Wrap("Aa") !~@> Wrap(""), "Aa" !$> "", Wrap("Aa") !$> Wrap(""), "Aa" !~$> "", Wrap("Aa") !~$> Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$> Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$> Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa" !@>= "", Wrap("Aa") !@>= Wrap(""), "Aa" !~@>= "", Wrap("Aa") !~@>= Wrap(""), "Aa" !$>= "", Wrap("Aa") !$>= Wrap(""), "Aa" !~$>= "", Wrap("Aa") !~$>= Wrap(""))
("Aa" !@>= "", Wrap("Aa") !@>= Wrap(""), "Aa" !~@>= "", Wrap("Aa") !~@>= Wrap(""), "Aa" !$>= "", Wrap("Aa") !$>= Wrap(""), "Aa" !~$>= "", Wrap("Aa") !~$>= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$>= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$>= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa"  @=  "AA", Wrap("Aa")  @=  Wrap("AA"), "Aa"  ~@=  "AA", Wrap("Aa")  ~@=  Wrap("AA"), "Aa"  $=  "AA", Wrap("Aa")  $=  Wrap("AA"), "Aa"  ~$=  "AA", Wrap("Aa")  ~$=  Wrap("AA"))
("Aa" @= "AA", Wrap("Aa") @= Wrap("AA"), "Aa" ~@= "AA", Wrap("Aa") ~@= Wrap("AA"), "Aa" $= "AA", Wrap("Aa") $= Wrap("AA"), "Aa" ~$= "AA", Wrap("Aa") ~$= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("Aa"  @<  "AA", Wrap("Aa")  @<  Wrap("AA"), "Aa"  ~@<  "AA", Wrap("Aa")  ~@<  Wrap("AA"), "Aa"  $<  "AA", Wrap("Aa")  $<  Wrap("AA"), "Aa"  ~$<  "AA", Wrap("Aa")  ~$<  Wrap("AA"))
("Aa" @< "AA", Wrap("Aa") @< Wrap("AA"), "Aa" ~@< "AA", Wrap("Aa") ~@< Wrap("AA"), "Aa" $< "AA", Wrap("Aa") $< Wrap("AA"), "Aa" ~$< "AA", Wrap("Aa") ~$< Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$< Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("Aa"  @<= "AA", Wrap("Aa")  @<= Wrap("AA"), "Aa"  ~@<= "AA", Wrap("Aa")  ~@<= Wrap("AA"), "Aa"  $<= "AA", Wrap("Aa")  $<= Wrap("AA"), "Aa"  ~$<= "AA", Wrap("Aa")  ~$<= Wrap("AA"))
("Aa" @<= "AA", Wrap("Aa") @<= Wrap("AA"), "Aa" ~@<= "AA", Wrap("Aa") ~@<= Wrap("AA"), "Aa" $<= "AA", Wrap("Aa") $<= Wrap("AA"), "Aa" ~$<= "AA", Wrap("Aa") ~$<= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$<= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa"  @>  "AA", Wrap("Aa")  @>  Wrap("AA"), "Aa"  ~@>  "AA", Wrap("Aa")  ~@>  Wrap("AA"), "Aa"  $>  "AA", Wrap("Aa")  $>  Wrap("AA"), "Aa"  ~$>  "AA", Wrap("Aa")  ~$>  Wrap("AA"))
("Aa" @> "AA", Wrap("Aa") @> Wrap("AA"), "Aa" ~@> "AA", Wrap("Aa") ~@> Wrap("AA"), "Aa" $> "AA", Wrap("Aa") $> Wrap("AA"), "Aa" ~$> "AA", Wrap("Aa") ~$> Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$> Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa"  @>= "AA", Wrap("Aa")  @>= Wrap("AA"), "Aa"  ~@>= "AA", Wrap("Aa")  ~@>= Wrap("AA"), "Aa"  $>= "AA", Wrap("Aa")  $>= Wrap("AA"), "Aa"  ~$>= "AA", Wrap("Aa")  ~$>= Wrap("AA"))
("Aa" @>= "AA", Wrap("Aa") @>= Wrap("AA"), "Aa" ~@>= "AA", Wrap("Aa") ~@>= Wrap("AA"), "Aa" $>= "AA", Wrap("Aa") $>= Wrap("AA"), "Aa" ~$>= "AA", Wrap("Aa") ~$>= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$>= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("Aa" !@=  "AA", Wrap("Aa") !@=  Wrap("AA"), "Aa" !~@=  "AA", Wrap("Aa") !~@=  Wrap("AA"), "Aa" !$=  "AA", Wrap("Aa") !$=  Wrap("AA"), "Aa" !~$=  "AA", Wrap("Aa") !~$=  Wrap("AA"))
("Aa" !@= "AA", Wrap("Aa") !@= Wrap("AA"), "Aa" !~@= "AA", Wrap("Aa") !~@= Wrap("AA"), "Aa" !$= "AA", Wrap("Aa") !$= Wrap("AA"), "Aa" !~$= "AA", Wrap("Aa") !~$= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !@= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~@= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("Aa" !@<  "AA", Wrap("Aa") !@<  Wrap("AA"), "Aa" !~@<  "AA", Wrap("Aa") !~@<  Wrap("AA"), "Aa" !$<  "AA", Wrap("Aa") !$<  Wrap("AA"), "Aa" !~$<  "AA", Wrap("Aa") !~$<  Wrap("AA"))
("Aa" !@< "AA", Wrap("Aa") !@< Wrap("AA"), "Aa" !~@< "AA", Wrap("Aa") !~@< Wrap("AA"), "Aa" !$< "AA", Wrap("Aa") !$< Wrap("AA"), "Aa" !~$< "AA", Wrap("Aa") !~$< Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$< Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("Aa" !@<= "AA", Wrap("Aa") !@<= Wrap("AA"), "Aa" !~@<= "AA", Wrap("Aa") !~@<= Wrap("AA"), "Aa" !$<= "AA", Wrap("Aa") !$<= Wrap("AA"), "Aa" !~$<= "AA", Wrap("Aa") !~$<= Wrap("AA"))
("Aa" !@<= "AA", Wrap("Aa") !@<= Wrap("AA"), "Aa" !~@<= "AA", Wrap("Aa") !~@<= Wrap("AA"), "Aa" !$<= "AA", Wrap("Aa") !$<= Wrap("AA"), "Aa" !~$<= "AA", Wrap("Aa") !~$<= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$<= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$<= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa" !@>  "AA", Wrap("Aa") !@>  Wrap("AA"), "Aa" !~@>  "AA", Wrap("Aa") !~@>  Wrap("AA"), "Aa" !$>  "AA", Wrap("Aa") !$>  Wrap("AA"), "Aa" !~$>  "AA", Wrap("Aa") !~$>  Wrap("AA"))
("Aa" !@> "AA", Wrap("Aa") !@> Wrap("AA"), "Aa" !~@> "AA", Wrap("Aa") !~@> Wrap("AA"), "Aa" !$> "AA", Wrap("Aa") !$> Wrap("AA"), "Aa" !~$> "AA", Wrap("Aa") !~$> Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$> Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$> Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa" !@>= "AA", Wrap("Aa") !@>= Wrap("AA"), "Aa" !~@>= "AA", Wrap("Aa") !~@>= Wrap("AA"), "Aa" !$>= "AA", Wrap("Aa") !$>= Wrap("AA"), "Aa" !~$>= "AA", Wrap("Aa") !~$>= Wrap("AA"))
("Aa" !@>= "AA", Wrap("Aa") !@>= Wrap("AA"), "Aa" !~@>= "AA", Wrap("Aa") !~@>= Wrap("AA"), "Aa" !$>= "AA", Wrap("Aa") !$>= Wrap("AA"), "Aa" !~$>= "AA", Wrap("Aa") !~$>= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$>= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("Aa"  @=  "aA", Wrap("Aa")  @=  Wrap("aA"), "Aa"  ~@=  "aA", Wrap("Aa")  ~@=  Wrap("aA"), "Aa"  $=  "aA", Wrap("Aa")  $=  Wrap("aA"), "Aa"  ~$=  "aA", Wrap("Aa")  ~$=  Wrap("aA"))
("Aa" @= "aA", Wrap("Aa") @= Wrap("aA"), "Aa" ~@= "aA", Wrap("Aa") ~@= Wrap("aA"), "Aa" $= "aA", Wrap("Aa") $= Wrap("aA"), "Aa" ~$= "aA", Wrap("Aa") ~$= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("Aa"  @<  "aA", Wrap("Aa")  @<  Wrap("aA"), "Aa"  ~@<  "aA", Wrap("Aa")  ~@<  Wrap("aA"), "Aa"  $<  "aA", Wrap("Aa")  $<  Wrap("aA"), "Aa"  ~$<  "aA", Wrap("Aa")  ~$<  Wrap("aA"))
("Aa" @< "aA", Wrap("Aa") @< Wrap("aA"), "Aa" ~@< "aA", Wrap("Aa") ~@< Wrap("aA"), "Aa" $< "aA", Wrap("Aa") $< Wrap("aA"), "Aa" ~$< "aA", Wrap("Aa") ~$< Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$< Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa"  @<= "aA", Wrap("Aa")  @<= Wrap("aA"), "Aa"  ~@<= "aA", Wrap("Aa")  ~@<= Wrap("aA"), "Aa"  $<= "aA", Wrap("Aa")  $<= Wrap("aA"), "Aa"  ~$<= "aA", Wrap("Aa")  ~$<= Wrap("aA"))
("Aa" @<= "aA", Wrap("Aa") @<= Wrap("aA"), "Aa" ~@<= "aA", Wrap("Aa") ~@<= Wrap("aA"), "Aa" $<= "aA", Wrap("Aa") $<= Wrap("aA"), "Aa" ~$<= "aA", Wrap("Aa") ~$<= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@<= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$<= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("Aa"  @>  "aA", Wrap("Aa")  @>  Wrap("aA"), "Aa"  ~@>  "aA", Wrap("Aa")  ~@>  Wrap("aA"), "Aa"  $>  "aA", Wrap("Aa")  $>  Wrap("aA"), "Aa"  ~$>  "aA", Wrap("Aa")  ~$>  Wrap("aA"))
("Aa" @> "aA", Wrap("Aa") @> Wrap("aA"), "Aa" ~@> "aA", Wrap("Aa") ~@> Wrap("aA"), "Aa" $> "aA", Wrap("Aa") $> Wrap("aA"), "Aa" ~$> "aA", Wrap("Aa") ~$> Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@> Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$> Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("Aa"  @>= "aA", Wrap("Aa")  @>= Wrap("aA"), "Aa"  ~@>= "aA", Wrap("Aa")  ~@>= Wrap("aA"), "Aa"  $>= "aA", Wrap("Aa")  $>= Wrap("aA"), "Aa"  ~$>= "aA", Wrap("Aa")  ~$>= Wrap("aA"))
("Aa" @>= "aA", Wrap("Aa") @>= Wrap("aA"), "Aa" ~@>= "aA", Wrap("Aa") ~@>= Wrap("aA"), "Aa" $>= "aA", Wrap("Aa") $>= Wrap("aA"), "Aa" ~$>= "aA", Wrap("Aa") ~$>= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$>= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa" !@=  "aA", Wrap("Aa") !@=  Wrap("aA"), "Aa" !~@=  "aA", Wrap("Aa") !~@=  Wrap("aA"), "Aa" !$=  "aA", Wrap("Aa") !$=  Wrap("aA"), "Aa" !~$=  "aA", Wrap("Aa") !~$=  Wrap("aA"))
("Aa" !@= "aA", Wrap("Aa") !@= Wrap("aA"), "Aa" !~@= "aA", Wrap("Aa") !~@= Wrap("aA"), "Aa" !$= "aA", Wrap("Aa") !$= Wrap("aA"), "Aa" !~$= "aA", Wrap("Aa") !~$= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !@= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~@= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("Aa" !@<  "aA", Wrap("Aa") !@<  Wrap("aA"), "Aa" !~@<  "aA", Wrap("Aa") !~@<  Wrap("aA"), "Aa" !$<  "aA", Wrap("Aa") !$<  Wrap("aA"), "Aa" !~$<  "aA", Wrap("Aa") !~$<  Wrap("aA"))
("Aa" !@< "aA", Wrap("Aa") !@< Wrap("aA"), "Aa" !~@< "aA", Wrap("Aa") !~@< Wrap("aA"), "Aa" !$< "aA", Wrap("Aa") !$< Wrap("aA"), "Aa" !~$< "aA", Wrap("Aa") !~$< Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$< Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$< Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa" !@<= "aA", Wrap("Aa") !@<= Wrap("aA"), "Aa" !~@<= "aA", Wrap("Aa") !~@<= Wrap("aA"), "Aa" !$<= "aA", Wrap("Aa") !$<= Wrap("aA"), "Aa" !~$<= "aA", Wrap("Aa") !~$<= Wrap("aA"))
("Aa" !@<= "aA", Wrap("Aa") !@<= Wrap("aA"), "Aa" !~@<= "aA", Wrap("Aa") !~@<= Wrap("aA"), "Aa" !$<= "aA", Wrap("Aa") !$<= Wrap("aA"), "Aa" !~$<= "aA", Wrap("Aa") !~$<= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@> Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$<= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$<= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , false, false, true , true , false, false)
###
> ("Aa" !@>  "aA", Wrap("Aa") !@>  Wrap("aA"), "Aa" !~@>  "aA", Wrap("Aa") !~@>  Wrap("aA"), "Aa" !$>  "aA", Wrap("Aa") !$>  Wrap("aA"), "Aa" !~$>  "aA", Wrap("Aa") !~$>  Wrap("aA"))
("Aa" !@> "aA", Wrap("Aa") !@> Wrap("aA"), "Aa" !~@> "aA", Wrap("Aa") !~@> Wrap("aA"), "Aa" !$> "aA", Wrap("Aa") !$> Wrap("aA"), "Aa" !~$> "aA", Wrap("Aa") !~$> Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@<= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$> Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$> Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, true , true , false, false, true , true )
###
> ("Aa" !@>= "aA", Wrap("Aa") !@>= Wrap("aA"), "Aa" !~@>= "aA", Wrap("Aa") !~@>= Wrap("aA"), "Aa" !$>= "aA", Wrap("Aa") !$>= Wrap("aA"), "Aa" !~$>= "aA", Wrap("Aa") !~$>= Wrap("aA"))
("Aa" !@>= "aA", Wrap("Aa") !@>= Wrap("aA"), "Aa" !~@>= "aA", Wrap("Aa") !~@>= Wrap("aA"), "Aa" !$>= "aA", Wrap("Aa") !$>= Wrap("aA"), "Aa" !~$>= "aA", Wrap("Aa") !~$>= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$>= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$>= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa"  @=  "Aa", Wrap("Aa")  @=  Wrap("Aa"), "Aa"  ~@=  "Aa", Wrap("Aa")  ~@=  Wrap("Aa"), "Aa"  $=  "Aa", Wrap("Aa")  $=  Wrap("Aa"), "Aa"  ~$=  "Aa", Wrap("Aa")  ~$=  Wrap("Aa"))
("Aa" @= "Aa", Wrap("Aa") @= Wrap("Aa"), "Aa" ~@= "Aa", Wrap("Aa") ~@= Wrap("Aa"), "Aa" $= "Aa", Wrap("Aa") $= Wrap("Aa"), "Aa" ~$= "Aa", Wrap("Aa") ~$= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa"  @<  "Aa", Wrap("Aa")  @<  Wrap("Aa"), "Aa"  ~@<  "Aa", Wrap("Aa")  ~@<  Wrap("Aa"), "Aa"  $<  "Aa", Wrap("Aa")  $<  Wrap("Aa"), "Aa"  ~$<  "Aa", Wrap("Aa")  ~$<  Wrap("Aa"))
("Aa" @< "Aa", Wrap("Aa") @< Wrap("Aa"), "Aa" ~@< "Aa", Wrap("Aa") ~@< Wrap("Aa"), "Aa" $< "Aa", Wrap("Aa") $< Wrap("Aa"), "Aa" ~$< "Aa", Wrap("Aa") ~$< Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$< Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa"  @<= "Aa", Wrap("Aa")  @<= Wrap("Aa"), "Aa"  ~@<= "Aa", Wrap("Aa")  ~@<= Wrap("Aa"), "Aa"  $<= "Aa", Wrap("Aa")  $<= Wrap("Aa"), "Aa"  ~$<= "Aa", Wrap("Aa")  ~$<= Wrap("Aa"))
("Aa" @<= "Aa", Wrap("Aa") @<= Wrap("Aa"), "Aa" ~@<= "Aa", Wrap("Aa") ~@<= Wrap("Aa"), "Aa" $<= "Aa", Wrap("Aa") $<= Wrap("Aa"), "Aa" ~$<= "Aa", Wrap("Aa") ~$<= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$<= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa"  @>  "Aa", Wrap("Aa")  @>  Wrap("Aa"), "Aa"  ~@>  "Aa", Wrap("Aa")  ~@>  Wrap("Aa"), "Aa"  $>  "Aa", Wrap("Aa")  $>  Wrap("Aa"), "Aa"  ~$>  "Aa", Wrap("Aa")  ~$>  Wrap("Aa"))
("Aa" @> "Aa", Wrap("Aa") @> Wrap("Aa"), "Aa" ~@> "Aa", Wrap("Aa") ~@> Wrap("Aa"), "Aa" $> "Aa", Wrap("Aa") $> Wrap("Aa"), "Aa" ~$> "Aa", Wrap("Aa") ~$> Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$> Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa"  @>= "Aa", Wrap("Aa")  @>= Wrap("Aa"), "Aa"  ~@>= "Aa", Wrap("Aa")  ~@>= Wrap("Aa"), "Aa"  $>= "Aa", Wrap("Aa")  $>= Wrap("Aa"), "Aa"  ~$>= "Aa", Wrap("Aa")  ~$>= Wrap("Aa"))
("Aa" @>= "Aa", Wrap("Aa") @>= Wrap("Aa"), "Aa" ~@>= "Aa", Wrap("Aa") ~@>= Wrap("Aa"), "Aa" $>= "Aa", Wrap("Aa") $>= Wrap("Aa"), "Aa" ~$>= "Aa", Wrap("Aa") ~$>= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$>= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa" !@=  "Aa", Wrap("Aa") !@=  Wrap("Aa"), "Aa" !~@=  "Aa", Wrap("Aa") !~@=  Wrap("Aa"), "Aa" !$=  "Aa", Wrap("Aa") !$=  Wrap("Aa"), "Aa" !~$=  "Aa", Wrap("Aa") !~$=  Wrap("Aa"))
("Aa" !@= "Aa", Wrap("Aa") !@= Wrap("Aa"), "Aa" !~@= "Aa", Wrap("Aa") !~@= Wrap("Aa"), "Aa" !$= "Aa", Wrap("Aa") !$= Wrap("Aa"), "Aa" !~$= "Aa", Wrap("Aa") !~$= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !@= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~@= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa" !@<  "Aa", Wrap("Aa") !@<  Wrap("Aa"), "Aa" !~@<  "Aa", Wrap("Aa") !~@<  Wrap("Aa"), "Aa" !$<  "Aa", Wrap("Aa") !$<  Wrap("Aa"), "Aa" !~$<  "Aa", Wrap("Aa") !~$<  Wrap("Aa"))
("Aa" !@< "Aa", Wrap("Aa") !@< Wrap("Aa"), "Aa" !~@< "Aa", Wrap("Aa") !~@< Wrap("Aa"), "Aa" !$< "Aa", Wrap("Aa") !$< Wrap("Aa"), "Aa" !~$< "Aa", Wrap("Aa") !~$< Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$< Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$< Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa" !@<= "Aa", Wrap("Aa") !@<= Wrap("Aa"), "Aa" !~@<= "Aa", Wrap("Aa") !~@<= Wrap("Aa"), "Aa" !$<= "Aa", Wrap("Aa") !$<= Wrap("Aa"), "Aa" !~$<= "Aa", Wrap("Aa") !~$<= Wrap("Aa"))
("Aa" !@<= "Aa", Wrap("Aa") !@<= Wrap("Aa"), "Aa" !~@<= "Aa", Wrap("Aa") !~@<= Wrap("Aa"), "Aa" !$<= "Aa", Wrap("Aa") !$<= Wrap("Aa"), "Aa" !~$<= "Aa", Wrap("Aa") !~$<= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$<= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$<= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa" !@>  "Aa", Wrap("Aa") !@>  Wrap("Aa"), "Aa" !~@>  "Aa", Wrap("Aa") !~@>  Wrap("Aa"), "Aa" !$>  "Aa", Wrap("Aa") !$>  Wrap("Aa"), "Aa" !~$>  "Aa", Wrap("Aa") !~$>  Wrap("Aa"))
("Aa" !@> "Aa", Wrap("Aa") !@> Wrap("Aa"), "Aa" !~@> "Aa", Wrap("Aa") !~@> Wrap("Aa"), "Aa" !$> "Aa", Wrap("Aa") !$> Wrap("Aa"), "Aa" !~$> "Aa", Wrap("Aa") !~$> Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$> Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$> Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa" !@>= "Aa", Wrap("Aa") !@>= Wrap("Aa"), "Aa" !~@>= "Aa", Wrap("Aa") !~@>= Wrap("Aa"), "Aa" !$>= "Aa", Wrap("Aa") !$>= Wrap("Aa"), "Aa" !~$>= "Aa", Wrap("Aa") !~$>= Wrap("Aa"))
("Aa" !@>= "Aa", Wrap("Aa") !@>= Wrap("Aa"), "Aa" !~@>= "Aa", Wrap("Aa") !~@>= Wrap("Aa"), "Aa" !$>= "Aa", Wrap("Aa") !$>= Wrap("Aa"), "Aa" !~$>= "Aa", Wrap("Aa") !~$>= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$>= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$>= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa"  @=  "BB", Wrap("Aa")  @=  Wrap("BB"), "Aa"  ~@=  "BB", Wrap("Aa")  ~@=  Wrap("BB"), "Aa"  $=  "BB", Wrap("Aa")  $=  Wrap("BB"), "Aa"  ~$=  "BB", Wrap("Aa")  ~$=  Wrap("BB"))
("Aa" @= "BB", Wrap("Aa") @= Wrap("BB"), "Aa" ~@= "BB", Wrap("Aa") ~@= Wrap("BB"), "Aa" $= "BB", Wrap("Aa") $= Wrap("BB"), "Aa" ~$= "BB", Wrap("Aa") ~$= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa"  @<  "BB", Wrap("Aa")  @<  Wrap("BB"), "Aa"  ~@<  "BB", Wrap("Aa")  ~@<  Wrap("BB"), "Aa"  $<  "BB", Wrap("Aa")  $<  Wrap("BB"), "Aa"  ~$<  "BB", Wrap("Aa")  ~$<  Wrap("BB"))
("Aa" @< "BB", Wrap("Aa") @< Wrap("BB"), "Aa" ~@< "BB", Wrap("Aa") ~@< Wrap("BB"), "Aa" $< "BB", Wrap("Aa") $< Wrap("BB"), "Aa" ~$< "BB", Wrap("Aa") ~$< Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$< Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa"  @<= "BB", Wrap("Aa")  @<= Wrap("BB"), "Aa"  ~@<= "BB", Wrap("Aa")  ~@<= Wrap("BB"), "Aa"  $<= "BB", Wrap("Aa")  $<= Wrap("BB"), "Aa"  ~$<= "BB", Wrap("Aa")  ~$<= Wrap("BB"))
("Aa" @<= "BB", Wrap("Aa") @<= Wrap("BB"), "Aa" ~@<= "BB", Wrap("Aa") ~@<= Wrap("BB"), "Aa" $<= "BB", Wrap("Aa") $<= Wrap("BB"), "Aa" ~$<= "BB", Wrap("Aa") ~$<= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$<= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa"  @>  "BB", Wrap("Aa")  @>  Wrap("BB"), "Aa"  ~@>  "BB", Wrap("Aa")  ~@>  Wrap("BB"), "Aa"  $>  "BB", Wrap("Aa")  $>  Wrap("BB"), "Aa"  ~$>  "BB", Wrap("Aa")  ~$>  Wrap("BB"))
("Aa" @> "BB", Wrap("Aa") @> Wrap("BB"), "Aa" ~@> "BB", Wrap("Aa") ~@> Wrap("BB"), "Aa" $> "BB", Wrap("Aa") $> Wrap("BB"), "Aa" ~$> "BB", Wrap("Aa") ~$> Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$> Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa"  @>= "BB", Wrap("Aa")  @>= Wrap("BB"), "Aa"  ~@>= "BB", Wrap("Aa")  ~@>= Wrap("BB"), "Aa"  $>= "BB", Wrap("Aa")  $>= Wrap("BB"), "Aa"  ~$>= "BB", Wrap("Aa")  ~$>= Wrap("BB"))
("Aa" @>= "BB", Wrap("Aa") @>= Wrap("BB"), "Aa" ~@>= "BB", Wrap("Aa") ~@>= Wrap("BB"), "Aa" $>= "BB", Wrap("Aa") $>= Wrap("BB"), "Aa" ~$>= "BB", Wrap("Aa") ~$>= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$>= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa" !@=  "BB", Wrap("Aa") !@=  Wrap("BB"), "Aa" !~@=  "BB", Wrap("Aa") !~@=  Wrap("BB"), "Aa" !$=  "BB", Wrap("Aa") !$=  Wrap("BB"), "Aa" !~$=  "BB", Wrap("Aa") !~$=  Wrap("BB"))
("Aa" !@= "BB", Wrap("Aa") !@= Wrap("BB"), "Aa" !~@= "BB", Wrap("Aa") !~@= Wrap("BB"), "Aa" !$= "BB", Wrap("Aa") !$= Wrap("BB"), "Aa" !~$= "BB", Wrap("Aa") !~$= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !@= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~@= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa" !@<  "BB", Wrap("Aa") !@<  Wrap("BB"), "Aa" !~@<  "BB", Wrap("Aa") !~@<  Wrap("BB"), "Aa" !$<  "BB", Wrap("Aa") !$<  Wrap("BB"), "Aa" !~$<  "BB", Wrap("Aa") !~$<  Wrap("BB"))
("Aa" !@< "BB", Wrap("Aa") !@< Wrap("BB"), "Aa" !~@< "BB", Wrap("Aa") !~@< Wrap("BB"), "Aa" !$< "BB", Wrap("Aa") !$< Wrap("BB"), "Aa" !~$< "BB", Wrap("Aa") !~$< Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$< Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$< Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa" !@<= "BB", Wrap("Aa") !@<= Wrap("BB"), "Aa" !~@<= "BB", Wrap("Aa") !~@<= Wrap("BB"), "Aa" !$<= "BB", Wrap("Aa") !$<= Wrap("BB"), "Aa" !~$<= "BB", Wrap("Aa") !~$<= Wrap("BB"))
("Aa" !@<= "BB", Wrap("Aa") !@<= Wrap("BB"), "Aa" !~@<= "BB", Wrap("Aa") !~@<= Wrap("BB"), "Aa" !$<= "BB", Wrap("Aa") !$<= Wrap("BB"), "Aa" !~$<= "BB", Wrap("Aa") !~$<= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$<= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$<= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa" !@>  "BB", Wrap("Aa") !@>  Wrap("BB"), "Aa" !~@>  "BB", Wrap("Aa") !~@>  Wrap("BB"), "Aa" !$>  "BB", Wrap("Aa") !$>  Wrap("BB"), "Aa" !~$>  "BB", Wrap("Aa") !~$>  Wrap("BB"))
("Aa" !@> "BB", Wrap("Aa") !@> Wrap("BB"), "Aa" !~@> "BB", Wrap("Aa") !~@> Wrap("BB"), "Aa" !$> "BB", Wrap("Aa") !$> Wrap("BB"), "Aa" !~$> "BB", Wrap("Aa") !~$> Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$> Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$> Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa" !@>= "BB", Wrap("Aa") !@>= Wrap("BB"), "Aa" !~@>= "BB", Wrap("Aa") !~@>= Wrap("BB"), "Aa" !$>= "BB", Wrap("Aa") !$>= Wrap("BB"), "Aa" !~$>= "BB", Wrap("Aa") !~$>= Wrap("BB"))
("Aa" !@>= "BB", Wrap("Aa") !@>= Wrap("BB"), "Aa" !~@>= "BB", Wrap("Aa") !~@>= Wrap("BB"), "Aa" !$>= "BB", Wrap("Aa") !$>= Wrap("BB"), "Aa" !~$>= "BB", Wrap("Aa") !~$>= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$>= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$>= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa"  @=  Null(""), Wrap("Aa")  @=  Wrap(Null("")), "Aa"  ~@=  Null(""), Wrap("Aa")  ~@=  Wrap(Null("")), "Aa"  $=  Null(""), Wrap("Aa")  $=  Wrap(Null("")), "Aa"  ~$=  Null(""), Wrap("Aa")  ~$=  Wrap(Null("")))
("Aa" @= Null(""), Wrap("Aa") @= Wrap(Null("")), "Aa" ~@= Null(""), Wrap("Aa") ~@= Wrap(Null("")), "Aa" $= Null(""), Wrap("Aa") $= Wrap(Null("")), "Aa" ~$= Null(""), Wrap("Aa") ~$= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa"  @<  Null(""), Wrap("Aa")  @<  Wrap(Null("")), "Aa"  ~@<  Null(""), Wrap("Aa")  ~@<  Wrap(Null("")), "Aa"  $<  Null(""), Wrap("Aa")  $<  Wrap(Null("")), "Aa"  ~$<  Null(""), Wrap("Aa")  ~$<  Wrap(Null("")))
("Aa" @< Null(""), Wrap("Aa") @< Wrap(Null("")), "Aa" ~@< Null(""), Wrap("Aa") ~@< Wrap(Null("")), "Aa" $< Null(""), Wrap("Aa") $< Wrap(Null("")), "Aa" ~$< Null(""), Wrap("Aa") ~$< Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$< Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa"  @<= Null(""), Wrap("Aa")  @<= Wrap(Null("")), "Aa"  ~@<= Null(""), Wrap("Aa")  ~@<= Wrap(Null("")), "Aa"  $<= Null(""), Wrap("Aa")  $<= Wrap(Null("")), "Aa"  ~$<= Null(""), Wrap("Aa")  ~$<= Wrap(Null("")))
("Aa" @<= Null(""), Wrap("Aa") @<= Wrap(Null("")), "Aa" ~@<= Null(""), Wrap("Aa") ~@<= Wrap(Null("")), "Aa" $<= Null(""), Wrap("Aa") $<= Wrap(Null("")), "Aa" ~$<= Null(""), Wrap("Aa") ~$<= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$<= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("Aa"  @>  Null(""), Wrap("Aa")  @>  Wrap(Null("")), "Aa"  ~@>  Null(""), Wrap("Aa")  ~@>  Wrap(Null("")), "Aa"  $>  Null(""), Wrap("Aa")  $>  Wrap(Null("")), "Aa"  ~$>  Null(""), Wrap("Aa")  ~$>  Wrap(Null("")))
("Aa" @> Null(""), Wrap("Aa") @> Wrap(Null("")), "Aa" ~@> Null(""), Wrap("Aa") ~@> Wrap(Null("")), "Aa" $> Null(""), Wrap("Aa") $> Wrap(Null("")), "Aa" ~$> Null(""), Wrap("Aa") ~$> Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@> Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $> Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$> Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> ("Aa"  @>= Null(""), Wrap("Aa")  @>= Wrap(Null("")), "Aa"  ~@>= Null(""), Wrap("Aa")  ~@>= Wrap(Null("")), "Aa"  $>= Null(""), Wrap("Aa")  $>= Wrap(Null("")), "Aa"  ~$>= Null(""), Wrap("Aa")  ~$>= Wrap(Null("")))
("Aa" @>= Null(""), Wrap("Aa") @>= Wrap(Null("")), "Aa" ~@>= Null(""), Wrap("Aa") ~@>= Wrap(Null("")), "Aa" $>= Null(""), Wrap("Aa") $>= Wrap(Null("")), "Aa" ~$>= Null(""), Wrap("Aa") ~$>= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@>= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) $>= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~$>= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> ("Aa" !@=  Null(""), Wrap("Aa") !@=  Wrap(Null("")), "Aa" !~@=  Null(""), Wrap("Aa") !~@=  Wrap(Null("")), "Aa" !$=  Null(""), Wrap("Aa") !$=  Wrap(Null("")), "Aa" !~$=  Null(""), Wrap("Aa") !~$=  Wrap(Null("")))
("Aa" !@= Null(""), Wrap("Aa") !@= Wrap(Null("")), "Aa" !~@= Null(""), Wrap("Aa") !~@= Wrap(Null("")), "Aa" !$= Null(""), Wrap("Aa") !$= Wrap(Null("")), "Aa" !~$= Null(""), Wrap("Aa") !~$= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !@= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~@= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa" !@<  Null(""), Wrap("Aa") !@<  Wrap(Null("")), "Aa" !~@<  Null(""), Wrap("Aa") !~@<  Wrap(Null("")), "Aa" !$<  Null(""), Wrap("Aa") !$<  Wrap(Null("")), "Aa" !~$<  Null(""), Wrap("Aa") !~$<  Wrap(Null("")))
("Aa" !@< Null(""), Wrap("Aa") !@< Wrap(Null("")), "Aa" !~@< Null(""), Wrap("Aa") !~@< Wrap(Null("")), "Aa" !$< Null(""), Wrap("Aa") !$< Wrap(Null("")), "Aa" !~$< Null(""), Wrap("Aa") !~$< Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$< Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$< Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa" !@<= Null(""), Wrap("Aa") !@<= Wrap(Null("")), "Aa" !~@<= Null(""), Wrap("Aa") !~@<= Wrap(Null("")), "Aa" !$<= Null(""), Wrap("Aa") !$<= Wrap(Null("")), "Aa" !~$<= Null(""), Wrap("Aa") !~$<= Wrap(Null("")))
("Aa" !@<= Null(""), Wrap("Aa") !@<= Wrap(Null("")), "Aa" !~@<= Null(""), Wrap("Aa") !~@<= Wrap(Null("")), "Aa" !$<= Null(""), Wrap("Aa") !$<= Wrap(Null("")), "Aa" !~$<= Null(""), Wrap("Aa") !~$<= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$<= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$<= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("Aa" !@>  Null(""), Wrap("Aa") !@>  Wrap(Null("")), "Aa" !~@>  Null(""), Wrap("Aa") !~@>  Wrap(Null("")), "Aa" !$>  Null(""), Wrap("Aa") !$>  Wrap(Null("")), "Aa" !~$>  Null(""), Wrap("Aa") !~$>  Wrap(Null("")))
("Aa" !@> Null(""), Wrap("Aa") !@> Wrap(Null("")), "Aa" !~@> Null(""), Wrap("Aa") !~@> Wrap(Null("")), "Aa" !$> Null(""), Wrap("Aa") !$> Wrap(Null("")), "Aa" !~$> Null(""), Wrap("Aa") !~$> Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@<= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$> Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> ("Aa" !@>= Null(""), Wrap("Aa") !@>= Wrap(Null("")), "Aa" !~@>= Null(""), Wrap("Aa") !~@>= Wrap(Null("")), "Aa" !$>= Null(""), Wrap("Aa") !$>= Wrap(Null("")), "Aa" !~$>= Null(""), Wrap("Aa") !~$>= Wrap(Null("")))
("Aa" !@>= Null(""), Wrap("Aa") !@>= Wrap(Null("")), "Aa" !~@>= Null(""), Wrap("Aa") !~@>= Wrap(Null("")), "Aa" !$>= Null(""), Wrap("Aa") !$>= Wrap(Null("")), "Aa" !~$>= Null(""), Wrap("Aa") !~$>= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) @< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) ~@< Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !$>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(Aa)):s) !~$>= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> ("BB"  @=  "", Wrap("BB")  @=  Wrap(""), "BB"  ~@=  "", Wrap("BB")  ~@=  Wrap(""), "BB"  $=  "", Wrap("BB")  $=  Wrap(""), "BB"  ~$=  "", Wrap("BB")  ~$=  Wrap(""))
("BB" @= "", Wrap("BB") @= Wrap(""), "BB" ~@= "", Wrap("BB") ~@= Wrap(""), "BB" $= "", Wrap("BB") $= Wrap(""), "BB" ~$= "", Wrap("BB") ~$= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @<  "", Wrap("BB")  @<  Wrap(""), "BB"  ~@<  "", Wrap("BB")  ~@<  Wrap(""), "BB"  $<  "", Wrap("BB")  $<  Wrap(""), "BB"  ~$<  "", Wrap("BB")  ~$<  Wrap(""))
("BB" @< "", Wrap("BB") @< Wrap(""), "BB" ~@< "", Wrap("BB") ~@< Wrap(""), "BB" $< "", Wrap("BB") $< Wrap(""), "BB" ~$< "", Wrap("BB") ~$< Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$< Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @<= "", Wrap("BB")  @<= Wrap(""), "BB"  ~@<= "", Wrap("BB")  ~@<= Wrap(""), "BB"  $<= "", Wrap("BB")  $<= Wrap(""), "BB"  ~$<= "", Wrap("BB")  ~$<= Wrap(""))
("BB" @<= "", Wrap("BB") @<= Wrap(""), "BB" ~@<= "", Wrap("BB") ~@<= Wrap(""), "BB" $<= "", Wrap("BB") $<= Wrap(""), "BB" ~$<= "", Wrap("BB") ~$<= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$<= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @>  "", Wrap("BB")  @>  Wrap(""), "BB"  ~@>  "", Wrap("BB")  ~@>  Wrap(""), "BB"  $>  "", Wrap("BB")  $>  Wrap(""), "BB"  ~$>  "", Wrap("BB")  ~$>  Wrap(""))
("BB" @> "", Wrap("BB") @> Wrap(""), "BB" ~@> "", Wrap("BB") ~@> Wrap(""), "BB" $> "", Wrap("BB") $> Wrap(""), "BB" ~$> "", Wrap("BB") ~$> Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$> Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB"  @>= "", Wrap("BB")  @>= Wrap(""), "BB"  ~@>= "", Wrap("BB")  ~@>= Wrap(""), "BB"  $>= "", Wrap("BB")  $>= Wrap(""), "BB"  ~$>= "", Wrap("BB")  ~$>= Wrap(""))
("BB" @>= "", Wrap("BB") @>= Wrap(""), "BB" ~@>= "", Wrap("BB") ~@>= Wrap(""), "BB" $>= "", Wrap("BB") $>= Wrap(""), "BB" ~$>= "", Wrap("BB") ~$>= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$>= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@=  "", Wrap("BB") !@=  Wrap(""), "BB" !~@=  "", Wrap("BB") !~@=  Wrap(""), "BB" !$=  "", Wrap("BB") !$=  Wrap(""), "BB" !~$=  "", Wrap("BB") !~$=  Wrap(""))
("BB" !@= "", Wrap("BB") !@= Wrap(""), "BB" !~@= "", Wrap("BB") !~@= Wrap(""), "BB" !$= "", Wrap("BB") !$= Wrap(""), "BB" !~$= "", Wrap("BB") !~$= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !@= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~@= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@<  "", Wrap("BB") !@<  Wrap(""), "BB" !~@<  "", Wrap("BB") !~@<  Wrap(""), "BB" !$<  "", Wrap("BB") !$<  Wrap(""), "BB" !~$<  "", Wrap("BB") !~$<  Wrap(""))
("BB" !@< "", Wrap("BB") !@< Wrap(""), "BB" !~@< "", Wrap("BB") !~@< Wrap(""), "BB" !$< "", Wrap("BB") !$< Wrap(""), "BB" !~$< "", Wrap("BB") !~$< Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$< Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$< Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@<= "", Wrap("BB") !@<= Wrap(""), "BB" !~@<= "", Wrap("BB") !~@<= Wrap(""), "BB" !$<= "", Wrap("BB") !$<= Wrap(""), "BB" !~$<= "", Wrap("BB") !~$<= Wrap(""))
("BB" !@<= "", Wrap("BB") !@<= Wrap(""), "BB" !~@<= "", Wrap("BB") !~@<= Wrap(""), "BB" !$<= "", Wrap("BB") !$<= Wrap(""), "BB" !~$<= "", Wrap("BB") !~$<= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$<= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$<= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@>  "", Wrap("BB") !@>  Wrap(""), "BB" !~@>  "", Wrap("BB") !~@>  Wrap(""), "BB" !$>  "", Wrap("BB") !$>  Wrap(""), "BB" !~$>  "", Wrap("BB") !~$>  Wrap(""))
("BB" !@> "", Wrap("BB") !@> Wrap(""), "BB" !~@> "", Wrap("BB") !~@> Wrap(""), "BB" !$> "", Wrap("BB") !$> Wrap(""), "BB" !~$> "", Wrap("BB") !~$> Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$> Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$> Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB" !@>= "", Wrap("BB") !@>= Wrap(""), "BB" !~@>= "", Wrap("BB") !~@>= Wrap(""), "BB" !$>= "", Wrap("BB") !$>= Wrap(""), "BB" !~$>= "", Wrap("BB") !~$>= Wrap(""))
("BB" !@>= "", Wrap("BB") !@>= Wrap(""), "BB" !~@>= "", Wrap("BB") !~@>= Wrap(""), "BB" !$>= "", Wrap("BB") !$>= Wrap(""), "BB" !~$>= "", Wrap("BB") !~$>= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$>= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$>= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @=  "AA", Wrap("BB")  @=  Wrap("AA"), "BB"  ~@=  "AA", Wrap("BB")  ~@=  Wrap("AA"), "BB"  $=  "AA", Wrap("BB")  $=  Wrap("AA"), "BB"  ~$=  "AA", Wrap("BB")  ~$=  Wrap("AA"))
("BB" @= "AA", Wrap("BB") @= Wrap("AA"), "BB" ~@= "AA", Wrap("BB") ~@= Wrap("AA"), "BB" $= "AA", Wrap("BB") $= Wrap("AA"), "BB" ~$= "AA", Wrap("BB") ~$= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @<  "AA", Wrap("BB")  @<  Wrap("AA"), "BB"  ~@<  "AA", Wrap("BB")  ~@<  Wrap("AA"), "BB"  $<  "AA", Wrap("BB")  $<  Wrap("AA"), "BB"  ~$<  "AA", Wrap("BB")  ~$<  Wrap("AA"))
("BB" @< "AA", Wrap("BB") @< Wrap("AA"), "BB" ~@< "AA", Wrap("BB") ~@< Wrap("AA"), "BB" $< "AA", Wrap("BB") $< Wrap("AA"), "BB" ~$< "AA", Wrap("BB") ~$< Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$< Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @<= "AA", Wrap("BB")  @<= Wrap("AA"), "BB"  ~@<= "AA", Wrap("BB")  ~@<= Wrap("AA"), "BB"  $<= "AA", Wrap("BB")  $<= Wrap("AA"), "BB"  ~$<= "AA", Wrap("BB")  ~$<= Wrap("AA"))
("BB" @<= "AA", Wrap("BB") @<= Wrap("AA"), "BB" ~@<= "AA", Wrap("BB") ~@<= Wrap("AA"), "BB" $<= "AA", Wrap("BB") $<= Wrap("AA"), "BB" ~$<= "AA", Wrap("BB") ~$<= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @<= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@<= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $<= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$<= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @>  "AA", Wrap("BB")  @>  Wrap("AA"), "BB"  ~@>  "AA", Wrap("BB")  ~@>  Wrap("AA"), "BB"  $>  "AA", Wrap("BB")  $>  Wrap("AA"), "BB"  ~$>  "AA", Wrap("BB")  ~$>  Wrap("AA"))
("BB" @> "AA", Wrap("BB") @> Wrap("AA"), "BB" ~@> "AA", Wrap("BB") ~@> Wrap("AA"), "BB" $> "AA", Wrap("BB") $> Wrap("AA"), "BB" ~$> "AA", Wrap("BB") ~$> Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @> Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@> Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $> Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$> Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB"  @>= "AA", Wrap("BB")  @>= Wrap("AA"), "BB"  ~@>= "AA", Wrap("BB")  ~@>= Wrap("AA"), "BB"  $>= "AA", Wrap("BB")  $>= Wrap("AA"), "BB"  ~$>= "AA", Wrap("BB")  ~$>= Wrap("AA"))
("BB" @>= "AA", Wrap("BB") @>= Wrap("AA"), "BB" ~@>= "AA", Wrap("BB") ~@>= Wrap("AA"), "BB" $>= "AA", Wrap("BB") $>= Wrap("AA"), "BB" ~$>= "AA", Wrap("BB") ~$>= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$>= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@=  "AA", Wrap("BB") !@=  Wrap("AA"), "BB" !~@=  "AA", Wrap("BB") !~@=  Wrap("AA"), "BB" !$=  "AA", Wrap("BB") !$=  Wrap("AA"), "BB" !~$=  "AA", Wrap("BB") !~$=  Wrap("AA"))
("BB" !@= "AA", Wrap("BB") !@= Wrap("AA"), "BB" !~@= "AA", Wrap("BB") !~@= Wrap("AA"), "BB" !$= "AA", Wrap("BB") !$= Wrap("AA"), "BB" !~$= "AA", Wrap("BB") !~$= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !@= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~@= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@<  "AA", Wrap("BB") !@<  Wrap("AA"), "BB" !~@<  "AA", Wrap("BB") !~@<  Wrap("AA"), "BB" !$<  "AA", Wrap("BB") !$<  Wrap("AA"), "BB" !~$<  "AA", Wrap("BB") !~$<  Wrap("AA"))
("BB" !@< "AA", Wrap("BB") !@< Wrap("AA"), "BB" !~@< "AA", Wrap("BB") !~@< Wrap("AA"), "BB" !$< "AA", Wrap("BB") !$< Wrap("AA"), "BB" !~$< "AA", Wrap("BB") !~$< Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$< Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@<= "AA", Wrap("BB") !@<= Wrap("AA"), "BB" !~@<= "AA", Wrap("BB") !~@<= Wrap("AA"), "BB" !$<= "AA", Wrap("BB") !$<= Wrap("AA"), "BB" !~$<= "AA", Wrap("BB") !~$<= Wrap("AA"))
("BB" !@<= "AA", Wrap("BB") !@<= Wrap("AA"), "BB" !~@<= "AA", Wrap("BB") !~@<= Wrap("AA"), "BB" !$<= "AA", Wrap("BB") !$<= Wrap("AA"), "BB" !~$<= "AA", Wrap("BB") !~$<= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @> Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@> Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$<= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@>  "AA", Wrap("BB") !@>  Wrap("AA"), "BB" !~@>  "AA", Wrap("BB") !~@>  Wrap("AA"), "BB" !$>  "AA", Wrap("BB") !$>  Wrap("AA"), "BB" !~$>  "AA", Wrap("BB") !~$>  Wrap("AA"))
("BB" !@> "AA", Wrap("BB") !@> Wrap("AA"), "BB" !~@> "AA", Wrap("BB") !~@> Wrap("AA"), "BB" !$> "AA", Wrap("BB") !$> Wrap("AA"), "BB" !~$> "AA", Wrap("BB") !~$> Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @<= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@<= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$> Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB" !@>= "AA", Wrap("BB") !@>= Wrap("AA"), "BB" !~@>= "AA", Wrap("BB") !~@>= Wrap("AA"), "BB" !$>= "AA", Wrap("BB") !$>= Wrap("AA"), "BB" !~$>= "AA", Wrap("BB") !~$>= Wrap("AA"))
("BB" !@>= "AA", Wrap("BB") !@>= Wrap("AA"), "BB" !~@>= "AA", Wrap("BB") !~@>= Wrap("AA"), "BB" !$>= "AA", Wrap("BB") !$>= Wrap("AA"), "BB" !~$>= "AA", Wrap("BB") !~$>= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$>= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @=  "aA", Wrap("BB")  @=  Wrap("aA"), "BB"  ~@=  "aA", Wrap("BB")  ~@=  Wrap("aA"), "BB"  $=  "aA", Wrap("BB")  $=  Wrap("aA"), "BB"  ~$=  "aA", Wrap("BB")  ~$=  Wrap("aA"))
("BB" @= "aA", Wrap("BB") @= Wrap("aA"), "BB" ~@= "aA", Wrap("BB") ~@= Wrap("aA"), "BB" $= "aA", Wrap("BB") $= Wrap("aA"), "BB" ~$= "aA", Wrap("BB") ~$= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @<  "aA", Wrap("BB")  @<  Wrap("aA"), "BB"  ~@<  "aA", Wrap("BB")  ~@<  Wrap("aA"), "BB"  $<  "aA", Wrap("BB")  $<  Wrap("aA"), "BB"  ~$<  "aA", Wrap("BB")  ~$<  Wrap("aA"))
("BB" @< "aA", Wrap("BB") @< Wrap("aA"), "BB" ~@< "aA", Wrap("BB") ~@< Wrap("aA"), "BB" $< "aA", Wrap("BB") $< Wrap("aA"), "BB" ~$< "aA", Wrap("BB") ~$< Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$< Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @<= "aA", Wrap("BB")  @<= Wrap("aA"), "BB"  ~@<= "aA", Wrap("BB")  ~@<= Wrap("aA"), "BB"  $<= "aA", Wrap("BB")  $<= Wrap("aA"), "BB"  ~$<= "aA", Wrap("BB")  ~$<= Wrap("aA"))
("BB" @<= "aA", Wrap("BB") @<= Wrap("aA"), "BB" ~@<= "aA", Wrap("BB") ~@<= Wrap("aA"), "BB" $<= "aA", Wrap("BB") $<= Wrap("aA"), "BB" ~$<= "aA", Wrap("BB") ~$<= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @<= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@<= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $<= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$<= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @>  "aA", Wrap("BB")  @>  Wrap("aA"), "BB"  ~@>  "aA", Wrap("BB")  ~@>  Wrap("aA"), "BB"  $>  "aA", Wrap("BB")  $>  Wrap("aA"), "BB"  ~$>  "aA", Wrap("BB")  ~$>  Wrap("aA"))
("BB" @> "aA", Wrap("BB") @> Wrap("aA"), "BB" ~@> "aA", Wrap("BB") ~@> Wrap("aA"), "BB" $> "aA", Wrap("BB") $> Wrap("aA"), "BB" ~$> "aA", Wrap("BB") ~$> Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @> Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@> Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $> Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$> Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB"  @>= "aA", Wrap("BB")  @>= Wrap("aA"), "BB"  ~@>= "aA", Wrap("BB")  ~@>= Wrap("aA"), "BB"  $>= "aA", Wrap("BB")  $>= Wrap("aA"), "BB"  ~$>= "aA", Wrap("BB")  ~$>= Wrap("aA"))
("BB" @>= "aA", Wrap("BB") @>= Wrap("aA"), "BB" ~@>= "aA", Wrap("BB") ~@>= Wrap("aA"), "BB" $>= "aA", Wrap("BB") $>= Wrap("aA"), "BB" ~$>= "aA", Wrap("BB") ~$>= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$>= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@=  "aA", Wrap("BB") !@=  Wrap("aA"), "BB" !~@=  "aA", Wrap("BB") !~@=  Wrap("aA"), "BB" !$=  "aA", Wrap("BB") !$=  Wrap("aA"), "BB" !~$=  "aA", Wrap("BB") !~$=  Wrap("aA"))
("BB" !@= "aA", Wrap("BB") !@= Wrap("aA"), "BB" !~@= "aA", Wrap("BB") !~@= Wrap("aA"), "BB" !$= "aA", Wrap("BB") !$= Wrap("aA"), "BB" !~$= "aA", Wrap("BB") !~$= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !@= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~@= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@<  "aA", Wrap("BB") !@<  Wrap("aA"), "BB" !~@<  "aA", Wrap("BB") !~@<  Wrap("aA"), "BB" !$<  "aA", Wrap("BB") !$<  Wrap("aA"), "BB" !~$<  "aA", Wrap("BB") !~$<  Wrap("aA"))
("BB" !@< "aA", Wrap("BB") !@< Wrap("aA"), "BB" !~@< "aA", Wrap("BB") !~@< Wrap("aA"), "BB" !$< "aA", Wrap("BB") !$< Wrap("aA"), "BB" !~$< "aA", Wrap("BB") !~$< Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$< Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$< Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@<= "aA", Wrap("BB") !@<= Wrap("aA"), "BB" !~@<= "aA", Wrap("BB") !~@<= Wrap("aA"), "BB" !$<= "aA", Wrap("BB") !$<= Wrap("aA"), "BB" !~$<= "aA", Wrap("BB") !~$<= Wrap("aA"))
("BB" !@<= "aA", Wrap("BB") !@<= Wrap("aA"), "BB" !~@<= "aA", Wrap("BB") !~@<= Wrap("aA"), "BB" !$<= "aA", Wrap("BB") !$<= Wrap("aA"), "BB" !~$<= "aA", Wrap("BB") !~$<= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @> Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@> Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$<= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@>  "aA", Wrap("BB") !@>  Wrap("aA"), "BB" !~@>  "aA", Wrap("BB") !~@>  Wrap("aA"), "BB" !$>  "aA", Wrap("BB") !$>  Wrap("aA"), "BB" !~$>  "aA", Wrap("BB") !~$>  Wrap("aA"))
("BB" !@> "aA", Wrap("BB") !@> Wrap("aA"), "BB" !~@> "aA", Wrap("BB") !~@> Wrap("aA"), "BB" !$> "aA", Wrap("BB") !$> Wrap("aA"), "BB" !~$> "aA", Wrap("BB") !~$> Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @<= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@<= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$> Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB" !@>= "aA", Wrap("BB") !@>= Wrap("aA"), "BB" !~@>= "aA", Wrap("BB") !~@>= Wrap("aA"), "BB" !$>= "aA", Wrap("BB") !$>= Wrap("aA"), "BB" !~$>= "aA", Wrap("BB") !~$>= Wrap("aA"))
("BB" !@>= "aA", Wrap("BB") !@>= Wrap("aA"), "BB" !~@>= "aA", Wrap("BB") !~@>= Wrap("aA"), "BB" !$>= "aA", Wrap("BB") !$>= Wrap("aA"), "BB" !~$>= "aA", Wrap("BB") !~$>= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$>= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$>= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @=  "Aa", Wrap("BB")  @=  Wrap("Aa"), "BB"  ~@=  "Aa", Wrap("BB")  ~@=  Wrap("Aa"), "BB"  $=  "Aa", Wrap("BB")  $=  Wrap("Aa"), "BB"  ~$=  "Aa", Wrap("BB")  ~$=  Wrap("Aa"))
("BB" @= "Aa", Wrap("BB") @= Wrap("Aa"), "BB" ~@= "Aa", Wrap("BB") ~@= Wrap("Aa"), "BB" $= "Aa", Wrap("BB") $= Wrap("Aa"), "BB" ~$= "Aa", Wrap("BB") ~$= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @<  "Aa", Wrap("BB")  @<  Wrap("Aa"), "BB"  ~@<  "Aa", Wrap("BB")  ~@<  Wrap("Aa"), "BB"  $<  "Aa", Wrap("BB")  $<  Wrap("Aa"), "BB"  ~$<  "Aa", Wrap("BB")  ~$<  Wrap("Aa"))
("BB" @< "Aa", Wrap("BB") @< Wrap("Aa"), "BB" ~@< "Aa", Wrap("BB") ~@< Wrap("Aa"), "BB" $< "Aa", Wrap("BB") $< Wrap("Aa"), "BB" ~$< "Aa", Wrap("BB") ~$< Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$< Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @<= "Aa", Wrap("BB")  @<= Wrap("Aa"), "BB"  ~@<= "Aa", Wrap("BB")  ~@<= Wrap("Aa"), "BB"  $<= "Aa", Wrap("BB")  $<= Wrap("Aa"), "BB"  ~$<= "Aa", Wrap("BB")  ~$<= Wrap("Aa"))
("BB" @<= "Aa", Wrap("BB") @<= Wrap("Aa"), "BB" ~@<= "Aa", Wrap("BB") ~@<= Wrap("Aa"), "BB" $<= "Aa", Wrap("BB") $<= Wrap("Aa"), "BB" ~$<= "Aa", Wrap("BB") ~$<= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @<= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@<= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $<= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$<= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @>  "Aa", Wrap("BB")  @>  Wrap("Aa"), "BB"  ~@>  "Aa", Wrap("BB")  ~@>  Wrap("Aa"), "BB"  $>  "Aa", Wrap("BB")  $>  Wrap("Aa"), "BB"  ~$>  "Aa", Wrap("BB")  ~$>  Wrap("Aa"))
("BB" @> "Aa", Wrap("BB") @> Wrap("Aa"), "BB" ~@> "Aa", Wrap("BB") ~@> Wrap("Aa"), "BB" $> "Aa", Wrap("BB") $> Wrap("Aa"), "BB" ~$> "Aa", Wrap("BB") ~$> Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @> Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@> Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $> Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$> Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB"  @>= "Aa", Wrap("BB")  @>= Wrap("Aa"), "BB"  ~@>= "Aa", Wrap("BB")  ~@>= Wrap("Aa"), "BB"  $>= "Aa", Wrap("BB")  $>= Wrap("Aa"), "BB"  ~$>= "Aa", Wrap("BB")  ~$>= Wrap("Aa"))
("BB" @>= "Aa", Wrap("BB") @>= Wrap("Aa"), "BB" ~@>= "Aa", Wrap("BB") ~@>= Wrap("Aa"), "BB" $>= "Aa", Wrap("BB") $>= Wrap("Aa"), "BB" ~$>= "Aa", Wrap("BB") ~$>= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$>= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@=  "Aa", Wrap("BB") !@=  Wrap("Aa"), "BB" !~@=  "Aa", Wrap("BB") !~@=  Wrap("Aa"), "BB" !$=  "Aa", Wrap("BB") !$=  Wrap("Aa"), "BB" !~$=  "Aa", Wrap("BB") !~$=  Wrap("Aa"))
("BB" !@= "Aa", Wrap("BB") !@= Wrap("Aa"), "BB" !~@= "Aa", Wrap("BB") !~@= Wrap("Aa"), "BB" !$= "Aa", Wrap("BB") !$= Wrap("Aa"), "BB" !~$= "Aa", Wrap("BB") !~$= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !@= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~@= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@<  "Aa", Wrap("BB") !@<  Wrap("Aa"), "BB" !~@<  "Aa", Wrap("BB") !~@<  Wrap("Aa"), "BB" !$<  "Aa", Wrap("BB") !$<  Wrap("Aa"), "BB" !~$<  "Aa", Wrap("BB") !~$<  Wrap("Aa"))
("BB" !@< "Aa", Wrap("BB") !@< Wrap("Aa"), "BB" !~@< "Aa", Wrap("BB") !~@< Wrap("Aa"), "BB" !$< "Aa", Wrap("BB") !$< Wrap("Aa"), "BB" !~$< "Aa", Wrap("BB") !~$< Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$< Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$< Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@<= "Aa", Wrap("BB") !@<= Wrap("Aa"), "BB" !~@<= "Aa", Wrap("BB") !~@<= Wrap("Aa"), "BB" !$<= "Aa", Wrap("BB") !$<= Wrap("Aa"), "BB" !~$<= "Aa", Wrap("BB") !~$<= Wrap("Aa"))
("BB" !@<= "Aa", Wrap("BB") !@<= Wrap("Aa"), "BB" !~@<= "Aa", Wrap("BB") !~@<= Wrap("Aa"), "BB" !$<= "Aa", Wrap("BB") !$<= Wrap("Aa"), "BB" !~$<= "Aa", Wrap("BB") !~$<= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @> Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@> Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$<= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@>  "Aa", Wrap("BB") !@>  Wrap("Aa"), "BB" !~@>  "Aa", Wrap("BB") !~@>  Wrap("Aa"), "BB" !$>  "Aa", Wrap("BB") !$>  Wrap("Aa"), "BB" !~$>  "Aa", Wrap("BB") !~$>  Wrap("Aa"))
("BB" !@> "Aa", Wrap("BB") !@> Wrap("Aa"), "BB" !~@> "Aa", Wrap("BB") !~@> Wrap("Aa"), "BB" !$> "Aa", Wrap("BB") !$> Wrap("Aa"), "BB" !~$> "Aa", Wrap("BB") !~$> Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @<= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@<= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$> Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB" !@>= "Aa", Wrap("BB") !@>= Wrap("Aa"), "BB" !~@>= "Aa", Wrap("BB") !~@>= Wrap("Aa"), "BB" !$>= "Aa", Wrap("BB") !$>= Wrap("Aa"), "BB" !~$>= "Aa", Wrap("BB") !~$>= Wrap("Aa"))
("BB" !@>= "Aa", Wrap("BB") !@>= Wrap("Aa"), "BB" !~@>= "Aa", Wrap("BB") !~@>= Wrap("Aa"), "BB" !$>= "Aa", Wrap("BB") !$>= Wrap("Aa"), "BB" !~$>= "Aa", Wrap("BB") !~$>= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$>= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$>= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @=  "BB", Wrap("BB")  @=  Wrap("BB"), "BB"  ~@=  "BB", Wrap("BB")  ~@=  Wrap("BB"), "BB"  $=  "BB", Wrap("BB")  $=  Wrap("BB"), "BB"  ~$=  "BB", Wrap("BB")  ~$=  Wrap("BB"))
("BB" @= "BB", Wrap("BB") @= Wrap("BB"), "BB" ~@= "BB", Wrap("BB") ~@= Wrap("BB"), "BB" $= "BB", Wrap("BB") $= Wrap("BB"), "BB" ~$= "BB", Wrap("BB") ~$= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB"  @<  "BB", Wrap("BB")  @<  Wrap("BB"), "BB"  ~@<  "BB", Wrap("BB")  ~@<  Wrap("BB"), "BB"  $<  "BB", Wrap("BB")  $<  Wrap("BB"), "BB"  ~$<  "BB", Wrap("BB")  ~$<  Wrap("BB"))
("BB" @< "BB", Wrap("BB") @< Wrap("BB"), "BB" ~@< "BB", Wrap("BB") ~@< Wrap("BB"), "BB" $< "BB", Wrap("BB") $< Wrap("BB"), "BB" ~$< "BB", Wrap("BB") ~$< Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @< Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@< Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $< Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$< Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @<= "BB", Wrap("BB")  @<= Wrap("BB"), "BB"  ~@<= "BB", Wrap("BB")  ~@<= Wrap("BB"), "BB"  $<= "BB", Wrap("BB")  $<= Wrap("BB"), "BB"  ~$<= "BB", Wrap("BB")  ~$<= Wrap("BB"))
("BB" @<= "BB", Wrap("BB") @<= Wrap("BB"), "BB" ~@<= "BB", Wrap("BB") ~@<= Wrap("BB"), "BB" $<= "BB", Wrap("BB") $<= Wrap("BB"), "BB" ~$<= "BB", Wrap("BB") ~$<= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$<= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB"  @>  "BB", Wrap("BB")  @>  Wrap("BB"), "BB"  ~@>  "BB", Wrap("BB")  ~@>  Wrap("BB"), "BB"  $>  "BB", Wrap("BB")  $>  Wrap("BB"), "BB"  ~$>  "BB", Wrap("BB")  ~$>  Wrap("BB"))
("BB" @> "BB", Wrap("BB") @> Wrap("BB"), "BB" ~@> "BB", Wrap("BB") ~@> Wrap("BB"), "BB" $> "BB", Wrap("BB") $> Wrap("BB"), "BB" ~$> "BB", Wrap("BB") ~$> Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$> Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @>= "BB", Wrap("BB")  @>= Wrap("BB"), "BB"  ~@>= "BB", Wrap("BB")  ~@>= Wrap("BB"), "BB"  $>= "BB", Wrap("BB")  $>= Wrap("BB"), "BB"  ~$>= "BB", Wrap("BB")  ~$>= Wrap("BB"))
("BB" @>= "BB", Wrap("BB") @>= Wrap("BB"), "BB" ~@>= "BB", Wrap("BB") ~@>= Wrap("BB"), "BB" $>= "BB", Wrap("BB") $>= Wrap("BB"), "BB" ~$>= "BB", Wrap("BB") ~$>= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @>= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@>= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $>= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$>= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@=  "BB", Wrap("BB") !@=  Wrap("BB"), "BB" !~@=  "BB", Wrap("BB") !~@=  Wrap("BB"), "BB" !$=  "BB", Wrap("BB") !$=  Wrap("BB"), "BB" !~$=  "BB", Wrap("BB") !~$=  Wrap("BB"))
("BB" !@= "BB", Wrap("BB") !@= Wrap("BB"), "BB" !~@= "BB", Wrap("BB") !~@= Wrap("BB"), "BB" !$= "BB", Wrap("BB") !$= Wrap("BB"), "BB" !~$= "BB", Wrap("BB") !~$= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !@= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~@= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB" !@<  "BB", Wrap("BB") !@<  Wrap("BB"), "BB" !~@<  "BB", Wrap("BB") !~@<  Wrap("BB"), "BB" !$<  "BB", Wrap("BB") !$<  Wrap("BB"), "BB" !~$<  "BB", Wrap("BB") !~$<  Wrap("BB"))
("BB" !@< "BB", Wrap("BB") !@< Wrap("BB"), "BB" !~@< "BB", Wrap("BB") !~@< Wrap("BB"), "BB" !$< "BB", Wrap("BB") !$< Wrap("BB"), "BB" !~$< "BB", Wrap("BB") !~$< Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @>= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@>= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$< Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@<= "BB", Wrap("BB") !@<= Wrap("BB"), "BB" !~@<= "BB", Wrap("BB") !~@<= Wrap("BB"), "BB" !$<= "BB", Wrap("BB") !$<= Wrap("BB"), "BB" !~$<= "BB", Wrap("BB") !~$<= Wrap("BB"))
("BB" !@<= "BB", Wrap("BB") !@<= Wrap("BB"), "BB" !~@<= "BB", Wrap("BB") !~@<= Wrap("BB"), "BB" !$<= "BB", Wrap("BB") !$<= Wrap("BB"), "BB" !~$<= "BB", Wrap("BB") !~$<= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$<= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$<= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB" !@>  "BB", Wrap("BB") !@>  Wrap("BB"), "BB" !~@>  "BB", Wrap("BB") !~@>  Wrap("BB"), "BB" !$>  "BB", Wrap("BB") !$>  Wrap("BB"), "BB" !~$>  "BB", Wrap("BB") !~$>  Wrap("BB"))
("BB" !@> "BB", Wrap("BB") !@> Wrap("BB"), "BB" !~@> "BB", Wrap("BB") !~@> Wrap("BB"), "BB" !$> "BB", Wrap("BB") !$> Wrap("BB"), "BB" !~$> "BB", Wrap("BB") !~$> Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$> Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$> Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@>= "BB", Wrap("BB") !@>= Wrap("BB"), "BB" !~@>= "BB", Wrap("BB") !~@>= Wrap("BB"), "BB" !$>= "BB", Wrap("BB") !$>= Wrap("BB"), "BB" !~$>= "BB", Wrap("BB") !~$>= Wrap("BB"))
("BB" !@>= "BB", Wrap("BB") !@>= Wrap("BB"), "BB" !~@>= "BB", Wrap("BB") !~@>= Wrap("BB"), "BB" !$>= "BB", Wrap("BB") !$>= Wrap("BB"), "BB" !~$>= "BB", Wrap("BB") !~$>= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @< Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@< Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$>= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @=  Null(""), Wrap("BB")  @=  Wrap(Null("")), "BB"  ~@=  Null(""), Wrap("BB")  ~@=  Wrap(Null("")), "BB"  $=  Null(""), Wrap("BB")  $=  Wrap(Null("")), "BB"  ~$=  Null(""), Wrap("BB")  ~$=  Wrap(Null("")))
("BB" @= Null(""), Wrap("BB") @= Wrap(Null("")), "BB" ~@= Null(""), Wrap("BB") ~@= Wrap(Null("")), "BB" $= Null(""), Wrap("BB") $= Wrap(Null("")), "BB" ~$= Null(""), Wrap("BB") ~$= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @<  Null(""), Wrap("BB")  @<  Wrap(Null("")), "BB"  ~@<  Null(""), Wrap("BB")  ~@<  Wrap(Null("")), "BB"  $<  Null(""), Wrap("BB")  $<  Wrap(Null("")), "BB"  ~$<  Null(""), Wrap("BB")  ~$<  Wrap(Null("")))
("BB" @< Null(""), Wrap("BB") @< Wrap(Null("")), "BB" ~@< Null(""), Wrap("BB") ~@< Wrap(Null("")), "BB" $< Null(""), Wrap("BB") $< Wrap(Null("")), "BB" ~$< Null(""), Wrap("BB") ~$< Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$< Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @<= Null(""), Wrap("BB")  @<= Wrap(Null("")), "BB"  ~@<= Null(""), Wrap("BB")  ~@<= Wrap(Null("")), "BB"  $<= Null(""), Wrap("BB")  $<= Wrap(Null("")), "BB"  ~$<= Null(""), Wrap("BB")  ~$<= Wrap(Null("")))
("BB" @<= Null(""), Wrap("BB") @<= Wrap(Null("")), "BB" ~@<= Null(""), Wrap("BB") ~@<= Wrap(Null("")), "BB" $<= Null(""), Wrap("BB") $<= Wrap(Null("")), "BB" ~$<= Null(""), Wrap("BB") ~$<= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$<= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> ("BB"  @>  Null(""), Wrap("BB")  @>  Wrap(Null("")), "BB"  ~@>  Null(""), Wrap("BB")  ~@>  Wrap(Null("")), "BB"  $>  Null(""), Wrap("BB")  $>  Wrap(Null("")), "BB"  ~$>  Null(""), Wrap("BB")  ~$>  Wrap(Null("")))
("BB" @> Null(""), Wrap("BB") @> Wrap(Null("")), "BB" ~@> Null(""), Wrap("BB") ~@> Wrap(Null("")), "BB" $> Null(""), Wrap("BB") $> Wrap(Null("")), "BB" ~$> Null(""), Wrap("BB") ~$> Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@> Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $> Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$> Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> ("BB"  @>= Null(""), Wrap("BB")  @>= Wrap(Null("")), "BB"  ~@>= Null(""), Wrap("BB")  ~@>= Wrap(Null("")), "BB"  $>= Null(""), Wrap("BB")  $>= Wrap(Null("")), "BB"  ~$>= Null(""), Wrap("BB")  ~$>= Wrap(Null("")))
("BB" @>= Null(""), Wrap("BB") @>= Wrap(Null("")), "BB" ~@>= Null(""), Wrap("BB") ~@>= Wrap(Null("")), "BB" $>= Null(""), Wrap("BB") $>= Wrap(Null("")), "BB" ~$>= Null(""), Wrap("BB") ~$>= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@>= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) $>= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~$>= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> ("BB" !@=  Null(""), Wrap("BB") !@=  Wrap(Null("")), "BB" !~@=  Null(""), Wrap("BB") !~@=  Wrap(Null("")), "BB" !$=  Null(""), Wrap("BB") !$=  Wrap(Null("")), "BB" !~$=  Null(""), Wrap("BB") !~$=  Wrap(Null("")))
("BB" !@= Null(""), Wrap("BB") !@= Wrap(Null("")), "BB" !~@= Null(""), Wrap("BB") !~@= Wrap(Null("")), "BB" !$= Null(""), Wrap("BB") !$= Wrap(Null("")), "BB" !~$= Null(""), Wrap("BB") !~$= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !@= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~@= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@<  Null(""), Wrap("BB") !@<  Wrap(Null("")), "BB" !~@<  Null(""), Wrap("BB") !~@<  Wrap(Null("")), "BB" !$<  Null(""), Wrap("BB") !$<  Wrap(Null("")), "BB" !~$<  Null(""), Wrap("BB") !~$<  Wrap(Null("")))
("BB" !@< Null(""), Wrap("BB") !@< Wrap(Null("")), "BB" !~@< Null(""), Wrap("BB") !~@< Wrap(Null("")), "BB" !$< Null(""), Wrap("BB") !$< Wrap(Null("")), "BB" !~$< Null(""), Wrap("BB") !~$< Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$< Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$< Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@<= Null(""), Wrap("BB") !@<= Wrap(Null("")), "BB" !~@<= Null(""), Wrap("BB") !~@<= Wrap(Null("")), "BB" !$<= Null(""), Wrap("BB") !$<= Wrap(Null("")), "BB" !~$<= Null(""), Wrap("BB") !~$<= Wrap(Null("")))
("BB" !@<= Null(""), Wrap("BB") !@<= Wrap(Null("")), "BB" !~@<= Null(""), Wrap("BB") !~@<= Wrap(Null("")), "BB" !$<= Null(""), Wrap("BB") !$<= Wrap(Null("")), "BB" !~$<= Null(""), Wrap("BB") !~$<= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$<= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$<= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> ("BB" !@>  Null(""), Wrap("BB") !@>  Wrap(Null("")), "BB" !~@>  Null(""), Wrap("BB") !~@>  Wrap(Null("")), "BB" !$>  Null(""), Wrap("BB") !$>  Wrap(Null("")), "BB" !~$>  Null(""), Wrap("BB") !~$>  Wrap(Null("")))
("BB" !@> Null(""), Wrap("BB") !@> Wrap(Null("")), "BB" !~@> Null(""), Wrap("BB") !~@> Wrap(Null("")), "BB" !$> Null(""), Wrap("BB") !$> Wrap(Null("")), "BB" !~$> Null(""), Wrap("BB") !~$> Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@<= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$> Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> ("BB" !@>= Null(""), Wrap("BB") !@>= Wrap(Null("")), "BB" !~@>= Null(""), Wrap("BB") !~@>= Wrap(Null("")), "BB" !$>= Null(""), Wrap("BB") !$>= Wrap(Null("")), "BB" !~$>= Null(""), Wrap("BB") !~$>= Wrap(Null("")))
("BB" !@>= Null(""), Wrap("BB") !@>= Wrap(Null("")), "BB" !~@>= Null(""), Wrap("BB") !~@>= Wrap(Null("")), "BB" !$>= Null(""), Wrap("BB") !$>= Wrap(Null("")), "BB" !~$>= Null(""), Wrap("BB") !~$>= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) @< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) ~@< Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !$>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(BB)):s) !~$>= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> (Null("")  @=  "", Wrap(Null(""))  @=  Wrap(""), Null("")  ~@=  "", Wrap(Null(""))  ~@=  Wrap(""), Null("")  $=  "", Wrap(Null(""))  $=  Wrap(""), Null("")  ~$=  "", Wrap(Null(""))  ~$=  Wrap(""))
(Null("") @= "", Wrap(Null("")) @= Wrap(""), Null("") ~@= "", Wrap(Null("")) ~@= Wrap(""), Null("") $= "", Wrap(Null("")) $= Wrap(""), Null("") ~$= "", Wrap(Null("")) ~$= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("")  @<  "", Wrap(Null(""))  @<  Wrap(""), Null("")  ~@<  "", Wrap(Null(""))  ~@<  Wrap(""), Null("")  $<  "", Wrap(Null(""))  $<  Wrap(""), Null("")  ~$<  "", Wrap(Null(""))  ~$<  Wrap(""))
(Null("") @< "", Wrap(Null("")) @< Wrap(""), Null("") ~@< "", Wrap(Null("")) ~@< Wrap(""), Null("") $< "", Wrap(Null("")) $< Wrap(""), Null("") ~$< "", Wrap(Null("")) ~$< Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @< Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $< Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$< Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> (Null("")  @<= "", Wrap(Null(""))  @<= Wrap(""), Null("")  ~@<= "", Wrap(Null(""))  ~@<= Wrap(""), Null("")  $<= "", Wrap(Null(""))  $<= Wrap(""), Null("")  ~$<= "", Wrap(Null(""))  ~$<= Wrap(""))
(Null("") @<= "", Wrap(Null("")) @<= Wrap(""), Null("") ~@<= "", Wrap(Null("")) ~@<= Wrap(""), Null("") $<= "", Wrap(Null("")) $<= Wrap(""), Null("") ~$<= "", Wrap(Null("")) ~$<= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @<= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $<= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$<= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> (Null("")  @>  "", Wrap(Null(""))  @>  Wrap(""), Null("")  ~@>  "", Wrap(Null(""))  ~@>  Wrap(""), Null("")  $>  "", Wrap(Null(""))  $>  Wrap(""), Null("")  ~$>  "", Wrap(Null(""))  ~$>  Wrap(""))
(Null("") @> "", Wrap(Null("")) @> Wrap(""), Null("") ~@> "", Wrap(Null("")) ~@> Wrap(""), Null("") $> "", Wrap(Null("")) $> Wrap(""), Null("") ~$> "", Wrap(Null("")) ~$> Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @> Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@> Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $> Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$> Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("")  @>= "", Wrap(Null(""))  @>= Wrap(""), Null("")  ~@>= "", Wrap(Null(""))  ~@>= Wrap(""), Null("")  $>= "", Wrap(Null(""))  $>= Wrap(""), Null("")  ~$>= "", Wrap(Null(""))  ~$>= Wrap(""))
(Null("") @>= "", Wrap(Null("")) @>= Wrap(""), Null("") ~@>= "", Wrap(Null("")) ~@>= Wrap(""), Null("") $>= "", Wrap(Null("")) $>= Wrap(""), Null("") ~$>= "", Wrap(Null("")) ~$>= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @>= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@>= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $>= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$>= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("") !@=  "", Wrap(Null("")) !@=  Wrap(""), Null("") !~@=  "", Wrap(Null("")) !~@=  Wrap(""), Null("") !$=  "", Wrap(Null("")) !$=  Wrap(""), Null("") !~$=  "", Wrap(Null("")) !~$=  Wrap(""))
(Null("") !@= "", Wrap(Null("")) !@= Wrap(""), Null("") !~@= "", Wrap(Null("")) !~@= Wrap(""), Null("") !$= "", Wrap(Null("")) !$= Wrap(""), Null("") !~$= "", Wrap(Null("")) !~$= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !@= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~@= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("") !@<  "", Wrap(Null("")) !@<  Wrap(""), Null("") !~@<  "", Wrap(Null("")) !~@<  Wrap(""), Null("") !$<  "", Wrap(Null("")) !$<  Wrap(""), Null("") !~$<  "", Wrap(Null("")) !~$<  Wrap(""))
(Null("") !@< "", Wrap(Null("")) !@< Wrap(""), Null("") !~@< "", Wrap(Null("")) !~@< Wrap(""), Null("") !$< "", Wrap(Null("")) !$< Wrap(""), Null("") !~$< "", Wrap(Null("")) !~$< Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @>= Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$< Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$< Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> (Null("") !@<= "", Wrap(Null("")) !@<= Wrap(""), Null("") !~@<= "", Wrap(Null("")) !~@<= Wrap(""), Null("") !$<= "", Wrap(Null("")) !$<= Wrap(""), Null("") !~$<= "", Wrap(Null("")) !~$<= Wrap(""))
(Null("") !@<= "", Wrap(Null("")) !@<= Wrap(""), Null("") !~@<= "", Wrap(Null("")) !~@<= Wrap(""), Null("") !$<= "", Wrap(Null("")) !$<= Wrap(""), Null("") !~$<= "", Wrap(Null("")) !~$<= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @> Call(∂.Test.Wrap(str()):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$<= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$<= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> (Null("") !@>  "", Wrap(Null("")) !@>  Wrap(""), Null("") !~@>  "", Wrap(Null("")) !~@>  Wrap(""), Null("") !$>  "", Wrap(Null("")) !$>  Wrap(""), Null("") !~$>  "", Wrap(Null("")) !~$>  Wrap(""))
(Null("") !@> "", Wrap(Null("")) !@> Wrap(""), Null("") !~@> "", Wrap(Null("")) !~@> Wrap(""), Null("") !$> "", Wrap(Null("")) !$> Wrap(""), Null("") !~$> "", Wrap(Null("")) !~$> Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @<= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@<= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$> Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$> Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("") !@>= "", Wrap(Null("")) !@>= Wrap(""), Null("") !~@>= "", Wrap(Null("")) !~@>= Wrap(""), Null("") !$>= "", Wrap(Null("")) !$>= Wrap(""), Null("") !~$>= "", Wrap(Null("")) !~$>= Wrap(""))
(Null("") !@>= "", Wrap(Null("")) !@>= Wrap(""), Null("") !~@>= "", Wrap(Null("")) !~@>= Wrap(""), Null("") !$>= "", Wrap(Null("")) !$>= Wrap(""), Null("") !~$>= "", Wrap(Null("")) !~$>= Wrap("")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @< Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@< Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$>= Call(∂.Test.Wrap(str()):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$>= Call(∂.Test.Wrap(str()):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("")  @=  "AA", Wrap(Null(""))  @=  Wrap("AA"), Null("")  ~@=  "AA", Wrap(Null(""))  ~@=  Wrap("AA"), Null("")  $=  "AA", Wrap(Null(""))  $=  Wrap("AA"), Null("")  ~$=  "AA", Wrap(Null(""))  ~$=  Wrap("AA"))
(Null("") @= "AA", Wrap(Null("")) @= Wrap("AA"), Null("") ~@= "AA", Wrap(Null("")) ~@= Wrap("AA"), Null("") $= "AA", Wrap(Null("")) $= Wrap("AA"), Null("") ~$= "AA", Wrap(Null("")) ~$= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("")  @<  "AA", Wrap(Null(""))  @<  Wrap("AA"), Null("")  ~@<  "AA", Wrap(Null(""))  ~@<  Wrap("AA"), Null("")  $<  "AA", Wrap(Null(""))  $<  Wrap("AA"), Null("")  ~$<  "AA", Wrap(Null(""))  ~$<  Wrap("AA"))
(Null("") @< "AA", Wrap(Null("")) @< Wrap("AA"), Null("") ~@< "AA", Wrap(Null("")) ~@< Wrap("AA"), Null("") $< "AA", Wrap(Null("")) $< Wrap("AA"), Null("") ~$< "AA", Wrap(Null("")) ~$< Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $< Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$< Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> (Null("")  @<= "AA", Wrap(Null(""))  @<= Wrap("AA"), Null("")  ~@<= "AA", Wrap(Null(""))  ~@<= Wrap("AA"), Null("")  $<= "AA", Wrap(Null(""))  $<= Wrap("AA"), Null("")  ~$<= "AA", Wrap(Null(""))  ~$<= Wrap("AA"))
(Null("") @<= "AA", Wrap(Null("")) @<= Wrap("AA"), Null("") ~@<= "AA", Wrap(Null("")) ~@<= Wrap("AA"), Null("") $<= "AA", Wrap(Null("")) $<= Wrap("AA"), Null("") ~$<= "AA", Wrap(Null("")) ~$<= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@<= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $<= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$<= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> (Null("")  @>  "AA", Wrap(Null(""))  @>  Wrap("AA"), Null("")  ~@>  "AA", Wrap(Null(""))  ~@>  Wrap("AA"), Null("")  $>  "AA", Wrap(Null(""))  $>  Wrap("AA"), Null("")  ~$>  "AA", Wrap(Null(""))  ~$>  Wrap("AA"))
(Null("") @> "AA", Wrap(Null("")) @> Wrap("AA"), Null("") ~@> "AA", Wrap(Null("")) ~@> Wrap("AA"), Null("") $> "AA", Wrap(Null("")) $> Wrap("AA"), Null("") ~$> "AA", Wrap(Null("")) ~$> Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$> Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("")  @>= "AA", Wrap(Null(""))  @>= Wrap("AA"), Null("")  ~@>= "AA", Wrap(Null(""))  ~@>= Wrap("AA"), Null("")  $>= "AA", Wrap(Null(""))  $>= Wrap("AA"), Null("")  ~$>= "AA", Wrap(Null(""))  ~$>= Wrap("AA"))
(Null("") @>= "AA", Wrap(Null("")) @>= Wrap("AA"), Null("") ~@>= "AA", Wrap(Null("")) ~@>= Wrap("AA"), Null("") $>= "AA", Wrap(Null("")) $>= Wrap("AA"), Null("") ~$>= "AA", Wrap(Null("")) ~$>= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$>= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("") !@=  "AA", Wrap(Null("")) !@=  Wrap("AA"), Null("") !~@=  "AA", Wrap(Null("")) !~@=  Wrap("AA"), Null("") !$=  "AA", Wrap(Null("")) !$=  Wrap("AA"), Null("") !~$=  "AA", Wrap(Null("")) !~$=  Wrap("AA"))
(Null("") !@= "AA", Wrap(Null("")) !@= Wrap("AA"), Null("") !~@= "AA", Wrap(Null("")) !~@= Wrap("AA"), Null("") !$= "AA", Wrap(Null("")) !$= Wrap("AA"), Null("") !~$= "AA", Wrap(Null("")) !~$= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !@= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~@= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("") !@<  "AA", Wrap(Null("")) !@<  Wrap("AA"), Null("") !~@<  "AA", Wrap(Null("")) !~@<  Wrap("AA"), Null("") !$<  "AA", Wrap(Null("")) !$<  Wrap("AA"), Null("") !~$<  "AA", Wrap(Null("")) !~$<  Wrap("AA"))
(Null("") !@< "AA", Wrap(Null("")) !@< Wrap("AA"), Null("") !~@< "AA", Wrap(Null("")) !~@< Wrap("AA"), Null("") !$< "AA", Wrap(Null("")) !$< Wrap("AA"), Null("") !~$< "AA", Wrap(Null("")) !~$< Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @>= Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$< Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> (Null("") !@<= "AA", Wrap(Null("")) !@<= Wrap("AA"), Null("") !~@<= "AA", Wrap(Null("")) !~@<= Wrap("AA"), Null("") !$<= "AA", Wrap(Null("")) !$<= Wrap("AA"), Null("") !~$<= "AA", Wrap(Null("")) !~$<= Wrap("AA"))
(Null("") !@<= "AA", Wrap(Null("")) !@<= Wrap("AA"), Null("") !~@<= "AA", Wrap(Null("")) !~@<= Wrap("AA"), Null("") !$<= "AA", Wrap(Null("")) !$<= Wrap("AA"), Null("") !~$<= "AA", Wrap(Null("")) !~$<= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @> Call(∂.Test.Wrap(str(AA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@> Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$<= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> (Null("") !@>  "AA", Wrap(Null("")) !@>  Wrap("AA"), Null("") !~@>  "AA", Wrap(Null("")) !~@>  Wrap("AA"), Null("") !$>  "AA", Wrap(Null("")) !$>  Wrap("AA"), Null("") !~$>  "AA", Wrap(Null("")) !~$>  Wrap("AA"))
(Null("") !@> "AA", Wrap(Null("")) !@> Wrap("AA"), Null("") !~@> "AA", Wrap(Null("")) !~@> Wrap("AA"), Null("") !$> "AA", Wrap(Null("")) !$> Wrap("AA"), Null("") !~$> "AA", Wrap(Null("")) !~$> Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@<= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$> Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$> Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("") !@>= "AA", Wrap(Null("")) !@>= Wrap("AA"), Null("") !~@>= "AA", Wrap(Null("")) !~@>= Wrap("AA"), Null("") !$>= "AA", Wrap(Null("")) !$>= Wrap("AA"), Null("") !~$>= "AA", Wrap(Null("")) !~$>= Wrap("AA"))
(Null("") !@>= "AA", Wrap(Null("")) !@>= Wrap("AA"), Null("") !~@>= "AA", Wrap(Null("")) !~@>= Wrap("AA"), Null("") !$>= "AA", Wrap(Null("")) !$>= Wrap("AA"), Null("") !~$>= "AA", Wrap(Null("")) !~$>= Wrap("AA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@< Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$>= Call(∂.Test.Wrap(str(AA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$>= Call(∂.Test.Wrap(str(AA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("")  @=  "aA", Wrap(Null(""))  @=  Wrap("aA"), Null("")  ~@=  "aA", Wrap(Null(""))  ~@=  Wrap("aA"), Null("")  $=  "aA", Wrap(Null(""))  $=  Wrap("aA"), Null("")  ~$=  "aA", Wrap(Null(""))  ~$=  Wrap("aA"))
(Null("") @= "aA", Wrap(Null("")) @= Wrap("aA"), Null("") ~@= "aA", Wrap(Null("")) ~@= Wrap("aA"), Null("") $= "aA", Wrap(Null("")) $= Wrap("aA"), Null("") ~$= "aA", Wrap(Null("")) ~$= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("")  @<  "aA", Wrap(Null(""))  @<  Wrap("aA"), Null("")  ~@<  "aA", Wrap(Null(""))  ~@<  Wrap("aA"), Null("")  $<  "aA", Wrap(Null(""))  $<  Wrap("aA"), Null("")  ~$<  "aA", Wrap(Null(""))  ~$<  Wrap("aA"))
(Null("") @< "aA", Wrap(Null("")) @< Wrap("aA"), Null("") ~@< "aA", Wrap(Null("")) ~@< Wrap("aA"), Null("") $< "aA", Wrap(Null("")) $< Wrap("aA"), Null("") ~$< "aA", Wrap(Null("")) ~$< Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @< Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $< Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$< Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> (Null("")  @<= "aA", Wrap(Null(""))  @<= Wrap("aA"), Null("")  ~@<= "aA", Wrap(Null(""))  ~@<= Wrap("aA"), Null("")  $<= "aA", Wrap(Null(""))  $<= Wrap("aA"), Null("")  ~$<= "aA", Wrap(Null(""))  ~$<= Wrap("aA"))
(Null("") @<= "aA", Wrap(Null("")) @<= Wrap("aA"), Null("") ~@<= "aA", Wrap(Null("")) ~@<= Wrap("aA"), Null("") $<= "aA", Wrap(Null("")) $<= Wrap("aA"), Null("") ~$<= "aA", Wrap(Null("")) ~$<= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@<= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $<= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$<= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> (Null("")  @>  "aA", Wrap(Null(""))  @>  Wrap("aA"), Null("")  ~@>  "aA", Wrap(Null(""))  ~@>  Wrap("aA"), Null("")  $>  "aA", Wrap(Null(""))  $>  Wrap("aA"), Null("")  ~$>  "aA", Wrap(Null(""))  ~$>  Wrap("aA"))
(Null("") @> "aA", Wrap(Null("")) @> Wrap("aA"), Null("") ~@> "aA", Wrap(Null("")) ~@> Wrap("aA"), Null("") $> "aA", Wrap(Null("")) $> Wrap("aA"), Null("") ~$> "aA", Wrap(Null("")) ~$> Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$> Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("")  @>= "aA", Wrap(Null(""))  @>= Wrap("aA"), Null("")  ~@>= "aA", Wrap(Null(""))  ~@>= Wrap("aA"), Null("")  $>= "aA", Wrap(Null(""))  $>= Wrap("aA"), Null("")  ~$>= "aA", Wrap(Null(""))  ~$>= Wrap("aA"))
(Null("") @>= "aA", Wrap(Null("")) @>= Wrap("aA"), Null("") ~@>= "aA", Wrap(Null("")) ~@>= Wrap("aA"), Null("") $>= "aA", Wrap(Null("")) $>= Wrap("aA"), Null("") ~$>= "aA", Wrap(Null("")) ~$>= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @>= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@>= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $>= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$>= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("") !@=  "aA", Wrap(Null("")) !@=  Wrap("aA"), Null("") !~@=  "aA", Wrap(Null("")) !~@=  Wrap("aA"), Null("") !$=  "aA", Wrap(Null("")) !$=  Wrap("aA"), Null("") !~$=  "aA", Wrap(Null("")) !~$=  Wrap("aA"))
(Null("") !@= "aA", Wrap(Null("")) !@= Wrap("aA"), Null("") !~@= "aA", Wrap(Null("")) !~@= Wrap("aA"), Null("") !$= "aA", Wrap(Null("")) !$= Wrap("aA"), Null("") !~$= "aA", Wrap(Null("")) !~$= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !@= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~@= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("") !@<  "aA", Wrap(Null("")) !@<  Wrap("aA"), Null("") !~@<  "aA", Wrap(Null("")) !~@<  Wrap("aA"), Null("") !$<  "aA", Wrap(Null("")) !$<  Wrap("aA"), Null("") !~$<  "aA", Wrap(Null("")) !~$<  Wrap("aA"))
(Null("") !@< "aA", Wrap(Null("")) !@< Wrap("aA"), Null("") !~@< "aA", Wrap(Null("")) !~@< Wrap("aA"), Null("") !$< "aA", Wrap(Null("")) !$< Wrap("aA"), Null("") !~$< "aA", Wrap(Null("")) !~$< Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @>= Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$< Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$< Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> (Null("") !@<= "aA", Wrap(Null("")) !@<= Wrap("aA"), Null("") !~@<= "aA", Wrap(Null("")) !~@<= Wrap("aA"), Null("") !$<= "aA", Wrap(Null("")) !$<= Wrap("aA"), Null("") !~$<= "aA", Wrap(Null("")) !~$<= Wrap("aA"))
(Null("") !@<= "aA", Wrap(Null("")) !@<= Wrap("aA"), Null("") !~@<= "aA", Wrap(Null("")) !~@<= Wrap("aA"), Null("") !$<= "aA", Wrap(Null("")) !$<= Wrap("aA"), Null("") !~$<= "aA", Wrap(Null("")) !~$<= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @> Call(∂.Test.Wrap(str(aA)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@> Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$<= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> (Null("") !@>  "aA", Wrap(Null("")) !@>  Wrap("aA"), Null("") !~@>  "aA", Wrap(Null("")) !~@>  Wrap("aA"), Null("") !$>  "aA", Wrap(Null("")) !$>  Wrap("aA"), Null("") !~$>  "aA", Wrap(Null("")) !~$>  Wrap("aA"))
(Null("") !@> "aA", Wrap(Null("")) !@> Wrap("aA"), Null("") !~@> "aA", Wrap(Null("")) !~@> Wrap("aA"), Null("") !$> "aA", Wrap(Null("")) !$> Wrap("aA"), Null("") !~$> "aA", Wrap(Null("")) !~$> Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@<= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$> Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$> Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("") !@>= "aA", Wrap(Null("")) !@>= Wrap("aA"), Null("") !~@>= "aA", Wrap(Null("")) !~@>= Wrap("aA"), Null("") !$>= "aA", Wrap(Null("")) !$>= Wrap("aA"), Null("") !~$>= "aA", Wrap(Null("")) !~$>= Wrap("aA"))
(Null("") !@>= "aA", Wrap(Null("")) !@>= Wrap("aA"), Null("") !~@>= "aA", Wrap(Null("")) !~@>= Wrap("aA"), Null("") !$>= "aA", Wrap(Null("")) !$>= Wrap("aA"), Null("") !~$>= "aA", Wrap(Null("")) !~$>= Wrap("aA")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @< Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@< Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$>= Call(∂.Test.Wrap(str(aA)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$>= Call(∂.Test.Wrap(str(aA)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("")  @=  "Aa", Wrap(Null(""))  @=  Wrap("Aa"), Null("")  ~@=  "Aa", Wrap(Null(""))  ~@=  Wrap("Aa"), Null("")  $=  "Aa", Wrap(Null(""))  $=  Wrap("Aa"), Null("")  ~$=  "Aa", Wrap(Null(""))  ~$=  Wrap("Aa"))
(Null("") @= "Aa", Wrap(Null("")) @= Wrap("Aa"), Null("") ~@= "Aa", Wrap(Null("")) ~@= Wrap("Aa"), Null("") $= "Aa", Wrap(Null("")) $= Wrap("Aa"), Null("") ~$= "Aa", Wrap(Null("")) ~$= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("")  @<  "Aa", Wrap(Null(""))  @<  Wrap("Aa"), Null("")  ~@<  "Aa", Wrap(Null(""))  ~@<  Wrap("Aa"), Null("")  $<  "Aa", Wrap(Null(""))  $<  Wrap("Aa"), Null("")  ~$<  "Aa", Wrap(Null(""))  ~$<  Wrap("Aa"))
(Null("") @< "Aa", Wrap(Null("")) @< Wrap("Aa"), Null("") ~@< "Aa", Wrap(Null("")) ~@< Wrap("Aa"), Null("") $< "Aa", Wrap(Null("")) $< Wrap("Aa"), Null("") ~$< "Aa", Wrap(Null("")) ~$< Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @< Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $< Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$< Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> (Null("")  @<= "Aa", Wrap(Null(""))  @<= Wrap("Aa"), Null("")  ~@<= "Aa", Wrap(Null(""))  ~@<= Wrap("Aa"), Null("")  $<= "Aa", Wrap(Null(""))  $<= Wrap("Aa"), Null("")  ~$<= "Aa", Wrap(Null(""))  ~$<= Wrap("Aa"))
(Null("") @<= "Aa", Wrap(Null("")) @<= Wrap("Aa"), Null("") ~@<= "Aa", Wrap(Null("")) ~@<= Wrap("Aa"), Null("") $<= "Aa", Wrap(Null("")) $<= Wrap("Aa"), Null("") ~$<= "Aa", Wrap(Null("")) ~$<= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@<= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $<= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$<= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> (Null("")  @>  "Aa", Wrap(Null(""))  @>  Wrap("Aa"), Null("")  ~@>  "Aa", Wrap(Null(""))  ~@>  Wrap("Aa"), Null("")  $>  "Aa", Wrap(Null(""))  $>  Wrap("Aa"), Null("")  ~$>  "Aa", Wrap(Null(""))  ~$>  Wrap("Aa"))
(Null("") @> "Aa", Wrap(Null("")) @> Wrap("Aa"), Null("") ~@> "Aa", Wrap(Null("")) ~@> Wrap("Aa"), Null("") $> "Aa", Wrap(Null("")) $> Wrap("Aa"), Null("") ~$> "Aa", Wrap(Null("")) ~$> Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$> Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("")  @>= "Aa", Wrap(Null(""))  @>= Wrap("Aa"), Null("")  ~@>= "Aa", Wrap(Null(""))  ~@>= Wrap("Aa"), Null("")  $>= "Aa", Wrap(Null(""))  $>= Wrap("Aa"), Null("")  ~$>= "Aa", Wrap(Null(""))  ~$>= Wrap("Aa"))
(Null("") @>= "Aa", Wrap(Null("")) @>= Wrap("Aa"), Null("") ~@>= "Aa", Wrap(Null("")) ~@>= Wrap("Aa"), Null("") $>= "Aa", Wrap(Null("")) $>= Wrap("Aa"), Null("") ~$>= "Aa", Wrap(Null("")) ~$>= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @>= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@>= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $>= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$>= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("") !@=  "Aa", Wrap(Null("")) !@=  Wrap("Aa"), Null("") !~@=  "Aa", Wrap(Null("")) !~@=  Wrap("Aa"), Null("") !$=  "Aa", Wrap(Null("")) !$=  Wrap("Aa"), Null("") !~$=  "Aa", Wrap(Null("")) !~$=  Wrap("Aa"))
(Null("") !@= "Aa", Wrap(Null("")) !@= Wrap("Aa"), Null("") !~@= "Aa", Wrap(Null("")) !~@= Wrap("Aa"), Null("") !$= "Aa", Wrap(Null("")) !$= Wrap("Aa"), Null("") !~$= "Aa", Wrap(Null("")) !~$= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !@= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~@= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("") !@<  "Aa", Wrap(Null("")) !@<  Wrap("Aa"), Null("") !~@<  "Aa", Wrap(Null("")) !~@<  Wrap("Aa"), Null("") !$<  "Aa", Wrap(Null("")) !$<  Wrap("Aa"), Null("") !~$<  "Aa", Wrap(Null("")) !~$<  Wrap("Aa"))
(Null("") !@< "Aa", Wrap(Null("")) !@< Wrap("Aa"), Null("") !~@< "Aa", Wrap(Null("")) !~@< Wrap("Aa"), Null("") !$< "Aa", Wrap(Null("")) !$< Wrap("Aa"), Null("") !~$< "Aa", Wrap(Null("")) !~$< Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @>= Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$< Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$< Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> (Null("") !@<= "Aa", Wrap(Null("")) !@<= Wrap("Aa"), Null("") !~@<= "Aa", Wrap(Null("")) !~@<= Wrap("Aa"), Null("") !$<= "Aa", Wrap(Null("")) !$<= Wrap("Aa"), Null("") !~$<= "Aa", Wrap(Null("")) !~$<= Wrap("Aa"))
(Null("") !@<= "Aa", Wrap(Null("")) !@<= Wrap("Aa"), Null("") !~@<= "Aa", Wrap(Null("")) !~@<= Wrap("Aa"), Null("") !$<= "Aa", Wrap(Null("")) !$<= Wrap("Aa"), Null("") !~$<= "Aa", Wrap(Null("")) !~$<= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @> Call(∂.Test.Wrap(str(Aa)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@> Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$<= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> (Null("") !@>  "Aa", Wrap(Null("")) !@>  Wrap("Aa"), Null("") !~@>  "Aa", Wrap(Null("")) !~@>  Wrap("Aa"), Null("") !$>  "Aa", Wrap(Null("")) !$>  Wrap("Aa"), Null("") !~$>  "Aa", Wrap(Null("")) !~$>  Wrap("Aa"))
(Null("") !@> "Aa", Wrap(Null("")) !@> Wrap("Aa"), Null("") !~@> "Aa", Wrap(Null("")) !~@> Wrap("Aa"), Null("") !$> "Aa", Wrap(Null("")) !$> Wrap("Aa"), Null("") !~$> "Aa", Wrap(Null("")) !~$> Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@<= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$> Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$> Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("") !@>= "Aa", Wrap(Null("")) !@>= Wrap("Aa"), Null("") !~@>= "Aa", Wrap(Null("")) !~@>= Wrap("Aa"), Null("") !$>= "Aa", Wrap(Null("")) !$>= Wrap("Aa"), Null("") !~$>= "Aa", Wrap(Null("")) !~$>= Wrap("Aa"))
(Null("") !@>= "Aa", Wrap(Null("")) !@>= Wrap("Aa"), Null("") !~@>= "Aa", Wrap(Null("")) !~@>= Wrap("Aa"), Null("") !$>= "Aa", Wrap(Null("")) !$>= Wrap("Aa"), Null("") !~$>= "Aa", Wrap(Null("")) !~$>= Wrap("Aa")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @< Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@< Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$>= Call(∂.Test.Wrap(str(Aa)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$>= Call(∂.Test.Wrap(str(Aa)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("")  @=  "BB", Wrap(Null(""))  @=  Wrap("BB"), Null("")  ~@=  "BB", Wrap(Null(""))  ~@=  Wrap("BB"), Null("")  $=  "BB", Wrap(Null(""))  $=  Wrap("BB"), Null("")  ~$=  "BB", Wrap(Null(""))  ~$=  Wrap("BB"))
(Null("") @= "BB", Wrap(Null("")) @= Wrap("BB"), Null("") ~@= "BB", Wrap(Null("")) ~@= Wrap("BB"), Null("") $= "BB", Wrap(Null("")) $= Wrap("BB"), Null("") ~$= "BB", Wrap(Null("")) ~$= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("")  @<  "BB", Wrap(Null(""))  @<  Wrap("BB"), Null("")  ~@<  "BB", Wrap(Null(""))  ~@<  Wrap("BB"), Null("")  $<  "BB", Wrap(Null(""))  $<  Wrap("BB"), Null("")  ~$<  "BB", Wrap(Null(""))  ~$<  Wrap("BB"))
(Null("") @< "BB", Wrap(Null("")) @< Wrap("BB"), Null("") ~@< "BB", Wrap(Null("")) ~@< Wrap("BB"), Null("") $< "BB", Wrap(Null("")) $< Wrap("BB"), Null("") ~$< "BB", Wrap(Null("")) ~$< Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@< Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $< Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$< Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> (Null("")  @<= "BB", Wrap(Null(""))  @<= Wrap("BB"), Null("")  ~@<= "BB", Wrap(Null(""))  ~@<= Wrap("BB"), Null("")  $<= "BB", Wrap(Null(""))  $<= Wrap("BB"), Null("")  ~$<= "BB", Wrap(Null(""))  ~$<= Wrap("BB"))
(Null("") @<= "BB", Wrap(Null("")) @<= Wrap("BB"), Null("") ~@<= "BB", Wrap(Null("")) ~@<= Wrap("BB"), Null("") $<= "BB", Wrap(Null("")) $<= Wrap("BB"), Null("") ~$<= "BB", Wrap(Null("")) ~$<= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@<= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $<= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$<= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> (Null("")  @>  "BB", Wrap(Null(""))  @>  Wrap("BB"), Null("")  ~@>  "BB", Wrap(Null(""))  ~@>  Wrap("BB"), Null("")  $>  "BB", Wrap(Null(""))  $>  Wrap("BB"), Null("")  ~$>  "BB", Wrap(Null(""))  ~$>  Wrap("BB"))
(Null("") @> "BB", Wrap(Null("")) @> Wrap("BB"), Null("") ~@> "BB", Wrap(Null("")) ~@> Wrap("BB"), Null("") $> "BB", Wrap(Null("")) $> Wrap("BB"), Null("") ~$> "BB", Wrap(Null("")) ~$> Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$> Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("")  @>= "BB", Wrap(Null(""))  @>= Wrap("BB"), Null("")  ~@>= "BB", Wrap(Null(""))  ~@>= Wrap("BB"), Null("")  $>= "BB", Wrap(Null(""))  $>= Wrap("BB"), Null("")  ~$>= "BB", Wrap(Null(""))  ~$>= Wrap("BB"))
(Null("") @>= "BB", Wrap(Null("")) @>= Wrap("BB"), Null("") ~@>= "BB", Wrap(Null("")) ~@>= Wrap("BB"), Null("") $>= "BB", Wrap(Null("")) $>= Wrap("BB"), Null("") ~$>= "BB", Wrap(Null("")) ~$>= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$>= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("") !@=  "BB", Wrap(Null("")) !@=  Wrap("BB"), Null("") !~@=  "BB", Wrap(Null("")) !~@=  Wrap("BB"), Null("") !$=  "BB", Wrap(Null("")) !$=  Wrap("BB"), Null("") !~$=  "BB", Wrap(Null("")) !~$=  Wrap("BB"))
(Null("") !@= "BB", Wrap(Null("")) !@= Wrap("BB"), Null("") !~@= "BB", Wrap(Null("")) !~@= Wrap("BB"), Null("") !$= "BB", Wrap(Null("")) !$= Wrap("BB"), Null("") !~$= "BB", Wrap(Null("")) !~$= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !@= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~@= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("") !@<  "BB", Wrap(Null("")) !@<  Wrap("BB"), Null("") !~@<  "BB", Wrap(Null("")) !~@<  Wrap("BB"), Null("") !$<  "BB", Wrap(Null("")) !$<  Wrap("BB"), Null("") !~$<  "BB", Wrap(Null("")) !~$<  Wrap("BB"))
(Null("") !@< "BB", Wrap(Null("")) !@< Wrap("BB"), Null("") !~@< "BB", Wrap(Null("")) !~@< Wrap("BB"), Null("") !$< "BB", Wrap(Null("")) !$< Wrap("BB"), Null("") !~$< "BB", Wrap(Null("")) !~$< Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @>= Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@>= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$< Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> (Null("") !@<= "BB", Wrap(Null("")) !@<= Wrap("BB"), Null("") !~@<= "BB", Wrap(Null("")) !~@<= Wrap("BB"), Null("") !$<= "BB", Wrap(Null("")) !$<= Wrap("BB"), Null("") !~$<= "BB", Wrap(Null("")) !~$<= Wrap("BB"))
(Null("") !@<= "BB", Wrap(Null("")) !@<= Wrap("BB"), Null("") !~@<= "BB", Wrap(Null("")) !~@<= Wrap("BB"), Null("") !$<= "BB", Wrap(Null("")) !$<= Wrap("BB"), Null("") !~$<= "BB", Wrap(Null("")) !~$<= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @> Call(∂.Test.Wrap(str(BB)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@> Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$<= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> (Null("") !@>  "BB", Wrap(Null("")) !@>  Wrap("BB"), Null("") !~@>  "BB", Wrap(Null("")) !~@>  Wrap("BB"), Null("") !$>  "BB", Wrap(Null("")) !$>  Wrap("BB"), Null("") !~$>  "BB", Wrap(Null("")) !~$>  Wrap("BB"))
(Null("") !@> "BB", Wrap(Null("")) !@> Wrap("BB"), Null("") !~@> "BB", Wrap(Null("")) !~@> Wrap("BB"), Null("") !$> "BB", Wrap(Null("")) !$> Wrap("BB"), Null("") !~$> "BB", Wrap(Null("")) !~$> Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@<= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$> Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$> Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("") !@>= "BB", Wrap(Null("")) !@>= Wrap("BB"), Null("") !~@>= "BB", Wrap(Null("")) !~@>= Wrap("BB"), Null("") !$>= "BB", Wrap(Null("")) !$>= Wrap("BB"), Null("") !~$>= "BB", Wrap(Null("")) !~$>= Wrap("BB"))
(Null("") !@>= "BB", Wrap(Null("")) !@>= Wrap("BB"), Null("") !~@>= "BB", Wrap(Null("")) !~@>= Wrap("BB"), Null("") !$>= "BB", Wrap(Null("")) !$>= Wrap("BB"), Null("") !~$>= "BB", Wrap(Null("")) !~$>= Wrap("BB")) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@< Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$>= Call(∂.Test.Wrap(str(BB)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$>= Call(∂.Test.Wrap(str(BB)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("")  @=  Null(""), Wrap(Null(""))  @=  Wrap(Null("")), Null("")  ~@=  Null(""), Wrap(Null(""))  ~@=  Wrap(Null("")), Null("")  $=  Null(""), Wrap(Null(""))  $=  Wrap(Null("")), Null("")  ~$=  Null(""), Wrap(Null(""))  ~$=  Wrap(Null("")))
(Null("") @= Null(""), Wrap(Null("")) @= Wrap(Null("")), Null("") ~@= Null(""), Wrap(Null("")) ~@= Wrap(Null("")), Null("") $= Null(""), Wrap(Null("")) $= Wrap(Null("")), Null("") ~$= Null(""), Wrap(Null("")) ~$= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> (Null("")  @<  Null(""), Wrap(Null(""))  @<  Wrap(Null("")), Null("")  ~@<  Null(""), Wrap(Null(""))  ~@<  Wrap(Null("")), Null("")  $<  Null(""), Wrap(Null(""))  $<  Wrap(Null("")), Null("")  ~$<  Null(""), Wrap(Null(""))  ~$<  Wrap(Null("")))
(Null("") @< Null(""), Wrap(Null("")) @< Wrap(Null("")), Null("") ~@< Null(""), Wrap(Null("")) ~@< Wrap(Null("")), Null("") $< Null(""), Wrap(Null("")) $< Wrap(Null("")), Null("") ~$< Null(""), Wrap(Null("")) ~$< Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$< Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("")  @<= Null(""), Wrap(Null(""))  @<= Wrap(Null("")), Null("")  ~@<= Null(""), Wrap(Null(""))  ~@<= Wrap(Null("")), Null("")  $<= Null(""), Wrap(Null(""))  $<= Wrap(Null("")), Null("")  ~$<= Null(""), Wrap(Null(""))  ~$<= Wrap(Null("")))
(Null("") @<= Null(""), Wrap(Null("")) @<= Wrap(Null("")), Null("") ~@<= Null(""), Wrap(Null("")) ~@<= Wrap(Null("")), Null("") $<= Null(""), Wrap(Null("")) $<= Wrap(Null("")), Null("") ~$<= Null(""), Wrap(Null("")) ~$<= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @<= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $<= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$<= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> (Null("")  @>  Null(""), Wrap(Null(""))  @>  Wrap(Null("")), Null("")  ~@>  Null(""), Wrap(Null(""))  ~@>  Wrap(Null("")), Null("")  $>  Null(""), Wrap(Null(""))  $>  Wrap(Null("")), Null("")  ~$>  Null(""), Wrap(Null(""))  ~$>  Wrap(Null("")))
(Null("") @> Null(""), Wrap(Null("")) @> Wrap(Null("")), Null("") ~@> Null(""), Wrap(Null("")) ~@> Wrap(Null("")), Null("") $> Null(""), Wrap(Null("")) $> Wrap(Null("")), Null("") ~$> Null(""), Wrap(Null("")) ~$> Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @> Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@> Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $> Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$> Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, false, false, false, false)
###
> (Null("")  @>= Null(""), Wrap(Null(""))  @>= Wrap(Null("")), Null("")  ~@>= Null(""), Wrap(Null(""))  ~@>= Wrap(Null("")), Null("")  $>= Null(""), Wrap(Null(""))  $>= Wrap(Null("")), Null("")  ~$>= Null(""), Wrap(Null(""))  ~$>= Wrap(Null("")))
(Null("") @>= Null(""), Wrap(Null("")) @>= Wrap(Null("")), Null("") ~@>= Null(""), Wrap(Null("")) ~@>= Wrap(Null("")), Null("") $>= Null(""), Wrap(Null("")) $>= Wrap(Null("")), Null("") ~$>= Null(""), Wrap(Null("")) ~$>= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@>= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) $>= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~$>= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , false, false, false, false)
###
> (Null("") !@=  Null(""), Wrap(Null("")) !@=  Wrap(Null("")), Null("") !~@=  Null(""), Wrap(Null("")) !~@=  Wrap(Null("")), Null("") !$=  Null(""), Wrap(Null("")) !$=  Wrap(Null("")), Null("") !~$=  Null(""), Wrap(Null("")) !~$=  Wrap(Null("")))
(Null("") !@= Null(""), Wrap(Null("")) !@= Wrap(Null("")), Null("") !~@= Null(""), Wrap(Null("")) !~@= Wrap(Null("")), Null("") !$= Null(""), Wrap(Null("")) !$= Wrap(Null("")), Null("") !~$= Null(""), Wrap(Null("")) !~$= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !@= Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~@= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> (Null("") !@<  Null(""), Wrap(Null("")) !@<  Wrap(Null("")), Null("") !~@<  Null(""), Wrap(Null("")) !~@<  Wrap(Null("")), Null("") !$<  Null(""), Wrap(Null("")) !$<  Wrap(Null("")), Null("") !~$<  Null(""), Wrap(Null("")) !~$<  Wrap(Null("")))
(Null("") !@< Null(""), Wrap(Null("")) !@< Wrap(Null("")), Null("") !~@< Null(""), Wrap(Null("")) !~@< Wrap(Null("")), Null("") !$< Null(""), Wrap(Null("")) !$< Wrap(Null("")), Null("") !~$< Null(""), Wrap(Null("")) !~$< Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$< Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$< Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("") !@<= Null(""), Wrap(Null("")) !@<= Wrap(Null("")), Null("") !~@<= Null(""), Wrap(Null("")) !~@<= Wrap(Null("")), Null("") !$<= Null(""), Wrap(Null("")) !$<= Wrap(Null("")), Null("") !~$<= Null(""), Wrap(Null("")) !~$<= Wrap(Null("")))
(Null("") !@<= Null(""), Wrap(Null("")) !@<= Wrap(Null("")), Null("") !~@<= Null(""), Wrap(Null("")) !~@<= Wrap(Null("")), Null("") !$<= Null(""), Wrap(Null("")) !$<= Wrap(Null("")), Null("") !~$<= Null(""), Wrap(Null("")) !~$<= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @> Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$<= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$<= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
> (Null("") !@>  Null(""), Wrap(Null("")) !@>  Wrap(Null("")), Null("") !~@>  Null(""), Wrap(Null("")) !~@>  Wrap(Null("")), Null("") !$>  Null(""), Wrap(Null("")) !$>  Wrap(Null("")), Null("") !~$>  Null(""), Wrap(Null("")) !~$>  Wrap(Null("")))
(Null("") !@> Null(""), Wrap(Null("")) !@> Wrap(Null("")), Null("") !~@> Null(""), Wrap(Null("")) !~@> Wrap(Null("")), Null("") !$> Null(""), Wrap(Null("")) !$> Wrap(Null("")), Null("") !~$> Null(""), Wrap(Null("")) !~$> Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @<= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@<= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$> Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$> Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (true , true , true , true , true , true , true , true )
###
> (Null("") !@>= Null(""), Wrap(Null("")) !@>= Wrap(Null("")), Null("") !~@>= Null(""), Wrap(Null("")) !~@>= Wrap(Null("")), Null("") !$>= Null(""), Wrap(Null("")) !$>= Wrap(Null("")), Null("") !~$>= Null(""), Wrap(Null("")) !~$>= Wrap(Null("")))
(Null("") !@>= Null(""), Wrap(Null("")) !@>= Wrap(Null("")), Null("") !~@>= Null(""), Wrap(Null("")) !~@>= Wrap(Null("")), Null("") !$>= Null(""), Wrap(Null("")) !$>= Wrap(Null("")), Null("") !~$>= Null(""), Wrap(Null("")) !~$>= Wrap(Null(""))) : (b, b, b, b, b, b, b, b)
BndKind:Tuple, Type:(b, b, b, b, b, b, b, b), Bnd:((false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) @< Call(∂.Test.Wrap(str(<null>)):s)), false:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) ~@< Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !$>= Call(∂.Test.Wrap(str(<null>)):s)), true:b, Cmp(Call(∂.Test.Wrap(str(<null>)):s) !~$>= Call(∂.Test.Wrap(str(<null>)):s))):(b, b, b, b, b, b, b, b))
Func sig: () to (b, b, b, b, b, b, b, b)
Type: (bool,bool,bool,bool,bool,bool,bool,bool), Value: (false, false, false, false, true , true , true , true )
###
