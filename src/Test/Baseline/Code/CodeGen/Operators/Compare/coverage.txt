**** New definitions: inf, type: r8
**** New definitions: nan, type: r8
**** New definitions: r8_s, type: r8*
**** New definitions: r8qs, type: r8?*

> All(x: r8qs, All(y: r8qs, All(z: r8_s, (x !$= y $< z) = (x !$= y and y $< z))))
All(x : r8qs, All(y : r8qs, All(z : r8_s, (x !$= y $< z) @= (x !$= y and y $< z)))) : b
BndKind:Call, Type:b, Bnd:(Call(∂.All([map:1] Global(r8qs), Call(∂.All([map:2] Global(r8qs), Call(∂.With([with:3] Cmp(Scope(1) !$= Scope(2)), Call(∂.All([map:4] Global(r8_s), Cmp(Cmp(Scope(1) !$= Scope(2) $< Scope(4)) @= And(Scope(3), Cmp(Scope(2) $< Scope(4))))):b)):b)):b)):b))
Func sig: (<ctx>:x, r8qs:r8?*, r8_s:r8*) to b
Type: bool, Value: true 
*** Ctx ping count: 1121
    [0](1000): All(*1: r8_s, *2x !$= *3x $< *1 @= And(!4x, *3x $< *1))
    [1](110): All(*1: r8qs, With(!3: *2x !$= *1, All(*4: r8_s, *2x !$= *1 $< *4 @= And(!3, *1 $< *4))))
    [2](11): All(*1: r8qs, All(*2: r8qs, With(!3: *1 !$= *2, All(*4: r8_s, *1 !$= *2 $< *4 @= And(!3, *2 $< *4)))))
###
> All(x: r8qs, All(y: r8qs, All(z: r8_s, (x !@= y @< z) = (x !@= y and y @< z))))
All(x : r8qs, All(y : r8qs, All(z : r8_s, (x !@= y @< z) @= (x !@= y and y @< z)))) : b
BndKind:Call, Type:b, Bnd:(Call(∂.All([map:1] Global(r8qs), Call(∂.All([map:2] Global(r8qs), Call(∂.With([with:3] Cmp(Scope(1) !@= Scope(2)), Call(∂.All([map:4] Global(r8_s), Cmp(Cmp(Scope(1) !@= Scope(2) @< Scope(4)) @= And(Scope(3), Cmp(Scope(2) @< Scope(4))))):b)):b)):b)):b))
Func sig: (<ctx>:x, r8qs:r8?*, r8_s:r8*) to b
Type: bool, Value: true 
*** Ctx ping count: 1121
    [0](1000): All(*1: r8_s, *2x !@= *3x @< *1 @= And(!4x, *3x @< *1))
    [1](110): All(*1: r8qs, With(!3: *2x !@= *1, All(*4: r8_s, *2x !@= *1 @< *4 @= And(!3, *1 @< *4))))
    [2](11): All(*1: r8qs, All(*2: r8qs, With(!3: *1 !@= *2, All(*4: r8_s, *1 !@= *2 @< *4 @= And(!3, *2 @< *4)))))
###
> Sum(x: r8qs, Sum(y: r8qs, Count(z: r8_s, x !$= y $< z)))
Sum(x : r8qs, Sum(y : r8qs, Count(z : r8_s, x !$= y $< z))) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum([map:1] Global(r8qs), Call(∂.Sum([map:2] Global(r8qs), Call(∂.Count([map:3] Global(r8_s), Cmp(Scope(1) !$= Scope(2) $< Scope(3))):i8)):i8)):i8))
Func sig: (<ctx>:x, r8qs:r8?*, r8_s:r8*) to i8
Type: i8, Value: 235
*** Ctx ping count: 1121
    [0](1000): Count(*1: r8_s, *2x !$= *3x $< *1)
    [1](110): Sum(*1: r8qs, Count(*2: r8_s, *3x !$= *1 $< *2))
    [2](11): Sum(*1: r8qs, Sum(*2: r8qs, Count(*3: r8_s, *1 !$= *2 $< *3)))
###
> Sum(x: r8qs, Sum(y: r8qs, Count(z: r8_s, x !@= y @< z)))
Sum(x : r8qs, Sum(y : r8qs, Count(z : r8_s, x !@= y @< z))) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum([map:1] Global(r8qs), Call(∂.Sum([map:2] Global(r8qs), Call(∂.Count([map:3] Global(r8_s), Cmp(Scope(1) !@= Scope(2) @< Scope(3))):i8)):i8)):i8))
Func sig: (<ctx>:x, r8qs:r8?*, r8_s:r8*) to i8
Type: i8, Value: 388
*** Ctx ping count: 1121
    [0](1000): Count(*1: r8_s, *2x !@= *3x @< *1)
    [1](110): Sum(*1: r8qs, Count(*2: r8_s, *3x !@= *1 @< *2))
    [2](11): Sum(*1: r8qs, Sum(*2: r8qs, Count(*3: r8_s, *1 !@= *2 @< *3)))
###
> All(x: r8qs, All(y: r8qs, All(z: r8_s, (x !$= y $<= z $<= 0 $< 1 $<= x) = (y $<= z and z $<= 0 and 1 $<= x))))
All(x : r8qs, All(y : r8qs, All(z : r8_s, (x !$= y $<= z $<= 0 $< 1 $<= x) @= (y $<= z and z $<= 0 and 1 $<= x)))) : b
BndKind:Call, Type:b, Bnd:(Call(∂.All([map:1] Global(r8qs), Call(∂.With([with:2] Cmp(1:r8 $<= Scope(1)), Call(∂.All([map:3] Global(r8qs), Call(∂.All([map:4] Global(r8_s), Cmp(Cmp(Scope(1) !$= Scope(3) $<= Scope(4) $<= 0:r8 && 1:r8 $<= Scope(1)) @= And(Scope(2), Cmp(Scope(3) $<= Scope(4)), Cmp(Scope(4) $<= 0:r8)))):b)):b)):b)):b))
Func sig: (<ctx>:x, r8qs:r8?*, r8_s:r8*) to b
Type: bool, Value: true 
*** Ctx ping count: 1121
    [0](1000): All(*1: r8_s, *2x !$= *3x $<= *1 $<= 0 && 1 $<= *2x @= And(!4x, *3x $<= *1, *1 $<= 0))
    [1](110): All(*1: r8qs, All(*2: r8_s, *3x !$= *1 $<= *2 $<= 0 && 1 $<= *3x @= And(!4x, *1 $<= *2, *2 $<= 0)))
    [2](11): All(*1: r8qs, With(!2: 1 $<= *1, All(*3: r8qs, All(*4: r8_s, *1 !$= *3 $<= *4 $<= 0 && 1 $<= *1 @= And(!2, *3 $<= *4, *4 $<= 0)))))
###
> All(x: r8qs, All(y: r8qs, All(z: r8_s, (x !@= y @<= z @<= 0 @< 1 @<= x) = (y @<= z and z @<= 0 and 1 @<= x))))
All(x : r8qs, All(y : r8qs, All(z : r8_s, (x !@= y @<= z @<= 0 @< 1 @<= x) @= (y @<= z and z @<= 0 and 1 @<= x)))) : b
BndKind:Call, Type:b, Bnd:(Call(∂.All([map:1] Global(r8qs), Call(∂.With([with:2] Cmp(1:r8 @<= Scope(1)), Call(∂.All([map:3] Global(r8qs), Call(∂.All([map:4] Global(r8_s), Cmp(Cmp(Scope(1) !@= Scope(3) @<= Scope(4) @<= 0:r8 && 1:r8 @<= Scope(1)) @= And(Scope(2), Cmp(Scope(3) @<= Scope(4)), Cmp(Scope(4) @<= 0:r8)))):b)):b)):b)):b))
Func sig: (<ctx>:x, r8qs:r8?*, r8_s:r8*) to b
Type: bool, Value: true 
*** Ctx ping count: 1121
    [0](1000): All(*1: r8_s, *2x !@= *3x @<= *1 @<= 0 && 1 @<= *2x @= And(!4x, *3x @<= *1, *1 @<= 0))
    [1](110): All(*1: r8qs, All(*2: r8_s, *3x !@= *1 @<= *2 @<= 0 && 1 @<= *3x @= And(!4x, *1 @<= *2, *2 @<= 0)))
    [2](11): All(*1: r8qs, With(!2: 1 @<= *1, All(*3: r8qs, All(*4: r8_s, *1 !@= *3 @<= *4 @<= 0 && 1 @<= *1 @= And(!2, *3 @<= *4, *4 @<= 0)))))
###
> Sum(x: r8qs, Sum(y: r8qs, Count(z: r8_s, x !$= y $<= z $<= 0 $< 1 $<= x)))
Sum(x : r8qs, Sum(y : r8qs, Count(z : r8_s, x !$= y $<= z $<= 0 $< 1 $<= x))) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum([map:1] Global(r8qs), Call(∂.Sum([map:2] Global(r8qs), Call(∂.Count([map:3] Global(r8_s), Cmp(Scope(1) !$= Scope(2) $<= Scope(3) $<= 0:r8 && 1:r8 $<= Scope(1))):i8)):i8)):i8))
Func sig: (<ctx>:x, r8qs:r8?*, r8_s:r8*) to i8
Type: i8, Value: 44
*** Ctx ping count: 1121
    [0](1000): Count(*1: r8_s, *2x !$= *3x $<= *1 $<= 0 && 1 $<= *2x)
    [1](110): Sum(*1: r8qs, Count(*2: r8_s, *3x !$= *1 $<= *2 $<= 0 && 1 $<= *3x))
    [2](11): Sum(*1: r8qs, Sum(*2: r8qs, Count(*3: r8_s, *1 !$= *2 $<= *3 $<= 0 && 1 $<= *1)))
###
> Sum(x: r8qs, Sum(y: r8qs, Count(z: r8_s, x !@= y @<= z @<= 0 @< 1 @<= x)))
Sum(x : r8qs, Sum(y : r8qs, Count(z : r8_s, x !@= y @<= z @<= 0 @< 1 @<= x))) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Sum([map:1] Global(r8qs), Call(∂.Sum([map:2] Global(r8qs), Call(∂.Count([map:3] Global(r8_s), Cmp(Scope(1) !@= Scope(2) @<= Scope(3) @<= 0:r8 && 1:r8 @<= Scope(1))):i8)):i8)):i8))
Func sig: (<ctx>:x, r8qs:r8?*, r8_s:r8*) to i8
Type: i8, Value: 84
*** Ctx ping count: 1121
    [0](1000): Count(*1: r8_s, *2x !@= *3x @<= *1 @<= 0 && 1 @<= *2x)
    [1](110): Sum(*1: r8qs, Count(*2: r8_s, *3x !@= *1 @<= *2 @<= 0 && 1 @<= *3x))
    [2](11): Sum(*1: r8qs, Sum(*2: r8qs, Count(*3: r8_s, *1 !@= *2 @<= *3 @<= 0 && 1 @<= *1)))
###
> First(Wrap([1r8])) !@= 3 @< 5 @< First(Wrap([7r8]))
First(Wrap([1])) !@= 3 @< 5 @< First(Wrap([7])) : b
BndKind:Compare, Type:b, Bnd:(Cmp(Call(∂.TakeOne(Call(∂.Test.Wrap([1:r8]:r8*):r8*), [else] null:r8?):r8?) !@= 3:r8 && 5:r8 @< Call(∂.TakeOne(Call(∂.Test.Wrap([7:r8]:r8*):r8*), [else] null:r8?):r8?)))
Func sig: () to b
Type: bool, Value: true 
###
