> Sequence(5)
Sequence(5) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Sequence(5:i8):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 1
 1) 2
 2) 3
 3) 4
 4) 5
###
> Sequence(5, 0)
Sequence(5, 0) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Sequence(5:i8, 0:i8):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 0
 1) 1
 2) 2
 3) 3
 4) 4
###
> Sequence(5, 0, 2)
Sequence(5, 0, 2) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Sequence(5:i8, 0:i8, 2:i8):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 0
 1) 2
 2) 4
 3) 6
 4) 8
###
> Sequence(5, 3, 0)
Sequence(5, 3, 0) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Sequence(5:i8, 3:i8, 0:i8):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 3
 1) 3
 2) 3
 3) 3
 4) 3
###
> Sequence(5, 5, -1)
Sequence(5, 5, -1) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Sequence(5:i8, 5:i8, -1:i8):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 5
 1) 4
 2) 3
 3) 2
 4) 1
###
> Sequence(5, 5, -2)
Sequence(5, 5, -2) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Sequence(5:i8, 5:i8, -2:i8):i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 5
 1) 3
 2) 1
 3) -1
 4) -3
###
> Sequence(Wrap(-3)) // Empty
Sequence(Wrap(-3)) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Sequence(Call(∂.Test.Wrap(-3:i8):i8)):i8*))
Func sig: () to i8*
Type: <null>, Value: <null>
###
> Sequence(Wrap(-3), 5) // Empty
Sequence(Wrap(-3), 5) : i8*
BndKind:Call, Type:i8*, Bnd:(Call(∂.Sequence(Call(∂.Test.Wrap(-3:i8):i8), 5:i8):i8*))
Func sig: () to i8*
Type: <null>, Value: <null>
###
> Sequence(5, 17u8)
Sequence(5, 17) : u8*
BndKind:Call, Type:u8*, Bnd:(Call(∂.Sequence(5:i8, 17:u8):u8*))
Func sig: () to u8*
Sequence: Seq<u8>
 0) 17
 1) 18
 2) 19
 3) 20
 4) 21
###
> Sequence(5, -3ia)
Sequence(5, -3) : i*
BndKind:Call, Type:i*, Bnd:(Call(∂.Sequence(5:i8, -3:i):i*))
Func sig: () to i*
Sequence: Seq<ia>
 0) -3
 1) -2
 2) -1
 3) 0
 4) 1
###
> Sequence(5, 0.5)
Sequence(5, 0.5) : r8*
BndKind:Call, Type:r8*, Bnd:(Call(∂.Sequence(5:i8, 0.5:r8):r8*))
Func sig: () to r8*
Sequence: Seq<r8>
 0) 0.5
 1) 1.5
 2) 2.5
 3) 3.5
 4) 4.5
###
> Sequence(Wrap(-3), 17u8)
Sequence(Wrap(-3), 17) : u8*
BndKind:Call, Type:u8*, Bnd:(Call(∂.Sequence(Call(∂.Test.Wrap(-3:i8):i8), 17:u8):u8*))
Func sig: () to u8*
Type: <null>, Value: <null>
###
> Sequence(Wrap(-3), -3ia)
Sequence(Wrap(-3), -3) : i*
BndKind:Call, Type:i*, Bnd:(Call(∂.Sequence(Call(∂.Test.Wrap(-3:i8):i8), -3:i):i*))
Func sig: () to i*
Type: <null>, Value: <null>
###
> Sequence(Wrap(-3), 0.5)
Sequence(Wrap(-3), 0.5) : r8*
BndKind:Call, Type:r8*, Bnd:(Call(∂.Sequence(Call(∂.Test.Wrap(-3:i8):i8), 0.5:r8):r8*))
Func sig: () to r8*
Type: <null>, Value: <null>
###
> Sequence(5, 17u8, 2u8)
Sequence(5, 17, 2) : u8*
BndKind:Call, Type:u8*, Bnd:(Call(∂.Sequence(5:i8, 17:u8, 2:u8):u8*))
Func sig: () to u8*
Sequence: Seq<u8>
 0) 17
 1) 19
 2) 21
 3) 23
 4) 25
###
> Sequence(5, -3ia, 2ia)
Sequence(5, -3, 2) : i*
BndKind:Call, Type:i*, Bnd:(Call(∂.Sequence(5:i8, -3:i, 2:i):i*))
Func sig: () to i*
Sequence: Seq<ia>
 0) -3
 1) -1
 2) 1
 3) 3
 4) 5
###
> Sequence(5, 0.5, 2.0)
Sequence(5, 0.5, 2) : r8*
BndKind:Call, Type:r8*, Bnd:(Call(∂.Sequence(5:i8, 0.5:r8, 2:r8):r8*))
Func sig: () to r8*
Sequence: Seq<r8>
 0) 0.5
 1) 2.5
 2) 4.5
 3) 6.5
 4) 8.5
###
> Sequence(5, 0.5, 0.1)
Sequence(5, 0.5, 0.1) : r8*
BndKind:Call, Type:r8*, Bnd:(Call(∂.Sequence(5:i8, 0.5:r8, 0.1:r8):r8*))
Func sig: () to r8*
Sequence: Seq<r8>
 0) 0.5
 1) 0.6
 2) 0.7
 3) 0.8
 4) 0.9
###
