**** New globals: {b:b, d:d, g:g, i:i, i1:i1, i2:i2, i4:i4, i8:i8, n:r8, o:o, qb:b?, qd:d?, qi:i?, qi1:i1?, qi2:i2?, qi4:i4?, qi8:i8?, qn:r8?, qr4:r4?, qr8:r8?, qu1:u1?, qu2:u2?, qu4:u4?, qu8:u8?, r4:r4, r8:r8, s:s, u1:u1, u2:u2, u4:u4, u8:u8}
**** New definitions: N, type: s
**** New definitions: L, type: s*
**** New definitions: M, type: s*
**** New definitions: P, type: s*
**** New definitions: Q, type: s

> Text.IndexOf(null, null)
Text.IndexOf(null, null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(null, null)
Text.LastIndexOf(null, null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf([~] null, null)
Text.IndexOf([~] null, null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf([~] null, null)
Text.LastIndexOf([~] null, null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf([~] null, [~] null)
Text.IndexOf([~] null, [~] null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf([~] null, [~] null)
Text.LastIndexOf([~] null, [~] null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(null, [~] null)
Text.IndexOf(null, [~] null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(null, [~] null)
Text.LastIndexOf(null, [~] null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap(null), null)
Text.IndexOf(Wrap(null), null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap(null), null)
Text.LastIndexOf(Wrap(null), null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap(null), [~] null)
Text.IndexOf(Wrap(null), [~] null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap(null), [~] null)
Text.LastIndexOf(Wrap(null), [~] null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(N, null)
Text.IndexOf(N, null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(N, null)
Text.LastIndexOf(N, null) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.Len(Global(N)):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(N, [~] null)
Text.IndexOf(N, [~] null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(N, [~] null)
Text.LastIndexOf(N, [~] null) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.Len(Global(N)):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap(""), null)
Text.IndexOf(Wrap(""), null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap(""), null)
Text.LastIndexOf(Wrap(""), null) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.Len(Call(∂.Test.Wrap(str()):s)):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap(""), [~] null)
Text.IndexOf(Wrap(""), [~] null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap(""), [~] null)
Text.LastIndexOf(Wrap(""), [~] null) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.Len(Call(∂.Test.Wrap(str()):s)):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(N, "")
Text.IndexOf(N, "") : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(N, "")
Text.LastIndexOf(N, "") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.Len(Global(N)):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(N, [~] "")
Text.IndexOf(N, [~] "") : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(N, [~] "")
Text.LastIndexOf(N, [~] "") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.Len(Global(N)):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap("hello"), "")
Text.IndexOf(Wrap("hello"), "") : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("hello"), "")
Text.LastIndexOf(Wrap("hello"), "") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.Len(Call(∂.Test.Wrap(str(hello)):s)):i8))
Func sig: () to i8
Type: i8, Value: 5
###
> Text.IndexOf(Wrap("hello"), [~] "")
Text.IndexOf(Wrap("hello"), [~] "") : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("hello"), [~] "")
Text.LastIndexOf(Wrap("hello"), [~] "") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.Len(Call(∂.Test.Wrap(str(hello)):s)):i8))
Func sig: () to i8
Type: i8, Value: 5
###
> Text.IndexOf(Wrap("hello"), null)
Text.IndexOf(Wrap("hello"), null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("hello"), null)
Text.LastIndexOf(Wrap("hello"), null) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.Len(Call(∂.Test.Wrap(str(hello)):s)):i8))
Func sig: () to i8
Type: i8, Value: 5
###
> Text.IndexOf(Wrap("hello"), [~] null)
Text.IndexOf(Wrap("hello"), [~] null) : i8
BndKind:Int, Type:i8, Bnd:(0:i8)
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("hello"), [~] null)
Text.LastIndexOf(Wrap("hello"), [~] null) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.Len(Call(∂.Test.Wrap(str(hello)):s)):i8))
Func sig: () to i8
Type: i8, Value: 5
###
> Text.IndexOf(Wrap(""), "hello")
Text.IndexOf(Wrap(""), "hello") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), str(hello)):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap(""), "hello")
Text.LastIndexOf(Wrap(""), "hello") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), str(hello)):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap(""), [~] "hello")
Text.IndexOf(Wrap(""), [~] "hello") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), [~] str(hello)):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap(""), [~] "hello")
Text.LastIndexOf(Wrap(""), [~] "hello") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), [~] str(hello)):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(N, "hello")
Text.IndexOf(N, "hello") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), str(hello)):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(N, "hello")
Text.LastIndexOf(N, "hello") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), str(hello)):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.IndexOf(N, [~] "hello")
Text.IndexOf(N, [~] "hello") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), [~] str(hello)):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(N, [~] "hello")
Text.LastIndexOf(N, [~] "hello") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), [~] str(hello)):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), "l")
Text.IndexOf(Wrap("hello"), "l") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l)):i8))
Func sig: () to i8
Type: i8, Value: 2
###
> Text.LastIndexOf(Wrap("hello"), "l")
Text.LastIndexOf(Wrap("hello"), "l") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l)):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.IndexOf(Wrap("hello"), [~] "L")
Text.IndexOf(Wrap("hello"), [~] "L") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(L)):i8))
Func sig: () to i8
Type: i8, Value: 2
###
> Text.LastIndexOf(Wrap("hello"), [~] "L")
Text.LastIndexOf(Wrap("hello"), [~] "L") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(L)):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.IndexOf(Wrap("heLlo"), [~] "l")
Text.IndexOf(Wrap("heLlo"), [~] "l") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(heLlo)):s), [~] str(l)):i8))
Func sig: () to i8
Type: i8, Value: 2
###
> Text.LastIndexOf(Wrap("helLo"), [~] "l")
Text.LastIndexOf(Wrap("helLo"), [~] "l") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(helLo)):s), [~] str(l)):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.IndexOf(Wrap("hEllo"), "e")
Text.IndexOf(Wrap("hEllo"), "e") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hEllo)):s), str(e)):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("hEllo"), "e")
Text.LastIndexOf(Wrap("hEllo"), "e") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hEllo)):s), str(e)):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), "x")
Text.IndexOf(Wrap("hello"), "x") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(x)):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("hello"), "x")
Text.LastIndexOf(Wrap("hello"), "x") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(x)):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), [~] "x")
Text.IndexOf(Wrap("hello"), [~] "x") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(x)):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("hello"), [~] "x")
Text.LastIndexOf(Wrap("hello"), [~] "x") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(x)):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("x"), "hello")
Text.IndexOf(Wrap("x"), "hello") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), str(hello)):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("x"), "hello")
Text.LastIndexOf(Wrap("x"), "hello") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), str(hello)):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("x"), [~] "hello")
Text.IndexOf(Wrap("x"), [~] "hello") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(hello)):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("x"), [~] "hello")
Text.LastIndexOf(Wrap("x"), [~] "hello") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(hello)):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(s, "hello")
Text.IndexOf(s, "hello") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(s), str(hello)):i8))
Func sig: (s:s) to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(s, "hello")
Text.LastIndexOf(s, "hello") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(s), str(hello)):i8))
Func sig: (s:s) to i8
Type: i8, Value: -1
###
> Text.IndexOf(s, [~] "hello")
Text.IndexOf(s, [~] "hello") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(s), [~] str(hello)):i8))
Func sig: (s:s) to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(s, [~] "hello")
Text.LastIndexOf(s, [~] "hello") : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(s), [~] str(hello)):i8))
Func sig: (s:s) to i8
Type: i8, Value: -1
###
> Text.IndexOf("x", s)
Text.IndexOf("x", s) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(str(x), Global(s)):i8))
Func sig: (s:s) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf("x", s)
Text.LastIndexOf("x", s) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(str(x), Global(s)):i8))
Func sig: (s:s) to i8
Type: i8, Value: 1
###
> Text.IndexOf("x", [~] s)
Text.IndexOf("x", [~] s) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(str(x), [~] Global(s)):i8))
Func sig: (s:s) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf("x", [~] s)
Text.LastIndexOf("x", [~] s) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(str(x), [~] Global(s)):i8))
Func sig: (s:s) to i8
Type: i8, Value: 1
###
> Text.IndexOf(s, s)
Text.IndexOf(s, s) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(s), Global(s)):i8))
Func sig: (s:s) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(s, s)
Text.LastIndexOf(s, s) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(s), Global(s)):i8))
Func sig: (s:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(s, [~] s)
Text.IndexOf(s, [~] s) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(s), [~] Global(s)):i8))
Func sig: (s:s) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(s, [~] s)
Text.LastIndexOf(s, [~] s) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(s), [~] Global(s)):i8))
Func sig: (s:s) to i8
Type: i8, Value: 0
###
> Text.StartsWith(null, Q)
Text.StartsWith(null, Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(str(<null>), Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.EndsWith(null, Q)
Text.EndsWith(null, Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(str(<null>), Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.StartsWith(null, [~] Q)
Text.StartsWith(null, [~] Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(str(<null>), [~] Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.EndsWith(null, [~] Q)
Text.EndsWith(null, [~] Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(str(<null>), [~] Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.StartsWith(null, [<] Q) // Error.
Text.StartsWith(null, [<] Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(str(<null>), Global(Q)):b))
*** Error: (22,25) Node: [<] Q, Tok: '[<]', Message: Unexpected directive
###
> Text.EndsWith(null, [<] Q) // Error.
Text.EndsWith(null, [<] Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(str(<null>), Global(Q)):b))
*** Error: (20,23) Node: [<] Q, Tok: '[<]', Message: Unexpected directive
###
> Text.StartsWith([~] null, Q)
Text.StartsWith([~] null, Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith([~] str(<null>), Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.EndsWith([~] null, Q)
Text.EndsWith([~] null, Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith([~] str(<null>), Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.StartsWith([~] null, [~] Q)
Text.StartsWith([~] null, [~] Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith([~] str(<null>), [~] Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.EndsWith([~] null, [~] Q)
Text.EndsWith([~] null, [~] Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith([~] str(<null>), [~] Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.StartsWith(Wrap(null), Q)
Text.StartsWith(Wrap(null), Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(str(<null>), Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.EndsWith(Wrap(null), Q)
Text.EndsWith(Wrap(null), Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(str(<null>), Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.StartsWith(Wrap(null), [~] Q)
Text.StartsWith(Wrap(null), [~] Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(str(<null>), [~] Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.EndsWith(Wrap(null), [~] Q)
Text.EndsWith(Wrap(null), [~] Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(str(<null>), [~] Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.StartsWith(Wrap(""), Q)
Text.StartsWith(Wrap(""), Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str()):s), Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.EndsWith(Wrap(""), Q)
Text.EndsWith(Wrap(""), Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str()):s), Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.StartsWith(Wrap(""), [~] Q)
Text.StartsWith(Wrap(""), [~] Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str()):s), [~] Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.EndsWith(Wrap(""), [~] Q)
Text.EndsWith(Wrap(""), [~] Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str()):s), [~] Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.StartsWith(Wrap("llegar"), "lle")
Text.StartsWith(Wrap("llegar"), "lle") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str(llegar)):s), str(lle)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Text.EndsWith(Wrap("calle"), "lle")
Text.EndsWith(Wrap("calle"), "lle") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str(calle)):s), str(lle)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Text.StartsWith(Wrap("llegar"), "lLe")
Text.StartsWith(Wrap("llegar"), "lLe") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str(llegar)):s), str(lLe)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.EndsWith(Wrap("calle"), "lLe")
Text.EndsWith(Wrap("calle"), "lLe") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str(calle)):s), str(lLe)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.StartsWith(Wrap("llegar"), [~] "lLe")
Text.StartsWith(Wrap("llegar"), [~] "lLe") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str(llegar)):s), [~] str(lLe)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Text.EndsWith(Wrap("calle"), [~] "lLe")
Text.EndsWith(Wrap("calle"), [~] "lLe") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str(calle)):s), [~] str(lLe)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Text.StartsWith(Wrap("calle"), "lle")
Text.StartsWith(Wrap("calle"), "lle") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str(calle)):s), str(lle)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.EndsWith(Wrap("llegar"), "lle")
Text.EndsWith(Wrap("llegar"), "lle") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str(llegar)):s), str(lle)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.StartsWith(Wrap("calle"), [~] "lle")
Text.StartsWith(Wrap("calle"), [~] "lle") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str(calle)):s), [~] str(lle)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.EndsWith(Wrap("llegar"), [~] "lle")
Text.EndsWith(Wrap("llegar"), [~] "lle") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str(llegar)):s), [~] str(lle)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.StartsWith(Wrap("aloha"), Q)
Text.StartsWith(Wrap("aloha"), Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str(aloha)):s), Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.EndsWith(Wrap("aloha"), Q)
Text.EndsWith(Wrap("aloha"), Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str(aloha)):s), Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.StartsWith(Wrap("alohA"), Q)
Text.StartsWith(Wrap("alohA"), Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str(alohA)):s), Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.EndsWith(Wrap("Aloha"), Q)
Text.EndsWith(Wrap("Aloha"), Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str(Aloha)):s), Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.StartsWith(Wrap("Aloha"), [~] Q)
Text.StartsWith(Wrap("Aloha"), [~] Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str(Aloha)):s), [~] Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.EndsWith(Wrap("alohA"), [~] Q)
Text.EndsWith(Wrap("alohA"), [~] Q) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str(alohA)):s), [~] Global(Q)):b))
Func sig: (Q:s) to b
Type: bool, Value: true 
###
> Text.StartsWith(Q, "aloha")
Text.StartsWith(Q, "aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Global(Q), str(aloha)):b))
Func sig: (Q:s) to b
Type: bool, Value: false
###
> Text.EndsWith(Q, "aloha")
Text.EndsWith(Q, "aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Global(Q), str(aloha)):b))
Func sig: (Q:s) to b
Type: bool, Value: false
###
> Text.StartsWith(Q, [~] "Aloha")
Text.StartsWith(Q, [~] "Aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Global(Q), [~] str(Aloha)):b))
Func sig: (Q:s) to b
Type: bool, Value: false
###
> Text.EndsWith(Q, [~] "Aloha")
Text.EndsWith(Q, [~] "Aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Global(Q), [~] str(Aloha)):b))
Func sig: (Q:s) to b
Type: bool, Value: false
###
> Text.StartsWith(Wrap(""), "aloha")
Text.StartsWith(Wrap(""), "aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str()):s), str(aloha)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.EndsWith(Wrap(""), "aloha")
Text.EndsWith(Wrap(""), "aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str()):s), str(aloha)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.StartsWith(Wrap(""), [~] "Aloha")
Text.StartsWith(Wrap(""), [~] "Aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str()):s), [~] str(Aloha)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.EndsWith(Wrap(""), [~] "Aloha")
Text.EndsWith(Wrap(""), [~] "Aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str()):s), [~] str(Aloha)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.StartsWith(Wrap("aloha"), "aloha")
Text.StartsWith(Wrap("aloha"), "aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str(aloha)):s), str(aloha)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Text.EndsWith(Wrap("aloha"), "aloha")
Text.EndsWith(Wrap("aloha"), "aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str(aloha)):s), str(aloha)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Text.StartsWith(Wrap("Aloha"), "aloha")
Text.StartsWith(Wrap("Aloha"), "aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str(Aloha)):s), str(aloha)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.EndsWith(Wrap("Aloha"), "aloha")
Text.EndsWith(Wrap("Aloha"), "aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str(Aloha)):s), str(aloha)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.StartsWith(Wrap("Aloha"), [~] "aloha")
Text.StartsWith(Wrap("Aloha"), [~] "aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str(Aloha)):s), [~] str(aloha)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Text.EndsWith(Wrap("Aloha"), [~] "aloha")
Text.EndsWith(Wrap("Aloha"), [~] "aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str(Aloha)):s), [~] str(aloha)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Text.StartsWith(Wrap("aloha"), "x")
Text.StartsWith(Wrap("aloha"), "x") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str(aloha)):s), str(x)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.EndsWith(Wrap("aloha"), "x")
Text.EndsWith(Wrap("aloha"), "x") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str(aloha)):s), str(x)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.StartsWith(Wrap("aloha"), [~] "x")
Text.StartsWith(Wrap("aloha"), [~] "x") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str(aloha)):s), [~] str(x)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.EndsWith(Wrap("aloha"), [~] "x")
Text.EndsWith(Wrap("aloha"), [~] "x") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str(aloha)):s), [~] str(x)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.StartsWith(Wrap("x"), "aloha")
Text.StartsWith(Wrap("x"), "aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str(x)):s), str(aloha)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.EndsWith(Wrap("x"), "aloha")
Text.EndsWith(Wrap("x"), "aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str(x)):s), str(aloha)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.StartsWith(Wrap("x"), [~] "aloha")
Text.StartsWith(Wrap("x"), [~] "aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Call(∂.Test.Wrap(str(x)):s), [~] str(aloha)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.EndsWith(Wrap("x"), [~] "aloha")
Text.EndsWith(Wrap("x"), [~] "aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Call(∂.Test.Wrap(str(x)):s), [~] str(aloha)):b))
Func sig: () to b
Type: bool, Value: false
###
> Text.StartsWith(s, "aloha")
Text.StartsWith(s, "aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Global(s), str(aloha)):b))
Func sig: (s:s) to b
Type: bool, Value: false
###
> Text.EndsWith(s, "aloha")
Text.EndsWith(s, "aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Global(s), str(aloha)):b))
Func sig: (s:s) to b
Type: bool, Value: false
###
> Text.StartsWith(s, [~] "Aloha")
Text.StartsWith(s, [~] "Aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Global(s), [~] str(Aloha)):b))
Func sig: (s:s) to b
Type: bool, Value: false
###
> Text.EndsWith(s, "[~] Aloha")
Text.EndsWith(s, "[~] Aloha") : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Global(s), str([~] Aloha)):b))
Func sig: (s:s) to b
Type: bool, Value: false
###
> Text.StartsWith("x", s)
Text.StartsWith("x", s) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(str(x), Global(s)):b))
Func sig: (s:s) to b
Type: bool, Value: true 
###
> Text.EndsWith("x", s)
Text.EndsWith("x", s) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(str(x), Global(s)):b))
Func sig: (s:s) to b
Type: bool, Value: true 
###
> Text.StartsWith("x", [~] s)
Text.StartsWith("x", [~] s) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(str(x), [~] Global(s)):b))
Func sig: (s:s) to b
Type: bool, Value: true 
###
> Text.EndsWith("x", [~] s)
Text.EndsWith("x", [~] s) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(str(x), [~] Global(s)):b))
Func sig: (s:s) to b
Type: bool, Value: true 
###
> Text.StartsWith(s, s)
Text.StartsWith(s, s) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Global(s), Global(s)):b))
Func sig: (s:s) to b
Type: bool, Value: true 
###
> Text.EndsWith(s, s)
Text.EndsWith(s, s) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Global(s), Global(s)):b))
Func sig: (s:s) to b
Type: bool, Value: true 
###
> Text.StartsWith(s, [~] s)
Text.StartsWith(s, [~] s) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.StartsWith(Global(s), [~] Global(s)):b))
Func sig: (s:s) to b
Type: bool, Value: true 
###
> Text.EndsWith(s, [~] s)
Text.EndsWith(s, [~] s) : b
BndKind:Call, Type:b, Bnd:(Call(∂.Text.EndsWith(Global(s), [~] Global(s)):b))
Func sig: (s:s) to b
Type: bool, Value: true 
###
> Text.IndexOf(N, null, 0)
Text.IndexOf(N, null, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), str(<null>), 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(N, null, 0)
Text.LastIndexOf(N, null, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), str(<null>), 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf([~] N, null, 0) // Error.
Text.IndexOf([~] N, null, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf([~] Global(N), str(<null>), 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf([~] N, null, 0) // Error.
Text.LastIndexOf([~] N, null, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf([~] Global(N), str(<null>), 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(N, [~] null, 0)
Text.IndexOf(N, [~] null, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), [~] str(<null>), 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(N, [~] null, 0)
Text.LastIndexOf(N, [~] null, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), [~] str(<null>), 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(N, [<] null, 0) // Error.
Text.IndexOf(N, [<] null, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), str(<null>), 0:i8):i8))
*** Error: (16,19) Node: [<] null, Tok: '[<]', Message: Unexpected directive
###
> Text.LastIndexOf(N, [<] null, 0) // Error.
Text.LastIndexOf(N, [<] null, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), str(<null>), 0:i8):i8))
*** Error: (20,23) Node: [<] null, Tok: '[<]', Message: Unexpected directive
###
> Text.IndexOf(N, null, 3)
Text.IndexOf(N, null, 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), str(<null>), 3:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(N, null, 3)
Text.LastIndexOf(N, null, 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), str(<null>), 3:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(N, [~] null, 3)
Text.IndexOf(N, [~] null, 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), [~] str(<null>), 3:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(N, [~] null, 3)
Text.LastIndexOf(N, [~] null, 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), [~] str(<null>), 3:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap(""), null, 0)
Text.IndexOf(Wrap(""), null, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), str(<null>), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap(""), null, 0)
Text.LastIndexOf(Wrap(""), null, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), str(<null>), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap(""), [~] null, 0)
Text.IndexOf(Wrap(""), [~] null, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), [~] str(<null>), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap(""), [~] null, 0)
Text.LastIndexOf(Wrap(""), [~] null, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), [~] str(<null>), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(N, "", 0)
Text.IndexOf(N, "", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), str(), 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(N, "", 0)
Text.LastIndexOf(N, "", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), str(), 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(N, [~] "", 0)
Text.IndexOf(N, [~] "", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), [~] str(), 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(N, [~] "", 0)
Text.LastIndexOf(N, [~] "", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), [~] str(), 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap("hello"), "", 0)
Text.IndexOf(Wrap("hello"), "", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("hello"), "", 0)
Text.LastIndexOf(Wrap("hello"), "", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap("hello"), [~] "", 0)
Text.IndexOf(Wrap("hello"), [~] "", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("hello"), [~] "", 0)
Text.LastIndexOf(Wrap("hello"), [~] "", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap("hello"), "", 3)
Text.IndexOf(Wrap("hello"), "", 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(), 3:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.LastIndexOf(Wrap("hello"), "", 3)
Text.LastIndexOf(Wrap("hello"), "", 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(), 3:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.IndexOf(Wrap("hello"), [~] "", 3)
Text.IndexOf(Wrap("hello"), [~] "", 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(), 3:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.LastIndexOf(Wrap("hello"), [~] "", 3)
Text.LastIndexOf(Wrap("hello"), [~] "", 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(), 3:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.IndexOf(Wrap("hello"), null, 0)
Text.IndexOf(Wrap("hello"), null, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(<null>), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("hello"), null, 0)
Text.LastIndexOf(Wrap("hello"), null, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(<null>), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap("hello"), [~] null, 0)
Text.IndexOf(Wrap("hello"), [~] null, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(<null>), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("hello"), [~] null, 0)
Text.LastIndexOf(Wrap("hello"), [~] null, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(<null>), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap("hello"), null, 3)
Text.IndexOf(Wrap("hello"), null, 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(<null>), 3:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.LastIndexOf(Wrap("hello"), null, 3)
Text.LastIndexOf(Wrap("hello"), null, 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(<null>), 3:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.IndexOf(Wrap("hello"), [~] null, 3)
Text.IndexOf(Wrap("hello"), [~] null, 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(<null>), 3:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.LastIndexOf(Wrap("hello"), [~] null, 3)
Text.LastIndexOf(Wrap("hello"), [~] null, 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(<null>), 3:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.IndexOf(Wrap(""), "hello", 0)
Text.IndexOf(Wrap(""), "hello", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), str(hello), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap(""), "hello", 0)
Text.LastIndexOf(Wrap(""), "hello", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), str(hello), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap(""), [~] "hello", 0)
Text.IndexOf(Wrap(""), [~] "hello", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), [~] str(hello), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap(""), [~] "hello", 0)
Text.LastIndexOf(Wrap(""), [~] "hello", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), [~] str(hello), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(N, "hello", 0)
Text.IndexOf(N, "hello", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), str(hello), 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(N, "hello", 0)
Text.LastIndexOf(N, "hello", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), str(hello), 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.IndexOf(N, [~] "hello", 0)
Text.IndexOf(N, [~] "hello", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), [~] str(hello), 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(N, [~] "hello", 0)
Text.LastIndexOf(N, [~] "hello", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), [~] str(hello), 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), "l", 0)
Text.IndexOf(Wrap("hello"), "l", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 2
###
> Text.LastIndexOf(Wrap("hello"), "l", -1)
Text.LastIndexOf(Wrap("hello"), "l", -1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), -1:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.IndexOf(Wrap("hello"), "L", 0)
Text.IndexOf(Wrap("hello"), "L", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(L), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("hello"), "L", -1)
Text.LastIndexOf(Wrap("hello"), "L", -1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(L), -1:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), [~] "L", 0)
Text.IndexOf(Wrap("hello"), [~] "L", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(L), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 2
###
> Text.LastIndexOf(Wrap("hello"), [~] "L", -1)
Text.LastIndexOf(Wrap("hello"), [~] "L", -1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(L), -1:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.IndexOf(Wrap("hEllo"), [~] "e", 0)
Text.IndexOf(Wrap("hEllo"), [~] "e", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hEllo)):s), [~] str(e), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 1
###
> Text.LastIndexOf(Wrap("hEllo"), [~] "e", 0)
Text.LastIndexOf(Wrap("hEllo"), [~] "e", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hEllo)):s), [~] str(e), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hEllo"), "e", 0)
Text.IndexOf(Wrap("hEllo"), "e", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hEllo)):s), str(e), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("hEllo"), "e", 0)
Text.LastIndexOf(Wrap("hEllo"), "e", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hEllo)):s), str(e), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), "x", 0)
Text.IndexOf(Wrap("hello"), "x", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(x), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("hello"), "x", 0)
Text.LastIndexOf(Wrap("hello"), "x", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(x), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), [~] "x", 0)
Text.IndexOf(Wrap("hello"), [~] "x", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(x), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("hello"), [~] "x", 0)
Text.LastIndexOf(Wrap("hello"), [~] "x", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(x), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("x"), "hello", 0)
Text.IndexOf(Wrap("x"), "hello", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), str(hello), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("x"), "hello", 0)
Text.LastIndexOf(Wrap("x"), "hello", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), str(hello), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("x"), [~] "hello", 0)
Text.IndexOf(Wrap("x"), [~] "hello", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(hello), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("x"), [~] "hello", 0)
Text.LastIndexOf(Wrap("x"), [~] "hello", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(hello), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("x"), "", 3)
Text.IndexOf(Wrap("x"), "", 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), str(), 3:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("x"), "", 3)
Text.LastIndexOf(Wrap("x"), "", 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), str(), 3:i8):i8))
Func sig: () to i8
Type: i8, Value: 1
###
> Text.IndexOf(Wrap("x"), [~] "", 3)
Text.IndexOf(Wrap("x"), [~] "", 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(), 3:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("x"), [~] "", 3)
Text.LastIndexOf(Wrap("x"), [~] "", 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(), 3:i8):i8))
Func sig: () to i8
Type: i8, Value: 1
###
> Text.IndexOf(Wrap("hello"), "l", -2)
Text.IndexOf(Wrap("hello"), "l", -2) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), -2:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.LastIndexOf(Wrap("hello"), "l", -2)
Text.LastIndexOf(Wrap("hello"), "l", -2) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), -2:i8):i8))
Func sig: () to i8
Type: i8, Value: 2
###
> Text.IndexOf(Wrap("hello"), [~] "l", -2)
Text.IndexOf(Wrap("hello"), [~] "l", -2) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(l), -2:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.LastIndexOf(Wrap("hello"), [~] "l", -2)
Text.LastIndexOf(Wrap("hello"), [~] "l", -2) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(l), -2:i8):i8))
Func sig: () to i8
Type: i8, Value: 2
###
> Text.IndexOf(Wrap("hello"), "l", -3)
Text.IndexOf(Wrap("hello"), "l", -3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), -3:i8):i8))
Func sig: () to i8
Type: i8, Value: 2
###
> Text.LastIndexOf(Wrap("hello"), "l", -3)
Text.LastIndexOf(Wrap("hello"), "l", -3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), -3:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), [~] "l", -3)
Text.IndexOf(Wrap("hello"), [~] "l", -3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(l), -3:i8):i8))
Func sig: () to i8
Type: i8, Value: 2
###
> Text.LastIndexOf(Wrap("hello"), [~] "l", -3)
Text.LastIndexOf(Wrap("hello"), [~] "l", -3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(l), -3:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), "l", 6)
Text.IndexOf(Wrap("hello"), "l", 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), 6:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("hello"), "l", 6)
Text.LastIndexOf(Wrap("hello"), "l", 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), 6:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.IndexOf(Wrap("hello"), [~] "l", 6)
Text.IndexOf(Wrap("hello"), [~] "l", 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(l), 6:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("hello"), [~] "l", 6)
Text.LastIndexOf(Wrap("hello"), [~] "l", 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(l), 6:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.IndexOf(Wrap("hello"), "l", -6)
Text.IndexOf(Wrap("hello"), "l", -6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), -6:i8):i8))
Func sig: () to i8
Type: i8, Value: 2
###
> Text.LastIndexOf(Wrap("hello"), "l", -6)
Text.LastIndexOf(Wrap("hello"), "l", -6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), -6:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), [~] "l", -6)
Text.IndexOf(Wrap("hello"), [~] "l", -6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(l), -6:i8):i8))
Func sig: () to i8
Type: i8, Value: 2
###
> Text.LastIndexOf(Wrap("hello"), [~] "l", -6)
Text.LastIndexOf(Wrap("hello"), [~] "l", -6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(l), -6:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap(""), "", -2)
Text.IndexOf(Wrap(""), "", -2) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), str(), -2:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap(""), "", -2)
Text.LastIndexOf(Wrap(""), "", -2) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), str(), -2:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap(""), [~] "", -2)
Text.IndexOf(Wrap(""), [~] "", -2) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), [~] str(), -2:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap(""), [~] "", -2)
Text.LastIndexOf(Wrap(""), [~] "", -2) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), [~] str(), -2:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap(""), "", -20)
Text.IndexOf(Wrap(""), "", -20) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), str(), -20:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap(""), "", -20)
Text.LastIndexOf(Wrap(""), "", -20) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), str(), -20:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap(""), [~] "", -20)
Text.IndexOf(Wrap(""), [~] "", -20) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), [~] str(), -20:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap(""), [~] "", -20)
Text.LastIndexOf(Wrap(""), [~] "", -20) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), [~] str(), -20:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), "", 5)
Text.IndexOf(Wrap("hello"), "", 5) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(), 5:i8):i8))
Func sig: () to i8
Type: i8, Value: 5
###
> Text.LastIndexOf(Wrap("hello"), "", 5)
Text.LastIndexOf(Wrap("hello"), "", 5) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(), 5:i8):i8))
Func sig: () to i8
Type: i8, Value: 5
###
> Text.IndexOf(Wrap("hello"), [~] "", 5)
Text.IndexOf(Wrap("hello"), [~] "", 5) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(), 5:i8):i8))
Func sig: () to i8
Type: i8, Value: 5
###
> Text.LastIndexOf(Wrap("hello"), [~] "", 5)
Text.LastIndexOf(Wrap("hello"), [~] "", 5) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(), 5:i8):i8))
Func sig: () to i8
Type: i8, Value: 5
###
> Text.IndexOf(Wrap("x"), "", -1)
Text.IndexOf(Wrap("x"), "", -1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), str(), -1:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("x"), "", -1)
Text.LastIndexOf(Wrap("x"), "", -1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), str(), -1:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap("x"), [~] "", -1)
Text.IndexOf(Wrap("x"), [~] "", -1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(), -1:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("x"), [~] "", -1)
Text.LastIndexOf(Wrap("x"), [~] "", -1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(), -1:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap("x"), "", 0)
Text.IndexOf(Wrap("x"), "", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), str(), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("x"), "", 0)
Text.LastIndexOf(Wrap("x"), "", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), str(), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap("x"), [~] "", 0)
Text.IndexOf(Wrap("x"), [~] "", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("x"), [~] "", 0)
Text.LastIndexOf(Wrap("x"), [~] "", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap("x"), "", 1)
Text.IndexOf(Wrap("x"), "", 1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), str(), 1:i8):i8))
Func sig: () to i8
Type: i8, Value: 1
###
> Text.LastIndexOf(Wrap("x"), "", 1)
Text.LastIndexOf(Wrap("x"), "", 1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), str(), 1:i8):i8))
Func sig: () to i8
Type: i8, Value: 1
###
> Text.IndexOf(Wrap("x"), [~] "", 1)
Text.IndexOf(Wrap("x"), [~] "", 1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(), 1:i8):i8))
Func sig: () to i8
Type: i8, Value: 1
###
> Text.LastIndexOf(Wrap("x"), [~] "", 1)
Text.LastIndexOf(Wrap("x"), [~] "", 1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(), 1:i8):i8))
Func sig: () to i8
Type: i8, Value: 1
###
> Text.IndexOf(s, s, i4)
Text.IndexOf(s, s, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(s), Global(s), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(s, s, i4)
Text.LastIndexOf(s, s, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(s), Global(s), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.IndexOf(s, [~] s, i4)
Text.IndexOf(s, [~] s, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(s), [~] Global(s), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(s, [~] s, i4)
Text.LastIndexOf(s, [~] s, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(s), [~] Global(s), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.IndexOf(s, s, 0)
Text.IndexOf(s, s, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(s), Global(s), 0:i8):i8))
Func sig: (s:s) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(s, s, 0)
Text.LastIndexOf(s, s, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(s), Global(s), 0:i8):i8))
Func sig: (s:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(s, [~] s, 0)
Text.IndexOf(s, [~] s, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(s), [~] Global(s), 0:i8):i8))
Func sig: (s:s) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(s, [~] s, 0)
Text.LastIndexOf(s, [~] s, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(s), [~] Global(s), 0:i8):i8))
Func sig: (s:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(s, "", i4)
Text.IndexOf(s, "", i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(s), str(), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(s, "", i4)
Text.LastIndexOf(s, "", i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(s), str(), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.IndexOf(s, [~] "", i4)
Text.IndexOf(s, [~] "", i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(s), [~] str(), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(s, [~] "", i4)
Text.LastIndexOf(s, [~] "", i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(s), [~] str(), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.IndexOf("", s, i4)
Text.IndexOf("", s, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(str(), Global(s), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf("", s, i4)
Text.LastIndexOf("", s, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(str(), Global(s), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.IndexOf("", [~] s, i4)
Text.IndexOf("", [~] s, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(str(), [~] Global(s), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf("", [~] s, i4)
Text.LastIndexOf("", [~] s, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(str(), [~] Global(s), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.IndexOf(N, null, 0, 10)
Text.IndexOf(N, null, 0, 10) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), str(<null>), 0:i8, 10:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(N, null, 10, 0)
Text.LastIndexOf(N, null, 10, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), str(<null>), 10:i8, 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.IndexOf(N, [~] null, 0, 10)
Text.IndexOf(N, [~] null, 0, 10) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), [~] str(<null>), 0:i8, 10:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(N, [~] null, 10, 0)
Text.LastIndexOf(N, [~] null, 10, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), [~] str(<null>), 10:i8, 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.IndexOf(N, null, 3, 10)
Text.IndexOf(N, null, 3, 10) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), str(<null>), 3:i8, 10:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(N, null, 10, 3)
Text.LastIndexOf(N, null, 10, 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), str(<null>), 10:i8, 3:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.IndexOf(N, [~] null, 3, 10)
Text.IndexOf(N, [~] null, 3, 10) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), [~] str(<null>), 3:i8, 10:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(N, [~] null, 10, 3)
Text.LastIndexOf(N, [~] null, 10, 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), [~] str(<null>), 10:i8, 3:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap(""), null, 0, 0)
Text.IndexOf(Wrap(""), null, 0, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), str(<null>), 0:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap(""), null, 0, 0)
Text.LastIndexOf(Wrap(""), null, 0, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), str(<null>), 0:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap(""), [~] null, 0, 0)
Text.IndexOf(Wrap(""), [~] null, 0, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), [~] str(<null>), 0:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap(""), [~] null, 0, 0)
Text.LastIndexOf(Wrap(""), [~] null, 0, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), [~] str(<null>), 0:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(N, "", 0, 0)
Text.IndexOf(N, "", 0, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), str(), 0:i8, 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(N, "", 0, 0)
Text.LastIndexOf(N, "", 0, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), str(), 0:i8, 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(N, [~] "", 0, 0)
Text.IndexOf(N, [~] "", 0, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), [~] str(), 0:i8, 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(N, [~] "", 0, 0)
Text.LastIndexOf(N, [~] "", 0, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), [~] str(), 0:i8, 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap("hello"), "", 0, 0)
Text.IndexOf(Wrap("hello"), "", 0, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(), 0:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("hello"), "", 0, 0)
Text.LastIndexOf(Wrap("hello"), "", 0, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(), 0:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap("hello"), [~] "", 0, 0)
Text.IndexOf(Wrap("hello"), [~] "", 0, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(), 0:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("hello"), [~] "", 0, 0)
Text.LastIndexOf(Wrap("hello"), [~] "", 0, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(), 0:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap("hello"), "", 3, 10)
Text.IndexOf(Wrap("hello"), "", 3, 10) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(), 3:i8, 10:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.LastIndexOf(Wrap("hello"), "", 10, 3)
Text.LastIndexOf(Wrap("hello"), "", 10, 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(), 10:i8, 3:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), [~] "", 3, 10)
Text.IndexOf(Wrap("hello"), [~] "", 3, 10) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(), 3:i8, 10:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.LastIndexOf(Wrap("hello"), [~] "", 10, 3)
Text.LastIndexOf(Wrap("hello"), [~] "", 10, 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(), 10:i8, 3:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), null, 0, 6)
Text.IndexOf(Wrap("hello"), null, 0, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(<null>), 0:i8, 6:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("hello"), null, 6, 0)
Text.LastIndexOf(Wrap("hello"), null, 6, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(<null>), 6:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), [~] null, 0, 6)
Text.IndexOf(Wrap("hello"), [~] null, 0, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(<null>), 0:i8, 6:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("hello"), [~] null, 6, 0)
Text.LastIndexOf(Wrap("hello"), [~] null, 6, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(<null>), 6:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), null, 3, 6)
Text.IndexOf(Wrap("hello"), null, 3, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(<null>), 3:i8, 6:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.LastIndexOf(Wrap("hello"), null, 3, 0)
Text.LastIndexOf(Wrap("hello"), null, 3, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(<null>), 3:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), [~] null, 3, 6)
Text.IndexOf(Wrap("hello"), [~] null, 3, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(<null>), 3:i8, 6:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.LastIndexOf(Wrap("hello"), [~] null, 3, 0)
Text.LastIndexOf(Wrap("hello"), [~] null, 3, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(<null>), 3:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap(""), "hello", 0, 6)
Text.IndexOf(Wrap(""), "hello", 0, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), str(hello), 0:i8, 6:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap(""), "hello", 6, 0 )
Text.LastIndexOf(Wrap(""), "hello", 6, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), str(hello), 6:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap(""), [~] "hello", 0, 6)
Text.IndexOf(Wrap(""), [~] "hello", 0, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), [~] str(hello), 0:i8, 6:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap(""), [~] "hello", 6, 0 )
Text.LastIndexOf(Wrap(""), [~] "hello", 6, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), [~] str(hello), 6:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(N, "hello", 0, 6)
Text.IndexOf(N, "hello", 0, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), str(hello), 0:i8, 6:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(N, "hello", 6, 0)
Text.LastIndexOf(N, "hello", 6, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), str(hello), 6:i8, 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.IndexOf(N, [~] "hello", 0, 6)
Text.IndexOf(N, [~] "hello", 0, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(N), [~] str(hello), 0:i8, 6:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(N, [~] "hello", 6, 0)
Text.LastIndexOf(N, [~] "hello", 6, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(N), [~] str(hello), 6:i8, 0:i8):i8))
Func sig: (N:s) to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), "e", 0)
Text.IndexOf(Wrap("hello"), "e", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(e), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 1
###
> Text.LastIndexOf(Wrap("hello"), "e", 0)
Text.LastIndexOf(Wrap("hello"), "e", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(e), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), [~] "e", 0)
Text.IndexOf(Wrap("hello"), [~] "e", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(e), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 1
###
> Text.LastIndexOf(Wrap("hello"), [~] "e", 0)
Text.LastIndexOf(Wrap("hello"), [~] "e", 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(e), 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), "x", 0, 6)
Text.IndexOf(Wrap("hello"), "x", 0, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(x), 0:i8, 6:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("hello"), "x", 6, 0)
Text.LastIndexOf(Wrap("hello"), "x", 6, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(x), 6:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), [~] "x", 0, 6)
Text.IndexOf(Wrap("hello"), [~] "x", 0, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(x), 0:i8, 6:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("hello"), [~] "x", 6, 0)
Text.LastIndexOf(Wrap("hello"), [~] "x", 6, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(x), 6:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("x"), "hello", 0, 6)
Text.IndexOf(Wrap("x"), "hello", 0, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), str(hello), 0:i8, 6:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("x"), "hello", 6, 0)
Text.LastIndexOf(Wrap("x"), "hello", 6, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), str(hello), 6:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("x"), [~] "hello", 0, 6)
Text.IndexOf(Wrap("x"), [~] "hello", 0, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(hello), 0:i8, 6:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("x"), [~] "hello", 6, 0)
Text.LastIndexOf(Wrap("x"), [~] "hello", 6, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(hello), 6:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("x"), "", 3, 6)
Text.IndexOf(Wrap("x"), "", 3, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), str(), 3:i8, 6:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("x"), "", 6, 3)
Text.LastIndexOf(Wrap("x"), "", 6, 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), str(), 6:i8, 3:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("x"), [~] "", 3, 6)
Text.IndexOf(Wrap("x"), [~] "", 3, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(), 3:i8, 6:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("x"), [~] "", 6, 3)
Text.LastIndexOf(Wrap("x"), [~] "", 6, 3) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(), 6:i8, 3:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), "l", -2, 5)
Text.IndexOf(Wrap("hello"), "l", -2, 5) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), -2:i8, 5:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.LastIndexOf(Wrap("hello"), "l", -2, 0)
Text.LastIndexOf(Wrap("hello"), "l", -2, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), -2:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), [~] "l", -2, 5)
Text.IndexOf(Wrap("hello"), [~] "l", -2, 5) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(l), -2:i8, 5:i8):i8))
Func sig: () to i8
Type: i8, Value: 3
###
> Text.LastIndexOf(Wrap("hello"), [~] "l", -2, 0)
Text.LastIndexOf(Wrap("hello"), [~] "l", -2, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(l), -2:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), "l", -3, 5)
Text.IndexOf(Wrap("hello"), "l", -3, 5) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), -3:i8, 5:i8):i8))
Func sig: () to i8
Type: i8, Value: 2
###
> Text.LastIndexOf(Wrap("hello"), "l", -3, 0)
Text.LastIndexOf(Wrap("hello"), "l", -3, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), -3:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), [~] "l", -3, 5)
Text.IndexOf(Wrap("hello"), [~] "l", -3, 5) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(l), -3:i8, 5:i8):i8))
Func sig: () to i8
Type: i8, Value: 2
###
> Text.LastIndexOf(Wrap("hello"), [~] "l", -3, 0)
Text.LastIndexOf(Wrap("hello"), [~] "l", -3, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(l), -3:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), "l", 6, 5)
Text.IndexOf(Wrap("hello"), "l", 6, 5) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), 6:i8, 5:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("hello"), "l", 6, -6)
Text.LastIndexOf(Wrap("hello"), "l", 6, -6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), 6:i8, -6:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), [~] "l", 6, 5)
Text.IndexOf(Wrap("hello"), [~] "l", 6, 5) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(l), 6:i8, 5:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(Wrap("hello"), [~] "l", 6, -6)
Text.LastIndexOf(Wrap("hello"), [~] "l", 6, -6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(l), 6:i8, -6:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), "l", -6, 6)
Text.IndexOf(Wrap("hello"), "l", -6, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), -6:i8, 6:i8):i8))
Func sig: () to i8
Type: i8, Value: 2
###
> Text.LastIndexOf(Wrap("hello"), "l", -6, -6)
Text.LastIndexOf(Wrap("hello"), "l", -6, -6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(l), -6:i8, -6:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), [~] "l", -6, 6)
Text.IndexOf(Wrap("hello"), [~] "l", -6, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(l), -6:i8, 6:i8):i8))
Func sig: () to i8
Type: i8, Value: 2
###
> Text.LastIndexOf(Wrap("hello"), [~] "l", -6, -6)
Text.LastIndexOf(Wrap("hello"), [~] "l", -6, -6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(l), -6:i8, -6:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap(""), "", -2, 0)
Text.IndexOf(Wrap(""), "", -2, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), str(), -2:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap(""), "", -2, 0)
Text.LastIndexOf(Wrap(""), "", -2, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), str(), -2:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap(""), [~] "", -2, 0)
Text.IndexOf(Wrap(""), [~] "", -2, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), [~] str(), -2:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap(""), [~] "", -2, 0)
Text.LastIndexOf(Wrap(""), [~] "", -2, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), [~] str(), -2:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap(""), "", -20, 10)
Text.IndexOf(Wrap(""), "", -20, 10) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), str(), -20:i8, 10:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap(""), "", 20, -20)
Text.LastIndexOf(Wrap(""), "", 20, -20) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), str(), 20:i8, -20:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap(""), [~] "", -20, 10)
Text.IndexOf(Wrap(""), [~] "", -20, 10) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str()):s), [~] str(), -20:i8, 10:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap(""), [~] "", 20, -20)
Text.LastIndexOf(Wrap(""), [~] "", 20, -20) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str()):s), [~] str(), 20:i8, -20:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), "", 5, 6)
Text.IndexOf(Wrap("hello"), "", 5, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), str(), 5:i8, 6:i8):i8))
Func sig: () to i8
Type: i8, Value: 5
###
> Text.LastIndexOf(Wrap("hello"), "", 5, 0)
Text.LastIndexOf(Wrap("hello"), "", 5, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), str(), 5:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("hello"), [~] "", 5, 6)
Text.IndexOf(Wrap("hello"), [~] "", 5, 6) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(), 5:i8, 6:i8):i8))
Func sig: () to i8
Type: i8, Value: 5
###
> Text.LastIndexOf(Wrap("hello"), [~] "", 5, 0)
Text.LastIndexOf(Wrap("hello"), [~] "", 5, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(hello)):s), [~] str(), 5:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("x"), "", -1, 1)
Text.IndexOf(Wrap("x"), "", -1, 1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), str(), -1:i8, 1:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("x"), "", -1, 0)
Text.LastIndexOf(Wrap("x"), "", -1, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), str(), -1:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap("x"), [~] "", -1, 1)
Text.IndexOf(Wrap("x"), [~] "", -1, 1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(), -1:i8, 1:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("x"), [~] "", -1, 0)
Text.LastIndexOf(Wrap("x"), [~] "", -1, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(), -1:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.IndexOf(Wrap("x"), "", 0, 2)
Text.IndexOf(Wrap("x"), "", 0, 2) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), str(), 0:i8, 2:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("x"), "", 2, 0)
Text.LastIndexOf(Wrap("x"), "", 2, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), str(), 2:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("x"), [~] "", 0, 2)
Text.IndexOf(Wrap("x"), [~] "", 0, 2) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(), 0:i8, 2:i8):i8))
Func sig: () to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(Wrap("x"), [~] "", 2, 0)
Text.LastIndexOf(Wrap("x"), [~] "", 2, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(), 2:i8, 0:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("x"), "", 1, 5)
Text.IndexOf(Wrap("x"), "", 1, 5) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), str(), 1:i8, 5:i8):i8))
Func sig: () to i8
Type: i8, Value: 1
###
> Text.LastIndexOf(Wrap("x"), "", 5, 1)
Text.LastIndexOf(Wrap("x"), "", 5, 1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), str(), 5:i8, 1:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(Wrap("x"), [~] "", 1, 5)
Text.IndexOf(Wrap("x"), [~] "", 1, 5) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(), 1:i8, 5:i8):i8))
Func sig: () to i8
Type: i8, Value: 1
###
> Text.LastIndexOf(Wrap("x"), [~] "", 5, 1)
Text.LastIndexOf(Wrap("x"), [~] "", 5, 1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Call(∂.Test.Wrap(str(x)):s), [~] str(), 5:i8, 1:i8):i8))
Func sig: () to i8
Type: i8, Value: -1
###
> Text.IndexOf(s, s, i4, i4)
Text.IndexOf(s, s, i4, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(s), Global(s), Num<i8>(Global(i4)), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(s, s, i4, i4)
Text.LastIndexOf(s, s, i4, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(s), Global(s), Num<i8>(Global(i4)), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.IndexOf(s, [~] s, i4, i4)
Text.IndexOf(s, [~] s, i4, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(s), [~] Global(s), Num<i8>(Global(i4)), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(s, [~] s, i4, i4)
Text.LastIndexOf(s, [~] s, i4, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(s), [~] Global(s), Num<i8>(Global(i4)), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.IndexOf(s, s, 0, -1)
Text.IndexOf(s, s, 0, -1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(s), Global(s), 0:i8, -1:i8):i8))
Func sig: (s:s) to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(s, s, -1, 0)
Text.LastIndexOf(s, s, -1, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(s), Global(s), -1:i8, 0:i8):i8))
Func sig: (s:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(s, [~] s, 0, -1)
Text.IndexOf(s, [~] s, 0, -1) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(s), [~] Global(s), 0:i8, -1:i8):i8))
Func sig: (s:s) to i8
Type: i8, Value: -1
###
> Text.LastIndexOf(s, [~] s, -1, 0)
Text.LastIndexOf(s, [~] s, -1, 0) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(s), [~] Global(s), -1:i8, 0:i8):i8))
Func sig: (s:s) to i8
Type: i8, Value: 0
###
> Text.IndexOf(s, "", i4, i4)
Text.IndexOf(s, "", i4, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(s), str(), Num<i8>(Global(i4)), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(s, "", i4, i4)
Text.LastIndexOf(s, "", i4, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(s), str(), Num<i8>(Global(i4)), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.IndexOf(s, [~] "", i4, i4)
Text.IndexOf(s, [~] "", i4, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(Global(s), [~] str(), Num<i8>(Global(i4)), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf(s, [~] "", i4, i4)
Text.LastIndexOf(s, [~] "", i4, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(Global(s), [~] str(), Num<i8>(Global(i4)), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.IndexOf("", s, i4, i4)
Text.IndexOf("", s, i4, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(str(), Global(s), Num<i8>(Global(i4)), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf("", s, i4, i4)
Text.LastIndexOf("", s, i4, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(str(), Global(s), Num<i8>(Global(i4)), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.IndexOf("", [~] s, i4, i4)
Text.IndexOf("", [~] s, i4, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.IndexOf(str(), [~] Global(s), Num<i8>(Global(i4)), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> Text.LastIndexOf("", [~] s, i4, i4)
Text.LastIndexOf("", [~] s, i4, i4) : i8
BndKind:Call, Type:i8, Bnd:(Call(∂.Text.LastIndexOf(str(), [~] Global(s), Num<i8>(Global(i4)), Num<i8>(Global(i4))):i8))
Func sig: (s:s, i4:i4) to i8
Type: i8, Value: 0
###
> L->ForEach((it, "efficaciousness palaeozoologist"->IndexOf(it)))
L->ForEach((it, "efficaciousness palaeozoologist"->IndexOf(it))) : (s, i8)*
BndKind:Call, Type:(s, i8)*, Bnd:(Call(∂.ForEach([map:1] Global(L), (Scope(1), Call(∂.Text.IndexOf(str(efficaciousness palaeozoologist), Scope(1)):i8)):(s, i8)):(s, i8)*))
Func sig: (L:s*) to (s, i8)*
Sequence: Seq<(str,i8)>
 0) (æ, -1)
 1) (ꝏ, -1)
 2) (ﬆ, -1)
 3) (ﬀ, -1)
 4) (ﬁ, -1)
 5) (ß, -1)
###
> L->ForEach((it, "efficaciousness palaeozoologist"->LastIndexOf(it)))
L->ForEach((it, "efficaciousness palaeozoologist"->LastIndexOf(it))) : (s, i8)*
BndKind:Call, Type:(s, i8)*, Bnd:(Call(∂.ForEach([map:1] Global(L), (Scope(1), Call(∂.Text.LastIndexOf(str(efficaciousness palaeozoologist), Scope(1)):i8)):(s, i8)):(s, i8)*))
Func sig: (L:s*) to (s, i8)*
Sequence: Seq<(str,i8)>
 0) (æ, -1)
 1) (ꝏ, -1)
 2) (ﬆ, -1)
 3) (ﬀ, -1)
 4) (ﬁ, -1)
 5) (ß, -1)
###
> Text.StartsWith(M, L)
Text.StartsWith(M, L) : b*
BndKind:Call, Type:b*, Bnd:(Call(∂.ForEach([map:1] Global(M), [map:2] Global(L), Call(∂.Text.StartsWith(Scope(1), Scope(2)):b)):b*))
Func sig: (M:s*, L:s*) to b*
Sequence: Seq<bool>
 0) false
 1) false
 2) false
 3) false
 4) false
 5) false
###
> Text.StartsWith(P, L)
Text.StartsWith(P, L) : b*
BndKind:Call, Type:b*, Bnd:(Call(∂.ForEach([map:1] Global(P), [map:2] Global(L), Call(∂.Text.StartsWith(Scope(1), Scope(2)):b)):b*))
Func sig: (P:s*, L:s*) to b*
Sequence: Seq<bool>
 0) false
 1) false
 2) false
 3) false
 4) false
 5) false
###
> Text.StartsWith(Text.Upper(M), L)
Text.StartsWith(Text.Upper(M), L) : b*
BndKind:Call, Type:b*, Bnd:(Call(∂.ForEach([map:1] Global(M), [map:2] Global(L), Call(∂.Text.StartsWith(Call(∂.Text.Upper(Scope(1)):s), Scope(2)):b)):b*))
Func sig: (M:s*, L:s*) to b*
Sequence: Seq<bool>
 0) false
 1) false
 2) false
 3) false
 4) false
 5) false
###
> Text.StartsWith(Text.Upper(P), L)
Text.StartsWith(Text.Upper(P), L) : b*
BndKind:Call, Type:b*, Bnd:(Call(∂.ForEach([map:1] Global(P), [map:2] Global(L), Call(∂.Text.StartsWith(Call(∂.Text.Upper(Scope(1)):s), Scope(2)):b)):b*))
Func sig: (P:s*, L:s*) to b*
Sequence: Seq<bool>
 0) false
 1) false
 2) false
 3) false
 4) false
 5) false
###
> Text.StartsWith(Text.Upper(M), [~] L)
Text.StartsWith(Text.Upper(M), [~] L) : b*
BndKind:Call, Type:b*, Bnd:(Call(∂.ForEach([map:1] Global(M), [map:2] Global(L), Call(∂.Text.StartsWith(Call(∂.Text.Upper(Scope(1)):s), [~] Scope(2)):b)):b*))
Func sig: (M:s*, L:s*) to b*
Sequence: Seq<bool>
 0) false
 1) false
 2) false
 3) false
 4) false
 5) false
###
> Text.StartsWith(Text.Upper(P), [~] L)
Text.StartsWith(Text.Upper(P), [~] L) : b*
BndKind:Call, Type:b*, Bnd:(Call(∂.ForEach([map:1] Global(P), [map:2] Global(L), Call(∂.Text.StartsWith(Call(∂.Text.Upper(Scope(1)):s), [~] Scope(2)):b)):b*))
Func sig: (P:s*, L:s*) to b*
Sequence: Seq<bool>
 0) false
 1) false
 2) false
 3) false
 4) false
 5) false
###
> L->ForEach((it, "EFFICACIOUSNESS PALAEOZOOLOGIST"->IndexOf([~] it)))
L->ForEach((it, "EFFICACIOUSNESS PALAEOZOOLOGIST"->IndexOf([~] it))) : (s, i8)*
BndKind:Call, Type:(s, i8)*, Bnd:(Call(∂.ForEach([map:1] Global(L), (Scope(1), Call(∂.Text.IndexOf(str(EFFICACIOUSNESS PALAEOZOOLOGIST), [~] Scope(1)):i8)):(s, i8)):(s, i8)*))
Func sig: (L:s*) to (s, i8)*
Sequence: Seq<(str,i8)>
 0) (æ, -1)
 1) (ꝏ, -1)
 2) (ﬆ, -1)
 3) (ﬀ, -1)
 4) (ﬁ, -1)
 5) (ß, -1)
###
> L->ForEach((it, "EFFICACIOUSNESS PALAEOZOOLOGIST"->LastIndexOf([~] it)))
L->ForEach((it, "EFFICACIOUSNESS PALAEOZOOLOGIST"->LastIndexOf([~] it))) : (s, i8)*
BndKind:Call, Type:(s, i8)*, Bnd:(Call(∂.ForEach([map:1] Global(L), (Scope(1), Call(∂.Text.LastIndexOf(str(EFFICACIOUSNESS PALAEOZOOLOGIST), [~] Scope(1)):i8)):(s, i8)):(s, i8)*))
Func sig: (L:s*) to (s, i8)*
Sequence: Seq<(str,i8)>
 0) (æ, -1)
 1) (ꝏ, -1)
 2) (ﬆ, -1)
 3) (ﬀ, -1)
 4) (ﬁ, -1)
 5) (ß, -1)
###
> L->ForEach((it, "EFFICACIOUSNESS PALAEOZOOLOGIST"->IndexOf([~] it)))
L->ForEach((it, "EFFICACIOUSNESS PALAEOZOOLOGIST"->IndexOf([~] it))) : (s, i8)*
BndKind:Call, Type:(s, i8)*, Bnd:(Call(∂.ForEach([map:1] Global(L), (Scope(1), Call(∂.Text.IndexOf(str(EFFICACIOUSNESS PALAEOZOOLOGIST), [~] Scope(1)):i8)):(s, i8)):(s, i8)*))
Func sig: (L:s*) to (s, i8)*
Sequence: Seq<(str,i8)>
 0) (æ, -1)
 1) (ꝏ, -1)
 2) (ﬆ, -1)
 3) (ﬀ, -1)
 4) (ﬁ, -1)
 5) (ß, -1)
###
> L->ForEach((it, "EFFICACIOUSNESS PALAEOZOOLOGIST"->LastIndexOf([~] it)))
L->ForEach((it, "EFFICACIOUSNESS PALAEOZOOLOGIST"->LastIndexOf([~] it))) : (s, i8)*
BndKind:Call, Type:(s, i8)*, Bnd:(Call(∂.ForEach([map:1] Global(L), (Scope(1), Call(∂.Text.LastIndexOf(str(EFFICACIOUSNESS PALAEOZOOLOGIST), [~] Scope(1)):i8)):(s, i8)):(s, i8)*))
Func sig: (L:s*) to (s, i8)*
Sequence: Seq<(str,i8)>
 0) (æ, -1)
 1) (ꝏ, -1)
 2) (ﬆ, -1)
 3) (ﬀ, -1)
 4) (ﬁ, -1)
 5) (ß, -1)
###
> Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("a", it)))
Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("a", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(abcabc), str(a), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 0)
 1) (-9, 0)
 2) (-8, 0)
 3) (-7, 0)
 4) (-6, 0)
 5) (-5, 3)
 6) (-4, 3)
 7) (-3, 3)
 8) (-2, -1)
 9) (-1, -1)
10) (0, 0)
11) (1, 3)
12) (2, 3)
13) (3, 3)
14) (4, -1)
15) (5, -1)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("a", it)))
Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("a", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(abcabc), str(a), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, 0)
 6) (-4, 0)
 7) (-3, 0)
 8) (-2, 3)
 9) (-1, 3)
10) (0, -1)
11) (1, 0)
12) (2, 0)
13) (3, 0)
14) (4, 3)
15) (5, 3)
16) (6, 3)
17) (7, 3)
18) (8, 3)
19) (9, 3)
###
> Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("b", it)))
Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("b", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(abcabc), str(b), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 1)
 1) (-9, 1)
 2) (-8, 1)
 3) (-7, 1)
 4) (-6, 1)
 5) (-5, 1)
 6) (-4, 4)
 7) (-3, 4)
 8) (-2, 4)
 9) (-1, -1)
10) (0, 1)
11) (1, 1)
12) (2, 4)
13) (3, 4)
14) (4, 4)
15) (5, -1)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("b", it)))
Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("b", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(abcabc), str(b), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, -1)
 6) (-4, 1)
 7) (-3, 1)
 8) (-2, 1)
 9) (-1, 4)
10) (0, -1)
11) (1, -1)
12) (2, 1)
13) (3, 1)
14) (4, 1)
15) (5, 4)
16) (6, 4)
17) (7, 4)
18) (8, 4)
19) (9, 4)
###
> Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("c", it)))
Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("c", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(abcabc), str(c), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 2)
 1) (-9, 2)
 2) (-8, 2)
 3) (-7, 2)
 4) (-6, 2)
 5) (-5, 2)
 6) (-4, 2)
 7) (-3, 5)
 8) (-2, 5)
 9) (-1, 5)
10) (0, 2)
11) (1, 2)
12) (2, 2)
13) (3, 5)
14) (4, 5)
15) (5, 5)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("c", it)))
Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("c", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(abcabc), str(c), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, -1)
 6) (-4, -1)
 7) (-3, 2)
 8) (-2, 2)
 9) (-1, 2)
10) (0, -1)
11) (1, -1)
12) (2, -1)
13) (3, 2)
14) (4, 2)
15) (5, 2)
16) (6, 5)
17) (7, 5)
18) (8, 5)
19) (9, 5)
###
> Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("ca", it)))
Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("ca", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(abcabc), str(ca), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 2)
 1) (-9, 2)
 2) (-8, 2)
 3) (-7, 2)
 4) (-6, 2)
 5) (-5, 2)
 6) (-4, 2)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, 2)
11) (1, 2)
12) (2, 2)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("ca", it)))
Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("ca", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(abcabc), str(ca), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, -1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, 2)
 9) (-1, 2)
10) (0, -1)
11) (1, -1)
12) (2, -1)
13) (3, -1)
14) (4, 2)
15) (5, 2)
16) (6, 2)
17) (7, 2)
18) (8, 2)
19) (9, 2)
###
> Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("bca", it)))
Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("bca", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(abcabc), str(bca), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 1)
 1) (-9, 1)
 2) (-8, 1)
 3) (-7, 1)
 4) (-6, 1)
 5) (-5, 1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, 1)
11) (1, 1)
12) (2, -1)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("bca", it)))
Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("bca", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(abcabc), str(bca), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, -1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, 1)
 9) (-1, 1)
10) (0, -1)
11) (1, -1)
12) (2, -1)
13) (3, -1)
14) (4, 1)
15) (5, 1)
16) (6, 1)
17) (7, 1)
18) (8, 1)
19) (9, 1)
###
> Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("bcab", it)))
Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("bcab", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(abcabc), str(bcab), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 1)
 1) (-9, 1)
 2) (-8, 1)
 3) (-7, 1)
 4) (-6, 1)
 5) (-5, 1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, 1)
11) (1, 1)
12) (2, -1)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("bcab", it)))
Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("bcab", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(abcabc), str(bcab), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, -1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, 1)
10) (0, -1)
11) (1, -1)
12) (2, -1)
13) (3, -1)
14) (4, -1)
15) (5, 1)
16) (6, 1)
17) (7, 1)
18) (8, 1)
19) (9, 1)
###
> Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("cabc", it)))
Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("cabc", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(abcabc), str(cabc), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 2)
 1) (-9, 2)
 2) (-8, 2)
 3) (-7, 2)
 4) (-6, 2)
 5) (-5, 2)
 6) (-4, 2)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, 2)
11) (1, 2)
12) (2, 2)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("cabc", it)))
Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("cabc", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(abcabc), str(cabc), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, -1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, -1)
11) (1, -1)
12) (2, -1)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, 2)
17) (7, 2)
18) (8, 2)
19) (9, 2)
###
> Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("bcabc", it)))
Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("bcabc", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(abcabc), str(bcabc), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 1)
 1) (-9, 1)
 2) (-8, 1)
 3) (-7, 1)
 4) (-6, 1)
 5) (-5, 1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, 1)
11) (1, 1)
12) (2, -1)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("bcabc", it)))
Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("bcabc", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(abcabc), str(bcabc), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, -1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, -1)
11) (1, -1)
12) (2, -1)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, 1)
17) (7, 1)
18) (8, 1)
19) (9, 1)
###
> Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("abcabc", it)))
Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("abcabc", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(abcabc), str(abcabc), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 0)
 1) (-9, 0)
 2) (-8, 0)
 3) (-7, 0)
 4) (-6, 0)
 5) (-5, -1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, 0)
11) (1, -1)
12) (2, -1)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("abcabc", it)))
Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("abcabc", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(abcabc), str(abcabc), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, -1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, -1)
11) (1, -1)
12) (2, -1)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, 0)
17) (7, 0)
18) (8, 0)
19) (9, 0)
###
> Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("", it)))
Range(-10, 10)->ForEach((it, "abcabc"->IndexOf("", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(abcabc), str(), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 0)
 1) (-9, 0)
 2) (-8, 0)
 3) (-7, 0)
 4) (-6, 0)
 5) (-5, 1)
 6) (-4, 2)
 7) (-3, 3)
 8) (-2, 4)
 9) (-1, 5)
10) (0, 0)
11) (1, 1)
12) (2, 2)
13) (3, 3)
14) (4, 4)
15) (5, 5)
16) (6, 6)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("", it)))
Range(-10, 10)->ForEach((it, "abcabc"->LastIndexOf("", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(abcabc), str(), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, 0)
 5) (-5, 1)
 6) (-4, 2)
 7) (-3, 3)
 8) (-2, 4)
 9) (-1, 5)
10) (0, 0)
11) (1, 1)
12) (2, 2)
13) (3, 3)
14) (4, 4)
15) (5, 5)
16) (6, 6)
17) (7, 6)
18) (8, 6)
19) (9, 6)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "a", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "a", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(ABCABC), [~] str(a), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 0)
 1) (-9, 0)
 2) (-8, 0)
 3) (-7, 0)
 4) (-6, 0)
 5) (-5, 3)
 6) (-4, 3)
 7) (-3, 3)
 8) (-2, -1)
 9) (-1, -1)
10) (0, 0)
11) (1, 3)
12) (2, 3)
13) (3, 3)
14) (4, -1)
15) (5, -1)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "a", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "a", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(ABCABC), [~] str(a), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, 0)
 6) (-4, 0)
 7) (-3, 0)
 8) (-2, 3)
 9) (-1, 3)
10) (0, -1)
11) (1, 0)
12) (2, 0)
13) (3, 0)
14) (4, 3)
15) (5, 3)
16) (6, 3)
17) (7, 3)
18) (8, 3)
19) (9, 3)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "b", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "b", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(ABCABC), [~] str(b), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 1)
 1) (-9, 1)
 2) (-8, 1)
 3) (-7, 1)
 4) (-6, 1)
 5) (-5, 1)
 6) (-4, 4)
 7) (-3, 4)
 8) (-2, 4)
 9) (-1, -1)
10) (0, 1)
11) (1, 1)
12) (2, 4)
13) (3, 4)
14) (4, 4)
15) (5, -1)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "b", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "b", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(ABCABC), [~] str(b), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, -1)
 6) (-4, 1)
 7) (-3, 1)
 8) (-2, 1)
 9) (-1, 4)
10) (0, -1)
11) (1, -1)
12) (2, 1)
13) (3, 1)
14) (4, 1)
15) (5, 4)
16) (6, 4)
17) (7, 4)
18) (8, 4)
19) (9, 4)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "c", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "c", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(ABCABC), [~] str(c), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 2)
 1) (-9, 2)
 2) (-8, 2)
 3) (-7, 2)
 4) (-6, 2)
 5) (-5, 2)
 6) (-4, 2)
 7) (-3, 5)
 8) (-2, 5)
 9) (-1, 5)
10) (0, 2)
11) (1, 2)
12) (2, 2)
13) (3, 5)
14) (4, 5)
15) (5, 5)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "c", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "c", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(ABCABC), [~] str(c), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, -1)
 6) (-4, -1)
 7) (-3, 2)
 8) (-2, 2)
 9) (-1, 2)
10) (0, -1)
11) (1, -1)
12) (2, -1)
13) (3, 2)
14) (4, 2)
15) (5, 2)
16) (6, 5)
17) (7, 5)
18) (8, 5)
19) (9, 5)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "ca", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "ca", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(ABCABC), [~] str(ca), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 2)
 1) (-9, 2)
 2) (-8, 2)
 3) (-7, 2)
 4) (-6, 2)
 5) (-5, 2)
 6) (-4, 2)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, 2)
11) (1, 2)
12) (2, 2)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "ca", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "ca", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(ABCABC), [~] str(ca), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, -1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, 2)
 9) (-1, 2)
10) (0, -1)
11) (1, -1)
12) (2, -1)
13) (3, -1)
14) (4, 2)
15) (5, 2)
16) (6, 2)
17) (7, 2)
18) (8, 2)
19) (9, 2)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "bca", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "bca", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(ABCABC), [~] str(bca), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 1)
 1) (-9, 1)
 2) (-8, 1)
 3) (-7, 1)
 4) (-6, 1)
 5) (-5, 1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, 1)
11) (1, 1)
12) (2, -1)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "bca", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "bca", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(ABCABC), [~] str(bca), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, -1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, 1)
 9) (-1, 1)
10) (0, -1)
11) (1, -1)
12) (2, -1)
13) (3, -1)
14) (4, 1)
15) (5, 1)
16) (6, 1)
17) (7, 1)
18) (8, 1)
19) (9, 1)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "bcab", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "bcab", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(ABCABC), [~] str(bcab), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 1)
 1) (-9, 1)
 2) (-8, 1)
 3) (-7, 1)
 4) (-6, 1)
 5) (-5, 1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, 1)
11) (1, 1)
12) (2, -1)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "bcab", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "bcab", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(ABCABC), [~] str(bcab), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, -1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, 1)
10) (0, -1)
11) (1, -1)
12) (2, -1)
13) (3, -1)
14) (4, -1)
15) (5, 1)
16) (6, 1)
17) (7, 1)
18) (8, 1)
19) (9, 1)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "cabc", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "cabc", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(ABCABC), [~] str(cabc), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 2)
 1) (-9, 2)
 2) (-8, 2)
 3) (-7, 2)
 4) (-6, 2)
 5) (-5, 2)
 6) (-4, 2)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, 2)
11) (1, 2)
12) (2, 2)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "cabc", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "cabc", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(ABCABC), [~] str(cabc), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, -1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, -1)
11) (1, -1)
12) (2, -1)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, 2)
17) (7, 2)
18) (8, 2)
19) (9, 2)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "bcabc", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "bcabc", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(ABCABC), [~] str(bcabc), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 1)
 1) (-9, 1)
 2) (-8, 1)
 3) (-7, 1)
 4) (-6, 1)
 5) (-5, 1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, 1)
11) (1, 1)
12) (2, -1)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "bcabc", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "bcabc", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(ABCABC), [~] str(bcabc), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, -1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, -1)
11) (1, -1)
12) (2, -1)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, 1)
17) (7, 1)
18) (8, 1)
19) (9, 1)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "abcabc", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "abcabc", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(ABCABC), [~] str(abcabc), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 0)
 1) (-9, 0)
 2) (-8, 0)
 3) (-7, 0)
 4) (-6, 0)
 5) (-5, -1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, 0)
11) (1, -1)
12) (2, -1)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, -1)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "abcabc", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "abcabc", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(ABCABC), [~] str(abcabc), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, -1)
 5) (-5, -1)
 6) (-4, -1)
 7) (-3, -1)
 8) (-2, -1)
 9) (-1, -1)
10) (0, -1)
11) (1, -1)
12) (2, -1)
13) (3, -1)
14) (4, -1)
15) (5, -1)
16) (6, 0)
17) (7, 0)
18) (8, 0)
19) (9, 0)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->IndexOf([~] "", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.IndexOf(str(ABCABC), [~] str(), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, 0)
 1) (-9, 0)
 2) (-8, 0)
 3) (-7, 0)
 4) (-6, 0)
 5) (-5, 1)
 6) (-4, 2)
 7) (-3, 3)
 8) (-2, 4)
 9) (-1, 5)
10) (0, 0)
11) (1, 1)
12) (2, 2)
13) (3, 3)
14) (4, 4)
15) (5, 5)
16) (6, 6)
17) (7, -1)
18) (8, -1)
19) (9, -1)
###
> Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "", it)))
Range(-10, 10)->ForEach((it, "ABCABC"->LastIndexOf([~] "", it))) : (i8, i8)*
BndKind:Call, Type:(i8, i8)*, Bnd:(Call(∂.ForEach([map:1] Call(∂.Range(-10:i8, 10:i8):i8*), (Scope(1), Call(∂.Text.LastIndexOf(str(ABCABC), [~] str(), Scope(1)):i8)):(i8, i8)):(i8, i8)*))
Func sig: () to (i8, i8)*
Sequence: Seq<(i8,i8)>
 0) (-10, -1)
 1) (-9, -1)
 2) (-8, -1)
 3) (-7, -1)
 4) (-6, 0)
 5) (-5, 1)
 6) (-4, 2)
 7) (-3, 3)
 8) (-2, 4)
 9) (-1, 5)
10) (0, 0)
11) (1, 1)
12) (2, 2)
13) (3, 3)
14) (4, 4)
15) (5, 5)
16) (6, 6)
17) (7, 6)
18) (8, 6)
19) (9, 6)
###
