> Wrap(0r8).IsNaN
Wrap(0).IsNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNaN(Call(∂.Test.Wrap(0:r8):r8)):b))
Func sig: () to b
Type: bool, Value: false
###
> Wrap(0r4).IsNaN
Wrap(0).IsNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNaN(Call(∂.Test.Wrap(0:r4):r4)):b))
Func sig: () to b
Type: bool, Value: false
###
> Wrap(1r8).IsNaN
Wrap(1).IsNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNaN(Call(∂.Test.Wrap(1:r8):r8)):b))
Func sig: () to b
Type: bool, Value: false
###
> Wrap(1r4).IsNaN
Wrap(1).IsNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNaN(Call(∂.Test.Wrap(1:r4):r4)):b))
Func sig: () to b
Type: bool, Value: false
###
> Wrap(1r8/0).IsNaN
Wrap(1 / 0).IsNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNaN(Call(∂.Test.Wrap(∞:r8):r8)):b))
Func sig: () to b
Type: bool, Value: false
###
> CastR4(Wrap(1r/0)).IsNaN
CastR4(Wrap(1 / 0)).IsNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNaN(Call(∂.CastR4(Call(∂.Test.Wrap(∞:r8):r8)):r4)):b))
Func sig: () to b
Type: bool, Value: false
###
> Wrap(0r8/0).IsNaN
Wrap(0 / 0).IsNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNaN(Call(∂.Test.Wrap(NaN:r8):r8)):b))
Func sig: () to b
Type: bool, Value: true 
###
> CastR4(Wrap(0r/0)).IsNaN
CastR4(Wrap(0 / 0)).IsNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNaN(Call(∂.CastR4(Call(∂.Test.Wrap(NaN:r8):r8)):r4)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Wrap(0r8).IsNotNaN
Wrap(0).IsNotNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNotNaN(Call(∂.Test.Wrap(0:r8):r8)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Wrap(0r4).IsNotNaN
Wrap(0).IsNotNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNotNaN(Call(∂.Test.Wrap(0:r4):r4)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Wrap(1r8).IsNotNaN
Wrap(1).IsNotNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNotNaN(Call(∂.Test.Wrap(1:r8):r8)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Wrap(1r4).IsNotNaN
Wrap(1).IsNotNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNotNaN(Call(∂.Test.Wrap(1:r4):r4)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Wrap(1r8/0).IsNotNaN
Wrap(1 / 0).IsNotNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNotNaN(Call(∂.Test.Wrap(∞:r8):r8)):b))
Func sig: () to b
Type: bool, Value: true 
###
> CastR4(Wrap(1r/0)).IsNotNaN
CastR4(Wrap(1 / 0)).IsNotNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNotNaN(Call(∂.CastR4(Call(∂.Test.Wrap(∞:r8):r8)):r4)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Wrap(0r8/0).IsNotNaN
Wrap(0 / 0).IsNotNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNotNaN(Call(∂.Test.Wrap(NaN:r8):r8)):b))
Func sig: () to b
Type: bool, Value: false
###
> CastR4(Wrap(0r/0)).IsNotNaN
CastR4(Wrap(0 / 0)).IsNotNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNotNaN(Call(∂.CastR4(Call(∂.Test.Wrap(NaN:r8):r8)):r4)):b))
Func sig: () to b
Type: bool, Value: false
###
> Wrap(0r8).Bits.Hex
Wrap(0).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Test.Wrap(0:r8):r8)):i8)):s))
Func sig: () to s
Type: str, Value: 0000000000000000
###
> Wrap(0r4).Bits.Hex
Wrap(0).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Test.Wrap(0:r4):r4)):i4)):s))
Func sig: () to s
Type: str, Value: 00000000
###
> Wrap(1r8).Bits.Hex
Wrap(1).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Test.Wrap(1:r8):r8)):i8)):s))
Func sig: () to s
Type: str, Value: 3FF0000000000000
###
> Wrap(1r4).Bits.Hex
Wrap(1).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Test.Wrap(1:r4):r4)):i4)):s))
Func sig: () to s
Type: str, Value: 3F800000
###
> Wrap(3.5r8).Bits.Hex
Wrap(3.5).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Test.Wrap(3.5:r8):r8)):i8)):s))
Func sig: () to s
Type: str, Value: 400C000000000000
###
> Wrap(3.5r4).Bits.Hex
Wrap(3.5).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Test.Wrap(3.5:r4):r4)):i4)):s))
Func sig: () to s
Type: str, Value: 40600000
###
> Wrap(1r8/0).Bits.Hex
Wrap(1 / 0).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Test.Wrap(∞:r8):r8)):i8)):s))
Func sig: () to s
Type: str, Value: 7FF0000000000000
###
> CastR4(Wrap(1r/0)).Bits.Hex
CastR4(Wrap(1 / 0)).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.CastR4(Call(∂.Test.Wrap(∞:r8):r8)):r4)):i4)):s))
Func sig: () to s
Type: str, Value: 7F800000
###
> Wrap(0r8/0).Bits.Hex
Wrap(0 / 0).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Test.Wrap(NaN:r8):r8)):i8)):s))
Func sig: () to s
Type: str, Value: FFF8000000000000
###
> CastR4(Wrap(0r/0)).Bits.Hex
CastR4(Wrap(0 / 0)).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.CastR4(Call(∂.Test.Wrap(NaN:r8):r8)):r4)):i4)):s))
Func sig: () to s
Type: str, Value: FFC00000
###
> Wrap(-0r8).IsNaN
Wrap(-0).IsNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNaN(Call(∂.Test.Wrap(-0:r8):r8)):b))
Func sig: () to b
Type: bool, Value: false
###
> Wrap(-0r4).IsNaN
Wrap(-0).IsNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNaN(Call(∂.Test.Wrap(-0:r4):r4)):b))
Func sig: () to b
Type: bool, Value: false
###
> Wrap(-1r8).IsNaN
Wrap(-1).IsNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNaN(Call(∂.Test.Wrap(-1:r8):r8)):b))
Func sig: () to b
Type: bool, Value: false
###
> Wrap(-1r4).IsNaN
Wrap(-1).IsNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNaN(Call(∂.Test.Wrap(-1:r4):r4)):b))
Func sig: () to b
Type: bool, Value: false
###
> Wrap(-1r8/0).IsNaN
Wrap(-1 / 0).IsNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNaN(Call(∂.Test.Wrap(-∞:r8):r8)):b))
Func sig: () to b
Type: bool, Value: false
###
> CastR4(-Wrap(1r/0)).IsNaN
CastR4(-Wrap(1 / 0)).IsNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNaN(Call(∂.CastR4(Add([-] Call(∂.Test.Wrap(∞:r8):r8))):r4)):b))
Func sig: () to b
Type: bool, Value: false
###
> (-Wrap(0r8/0)).IsNaN
(-Wrap(0 / 0)).IsNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNaN(Add([-] Call(∂.Test.Wrap(NaN:r8):r8))):b))
Func sig: () to b
Type: bool, Value: true 
###
> CastR4(-Wrap(0r/0)).IsNaN
CastR4(-Wrap(0 / 0)).IsNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNaN(Call(∂.CastR4(Add([-] Call(∂.Test.Wrap(NaN:r8):r8))):r4)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Wrap(-0r8).IsNotNaN
Wrap(-0).IsNotNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNotNaN(Call(∂.Test.Wrap(-0:r8):r8)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Wrap(-0r4).IsNotNaN
Wrap(-0).IsNotNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNotNaN(Call(∂.Test.Wrap(-0:r4):r4)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Wrap(-1r8).IsNotNaN
Wrap(-1).IsNotNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNotNaN(Call(∂.Test.Wrap(-1:r8):r8)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Wrap(-1r4).IsNotNaN
Wrap(-1).IsNotNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNotNaN(Call(∂.Test.Wrap(-1:r4):r4)):b))
Func sig: () to b
Type: bool, Value: true 
###
> Wrap(-1r8/0).IsNotNaN
Wrap(-1 / 0).IsNotNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNotNaN(Call(∂.Test.Wrap(-∞:r8):r8)):b))
Func sig: () to b
Type: bool, Value: true 
###
> CastR4(-Wrap(1r/0)).IsNotNaN
CastR4(-Wrap(1 / 0)).IsNotNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNotNaN(Call(∂.CastR4(Add([-] Call(∂.Test.Wrap(∞:r8):r8))):r4)):b))
Func sig: () to b
Type: bool, Value: true 
###
> (-Wrap(0r8/0)).IsNotNaN
(-Wrap(0 / 0)).IsNotNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNotNaN(Add([-] Call(∂.Test.Wrap(NaN:r8):r8))):b))
Func sig: () to b
Type: bool, Value: false
###
> CastR4(Wrap(0r/0)).IsNotNaN
CastR4(Wrap(0 / 0)).IsNotNaN : b
BndKind:Call, Type:b, Bnd:(Call(∂.Float.IsNotNaN(Call(∂.CastR4(Call(∂.Test.Wrap(NaN:r8):r8)):r4)):b))
Func sig: () to b
Type: bool, Value: false
###
> Wrap(-0r8).Bits.Hex
Wrap(-0).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Test.Wrap(-0:r8):r8)):i8)):s))
Func sig: () to s
Type: str, Value: 8000000000000000
###
> Wrap(-0r4).Bits.Hex
Wrap(-0).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Test.Wrap(-0:r4):r4)):i4)):s))
Func sig: () to s
Type: str, Value: 80000000
###
> Wrap(-1r8).Bits.Hex
Wrap(-1).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Test.Wrap(-1:r8):r8)):i8)):s))
Func sig: () to s
Type: str, Value: BFF0000000000000
###
> Wrap(-1r4).Bits.Hex
Wrap(-1).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Test.Wrap(-1:r4):r4)):i4)):s))
Func sig: () to s
Type: str, Value: BF800000
###
> Wrap(-3.5r8).Bits.Hex
Wrap(-3.5).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Test.Wrap(-3.5:r8):r8)):i8)):s))
Func sig: () to s
Type: str, Value: C00C000000000000
###
> Wrap(-3.5r4).Bits.Hex
Wrap(-3.5).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Test.Wrap(-3.5:r4):r4)):i4)):s))
Func sig: () to s
Type: str, Value: C0600000
###
> Wrap(-1r8/0).Bits.Hex
Wrap(-1 / 0).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Test.Wrap(-∞:r8):r8)):i8)):s))
Func sig: () to s
Type: str, Value: FFF0000000000000
###
> CastR4(-Wrap(1r/0)).Bits.Hex
CastR4(-Wrap(1 / 0)).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.CastR4(Add([-] Call(∂.Test.Wrap(∞:r8):r8))):r4)):i4)):s))
Func sig: () to s
Type: str, Value: FF800000
###
> (-Wrap(0r8/0)).Bits.Hex
(-Wrap(0 / 0)).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Add([-] Call(∂.Test.Wrap(NaN:r8):r8))):i8)):s))
Func sig: () to s
Type: str, Value: 7FF8000000000000
###
> CastR4(-Wrap(0r/0)).Bits.Hex
CastR4(-Wrap(0 / 0)).Bits.Hex : s
BndKind:Call, Type:s, Bnd:(Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.CastR4(Add([-] Call(∂.Test.Wrap(NaN:r8):r8))):r4)):i4)):s))
Func sig: () to s
Type: str, Value: 7FC00000
###
> Float.FromBits(Wrap(0))
Float.FromBits(Wrap(0)) : r8
BndKind:Call, Type:r8, Bnd:(Call(∂.Float.FromBits(Call(∂.Test.Wrap(0:i8):i8)):r8))
Func sig: () to r8
Type: r8, Value: 0
###
> Float.FromBits(Wrap(0x3FF shl 52))
Float.FromBits(Wrap(1023 shl 52)) : r8
BndKind:Call, Type:r8, Bnd:(Call(∂.Float.FromBits(Call(∂.Test.Wrap(4607182418800017408:i8):i8)):r8))
Func sig: () to r8
Type: r8, Value: 1
###
> Float.FromBits(Wrap(0x7FF shl 52))
Float.FromBits(Wrap(2047 shl 52)) : r8
BndKind:Call, Type:r8, Bnd:(Call(∂.Float.FromBits(Call(∂.Test.Wrap(9218868437227405312:i8):i8)):r8))
Func sig: () to r8
Type: r8, Value: ∞
###
> Float.FromBits(Wrap(0x7FF shl 52 bor 1))
Float.FromBits(Wrap(2047 shl 52 bor 1)) : r8
BndKind:Call, Type:r8, Bnd:(Call(∂.Float.FromBits(Call(∂.Test.Wrap(9218868437227405313:i8):i8)):r8))
Func sig: () to r8
Type: r8, Value: NaN
###
> Float.FromBits(Wrap(0i4))
Float.FromBits(Wrap(0)) : r4
BndKind:Call, Type:r4, Bnd:(Call(∂.Float.FromBits(Call(∂.Test.Wrap(0:i4):i4)):r4))
Func sig: () to r4
Type: r4, Value: 0
###
> Float.FromBits(Wrap(0x7Fi4 shl 23))
Float.FromBits(Wrap(127 shl 23)) : r4
BndKind:Call, Type:r4, Bnd:(Call(∂.Float.FromBits(Call(∂.Test.Wrap(1065353216:i4):i4)):r4))
Func sig: () to r4
Type: r4, Value: 1
###
> Float.FromBits(Wrap(0xFFi4 shl 23))
Float.FromBits(Wrap(255 shl 23)) : r4
BndKind:Call, Type:r4, Bnd:(Call(∂.Float.FromBits(Call(∂.Test.Wrap(2139095040:i4):i4)):r4))
Func sig: () to r4
Type: r4, Value: ∞
###
> Float.FromBits(Wrap(0xFFi4 shl 23 bor 1i4))
Float.FromBits(Wrap(255 shl 23 bor 1)) : r4
BndKind:Call, Type:r4, Bnd:(Call(∂.Float.FromBits(Call(∂.Test.Wrap(2139095041:i4):i4)):r4))
Func sig: () to r4
Type: r4, Value: NaN
###
> Float.FromBits(Wrap((0) bor (1 shl 63)))
Float.FromBits(Wrap(0 bor 1 shl 63)) : r8
BndKind:Call, Type:r8, Bnd:(Call(∂.Float.FromBits(Call(∂.Test.Wrap(-9223372036854775808:i8):i8)):r8))
Func sig: () to r8
Type: r8, Value: -0
###
> Float.FromBits(Wrap((0x3FF shl 52) bor (1 shl 63)))
Float.FromBits(Wrap(1023 shl 52 bor 1 shl 63)) : r8
BndKind:Call, Type:r8, Bnd:(Call(∂.Float.FromBits(Call(∂.Test.Wrap(-4616189618054758400:i8):i8)):r8))
Func sig: () to r8
Type: r8, Value: -1
###
> Float.FromBits(Wrap((0x7FF shl 52) bor (1 shl 63)))
Float.FromBits(Wrap(2047 shl 52 bor 1 shl 63)) : r8
BndKind:Call, Type:r8, Bnd:(Call(∂.Float.FromBits(Call(∂.Test.Wrap(-4503599627370496:i8):i8)):r8))
Func sig: () to r8
Type: r8, Value: -∞
###
> Float.FromBits(Wrap((0x7FF shl 52 bor 1) bor (1 shl 63)))
Float.FromBits(Wrap(2047 shl 52 bor 1 bor 1 shl 63)) : r8
BndKind:Call, Type:r8, Bnd:(Call(∂.Float.FromBits(Call(∂.Test.Wrap(-4503599627370495:i8):i8)):r8))
Func sig: () to r8
Type: r8, Value: NaN
###
> Float.FromBits(Wrap((0i4) bor (1i4 shl 31)))
Float.FromBits(Wrap(0 bor 1 shl 31)) : r4
BndKind:Call, Type:r4, Bnd:(Call(∂.Float.FromBits(Call(∂.Test.Wrap(-2147483648:i4):i4)):r4))
Func sig: () to r4
Type: r4, Value: -0
###
> Float.FromBits(Wrap((0x7Fi4 shl 23) bor (1i4 shl 31)))
Float.FromBits(Wrap(127 shl 23 bor 1 shl 31)) : r4
BndKind:Call, Type:r4, Bnd:(Call(∂.Float.FromBits(Call(∂.Test.Wrap(-1082130432:i4):i4)):r4))
Func sig: () to r4
Type: r4, Value: -1
###
> Float.FromBits(Wrap((0xFFi4 shl 23) bor (1i4 shl 31)))
Float.FromBits(Wrap(255 shl 23 bor 1 shl 31)) : r4
BndKind:Call, Type:r4, Bnd:(Call(∂.Float.FromBits(Call(∂.Test.Wrap(-8388608:i4):i4)):r4))
Func sig: () to r4
Type: r4, Value: -∞
###
> Float.FromBits(Wrap((0xFFi4 shl 23 bor 1i4) bor (1i4 shl 31)))
Float.FromBits(Wrap(255 shl 23 bor 1 bor 1 shl 31)) : r4
BndKind:Call, Type:r4, Bnd:(Call(∂.Float.FromBits(Call(∂.Test.Wrap(-8388607:i4):i4)):r4))
Func sig: () to r4
Type: r4, Value: NaN
###
