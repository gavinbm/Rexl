> Chain(null)
Chain(null) : v*
BndKind:Null, Type:v*, Bnd:(null:v*)
Func sig: () to v*
Type: <null>, Value: <null>
###
> Chain([])
Chain([]) : v*
BndKind:Null, Type:v*, Bnd:(null:v*)
Func sig: () to v*
Type: <null>, Value: <null>
###
> Chain([], [])
Chain([], []) : v*
BndKind:Null, Type:v*, Bnd:(null:v*)
Func sig: () to v*
Type: <null>, Value: <null>
###
> Chain(null, [null, 2, 3])
Chain(null, [null, 2, 3]) : i8?*
BndKind:Sequence, Type:i8?*, Bnd:([null:i8?, Opt<i8?>(2:i8), Opt<i8?>(3:i8)]:i8?*)
Func sig: () to i8?*
Sequence: Seq<Opt<i8>>
 0) <null>
 1) 2
 2) 3
###
> Chain([null, 2, 3], null)
Chain([null, 2, 3], null) : i8?*
BndKind:Sequence, Type:i8?*, Bnd:([null:i8?, Opt<i8?>(2:i8), Opt<i8?>(3:i8)]:i8?*)
Func sig: () to i8?*
Sequence: Seq<Opt<i8>>
 0) <null>
 1) 2
 2) 3
###
> Chain([], [], [])
Chain([], [], []) : v*
BndKind:Null, Type:v*, Bnd:(null:v*)
Func sig: () to v*
Type: <null>, Value: <null>
###
> Chain([1, 2, 3], null, null)
Chain([1, 2, 3], null, null) : i8*
BndKind:Sequence, Type:i8*, Bnd:([1:i8, 2:i8, 3:i8]:i8*)
Func sig: () to i8*
Sequence: Seq<i8>
 0) 1
 1) 2
 2) 3
###
> Chain([], [], [], [])
Chain([], [], [], []) : v*
BndKind:Null, Type:v*, Bnd:(null:v*)
Func sig: () to v*
Type: <null>, Value: <null>
###
> Chain([1, 2, 3], null, [1, 2, 3], null)
Chain([1, 2, 3], null, [1, 2, 3], null) : i8*
BndKind:VariadicOp, Type:i8*, Bnd:(SeqConcat([1:i8, 2:i8, 3:i8]:i8*, [1:i8, 2:i8, 3:i8]:i8*))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 1
 1) 2
 2) 3
 3) 1
 4) 2
 5) 3
###
> Chain(Range(1), Range(2), Range(3), Range(4), Range(5))
Chain(Range(1), Range(2), Range(3), Range(4), Range(5)) : i8*
BndKind:VariadicOp, Type:i8*, Bnd:(SeqConcat(Call(∂.Range(1:i8):i8*), Call(∂.Range(2:i8):i8*), Call(∂.Range(3:i8):i8*), Call(∂.Range(4:i8):i8*), Call(∂.Range(5:i8):i8*)))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 0
 1) 0
 2) 1
 3) 0
 4) 1
 5) 2
 6) 0
 7) 1
 8) 2
 9) 3
10) 0
11) 1
12) 2
13) 3
14) 4
###
> Chain(Range(1), Range(2), Range(3), Range(4), Range(5), Range(6))
Chain(Range(1), Range(2), Range(3), Range(4), Range(5), Range(6)) : i8*
BndKind:VariadicOp, Type:i8*, Bnd:(SeqConcat(Call(∂.Range(1:i8):i8*), Call(∂.Range(2:i8):i8*), Call(∂.Range(3:i8):i8*), Call(∂.Range(4:i8):i8*), Call(∂.Range(5:i8):i8*), Call(∂.Range(6:i8):i8*)))
Func sig: () to i8*
Sequence: Seq<i8>
 0) 0
 1) 0
 2) 1
 3) 0
 4) 1
 5) 2
 6) 0
 7) 1
 8) 2
 9) 3
10) 0
11) 1
12) 2
13) 3
14) 4
15) 0
16) 1
17) 2
18) 3
19) 4
20) 5
###
> ChainMap(Range(1, 10)->Map(Range(2)->{ a: it$2, b: it$1, N: it$0 }))
ChainMap(Range(1, 10)->Map(Range(2)->{ a : it$2, b : it$1, N : it })) : {N:i8, a:i8, b:i8}*
BndKind:Call, Type:{N:i8, a:i8, b:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap(Call(∂.ForEach([map:2] Call(∂.Range(1:i8, 10:i8):i8*), Call(∂.ForEach([map:3] Scope(1), {N:Scope(3), a:Scope(2), b:Scope(3)})))))))))
Func sig: (<ctx>:x) to {N:i8, a:i8, b:i8}*
Sequence: Seq<{i8,i8,i8}>
 0) { N: 0, a: 1, b: 0 }
 1) { N: 1, a: 1, b: 1 }
 2) { N: 0, a: 2, b: 0 }
 3) { N: 1, a: 2, b: 1 }
 4) { N: 0, a: 3, b: 0 }
 5) { N: 1, a: 3, b: 1 }
 6) { N: 0, a: 4, b: 0 }
 7) { N: 1, a: 4, b: 1 }
 8) { N: 0, a: 5, b: 0 }
 9) { N: 1, a: 5, b: 1 }
10) { N: 0, a: 6, b: 0 }
11) { N: 1, a: 6, b: 1 }
12) { N: 0, a: 7, b: 0 }
13) { N: 1, a: 7, b: 1 }
14) { N: 0, a: 8, b: 0 }
15) { N: 1, a: 8, b: 1 }
16) { N: 0, a: 9, b: 0 }
17) { N: 1, a: 9, b: 1 }
*** Ctx ping count: 10
    [0](10): ChainMap(ForEach(*1: Range(1, 10), ForEach(*3: !2x, {N:*3, a:*1, b:*3})))
###
> ChainMap(s0: Range(1, 20), Range(2)->{ s0, N:it })
ChainMap(s0 : Range(1, 20), Range(2)->{ s0, N : it }) : {N:i8, s0:i8}*
BndKind:Call, Type:{N:i8, s0:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), Call(∂.ForEach([map:3] Scope(1), {N:Scope(3), s0:Scope(2)})))))))
Func sig: (<ctx>:x) to {N:i8, s0:i8}*
Sequence: Seq<{i8,i8}>
 0) { N: 0, s0: 1 }
 1) { N: 1, s0: 1 }
 2) { N: 0, s0: 2 }
 3) { N: 1, s0: 2 }
 4) { N: 0, s0: 3 }
 5) { N: 1, s0: 3 }
 6) { N: 0, s0: 4 }
 7) { N: 1, s0: 4 }
 8) { N: 0, s0: 5 }
 9) { N: 1, s0: 5 }
10) { N: 0, s0: 6 }
11) { N: 1, s0: 6 }
12) { N: 0, s0: 7 }
13) { N: 1, s0: 7 }
14) { N: 0, s0: 8 }
15) { N: 1, s0: 8 }
16) { N: 0, s0: 9 }
17) { N: 1, s0: 9 }
18) { N: 0, s0: 10 }
19) { N: 1, s0: 10 }
20) { N: 0, s0: 11 }
21) { N: 1, s0: 11 }
22) { N: 0, s0: 12 }
23) { N: 1, s0: 12 }
24) { N: 0, s0: 13 }
25) { N: 1, s0: 13 }
26) { N: 0, s0: 14 }
27) { N: 1, s0: 14 }
28) { N: 0, s0: 15 }
29) { N: 1, s0: 15 }
30) { N: 0, s0: 16 }
31) { N: 1, s0: 16 }
32) { N: 0, s0: 17 }
33) { N: 1, s0: 17 }
34) { N: 0, s0: 18 }
35) { N: 1, s0: 18 }
36) { N: 0, s0: 19 }
37) { N: 1, s0: 19 }
*** Ctx ping count: 20
    [0](20): ChainMap(*1: Range(1, 20), ForEach(*3: !2x, {N:*3, s0:*1}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), Range(2)->{ s0, s1, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), Range(2)->{ s0, s1, N : it }) : {N:i8, s0:i8, s1:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), Call(∂.ForEach([map:4] Scope(1), {N:Scope(4), s0:Scope(2), s1:Scope(3)})))))))
Func sig: (<ctx>:x) to {N:i8, s0:i8, s1:i8}*
Sequence: Seq<{i8,i8,i8}>
 0) { N: 0, s0: 1, s1: 2 }
 1) { N: 1, s0: 1, s1: 2 }
 2) { N: 0, s0: 2, s1: 3 }
 3) { N: 1, s0: 2, s1: 3 }
 4) { N: 0, s0: 3, s1: 4 }
 5) { N: 1, s0: 3, s1: 4 }
 6) { N: 0, s0: 4, s1: 5 }
 7) { N: 1, s0: 4, s1: 5 }
 8) { N: 0, s0: 5, s1: 6 }
 9) { N: 1, s0: 5, s1: 6 }
10) { N: 0, s0: 6, s1: 7 }
11) { N: 1, s0: 6, s1: 7 }
12) { N: 0, s0: 7, s1: 8 }
13) { N: 1, s0: 7, s1: 8 }
14) { N: 0, s0: 8, s1: 9 }
15) { N: 1, s0: 8, s1: 9 }
16) { N: 0, s0: 9, s1: 10 }
17) { N: 1, s0: 9, s1: 10 }
18) { N: 0, s0: 10, s1: 11 }
19) { N: 1, s0: 10, s1: 11 }
20) { N: 0, s0: 11, s1: 12 }
21) { N: 1, s0: 11, s1: 12 }
22) { N: 0, s0: 12, s1: 13 }
23) { N: 1, s0: 12, s1: 13 }
24) { N: 0, s0: 13, s1: 14 }
25) { N: 1, s0: 13, s1: 14 }
26) { N: 0, s0: 14, s1: 15 }
27) { N: 1, s0: 14, s1: 15 }
28) { N: 0, s0: 15, s1: 16 }
29) { N: 1, s0: 15, s1: 16 }
30) { N: 0, s0: 16, s1: 17 }
31) { N: 1, s0: 16, s1: 17 }
32) { N: 0, s0: 17, s1: 18 }
33) { N: 1, s0: 17, s1: 18 }
34) { N: 0, s0: 18, s1: 19 }
35) { N: 1, s0: 18, s1: 19 }
*** Ctx ping count: 38
    [0](38): ChainMap(*1: Range(1, 20), *2: Range(2, 20), ForEach(*4: !3x, {N:*4, s0:*1, s1:*2}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), Range(2)->{ s0, s1, s2, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), Range(2)->{ s0, s1, s2, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), Call(∂.ForEach([map:5] Scope(1), {N:Scope(5), s0:Scope(2), s1:Scope(3), s2:Scope(4)})))))))
Func sig: (<ctx>:x) to {N:i8, s0:i8, s1:i8, s2:i8}*
Sequence: Seq<{i8,i8,i8,i8}>
 0) { N: 0, s0: 1, s1: 2, s2: 3 }
 1) { N: 1, s0: 1, s1: 2, s2: 3 }
 2) { N: 0, s0: 2, s1: 3, s2: 4 }
 3) { N: 1, s0: 2, s1: 3, s2: 4 }
 4) { N: 0, s0: 3, s1: 4, s2: 5 }
 5) { N: 1, s0: 3, s1: 4, s2: 5 }
 6) { N: 0, s0: 4, s1: 5, s2: 6 }
 7) { N: 1, s0: 4, s1: 5, s2: 6 }
 8) { N: 0, s0: 5, s1: 6, s2: 7 }
 9) { N: 1, s0: 5, s1: 6, s2: 7 }
10) { N: 0, s0: 6, s1: 7, s2: 8 }
11) { N: 1, s0: 6, s1: 7, s2: 8 }
12) { N: 0, s0: 7, s1: 8, s2: 9 }
13) { N: 1, s0: 7, s1: 8, s2: 9 }
14) { N: 0, s0: 8, s1: 9, s2: 10 }
15) { N: 1, s0: 8, s1: 9, s2: 10 }
16) { N: 0, s0: 9, s1: 10, s2: 11 }
17) { N: 1, s0: 9, s1: 10, s2: 11 }
18) { N: 0, s0: 10, s1: 11, s2: 12 }
19) { N: 1, s0: 10, s1: 11, s2: 12 }
20) { N: 0, s0: 11, s1: 12, s2: 13 }
21) { N: 1, s0: 11, s1: 12, s2: 13 }
22) { N: 0, s0: 12, s1: 13, s2: 14 }
23) { N: 1, s0: 12, s1: 13, s2: 14 }
24) { N: 0, s0: 13, s1: 14, s2: 15 }
25) { N: 1, s0: 13, s1: 14, s2: 15 }
26) { N: 0, s0: 14, s1: 15, s2: 16 }
27) { N: 1, s0: 14, s1: 15, s2: 16 }
28) { N: 0, s0: 15, s1: 16, s2: 17 }
29) { N: 1, s0: 15, s1: 16, s2: 17 }
30) { N: 0, s0: 16, s1: 17, s2: 18 }
31) { N: 1, s0: 16, s1: 17, s2: 18 }
32) { N: 0, s0: 17, s1: 18, s2: 19 }
33) { N: 1, s0: 17, s1: 18, s2: 19 }
*** Ctx ping count: 54
    [0](54): ChainMap(*1: Range(1, 20), *2: Range(2, 20), *3: Range(3, 20), ForEach(*5: !4x, {N:*5, s0:*1, s1:*2, s2:*3}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), Range(2)->{ s0, s1, s2, s3, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), Range(2)->{ s0, s1, s2, s3, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), Call(∂.ForEach([map:6] Scope(1), {N:Scope(6), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5)})))))))
Func sig: (<ctx>:x) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8}>
 0) { N: 0, s0: 1, s1: 2, s2: 3, s3: 4 }
 1) { N: 1, s0: 1, s1: 2, s2: 3, s3: 4 }
 2) { N: 0, s0: 2, s1: 3, s2: 4, s3: 5 }
 3) { N: 1, s0: 2, s1: 3, s2: 4, s3: 5 }
 4) { N: 0, s0: 3, s1: 4, s2: 5, s3: 6 }
 5) { N: 1, s0: 3, s1: 4, s2: 5, s3: 6 }
 6) { N: 0, s0: 4, s1: 5, s2: 6, s3: 7 }
 7) { N: 1, s0: 4, s1: 5, s2: 6, s3: 7 }
 8) { N: 0, s0: 5, s1: 6, s2: 7, s3: 8 }
 9) { N: 1, s0: 5, s1: 6, s2: 7, s3: 8 }
10) { N: 0, s0: 6, s1: 7, s2: 8, s3: 9 }
11) { N: 1, s0: 6, s1: 7, s2: 8, s3: 9 }
12) { N: 0, s0: 7, s1: 8, s2: 9, s3: 10 }
13) { N: 1, s0: 7, s1: 8, s2: 9, s3: 10 }
14) { N: 0, s0: 8, s1: 9, s2: 10, s3: 11 }
15) { N: 1, s0: 8, s1: 9, s2: 10, s3: 11 }
16) { N: 0, s0: 9, s1: 10, s2: 11, s3: 12 }
17) { N: 1, s0: 9, s1: 10, s2: 11, s3: 12 }
18) { N: 0, s0: 10, s1: 11, s2: 12, s3: 13 }
19) { N: 1, s0: 10, s1: 11, s2: 12, s3: 13 }
20) { N: 0, s0: 11, s1: 12, s2: 13, s3: 14 }
21) { N: 1, s0: 11, s1: 12, s2: 13, s3: 14 }
22) { N: 0, s0: 12, s1: 13, s2: 14, s3: 15 }
23) { N: 1, s0: 12, s1: 13, s2: 14, s3: 15 }
24) { N: 0, s0: 13, s1: 14, s2: 15, s3: 16 }
25) { N: 1, s0: 13, s1: 14, s2: 15, s3: 16 }
26) { N: 0, s0: 14, s1: 15, s2: 16, s3: 17 }
27) { N: 1, s0: 14, s1: 15, s2: 16, s3: 17 }
28) { N: 0, s0: 15, s1: 16, s2: 17, s3: 18 }
29) { N: 1, s0: 15, s1: 16, s2: 17, s3: 18 }
30) { N: 0, s0: 16, s1: 17, s2: 18, s3: 19 }
31) { N: 1, s0: 16, s1: 17, s2: 18, s3: 19 }
*** Ctx ping count: 68
    [0](68): ChainMap(*1: Range(1, 20), *2: Range(2, 20), *3: Range(3, 20), *4: Range(4, 20), ForEach(*6: !5x, {N:*6, s0:*1, s1:*2, s2:*3, s3:*4}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), Range(2)->{ s0, s1, s2, s3, s4, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), Range(2)->{ s0, s1, s2, s3, s4, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), Call(∂.ForEach([map:7] Scope(1), {N:Scope(7), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6)})))))))
Func sig: (<ctx>:x) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8}>
 0) { N: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5 }
 1) { N: 1, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5 }
 2) { N: 0, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6 }
 3) { N: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6 }
 4) { N: 0, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7 }
 5) { N: 1, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7 }
 6) { N: 0, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8 }
 7) { N: 1, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8 }
 8) { N: 0, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9 }
 9) { N: 1, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9 }
10) { N: 0, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10 }
11) { N: 1, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10 }
12) { N: 0, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11 }
13) { N: 1, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11 }
14) { N: 0, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12 }
15) { N: 1, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12 }
16) { N: 0, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13 }
17) { N: 1, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13 }
18) { N: 0, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14 }
19) { N: 1, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14 }
20) { N: 0, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15 }
21) { N: 1, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15 }
22) { N: 0, s0: 12, s1: 13, s2: 14, s3: 15, s4: 16 }
23) { N: 1, s0: 12, s1: 13, s2: 14, s3: 15, s4: 16 }
24) { N: 0, s0: 13, s1: 14, s2: 15, s3: 16, s4: 17 }
25) { N: 1, s0: 13, s1: 14, s2: 15, s3: 16, s4: 17 }
26) { N: 0, s0: 14, s1: 15, s2: 16, s3: 17, s4: 18 }
27) { N: 1, s0: 14, s1: 15, s2: 16, s3: 17, s4: 18 }
28) { N: 0, s0: 15, s1: 16, s2: 17, s3: 18, s4: 19 }
29) { N: 1, s0: 15, s1: 16, s2: 17, s3: 18, s4: 19 }
*** Ctx ping count: 80
    [0](80): ChainMap(*1: Range(1, 20), *2: Range(2, 20), *3: Range(3, 20), *4: Range(4, 20), *5: Range(5, 20), ForEach(*7: !6x, {N:*7, s0:*1, s1:*2, s2:*3, s3:*4, s4:*5}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), Call(∂.ForEach([map:8] Scope(1), {N:Scope(8), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7)})))))))
Func sig: (<ctx>:x) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6 }
 1) { N: 1, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6 }
 2) { N: 0, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7 }
 3) { N: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7 }
 4) { N: 0, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8 }
 5) { N: 1, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8 }
 6) { N: 0, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9 }
 7) { N: 1, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9 }
 8) { N: 0, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10 }
 9) { N: 1, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10 }
10) { N: 0, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11 }
11) { N: 1, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11 }
12) { N: 0, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12 }
13) { N: 1, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12 }
14) { N: 0, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13 }
15) { N: 1, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13 }
16) { N: 0, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14 }
17) { N: 1, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14 }
18) { N: 0, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15 }
19) { N: 1, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15 }
20) { N: 0, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15, s5: 16 }
21) { N: 1, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15, s5: 16 }
22) { N: 0, s0: 12, s1: 13, s2: 14, s3: 15, s4: 16, s5: 17 }
23) { N: 1, s0: 12, s1: 13, s2: 14, s3: 15, s4: 16, s5: 17 }
24) { N: 0, s0: 13, s1: 14, s2: 15, s3: 16, s4: 17, s5: 18 }
25) { N: 1, s0: 13, s1: 14, s2: 15, s3: 16, s4: 17, s5: 18 }
26) { N: 0, s0: 14, s1: 15, s2: 16, s3: 17, s4: 18, s5: 19 }
27) { N: 1, s0: 14, s1: 15, s2: 16, s3: 17, s4: 18, s5: 19 }
*** Ctx ping count: 90
    [0](90): ChainMap(*1: Range(1, 20), *2: Range(2, 20), *3: Range(3, 20), *4: Range(4, 20), *5: Range(5, 20), *6: Range(6, 20), ForEach(*8: !7x, {N:*8, s0:*1, s1:*2, s2:*3, s3:*4, s4:*5, s5:*6}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), Call(∂.ForEach([map:9] Scope(1), {N:Scope(9), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8)})))))))
Func sig: (<ctx>:x) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7 }
 1) { N: 1, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7 }
 2) { N: 0, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8 }
 3) { N: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8 }
 4) { N: 0, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9 }
 5) { N: 1, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9 }
 6) { N: 0, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10 }
 7) { N: 1, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10 }
 8) { N: 0, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11 }
 9) { N: 1, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11 }
10) { N: 0, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12 }
11) { N: 1, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12 }
12) { N: 0, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13 }
13) { N: 1, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13 }
14) { N: 0, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14 }
15) { N: 1, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14 }
16) { N: 0, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15 }
17) { N: 1, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15 }
18) { N: 0, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15, s6: 16 }
19) { N: 1, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15, s6: 16 }
20) { N: 0, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15, s5: 16, s6: 17 }
21) { N: 1, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15, s5: 16, s6: 17 }
22) { N: 0, s0: 12, s1: 13, s2: 14, s3: 15, s4: 16, s5: 17, s6: 18 }
23) { N: 1, s0: 12, s1: 13, s2: 14, s3: 15, s4: 16, s5: 17, s6: 18 }
24) { N: 0, s0: 13, s1: 14, s2: 15, s3: 16, s4: 17, s5: 18, s6: 19 }
25) { N: 1, s0: 13, s1: 14, s2: 15, s3: 16, s4: 17, s5: 18, s6: 19 }
*** Ctx ping count: 98
    [0](98): ChainMap(*1: Range(1, 20), *2: Range(2, 20), *3: Range(3, 20), *4: Range(4, 20), *5: Range(5, 20), *6: Range(6, 20), *7: Range(7, 20), ForEach(*9: !8x, {N:*9, s0:*1, s1:*2, s2:*3, s3:*4, s4:*5, s5:*6, s6:*7}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), Call(∂.ForEach([map:10] Scope(1), {N:Scope(10), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9)})))))))
Func sig: (<ctx>:x) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8 }
 1) { N: 1, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8 }
 2) { N: 0, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9 }
 3) { N: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9 }
 4) { N: 0, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10 }
 5) { N: 1, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10 }
 6) { N: 0, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11 }
 7) { N: 1, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11 }
 8) { N: 0, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12 }
 9) { N: 1, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12 }
10) { N: 0, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13 }
11) { N: 1, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13 }
12) { N: 0, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14 }
13) { N: 1, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14 }
14) { N: 0, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15 }
15) { N: 1, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15 }
16) { N: 0, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15, s7: 16 }
17) { N: 1, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15, s7: 16 }
18) { N: 0, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15, s6: 16, s7: 17 }
19) { N: 1, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15, s6: 16, s7: 17 }
20) { N: 0, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15, s5: 16, s6: 17, s7: 18 }
21) { N: 1, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15, s5: 16, s6: 17, s7: 18 }
22) { N: 0, s0: 12, s1: 13, s2: 14, s3: 15, s4: 16, s5: 17, s6: 18, s7: 19 }
23) { N: 1, s0: 12, s1: 13, s2: 14, s3: 15, s4: 16, s5: 17, s6: 18, s7: 19 }
*** Ctx ping count: 104
    [0](104): ChainMap(*1: Range(1, 20), *2: Range(2, 20), *3: Range(3, 20), *4: Range(4, 20), *5: Range(5, 20), *6: Range(6, 20), *7: Range(7, 20), *8: Range(8, 20), ForEach(*10: !9x, {N:*10, s0:*1, s1:*2, s2:*3, s3:*4, s4:*5, s5:*6, s6:*7, s7:*8}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), Call(∂.ForEach([map:11] Scope(1), {N:Scope(11), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10)})))))))
Func sig: (<ctx>:x) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9 }
 1) { N: 1, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9 }
 2) { N: 0, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10 }
 3) { N: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10 }
 4) { N: 0, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11 }
 5) { N: 1, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11 }
 6) { N: 0, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12 }
 7) { N: 1, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12 }
 8) { N: 0, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13 }
 9) { N: 1, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13 }
10) { N: 0, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14 }
11) { N: 1, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14 }
12) { N: 0, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15 }
13) { N: 1, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15 }
14) { N: 0, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15, s8: 16 }
15) { N: 1, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15, s8: 16 }
16) { N: 0, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15, s7: 16, s8: 17 }
17) { N: 1, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15, s7: 16, s8: 17 }
18) { N: 0, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15, s6: 16, s7: 17, s8: 18 }
19) { N: 1, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15, s6: 16, s7: 17, s8: 18 }
20) { N: 0, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15, s5: 16, s6: 17, s7: 18, s8: 19 }
21) { N: 1, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15, s5: 16, s6: 17, s7: 18, s8: 19 }
*** Ctx ping count: 108
    [0](108): ChainMap(*1: Range(1, 20), *2: Range(2, 20), *3: Range(3, 20), *4: Range(4, 20), *5: Range(5, 20), *6: Range(6, 20), *7: Range(7, 20), *8: Range(8, 20), *9: Range(9, 20), ForEach(*11: !10x, {N:*11, s0:*1, s1:*2, s2:*3, s3:*4, s4:*5, s5:*6, s6:*7, s7:*8, s8:*9}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), Call(∂.ForEach([map:12] Scope(1), {N:Scope(12), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 1) { N: 1, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 2) { N: 0, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 3) { N: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 4) { N: 0, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 5) { N: 1, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 6) { N: 0, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 7) { N: 1, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 8) { N: 0, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
 9) { N: 1, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
10) { N: 0, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
11) { N: 1, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
12) { N: 0, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15, s9: 16 }
13) { N: 1, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15, s9: 16 }
14) { N: 0, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15, s8: 16, s9: 17 }
15) { N: 1, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15, s8: 16, s9: 17 }
16) { N: 0, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15, s7: 16, s8: 17, s9: 18 }
17) { N: 1, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15, s7: 16, s8: 17, s9: 18 }
18) { N: 0, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15, s6: 16, s7: 17, s8: 18, s9: 19 }
19) { N: 1, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15, s6: 16, s7: 17, s8: 18, s9: 19 }
*** Ctx ping count: 110
    [0](110): ChainMap(*1: Range(1, 20), *2: Range(2, 20), *3: Range(3, 20), *4: Range(4, 20), *5: Range(5, 20), *6: Range(6, 20), *7: Range(7, 20), *8: Range(8, 20), *9: Range(9, 20), *10: Range(10, 20), ForEach(*12: !11x, {N:*12, s0:*1, s1:*2, s2:*3, s3:*4, s4:*5, s5:*6, s6:*7, s7:*8, s8:*9, s9:*10}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), Call(∂.ForEach([map:13] Scope(1), {N:Scope(13), s0:Scope(2), s1:Scope(3), s10:Scope(12), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x) to {N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, s0: 1, s1: 2, s10: 11, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 1) { N: 1, s0: 1, s1: 2, s10: 11, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 2) { N: 0, s0: 2, s1: 3, s10: 12, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 3) { N: 1, s0: 2, s1: 3, s10: 12, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 4) { N: 0, s0: 3, s1: 4, s10: 13, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 5) { N: 1, s0: 3, s1: 4, s10: 13, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 6) { N: 0, s0: 4, s1: 5, s10: 14, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 7) { N: 1, s0: 4, s1: 5, s10: 14, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 8) { N: 0, s0: 5, s1: 6, s10: 15, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
 9) { N: 1, s0: 5, s1: 6, s10: 15, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
10) { N: 0, s0: 6, s1: 7, s10: 16, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
11) { N: 1, s0: 6, s1: 7, s10: 16, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
12) { N: 0, s0: 7, s1: 8, s10: 17, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15, s9: 16 }
13) { N: 1, s0: 7, s1: 8, s10: 17, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15, s9: 16 }
14) { N: 0, s0: 8, s1: 9, s10: 18, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15, s8: 16, s9: 17 }
15) { N: 1, s0: 8, s1: 9, s10: 18, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15, s8: 16, s9: 17 }
16) { N: 0, s0: 9, s1: 10, s10: 19, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15, s7: 16, s8: 17, s9: 18 }
17) { N: 1, s0: 9, s1: 10, s10: 19, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15, s7: 16, s8: 17, s9: 18 }
*** Ctx ping count: 110
    [0](110): ChainMap(*1: Range(1, 20), *2: Range(2, 20), *3: Range(3, 20), *4: Range(4, 20), *5: Range(5, 20), *6: Range(6, 20), *7: Range(7, 20), *8: Range(8, 20), *9: Range(9, 20), *10: Range(10, 20), *11: Range(11, 20), ForEach(*13: !12x, {N:*13, s0:*1, s1:*2, s10:*11, s2:*3, s3:*4, s4:*5, s5:*6, s6:*7, s7:*8, s8:*9, s9:*10}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), Call(∂.ForEach([map:14] Scope(1), {N:Scope(14), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, s0: 1, s1: 2, s10: 11, s11: 12, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 1) { N: 1, s0: 1, s1: 2, s10: 11, s11: 12, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 2) { N: 0, s0: 2, s1: 3, s10: 12, s11: 13, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 3) { N: 1, s0: 2, s1: 3, s10: 12, s11: 13, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 4) { N: 0, s0: 3, s1: 4, s10: 13, s11: 14, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 5) { N: 1, s0: 3, s1: 4, s10: 13, s11: 14, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 6) { N: 0, s0: 4, s1: 5, s10: 14, s11: 15, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 7) { N: 1, s0: 4, s1: 5, s10: 14, s11: 15, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 8) { N: 0, s0: 5, s1: 6, s10: 15, s11: 16, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
 9) { N: 1, s0: 5, s1: 6, s10: 15, s11: 16, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
10) { N: 0, s0: 6, s1: 7, s10: 16, s11: 17, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
11) { N: 1, s0: 6, s1: 7, s10: 16, s11: 17, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
12) { N: 0, s0: 7, s1: 8, s10: 17, s11: 18, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15, s9: 16 }
13) { N: 1, s0: 7, s1: 8, s10: 17, s11: 18, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15, s9: 16 }
14) { N: 0, s0: 8, s1: 9, s10: 18, s11: 19, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15, s8: 16, s9: 17 }
15) { N: 1, s0: 8, s1: 9, s10: 18, s11: 19, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15, s8: 16, s9: 17 }
*** Ctx ping count: 108
    [0](108): ChainMap(*1: Range(1, 20), *2: Range(2, 20), *3: Range(3, 20), *4: Range(4, 20), *5: Range(5, 20), *6: Range(6, 20), *7: Range(7, 20), *8: Range(8, 20), *9: Range(9, 20), *10: Range(10, 20), *11: Range(11, 20), *12: Range(12, 20), ForEach(*14: !13x, {N:*14, s0:*1, s1:*2, s10:*11, s11:*12, s2:*3, s3:*4, s4:*5, s5:*6, s6:*7, s7:*8, s8:*9, s9:*10}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), Call(∂.ForEach([map:15] Scope(1), {N:Scope(15), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, s0: 1, s1: 2, s10: 11, s11: 12, s12: 13, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 1) { N: 1, s0: 1, s1: 2, s10: 11, s11: 12, s12: 13, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 2) { N: 0, s0: 2, s1: 3, s10: 12, s11: 13, s12: 14, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 3) { N: 1, s0: 2, s1: 3, s10: 12, s11: 13, s12: 14, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 4) { N: 0, s0: 3, s1: 4, s10: 13, s11: 14, s12: 15, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 5) { N: 1, s0: 3, s1: 4, s10: 13, s11: 14, s12: 15, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 6) { N: 0, s0: 4, s1: 5, s10: 14, s11: 15, s12: 16, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 7) { N: 1, s0: 4, s1: 5, s10: 14, s11: 15, s12: 16, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 8) { N: 0, s0: 5, s1: 6, s10: 15, s11: 16, s12: 17, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
 9) { N: 1, s0: 5, s1: 6, s10: 15, s11: 16, s12: 17, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
10) { N: 0, s0: 6, s1: 7, s10: 16, s11: 17, s12: 18, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
11) { N: 1, s0: 6, s1: 7, s10: 16, s11: 17, s12: 18, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
12) { N: 0, s0: 7, s1: 8, s10: 17, s11: 18, s12: 19, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15, s9: 16 }
13) { N: 1, s0: 7, s1: 8, s10: 17, s11: 18, s12: 19, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15, s9: 16 }
*** Ctx ping count: 104
    [0](104): ChainMap(*1: Range(1, 20), *2: Range(2, 20), *3: Range(3, 20), *4: Range(4, 20), *5: Range(5, 20), *6: Range(6, 20), *7: Range(7, 20), *8: Range(8, 20), *9: Range(9, 20), *10: Range(10, 20), *11: Range(11, 20), *12: Range(12, 20), *13: Range(13, 20), ForEach(*15: !14x, {N:*15, s0:*1, s1:*2, s10:*11, s11:*12, s12:*13, s2:*3, s3:*4, s4:*5, s5:*6, s6:*7, s7:*8, s8:*9, s9:*10}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), Call(∂.ForEach([map:16] Scope(1), {N:Scope(16), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, s0: 1, s1: 2, s10: 11, s11: 12, s12: 13, s13: 14, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 1) { N: 1, s0: 1, s1: 2, s10: 11, s11: 12, s12: 13, s13: 14, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 2) { N: 0, s0: 2, s1: 3, s10: 12, s11: 13, s12: 14, s13: 15, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 3) { N: 1, s0: 2, s1: 3, s10: 12, s11: 13, s12: 14, s13: 15, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 4) { N: 0, s0: 3, s1: 4, s10: 13, s11: 14, s12: 15, s13: 16, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 5) { N: 1, s0: 3, s1: 4, s10: 13, s11: 14, s12: 15, s13: 16, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 6) { N: 0, s0: 4, s1: 5, s10: 14, s11: 15, s12: 16, s13: 17, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 7) { N: 1, s0: 4, s1: 5, s10: 14, s11: 15, s12: 16, s13: 17, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 8) { N: 0, s0: 5, s1: 6, s10: 15, s11: 16, s12: 17, s13: 18, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
 9) { N: 1, s0: 5, s1: 6, s10: 15, s11: 16, s12: 17, s13: 18, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
10) { N: 0, s0: 6, s1: 7, s10: 16, s11: 17, s12: 18, s13: 19, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
11) { N: 1, s0: 6, s1: 7, s10: 16, s11: 17, s12: 18, s13: 19, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
*** Ctx ping count: 98
    [0](98): ChainMap(*1: Range(1, 20), *2: Range(2, 20), *3: Range(3, 20), *4: Range(4, 20), *5: Range(5, 20), *6: Range(6, 20), *7: Range(7, 20), *8: Range(8, 20), *9: Range(9, 20), *10: Range(10, 20), *11: Range(11, 20), *12: Range(12, 20), *13: Range(13, 20), *14: Range(14, 20), ForEach(*16: !15x, {N:*16, s0:*1, s1:*2, s10:*11, s11:*12, s12:*13, s13:*14, s2:*3, s3:*4, s4:*5, s5:*6, s6:*7, s7:*8, s8:*9, s9:*10}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, s0: 1, s1: 2, s10: 11, s11: 12, s12: 13, s13: 14, s14: 15, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 1) { N: 1, s0: 1, s1: 2, s10: 11, s11: 12, s12: 13, s13: 14, s14: 15, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 2) { N: 0, s0: 2, s1: 3, s10: 12, s11: 13, s12: 14, s13: 15, s14: 16, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 3) { N: 1, s0: 2, s1: 3, s10: 12, s11: 13, s12: 14, s13: 15, s14: 16, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 4) { N: 0, s0: 3, s1: 4, s10: 13, s11: 14, s12: 15, s13: 16, s14: 17, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 5) { N: 1, s0: 3, s1: 4, s10: 13, s11: 14, s12: 15, s13: 16, s14: 17, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 6) { N: 0, s0: 4, s1: 5, s10: 14, s11: 15, s12: 16, s13: 17, s14: 18, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 7) { N: 1, s0: 4, s1: 5, s10: 14, s11: 15, s12: 16, s13: 17, s14: 18, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 8) { N: 0, s0: 5, s1: 6, s10: 15, s11: 16, s12: 17, s13: 18, s14: 19, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
 9) { N: 1, s0: 5, s1: 6, s10: 15, s11: 16, s12: 17, s13: 18, s14: 19, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
*** Ctx ping count: 90
    [0](90): ChainMap(*1: Range(1, 20), *2: Range(2, 20), *3: Range(3, 20), *4: Range(4, 20), *5: Range(5, 20), *6: Range(6, 20), *7: Range(7, 20), *8: Range(8, 20), *9: Range(9, 20), *10: Range(10, 20), *11: Range(11, 20), *12: Range(12, 20), *13: Range(13, 20), *14: Range(14, 20), *15: Range(15, 20), ForEach(*17: !16x, {N:*17, s0:*1, s1:*2, s10:*11, s11:*12, s12:*13, s13:*14, s14:*15, s2:*3, s3:*4, s4:*5, s5:*6, s6:*7, s7:*8, s8:*9, s9:*10}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), s15: Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), s15 : Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, s0: 1, s1: 2, s10: 11, s11: 12, s12: 13, s13: 14, s14: 15, s15: 16, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 1) { N: 1, s0: 1, s1: 2, s10: 11, s11: 12, s12: 13, s13: 14, s14: 15, s15: 16, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 2) { N: 0, s0: 2, s1: 3, s10: 12, s11: 13, s12: 14, s13: 15, s14: 16, s15: 17, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 3) { N: 1, s0: 2, s1: 3, s10: 12, s11: 13, s12: 14, s13: 15, s14: 16, s15: 17, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 4) { N: 0, s0: 3, s1: 4, s10: 13, s11: 14, s12: 15, s13: 16, s14: 17, s15: 18, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 5) { N: 1, s0: 3, s1: 4, s10: 13, s11: 14, s12: 15, s13: 16, s14: 17, s15: 18, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 6) { N: 0, s0: 4, s1: 5, s10: 14, s11: 15, s12: 16, s13: 17, s14: 18, s15: 19, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 7) { N: 1, s0: 4, s1: 5, s10: 14, s11: 15, s12: 16, s13: 17, s14: 18, s15: 19, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
*** Ctx ping count: 80
    [0](80): ChainMap(*1: Range(1, 20), *2: Range(2, 20), *3: Range(3, 20), *4: Range(4, 20), *5: Range(5, 20), *6: Range(6, 20), *7: Range(7, 20), *8: Range(8, 20), *9: Range(9, 20), *10: Range(10, 20), *11: Range(11, 20), *12: Range(12, 20), *13: Range(13, 20), *14: Range(14, 20), *15: Range(15, 20), *16: Range(16, 20), ForEach(*18: !17x, {N:*18, s0:*1, s1:*2, s10:*11, s11:*12, s12:*13, s13:*14, s14:*15, s15:*16, s2:*3, s3:*4, s4:*5, s5:*6, s6:*7, s7:*8, s8:*9, s9:*10}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), s15: Range(16, 20), s16: Range(17, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), s15 : Range(16, 20), s16 : Range(17, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s16:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s16:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), [map:18] Call(∂.Range(17:i8, 20:i8):i8*), Call(∂.ForEach([map:19] Scope(1), {N:Scope(19), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s16:Scope(18), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
*** NYI Exception: 'More than 16 parameters used'
###
> ChainMap(s0: Range(1, 20), Range(2)->{ i0: #s0, s0, N:it })
ChainMap(s0 : Range(1, 20), Range(2)->{ i0 : #s0, s0, N : it }) : {N:i8, i0:i8, s0:i8}*
BndKind:Call, Type:{N:i8, i0:i8, s0:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:3] Call(∂.Range(1:i8, 20:i8):i8*), Call(∂.ForEach([map:4] Scope(1), {N:Scope(4), i0:Scope(2), s0:Scope(3)})))))))
Func sig: (<ctx>:x) to {N:i8, i0:i8, s0:i8}*
Sequence: Seq<{i8,i8,i8}>
 0) { N: 0, i0: 0, s0: 1 }
 1) { N: 1, i0: 0, s0: 1 }
 2) { N: 0, i0: 1, s0: 2 }
 3) { N: 1, i0: 1, s0: 2 }
 4) { N: 0, i0: 2, s0: 3 }
 5) { N: 1, i0: 2, s0: 3 }
 6) { N: 0, i0: 3, s0: 4 }
 7) { N: 1, i0: 3, s0: 4 }
 8) { N: 0, i0: 4, s0: 5 }
 9) { N: 1, i0: 4, s0: 5 }
10) { N: 0, i0: 5, s0: 6 }
11) { N: 1, i0: 5, s0: 6 }
12) { N: 0, i0: 6, s0: 7 }
13) { N: 1, i0: 6, s0: 7 }
14) { N: 0, i0: 7, s0: 8 }
15) { N: 1, i0: 7, s0: 8 }
16) { N: 0, i0: 8, s0: 9 }
17) { N: 1, i0: 8, s0: 9 }
18) { N: 0, i0: 9, s0: 10 }
19) { N: 1, i0: 9, s0: 10 }
20) { N: 0, i0: 10, s0: 11 }
21) { N: 1, i0: 10, s0: 11 }
22) { N: 0, i0: 11, s0: 12 }
23) { N: 1, i0: 11, s0: 12 }
24) { N: 0, i0: 12, s0: 13 }
25) { N: 1, i0: 12, s0: 13 }
26) { N: 0, i0: 13, s0: 14 }
27) { N: 1, i0: 13, s0: 14 }
28) { N: 0, i0: 14, s0: 15 }
29) { N: 1, i0: 14, s0: 15 }
30) { N: 0, i0: 15, s0: 16 }
31) { N: 1, i0: 15, s0: 16 }
32) { N: 0, i0: 16, s0: 17 }
33) { N: 1, i0: 16, s0: 17 }
34) { N: 0, i0: 17, s0: 18 }
35) { N: 1, i0: 17, s0: 18 }
36) { N: 0, i0: 18, s0: 19 }
37) { N: 1, i0: 18, s0: 19 }
*** Ctx ping count: 20
    [0](20): ChainMap(*2: Range(1, 20), ForEach(*4: !3x, {N:*4, i0:#1, s0:*2}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), Range(2)->{ i0: #s0, i1: #s1, s0, s1, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), Range(2)->{ i0 : #s0, i1 : #s1, s0, s1, N : it }) : {N:i8, i0:i8, i1:i8, s0:i8, s1:i8}*
BndKind:Call, Type:{N:i8, i0:i8, i1:i8, s0:i8, s1:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:3] Call(∂.Range(1:i8, 20:i8):i8*), [map:4] Call(∂.Range(2:i8, 20:i8):i8*), Call(∂.ForEach([map:5] Scope(1), {N:Scope(5), i0:Scope(2), i1:Scope(2), s0:Scope(3), s1:Scope(4)})))))))
Func sig: (<ctx>:x) to {N:i8, i0:i8, i1:i8, s0:i8, s1:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8}>
 0) { N: 0, i0: 0, i1: 0, s0: 1, s1: 2 }
 1) { N: 1, i0: 0, i1: 0, s0: 1, s1: 2 }
 2) { N: 0, i0: 1, i1: 1, s0: 2, s1: 3 }
 3) { N: 1, i0: 1, i1: 1, s0: 2, s1: 3 }
 4) { N: 0, i0: 2, i1: 2, s0: 3, s1: 4 }
 5) { N: 1, i0: 2, i1: 2, s0: 3, s1: 4 }
 6) { N: 0, i0: 3, i1: 3, s0: 4, s1: 5 }
 7) { N: 1, i0: 3, i1: 3, s0: 4, s1: 5 }
 8) { N: 0, i0: 4, i1: 4, s0: 5, s1: 6 }
 9) { N: 1, i0: 4, i1: 4, s0: 5, s1: 6 }
10) { N: 0, i0: 5, i1: 5, s0: 6, s1: 7 }
11) { N: 1, i0: 5, i1: 5, s0: 6, s1: 7 }
12) { N: 0, i0: 6, i1: 6, s0: 7, s1: 8 }
13) { N: 1, i0: 6, i1: 6, s0: 7, s1: 8 }
14) { N: 0, i0: 7, i1: 7, s0: 8, s1: 9 }
15) { N: 1, i0: 7, i1: 7, s0: 8, s1: 9 }
16) { N: 0, i0: 8, i1: 8, s0: 9, s1: 10 }
17) { N: 1, i0: 8, i1: 8, s0: 9, s1: 10 }
18) { N: 0, i0: 9, i1: 9, s0: 10, s1: 11 }
19) { N: 1, i0: 9, i1: 9, s0: 10, s1: 11 }
20) { N: 0, i0: 10, i1: 10, s0: 11, s1: 12 }
21) { N: 1, i0: 10, i1: 10, s0: 11, s1: 12 }
22) { N: 0, i0: 11, i1: 11, s0: 12, s1: 13 }
23) { N: 1, i0: 11, i1: 11, s0: 12, s1: 13 }
24) { N: 0, i0: 12, i1: 12, s0: 13, s1: 14 }
25) { N: 1, i0: 12, i1: 12, s0: 13, s1: 14 }
26) { N: 0, i0: 13, i1: 13, s0: 14, s1: 15 }
27) { N: 1, i0: 13, i1: 13, s0: 14, s1: 15 }
28) { N: 0, i0: 14, i1: 14, s0: 15, s1: 16 }
29) { N: 1, i0: 14, i1: 14, s0: 15, s1: 16 }
30) { N: 0, i0: 15, i1: 15, s0: 16, s1: 17 }
31) { N: 1, i0: 15, i1: 15, s0: 16, s1: 17 }
32) { N: 0, i0: 16, i1: 16, s0: 17, s1: 18 }
33) { N: 1, i0: 16, i1: 16, s0: 17, s1: 18 }
34) { N: 0, i0: 17, i1: 17, s0: 18, s1: 19 }
35) { N: 1, i0: 17, i1: 17, s0: 18, s1: 19 }
*** Ctx ping count: 38
    [0](38): ChainMap(*2: Range(1, 20), *3: Range(2, 20), ForEach(*5: !4x, {N:*5, i0:#1, i1:#1, s0:*2, s1:*3}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), Range(2)->{ i0: #s0, i1: #s1, i2: #s2, s0, s1, s2, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), Range(2)->{ i0 : #s0, i1 : #s1, i2 : #s2, s0, s1, s2, N : it }) : {N:i8, i0:i8, i1:i8, i2:i8, s0:i8, s1:i8, s2:i8}*
BndKind:Call, Type:{N:i8, i0:i8, i1:i8, i2:i8, s0:i8, s1:i8, s2:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:3] Call(∂.Range(1:i8, 20:i8):i8*), [map:4] Call(∂.Range(2:i8, 20:i8):i8*), [map:5] Call(∂.Range(3:i8, 20:i8):i8*), Call(∂.ForEach([map:6] Scope(1), {N:Scope(6), i0:Scope(2), i1:Scope(2), i2:Scope(2), s0:Scope(3), s1:Scope(4), s2:Scope(5)})))))))
Func sig: (<ctx>:x) to {N:i8, i0:i8, i1:i8, i2:i8, s0:i8, s1:i8, s2:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, i0: 0, i1: 0, i2: 0, s0: 1, s1: 2, s2: 3 }
 1) { N: 1, i0: 0, i1: 0, i2: 0, s0: 1, s1: 2, s2: 3 }
 2) { N: 0, i0: 1, i1: 1, i2: 1, s0: 2, s1: 3, s2: 4 }
 3) { N: 1, i0: 1, i1: 1, i2: 1, s0: 2, s1: 3, s2: 4 }
 4) { N: 0, i0: 2, i1: 2, i2: 2, s0: 3, s1: 4, s2: 5 }
 5) { N: 1, i0: 2, i1: 2, i2: 2, s0: 3, s1: 4, s2: 5 }
 6) { N: 0, i0: 3, i1: 3, i2: 3, s0: 4, s1: 5, s2: 6 }
 7) { N: 1, i0: 3, i1: 3, i2: 3, s0: 4, s1: 5, s2: 6 }
 8) { N: 0, i0: 4, i1: 4, i2: 4, s0: 5, s1: 6, s2: 7 }
 9) { N: 1, i0: 4, i1: 4, i2: 4, s0: 5, s1: 6, s2: 7 }
10) { N: 0, i0: 5, i1: 5, i2: 5, s0: 6, s1: 7, s2: 8 }
11) { N: 1, i0: 5, i1: 5, i2: 5, s0: 6, s1: 7, s2: 8 }
12) { N: 0, i0: 6, i1: 6, i2: 6, s0: 7, s1: 8, s2: 9 }
13) { N: 1, i0: 6, i1: 6, i2: 6, s0: 7, s1: 8, s2: 9 }
14) { N: 0, i0: 7, i1: 7, i2: 7, s0: 8, s1: 9, s2: 10 }
15) { N: 1, i0: 7, i1: 7, i2: 7, s0: 8, s1: 9, s2: 10 }
16) { N: 0, i0: 8, i1: 8, i2: 8, s0: 9, s1: 10, s2: 11 }
17) { N: 1, i0: 8, i1: 8, i2: 8, s0: 9, s1: 10, s2: 11 }
18) { N: 0, i0: 9, i1: 9, i2: 9, s0: 10, s1: 11, s2: 12 }
19) { N: 1, i0: 9, i1: 9, i2: 9, s0: 10, s1: 11, s2: 12 }
20) { N: 0, i0: 10, i1: 10, i2: 10, s0: 11, s1: 12, s2: 13 }
21) { N: 1, i0: 10, i1: 10, i2: 10, s0: 11, s1: 12, s2: 13 }
22) { N: 0, i0: 11, i1: 11, i2: 11, s0: 12, s1: 13, s2: 14 }
23) { N: 1, i0: 11, i1: 11, i2: 11, s0: 12, s1: 13, s2: 14 }
24) { N: 0, i0: 12, i1: 12, i2: 12, s0: 13, s1: 14, s2: 15 }
25) { N: 1, i0: 12, i1: 12, i2: 12, s0: 13, s1: 14, s2: 15 }
26) { N: 0, i0: 13, i1: 13, i2: 13, s0: 14, s1: 15, s2: 16 }
27) { N: 1, i0: 13, i1: 13, i2: 13, s0: 14, s1: 15, s2: 16 }
28) { N: 0, i0: 14, i1: 14, i2: 14, s0: 15, s1: 16, s2: 17 }
29) { N: 1, i0: 14, i1: 14, i2: 14, s0: 15, s1: 16, s2: 17 }
30) { N: 0, i0: 15, i1: 15, i2: 15, s0: 16, s1: 17, s2: 18 }
31) { N: 1, i0: 15, i1: 15, i2: 15, s0: 16, s1: 17, s2: 18 }
32) { N: 0, i0: 16, i1: 16, i2: 16, s0: 17, s1: 18, s2: 19 }
33) { N: 1, i0: 16, i1: 16, i2: 16, s0: 17, s1: 18, s2: 19 }
*** Ctx ping count: 54
    [0](54): ChainMap(*2: Range(1, 20), *3: Range(2, 20), *4: Range(3, 20), ForEach(*6: !5x, {N:*6, i0:#1, i1:#1, i2:#1, s0:*2, s1:*3, s2:*4}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), Range(2)->{ i0: #s0, i1: #s1, i2: #s2, i3: #s3, s0, s1, s2, s3, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), Range(2)->{ i0 : #s0, i1 : #s1, i2 : #s2, i3 : #s3, s0, s1, s2, s3, N : it }) : {N:i8, i0:i8, i1:i8, i2:i8, i3:i8, s0:i8, s1:i8, s2:i8, s3:i8}*
BndKind:Call, Type:{N:i8, i0:i8, i1:i8, i2:i8, i3:i8, s0:i8, s1:i8, s2:i8, s3:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:3] Call(∂.Range(1:i8, 20:i8):i8*), [map:4] Call(∂.Range(2:i8, 20:i8):i8*), [map:5] Call(∂.Range(3:i8, 20:i8):i8*), [map:6] Call(∂.Range(4:i8, 20:i8):i8*), Call(∂.ForEach([map:7] Scope(1), {N:Scope(7), i0:Scope(2), i1:Scope(2), i2:Scope(2), i3:Scope(2), s0:Scope(3), s1:Scope(4), s2:Scope(5), s3:Scope(6)})))))))
Func sig: (<ctx>:x) to {N:i8, i0:i8, i1:i8, i2:i8, i3:i8, s0:i8, s1:i8, s2:i8, s3:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, i0: 0, i1: 0, i2: 0, i3: 0, s0: 1, s1: 2, s2: 3, s3: 4 }
 1) { N: 1, i0: 0, i1: 0, i2: 0, i3: 0, s0: 1, s1: 2, s2: 3, s3: 4 }
 2) { N: 0, i0: 1, i1: 1, i2: 1, i3: 1, s0: 2, s1: 3, s2: 4, s3: 5 }
 3) { N: 1, i0: 1, i1: 1, i2: 1, i3: 1, s0: 2, s1: 3, s2: 4, s3: 5 }
 4) { N: 0, i0: 2, i1: 2, i2: 2, i3: 2, s0: 3, s1: 4, s2: 5, s3: 6 }
 5) { N: 1, i0: 2, i1: 2, i2: 2, i3: 2, s0: 3, s1: 4, s2: 5, s3: 6 }
 6) { N: 0, i0: 3, i1: 3, i2: 3, i3: 3, s0: 4, s1: 5, s2: 6, s3: 7 }
 7) { N: 1, i0: 3, i1: 3, i2: 3, i3: 3, s0: 4, s1: 5, s2: 6, s3: 7 }
 8) { N: 0, i0: 4, i1: 4, i2: 4, i3: 4, s0: 5, s1: 6, s2: 7, s3: 8 }
 9) { N: 1, i0: 4, i1: 4, i2: 4, i3: 4, s0: 5, s1: 6, s2: 7, s3: 8 }
10) { N: 0, i0: 5, i1: 5, i2: 5, i3: 5, s0: 6, s1: 7, s2: 8, s3: 9 }
11) { N: 1, i0: 5, i1: 5, i2: 5, i3: 5, s0: 6, s1: 7, s2: 8, s3: 9 }
12) { N: 0, i0: 6, i1: 6, i2: 6, i3: 6, s0: 7, s1: 8, s2: 9, s3: 10 }
13) { N: 1, i0: 6, i1: 6, i2: 6, i3: 6, s0: 7, s1: 8, s2: 9, s3: 10 }
14) { N: 0, i0: 7, i1: 7, i2: 7, i3: 7, s0: 8, s1: 9, s2: 10, s3: 11 }
15) { N: 1, i0: 7, i1: 7, i2: 7, i3: 7, s0: 8, s1: 9, s2: 10, s3: 11 }
16) { N: 0, i0: 8, i1: 8, i2: 8, i3: 8, s0: 9, s1: 10, s2: 11, s3: 12 }
17) { N: 1, i0: 8, i1: 8, i2: 8, i3: 8, s0: 9, s1: 10, s2: 11, s3: 12 }
18) { N: 0, i0: 9, i1: 9, i2: 9, i3: 9, s0: 10, s1: 11, s2: 12, s3: 13 }
19) { N: 1, i0: 9, i1: 9, i2: 9, i3: 9, s0: 10, s1: 11, s2: 12, s3: 13 }
20) { N: 0, i0: 10, i1: 10, i2: 10, i3: 10, s0: 11, s1: 12, s2: 13, s3: 14 }
21) { N: 1, i0: 10, i1: 10, i2: 10, i3: 10, s0: 11, s1: 12, s2: 13, s3: 14 }
22) { N: 0, i0: 11, i1: 11, i2: 11, i3: 11, s0: 12, s1: 13, s2: 14, s3: 15 }
23) { N: 1, i0: 11, i1: 11, i2: 11, i3: 11, s0: 12, s1: 13, s2: 14, s3: 15 }
24) { N: 0, i0: 12, i1: 12, i2: 12, i3: 12, s0: 13, s1: 14, s2: 15, s3: 16 }
25) { N: 1, i0: 12, i1: 12, i2: 12, i3: 12, s0: 13, s1: 14, s2: 15, s3: 16 }
26) { N: 0, i0: 13, i1: 13, i2: 13, i3: 13, s0: 14, s1: 15, s2: 16, s3: 17 }
27) { N: 1, i0: 13, i1: 13, i2: 13, i3: 13, s0: 14, s1: 15, s2: 16, s3: 17 }
28) { N: 0, i0: 14, i1: 14, i2: 14, i3: 14, s0: 15, s1: 16, s2: 17, s3: 18 }
29) { N: 1, i0: 14, i1: 14, i2: 14, i3: 14, s0: 15, s1: 16, s2: 17, s3: 18 }
30) { N: 0, i0: 15, i1: 15, i2: 15, i3: 15, s0: 16, s1: 17, s2: 18, s3: 19 }
31) { N: 1, i0: 15, i1: 15, i2: 15, i3: 15, s0: 16, s1: 17, s2: 18, s3: 19 }
*** Ctx ping count: 68
    [0](68): ChainMap(*2: Range(1, 20), *3: Range(2, 20), *4: Range(3, 20), *5: Range(4, 20), ForEach(*7: !6x, {N:*7, i0:#1, i1:#1, i2:#1, i3:#1, s0:*2, s1:*3, s2:*4, s3:*5}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), Range(2)->{ i0: #s0, i1: #s1, i2: #s2, i3: #s3, i4: #s4, s0, s1, s2, s3, s4, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), Range(2)->{ i0 : #s0, i1 : #s1, i2 : #s2, i3 : #s3, i4 : #s4, s0, s1, s2, s3, s4, N : it }) : {N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8}*
BndKind:Call, Type:{N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:3] Call(∂.Range(1:i8, 20:i8):i8*), [map:4] Call(∂.Range(2:i8, 20:i8):i8*), [map:5] Call(∂.Range(3:i8, 20:i8):i8*), [map:6] Call(∂.Range(4:i8, 20:i8):i8*), [map:7] Call(∂.Range(5:i8, 20:i8):i8*), Call(∂.ForEach([map:8] Scope(1), {N:Scope(8), i0:Scope(2), i1:Scope(2), i2:Scope(2), i3:Scope(2), i4:Scope(2), s0:Scope(3), s1:Scope(4), s2:Scope(5), s3:Scope(6), s4:Scope(7)})))))))
Func sig: (<ctx>:x) to {N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, i0: 0, i1: 0, i2: 0, i3: 0, i4: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5 }
 1) { N: 1, i0: 0, i1: 0, i2: 0, i3: 0, i4: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5 }
 2) { N: 0, i0: 1, i1: 1, i2: 1, i3: 1, i4: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6 }
 3) { N: 1, i0: 1, i1: 1, i2: 1, i3: 1, i4: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6 }
 4) { N: 0, i0: 2, i1: 2, i2: 2, i3: 2, i4: 2, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7 }
 5) { N: 1, i0: 2, i1: 2, i2: 2, i3: 2, i4: 2, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7 }
 6) { N: 0, i0: 3, i1: 3, i2: 3, i3: 3, i4: 3, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8 }
 7) { N: 1, i0: 3, i1: 3, i2: 3, i3: 3, i4: 3, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8 }
 8) { N: 0, i0: 4, i1: 4, i2: 4, i3: 4, i4: 4, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9 }
 9) { N: 1, i0: 4, i1: 4, i2: 4, i3: 4, i4: 4, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9 }
10) { N: 0, i0: 5, i1: 5, i2: 5, i3: 5, i4: 5, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10 }
11) { N: 1, i0: 5, i1: 5, i2: 5, i3: 5, i4: 5, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10 }
12) { N: 0, i0: 6, i1: 6, i2: 6, i3: 6, i4: 6, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11 }
13) { N: 1, i0: 6, i1: 6, i2: 6, i3: 6, i4: 6, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11 }
14) { N: 0, i0: 7, i1: 7, i2: 7, i3: 7, i4: 7, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12 }
15) { N: 1, i0: 7, i1: 7, i2: 7, i3: 7, i4: 7, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12 }
16) { N: 0, i0: 8, i1: 8, i2: 8, i3: 8, i4: 8, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13 }
17) { N: 1, i0: 8, i1: 8, i2: 8, i3: 8, i4: 8, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13 }
18) { N: 0, i0: 9, i1: 9, i2: 9, i3: 9, i4: 9, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14 }
19) { N: 1, i0: 9, i1: 9, i2: 9, i3: 9, i4: 9, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14 }
20) { N: 0, i0: 10, i1: 10, i2: 10, i3: 10, i4: 10, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15 }
21) { N: 1, i0: 10, i1: 10, i2: 10, i3: 10, i4: 10, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15 }
22) { N: 0, i0: 11, i1: 11, i2: 11, i3: 11, i4: 11, s0: 12, s1: 13, s2: 14, s3: 15, s4: 16 }
23) { N: 1, i0: 11, i1: 11, i2: 11, i3: 11, i4: 11, s0: 12, s1: 13, s2: 14, s3: 15, s4: 16 }
24) { N: 0, i0: 12, i1: 12, i2: 12, i3: 12, i4: 12, s0: 13, s1: 14, s2: 15, s3: 16, s4: 17 }
25) { N: 1, i0: 12, i1: 12, i2: 12, i3: 12, i4: 12, s0: 13, s1: 14, s2: 15, s3: 16, s4: 17 }
26) { N: 0, i0: 13, i1: 13, i2: 13, i3: 13, i4: 13, s0: 14, s1: 15, s2: 16, s3: 17, s4: 18 }
27) { N: 1, i0: 13, i1: 13, i2: 13, i3: 13, i4: 13, s0: 14, s1: 15, s2: 16, s3: 17, s4: 18 }
28) { N: 0, i0: 14, i1: 14, i2: 14, i3: 14, i4: 14, s0: 15, s1: 16, s2: 17, s3: 18, s4: 19 }
29) { N: 1, i0: 14, i1: 14, i2: 14, i3: 14, i4: 14, s0: 15, s1: 16, s2: 17, s3: 18, s4: 19 }
*** Ctx ping count: 80
    [0](80): ChainMap(*2: Range(1, 20), *3: Range(2, 20), *4: Range(3, 20), *5: Range(4, 20), *6: Range(5, 20), ForEach(*8: !7x, {N:*8, i0:#1, i1:#1, i2:#1, i3:#1, i4:#1, s0:*2, s1:*3, s2:*4, s3:*5, s4:*6}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), Range(2)->{ i0: #s0, i1: #s1, i2: #s2, i3: #s3, i4: #s4, i5: #s5, s0, s1, s2, s3, s4, s5, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), Range(2)->{ i0 : #s0, i1 : #s1, i2 : #s2, i3 : #s3, i4 : #s4, i5 : #s5, s0, s1, s2, s3, s4, s5, N : it }) : {N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, i5:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8}*
BndKind:Call, Type:{N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, i5:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:3] Call(∂.Range(1:i8, 20:i8):i8*), [map:4] Call(∂.Range(2:i8, 20:i8):i8*), [map:5] Call(∂.Range(3:i8, 20:i8):i8*), [map:6] Call(∂.Range(4:i8, 20:i8):i8*), [map:7] Call(∂.Range(5:i8, 20:i8):i8*), [map:8] Call(∂.Range(6:i8, 20:i8):i8*), Call(∂.ForEach([map:9] Scope(1), {N:Scope(9), i0:Scope(2), i1:Scope(2), i2:Scope(2), i3:Scope(2), i4:Scope(2), i5:Scope(2), s0:Scope(3), s1:Scope(4), s2:Scope(5), s3:Scope(6), s4:Scope(7), s5:Scope(8)})))))))
Func sig: (<ctx>:x) to {N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, i5:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, i0: 0, i1: 0, i2: 0, i3: 0, i4: 0, i5: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6 }
 1) { N: 1, i0: 0, i1: 0, i2: 0, i3: 0, i4: 0, i5: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6 }
 2) { N: 0, i0: 1, i1: 1, i2: 1, i3: 1, i4: 1, i5: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7 }
 3) { N: 1, i0: 1, i1: 1, i2: 1, i3: 1, i4: 1, i5: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7 }
 4) { N: 0, i0: 2, i1: 2, i2: 2, i3: 2, i4: 2, i5: 2, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8 }
 5) { N: 1, i0: 2, i1: 2, i2: 2, i3: 2, i4: 2, i5: 2, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8 }
 6) { N: 0, i0: 3, i1: 3, i2: 3, i3: 3, i4: 3, i5: 3, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9 }
 7) { N: 1, i0: 3, i1: 3, i2: 3, i3: 3, i4: 3, i5: 3, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9 }
 8) { N: 0, i0: 4, i1: 4, i2: 4, i3: 4, i4: 4, i5: 4, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10 }
 9) { N: 1, i0: 4, i1: 4, i2: 4, i3: 4, i4: 4, i5: 4, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10 }
10) { N: 0, i0: 5, i1: 5, i2: 5, i3: 5, i4: 5, i5: 5, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11 }
11) { N: 1, i0: 5, i1: 5, i2: 5, i3: 5, i4: 5, i5: 5, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11 }
12) { N: 0, i0: 6, i1: 6, i2: 6, i3: 6, i4: 6, i5: 6, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12 }
13) { N: 1, i0: 6, i1: 6, i2: 6, i3: 6, i4: 6, i5: 6, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12 }
14) { N: 0, i0: 7, i1: 7, i2: 7, i3: 7, i4: 7, i5: 7, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13 }
15) { N: 1, i0: 7, i1: 7, i2: 7, i3: 7, i4: 7, i5: 7, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13 }
16) { N: 0, i0: 8, i1: 8, i2: 8, i3: 8, i4: 8, i5: 8, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14 }
17) { N: 1, i0: 8, i1: 8, i2: 8, i3: 8, i4: 8, i5: 8, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14 }
18) { N: 0, i0: 9, i1: 9, i2: 9, i3: 9, i4: 9, i5: 9, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15 }
19) { N: 1, i0: 9, i1: 9, i2: 9, i3: 9, i4: 9, i5: 9, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15 }
20) { N: 0, i0: 10, i1: 10, i2: 10, i3: 10, i4: 10, i5: 10, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15, s5: 16 }
21) { N: 1, i0: 10, i1: 10, i2: 10, i3: 10, i4: 10, i5: 10, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15, s5: 16 }
22) { N: 0, i0: 11, i1: 11, i2: 11, i3: 11, i4: 11, i5: 11, s0: 12, s1: 13, s2: 14, s3: 15, s4: 16, s5: 17 }
23) { N: 1, i0: 11, i1: 11, i2: 11, i3: 11, i4: 11, i5: 11, s0: 12, s1: 13, s2: 14, s3: 15, s4: 16, s5: 17 }
24) { N: 0, i0: 12, i1: 12, i2: 12, i3: 12, i4: 12, i5: 12, s0: 13, s1: 14, s2: 15, s3: 16, s4: 17, s5: 18 }
25) { N: 1, i0: 12, i1: 12, i2: 12, i3: 12, i4: 12, i5: 12, s0: 13, s1: 14, s2: 15, s3: 16, s4: 17, s5: 18 }
26) { N: 0, i0: 13, i1: 13, i2: 13, i3: 13, i4: 13, i5: 13, s0: 14, s1: 15, s2: 16, s3: 17, s4: 18, s5: 19 }
27) { N: 1, i0: 13, i1: 13, i2: 13, i3: 13, i4: 13, i5: 13, s0: 14, s1: 15, s2: 16, s3: 17, s4: 18, s5: 19 }
*** Ctx ping count: 90
    [0](90): ChainMap(*2: Range(1, 20), *3: Range(2, 20), *4: Range(3, 20), *5: Range(4, 20), *6: Range(5, 20), *7: Range(6, 20), ForEach(*9: !8x, {N:*9, i0:#1, i1:#1, i2:#1, i3:#1, i4:#1, i5:#1, s0:*2, s1:*3, s2:*4, s3:*5, s4:*6, s5:*7}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), Range(2)->{ i0: #s0, i1: #s1, i2: #s2, i3: #s3, i4: #s4, i5: #s5, i6: #s6, s0, s1, s2, s3, s4, s5, s6, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), Range(2)->{ i0 : #s0, i1 : #s1, i2 : #s2, i3 : #s3, i4 : #s4, i5 : #s5, i6 : #s6, s0, s1, s2, s3, s4, s5, s6, N : it }) : {N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8}*
BndKind:Call, Type:{N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:3] Call(∂.Range(1:i8, 20:i8):i8*), [map:4] Call(∂.Range(2:i8, 20:i8):i8*), [map:5] Call(∂.Range(3:i8, 20:i8):i8*), [map:6] Call(∂.Range(4:i8, 20:i8):i8*), [map:7] Call(∂.Range(5:i8, 20:i8):i8*), [map:8] Call(∂.Range(6:i8, 20:i8):i8*), [map:9] Call(∂.Range(7:i8, 20:i8):i8*), Call(∂.ForEach([map:10] Scope(1), {N:Scope(10), i0:Scope(2), i1:Scope(2), i2:Scope(2), i3:Scope(2), i4:Scope(2), i5:Scope(2), i6:Scope(2), s0:Scope(3), s1:Scope(4), s2:Scope(5), s3:Scope(6), s4:Scope(7), s5:Scope(8), s6:Scope(9)})))))))
Func sig: (<ctx>:x) to {N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, i0: 0, i1: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7 }
 1) { N: 1, i0: 0, i1: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7 }
 2) { N: 0, i0: 1, i1: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8 }
 3) { N: 1, i0: 1, i1: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8 }
 4) { N: 0, i0: 2, i1: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9 }
 5) { N: 1, i0: 2, i1: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9 }
 6) { N: 0, i0: 3, i1: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10 }
 7) { N: 1, i0: 3, i1: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10 }
 8) { N: 0, i0: 4, i1: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11 }
 9) { N: 1, i0: 4, i1: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11 }
10) { N: 0, i0: 5, i1: 5, i2: 5, i3: 5, i4: 5, i5: 5, i6: 5, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12 }
11) { N: 1, i0: 5, i1: 5, i2: 5, i3: 5, i4: 5, i5: 5, i6: 5, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12 }
12) { N: 0, i0: 6, i1: 6, i2: 6, i3: 6, i4: 6, i5: 6, i6: 6, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13 }
13) { N: 1, i0: 6, i1: 6, i2: 6, i3: 6, i4: 6, i5: 6, i6: 6, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13 }
14) { N: 0, i0: 7, i1: 7, i2: 7, i3: 7, i4: 7, i5: 7, i6: 7, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14 }
15) { N: 1, i0: 7, i1: 7, i2: 7, i3: 7, i4: 7, i5: 7, i6: 7, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14 }
16) { N: 0, i0: 8, i1: 8, i2: 8, i3: 8, i4: 8, i5: 8, i6: 8, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15 }
17) { N: 1, i0: 8, i1: 8, i2: 8, i3: 8, i4: 8, i5: 8, i6: 8, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15 }
18) { N: 0, i0: 9, i1: 9, i2: 9, i3: 9, i4: 9, i5: 9, i6: 9, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15, s6: 16 }
19) { N: 1, i0: 9, i1: 9, i2: 9, i3: 9, i4: 9, i5: 9, i6: 9, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15, s6: 16 }
20) { N: 0, i0: 10, i1: 10, i2: 10, i3: 10, i4: 10, i5: 10, i6: 10, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15, s5: 16, s6: 17 }
21) { N: 1, i0: 10, i1: 10, i2: 10, i3: 10, i4: 10, i5: 10, i6: 10, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15, s5: 16, s6: 17 }
22) { N: 0, i0: 11, i1: 11, i2: 11, i3: 11, i4: 11, i5: 11, i6: 11, s0: 12, s1: 13, s2: 14, s3: 15, s4: 16, s5: 17, s6: 18 }
23) { N: 1, i0: 11, i1: 11, i2: 11, i3: 11, i4: 11, i5: 11, i6: 11, s0: 12, s1: 13, s2: 14, s3: 15, s4: 16, s5: 17, s6: 18 }
24) { N: 0, i0: 12, i1: 12, i2: 12, i3: 12, i4: 12, i5: 12, i6: 12, s0: 13, s1: 14, s2: 15, s3: 16, s4: 17, s5: 18, s6: 19 }
25) { N: 1, i0: 12, i1: 12, i2: 12, i3: 12, i4: 12, i5: 12, i6: 12, s0: 13, s1: 14, s2: 15, s3: 16, s4: 17, s5: 18, s6: 19 }
*** Ctx ping count: 98
    [0](98): ChainMap(*2: Range(1, 20), *3: Range(2, 20), *4: Range(3, 20), *5: Range(4, 20), *6: Range(5, 20), *7: Range(6, 20), *8: Range(7, 20), ForEach(*10: !9x, {N:*10, i0:#1, i1:#1, i2:#1, i3:#1, i4:#1, i5:#1, i6:#1, s0:*2, s1:*3, s2:*4, s3:*5, s4:*6, s5:*7, s6:*8}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), Range(2)->{ i0: #s0, i1: #s1, i2: #s2, i3: #s3, i4: #s4, i5: #s5, i6: #s6, i7: #s7, s0, s1, s2, s3, s4, s5, s6, s7, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), Range(2)->{ i0 : #s0, i1 : #s1, i2 : #s2, i3 : #s3, i4 : #s4, i5 : #s5, i6 : #s6, i7 : #s7, s0, s1, s2, s3, s4, s5, s6, s7, N : it }) : {N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8}*
BndKind:Call, Type:{N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:3] Call(∂.Range(1:i8, 20:i8):i8*), [map:4] Call(∂.Range(2:i8, 20:i8):i8*), [map:5] Call(∂.Range(3:i8, 20:i8):i8*), [map:6] Call(∂.Range(4:i8, 20:i8):i8*), [map:7] Call(∂.Range(5:i8, 20:i8):i8*), [map:8] Call(∂.Range(6:i8, 20:i8):i8*), [map:9] Call(∂.Range(7:i8, 20:i8):i8*), [map:10] Call(∂.Range(8:i8, 20:i8):i8*), Call(∂.ForEach([map:11] Scope(1), {N:Scope(11), i0:Scope(2), i1:Scope(2), i2:Scope(2), i3:Scope(2), i4:Scope(2), i5:Scope(2), i6:Scope(2), i7:Scope(2), s0:Scope(3), s1:Scope(4), s2:Scope(5), s3:Scope(6), s4:Scope(7), s5:Scope(8), s6:Scope(9), s7:Scope(10)})))))))
Func sig: (<ctx>:x) to {N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, i0: 0, i1: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, i7: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8 }
 1) { N: 1, i0: 0, i1: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, i7: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8 }
 2) { N: 0, i0: 1, i1: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, i7: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9 }
 3) { N: 1, i0: 1, i1: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, i7: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9 }
 4) { N: 0, i0: 2, i1: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, i7: 2, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10 }
 5) { N: 1, i0: 2, i1: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, i7: 2, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10 }
 6) { N: 0, i0: 3, i1: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, i7: 3, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11 }
 7) { N: 1, i0: 3, i1: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, i7: 3, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11 }
 8) { N: 0, i0: 4, i1: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, i7: 4, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12 }
 9) { N: 1, i0: 4, i1: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, i7: 4, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12 }
10) { N: 0, i0: 5, i1: 5, i2: 5, i3: 5, i4: 5, i5: 5, i6: 5, i7: 5, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13 }
11) { N: 1, i0: 5, i1: 5, i2: 5, i3: 5, i4: 5, i5: 5, i6: 5, i7: 5, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13 }
12) { N: 0, i0: 6, i1: 6, i2: 6, i3: 6, i4: 6, i5: 6, i6: 6, i7: 6, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14 }
13) { N: 1, i0: 6, i1: 6, i2: 6, i3: 6, i4: 6, i5: 6, i6: 6, i7: 6, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14 }
14) { N: 0, i0: 7, i1: 7, i2: 7, i3: 7, i4: 7, i5: 7, i6: 7, i7: 7, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15 }
15) { N: 1, i0: 7, i1: 7, i2: 7, i3: 7, i4: 7, i5: 7, i6: 7, i7: 7, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15 }
16) { N: 0, i0: 8, i1: 8, i2: 8, i3: 8, i4: 8, i5: 8, i6: 8, i7: 8, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15, s7: 16 }
17) { N: 1, i0: 8, i1: 8, i2: 8, i3: 8, i4: 8, i5: 8, i6: 8, i7: 8, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15, s7: 16 }
18) { N: 0, i0: 9, i1: 9, i2: 9, i3: 9, i4: 9, i5: 9, i6: 9, i7: 9, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15, s6: 16, s7: 17 }
19) { N: 1, i0: 9, i1: 9, i2: 9, i3: 9, i4: 9, i5: 9, i6: 9, i7: 9, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15, s6: 16, s7: 17 }
20) { N: 0, i0: 10, i1: 10, i2: 10, i3: 10, i4: 10, i5: 10, i6: 10, i7: 10, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15, s5: 16, s6: 17, s7: 18 }
21) { N: 1, i0: 10, i1: 10, i2: 10, i3: 10, i4: 10, i5: 10, i6: 10, i7: 10, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15, s5: 16, s6: 17, s7: 18 }
22) { N: 0, i0: 11, i1: 11, i2: 11, i3: 11, i4: 11, i5: 11, i6: 11, i7: 11, s0: 12, s1: 13, s2: 14, s3: 15, s4: 16, s5: 17, s6: 18, s7: 19 }
23) { N: 1, i0: 11, i1: 11, i2: 11, i3: 11, i4: 11, i5: 11, i6: 11, i7: 11, s0: 12, s1: 13, s2: 14, s3: 15, s4: 16, s5: 17, s6: 18, s7: 19 }
*** Ctx ping count: 104
    [0](104): ChainMap(*2: Range(1, 20), *3: Range(2, 20), *4: Range(3, 20), *5: Range(4, 20), *6: Range(5, 20), *7: Range(6, 20), *8: Range(7, 20), *9: Range(8, 20), ForEach(*11: !10x, {N:*11, i0:#1, i1:#1, i2:#1, i3:#1, i4:#1, i5:#1, i6:#1, i7:#1, s0:*2, s1:*3, s2:*4, s3:*5, s4:*6, s5:*7, s6:*8, s7:*9}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), Range(2)->{ i0: #s0, i1: #s1, i2: #s2, i3: #s3, i4: #s4, i5: #s5, i6: #s6, i7: #s7, i8: #s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), Range(2)->{ i0 : #s0, i1 : #s1, i2 : #s2, i3 : #s3, i4 : #s4, i5 : #s5, i6 : #s6, i7 : #s7, i8 : #s8, s0, s1, s2, s3, s4, s5, s6, s7, s8, N : it }) : {N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*
BndKind:Call, Type:{N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:3] Call(∂.Range(1:i8, 20:i8):i8*), [map:4] Call(∂.Range(2:i8, 20:i8):i8*), [map:5] Call(∂.Range(3:i8, 20:i8):i8*), [map:6] Call(∂.Range(4:i8, 20:i8):i8*), [map:7] Call(∂.Range(5:i8, 20:i8):i8*), [map:8] Call(∂.Range(6:i8, 20:i8):i8*), [map:9] Call(∂.Range(7:i8, 20:i8):i8*), [map:10] Call(∂.Range(8:i8, 20:i8):i8*), [map:11] Call(∂.Range(9:i8, 20:i8):i8*), Call(∂.ForEach([map:12] Scope(1), {N:Scope(12), i0:Scope(2), i1:Scope(2), i2:Scope(2), i3:Scope(2), i4:Scope(2), i5:Scope(2), i6:Scope(2), i7:Scope(2), i8:Scope(2), s0:Scope(3), s1:Scope(4), s2:Scope(5), s3:Scope(6), s4:Scope(7), s5:Scope(8), s6:Scope(9), s7:Scope(10), s8:Scope(11)})))))))
Func sig: (<ctx>:x) to {N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
 0) { N: 0, i0: 0, i1: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, i7: 0, i8: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9 }
 1) { N: 1, i0: 0, i1: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, i7: 0, i8: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9 }
 2) { N: 0, i0: 1, i1: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, i7: 1, i8: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10 }
 3) { N: 1, i0: 1, i1: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, i7: 1, i8: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10 }
 4) { N: 0, i0: 2, i1: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, i7: 2, i8: 2, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11 }
 5) { N: 1, i0: 2, i1: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, i7: 2, i8: 2, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11 }
 6) { N: 0, i0: 3, i1: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, i7: 3, i8: 3, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12 }
 7) { N: 1, i0: 3, i1: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, i7: 3, i8: 3, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12 }
 8) { N: 0, i0: 4, i1: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, i7: 4, i8: 4, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13 }
 9) { N: 1, i0: 4, i1: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, i7: 4, i8: 4, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13 }
10) { N: 0, i0: 5, i1: 5, i2: 5, i3: 5, i4: 5, i5: 5, i6: 5, i7: 5, i8: 5, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14 }
11) { N: 1, i0: 5, i1: 5, i2: 5, i3: 5, i4: 5, i5: 5, i6: 5, i7: 5, i8: 5, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14 }
12) { N: 0, i0: 6, i1: 6, i2: 6, i3: 6, i4: 6, i5: 6, i6: 6, i7: 6, i8: 6, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15 }
13) { N: 1, i0: 6, i1: 6, i2: 6, i3: 6, i4: 6, i5: 6, i6: 6, i7: 6, i8: 6, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15 }
14) { N: 0, i0: 7, i1: 7, i2: 7, i3: 7, i4: 7, i5: 7, i6: 7, i7: 7, i8: 7, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15, s8: 16 }
15) { N: 1, i0: 7, i1: 7, i2: 7, i3: 7, i4: 7, i5: 7, i6: 7, i7: 7, i8: 7, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15, s8: 16 }
16) { N: 0, i0: 8, i1: 8, i2: 8, i3: 8, i4: 8, i5: 8, i6: 8, i7: 8, i8: 8, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15, s7: 16, s8: 17 }
17) { N: 1, i0: 8, i1: 8, i2: 8, i3: 8, i4: 8, i5: 8, i6: 8, i7: 8, i8: 8, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15, s7: 16, s8: 17 }
18) { N: 0, i0: 9, i1: 9, i2: 9, i3: 9, i4: 9, i5: 9, i6: 9, i7: 9, i8: 9, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15, s6: 16, s7: 17, s8: 18 }
19) { N: 1, i0: 9, i1: 9, i2: 9, i3: 9, i4: 9, i5: 9, i6: 9, i7: 9, i8: 9, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15, s6: 16, s7: 17, s8: 18 }
20) { N: 0, i0: 10, i1: 10, i2: 10, i3: 10, i4: 10, i5: 10, i6: 10, i7: 10, i8: 10, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15, s5: 16, s6: 17, s7: 18, s8: 19 }
21) { N: 1, i0: 10, i1: 10, i2: 10, i3: 10, i4: 10, i5: 10, i6: 10, i7: 10, i8: 10, s0: 11, s1: 12, s2: 13, s3: 14, s4: 15, s5: 16, s6: 17, s7: 18, s8: 19 }
*** Ctx ping count: 108
    [0](108): ChainMap(*2: Range(1, 20), *3: Range(2, 20), *4: Range(3, 20), *5: Range(4, 20), *6: Range(5, 20), *7: Range(6, 20), *8: Range(7, 20), *9: Range(8, 20), *10: Range(9, 20), ForEach(*12: !11x, {N:*12, i0:#1, i1:#1, i2:#1, i3:#1, i4:#1, i5:#1, i6:#1, i7:#1, i8:#1, s0:*2, s1:*3, s2:*4, s3:*5, s4:*6, s5:*7, s6:*8, s7:*9, s8:*10}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), Range(2)->{ i0: #s0, i1: #s1, i2: #s2, i3: #s3, i4: #s4, i5: #s5, i6: #s6, i7: #s7, i8: #s8, i9: #s9, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), Range(2)->{ i0 : #s0, i1 : #s1, i2 : #s2, i3 : #s3, i4 : #s4, i5 : #s5, i6 : #s6, i7 : #s7, i8 : #s8, i9 : #s9, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N : it }) : {N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:3] Call(∂.Range(1:i8, 20:i8):i8*), [map:4] Call(∂.Range(2:i8, 20:i8):i8*), [map:5] Call(∂.Range(3:i8, 20:i8):i8*), [map:6] Call(∂.Range(4:i8, 20:i8):i8*), [map:7] Call(∂.Range(5:i8, 20:i8):i8*), [map:8] Call(∂.Range(6:i8, 20:i8):i8*), [map:9] Call(∂.Range(7:i8, 20:i8):i8*), [map:10] Call(∂.Range(8:i8, 20:i8):i8*), [map:11] Call(∂.Range(9:i8, 20:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), Call(∂.ForEach([map:13] Scope(1), {N:Scope(13), i0:Scope(2), i1:Scope(2), i2:Scope(2), i3:Scope(2), i4:Scope(2), i5:Scope(2), i6:Scope(2), i7:Scope(2), i8:Scope(2), i9:Scope(2), s0:Scope(3), s1:Scope(4), s2:Scope(5), s3:Scope(6), s4:Scope(7), s5:Scope(8), s6:Scope(9), s7:Scope(10), s8:Scope(11), s9:Scope(12)})))))))
Func sig: (<ctx>:x) to {N:i8, i0:i8, i1:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,...}>
 0) { N: 0, i0: 0, i1: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, i7: 0, i8: 0, i9: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 1) { N: 1, i0: 0, i1: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, i7: 0, i8: 0, i9: 0, s0: 1, s1: 2, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 2) { N: 0, i0: 1, i1: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, i7: 1, i8: 1, i9: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 3) { N: 1, i0: 1, i1: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, i7: 1, i8: 1, i9: 1, s0: 2, s1: 3, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 4) { N: 0, i0: 2, i1: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, i7: 2, i8: 2, i9: 2, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 5) { N: 1, i0: 2, i1: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, i7: 2, i8: 2, i9: 2, s0: 3, s1: 4, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 6) { N: 0, i0: 3, i1: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, i7: 3, i8: 3, i9: 3, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 7) { N: 1, i0: 3, i1: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, i7: 3, i8: 3, i9: 3, s0: 4, s1: 5, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 8) { N: 0, i0: 4, i1: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, i7: 4, i8: 4, i9: 4, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
 9) { N: 1, i0: 4, i1: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, i7: 4, i8: 4, i9: 4, s0: 5, s1: 6, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
10) { N: 0, i0: 5, i1: 5, i2: 5, i3: 5, i4: 5, i5: 5, i6: 5, i7: 5, i8: 5, i9: 5, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
11) { N: 1, i0: 5, i1: 5, i2: 5, i3: 5, i4: 5, i5: 5, i6: 5, i7: 5, i8: 5, i9: 5, s0: 6, s1: 7, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
12) { N: 0, i0: 6, i1: 6, i2: 6, i3: 6, i4: 6, i5: 6, i6: 6, i7: 6, i8: 6, i9: 6, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15, s9: 16 }
13) { N: 1, i0: 6, i1: 6, i2: 6, i3: 6, i4: 6, i5: 6, i6: 6, i7: 6, i8: 6, i9: 6, s0: 7, s1: 8, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15, s9: 16 }
14) { N: 0, i0: 7, i1: 7, i2: 7, i3: 7, i4: 7, i5: 7, i6: 7, i7: 7, i8: 7, i9: 7, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15, s8: 16, s9: 17 }
15) { N: 1, i0: 7, i1: 7, i2: 7, i3: 7, i4: 7, i5: 7, i6: 7, i7: 7, i8: 7, i9: 7, s0: 8, s1: 9, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15, s8: 16, s9: 17 }
16) { N: 0, i0: 8, i1: 8, i2: 8, i3: 8, i4: 8, i5: 8, i6: 8, i7: 8, i8: 8, i9: 8, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15, s7: 16, s8: 17, s9: 18 }
17) { N: 1, i0: 8, i1: 8, i2: 8, i3: 8, i4: 8, i5: 8, i6: 8, i7: 8, i8: 8, i9: 8, s0: 9, s1: 10, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15, s7: 16, s8: 17, s9: 18 }
18) { N: 0, i0: 9, i1: 9, i2: 9, i3: 9, i4: 9, i5: 9, i6: 9, i7: 9, i8: 9, i9: 9, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15, s6: 16, s7: 17, s8: 18, s9: 19 }
19) { N: 1, i0: 9, i1: 9, i2: 9, i3: 9, i4: 9, i5: 9, i6: 9, i7: 9, i8: 9, i9: 9, s0: 10, s1: 11, s2: 12, s3: 13, s4: 14, s5: 15, s6: 16, s7: 17, s8: 18, s9: 19 }
*** Ctx ping count: 110
    [0](110): ChainMap(*2: Range(1, 20), *3: Range(2, 20), *4: Range(3, 20), *5: Range(4, 20), *6: Range(5, 20), *7: Range(6, 20), *8: Range(7, 20), *9: Range(8, 20), *10: Range(9, 20), *11: Range(10, 20), ForEach(*13: !12x, {N:*13, i0:#1, i1:#1, i2:#1, i3:#1, i4:#1, i5:#1, i6:#1, i7:#1, i8:#1, i9:#1, s0:*2, s1:*3, s2:*4, s3:*5, s4:*6, s5:*7, s6:*8, s7:*9, s8:*10, s9:*11}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), Range(2)->{ i0: #s0, i1: #s1, i2: #s2, i3: #s3, i4: #s4, i5: #s5, i6: #s6, i7: #s7, i8: #s8, i9: #s9, i10: #s10, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), Range(2)->{ i0 : #s0, i1 : #s1, i2 : #s2, i3 : #s3, i4 : #s4, i5 : #s5, i6 : #s6, i7 : #s7, i8 : #s8, i9 : #s9, i10 : #s10, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N : it }) : {N:i8, i0:i8, i1:i8, i10:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, i0:i8, i1:i8, i10:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:3] Call(∂.Range(1:i8, 20:i8):i8*), [map:4] Call(∂.Range(2:i8, 20:i8):i8*), [map:5] Call(∂.Range(3:i8, 20:i8):i8*), [map:6] Call(∂.Range(4:i8, 20:i8):i8*), [map:7] Call(∂.Range(5:i8, 20:i8):i8*), [map:8] Call(∂.Range(6:i8, 20:i8):i8*), [map:9] Call(∂.Range(7:i8, 20:i8):i8*), [map:10] Call(∂.Range(8:i8, 20:i8):i8*), [map:11] Call(∂.Range(9:i8, 20:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 20:i8):i8*), Call(∂.ForEach([map:14] Scope(1), {N:Scope(14), i0:Scope(2), i1:Scope(2), i10:Scope(2), i2:Scope(2), i3:Scope(2), i4:Scope(2), i5:Scope(2), i6:Scope(2), i7:Scope(2), i8:Scope(2), i9:Scope(2), s0:Scope(3), s1:Scope(4), s10:Scope(13), s2:Scope(5), s3:Scope(6), s4:Scope(7), s5:Scope(8), s6:Scope(9), s7:Scope(10), s8:Scope(11), s9:Scope(12)})))))))
Func sig: (<ctx>:x) to {N:i8, i0:i8, i1:i8, i10:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,...}>
 0) { N: 0, i0: 0, i1: 0, i10: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, i7: 0, i8: 0, i9: 0, s0: 1, s1: 2, s10: 11, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 1) { N: 1, i0: 0, i1: 0, i10: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, i7: 0, i8: 0, i9: 0, s0: 1, s1: 2, s10: 11, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 2) { N: 0, i0: 1, i1: 1, i10: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, i7: 1, i8: 1, i9: 1, s0: 2, s1: 3, s10: 12, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 3) { N: 1, i0: 1, i1: 1, i10: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, i7: 1, i8: 1, i9: 1, s0: 2, s1: 3, s10: 12, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 4) { N: 0, i0: 2, i1: 2, i10: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, i7: 2, i8: 2, i9: 2, s0: 3, s1: 4, s10: 13, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 5) { N: 1, i0: 2, i1: 2, i10: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, i7: 2, i8: 2, i9: 2, s0: 3, s1: 4, s10: 13, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 6) { N: 0, i0: 3, i1: 3, i10: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, i7: 3, i8: 3, i9: 3, s0: 4, s1: 5, s10: 14, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 7) { N: 1, i0: 3, i1: 3, i10: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, i7: 3, i8: 3, i9: 3, s0: 4, s1: 5, s10: 14, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 8) { N: 0, i0: 4, i1: 4, i10: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, i7: 4, i8: 4, i9: 4, s0: 5, s1: 6, s10: 15, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
 9) { N: 1, i0: 4, i1: 4, i10: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, i7: 4, i8: 4, i9: 4, s0: 5, s1: 6, s10: 15, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
10) { N: 0, i0: 5, i1: 5, i10: 5, i2: 5, i3: 5, i4: 5, i5: 5, i6: 5, i7: 5, i8: 5, i9: 5, s0: 6, s1: 7, s10: 16, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
11) { N: 1, i0: 5, i1: 5, i10: 5, i2: 5, i3: 5, i4: 5, i5: 5, i6: 5, i7: 5, i8: 5, i9: 5, s0: 6, s1: 7, s10: 16, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
12) { N: 0, i0: 6, i1: 6, i10: 6, i2: 6, i3: 6, i4: 6, i5: 6, i6: 6, i7: 6, i8: 6, i9: 6, s0: 7, s1: 8, s10: 17, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15, s9: 16 }
13) { N: 1, i0: 6, i1: 6, i10: 6, i2: 6, i3: 6, i4: 6, i5: 6, i6: 6, i7: 6, i8: 6, i9: 6, s0: 7, s1: 8, s10: 17, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15, s9: 16 }
14) { N: 0, i0: 7, i1: 7, i10: 7, i2: 7, i3: 7, i4: 7, i5: 7, i6: 7, i7: 7, i8: 7, i9: 7, s0: 8, s1: 9, s10: 18, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15, s8: 16, s9: 17 }
15) { N: 1, i0: 7, i1: 7, i10: 7, i2: 7, i3: 7, i4: 7, i5: 7, i6: 7, i7: 7, i8: 7, i9: 7, s0: 8, s1: 9, s10: 18, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15, s8: 16, s9: 17 }
16) { N: 0, i0: 8, i1: 8, i10: 8, i2: 8, i3: 8, i4: 8, i5: 8, i6: 8, i7: 8, i8: 8, i9: 8, s0: 9, s1: 10, s10: 19, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15, s7: 16, s8: 17, s9: 18 }
17) { N: 1, i0: 8, i1: 8, i10: 8, i2: 8, i3: 8, i4: 8, i5: 8, i6: 8, i7: 8, i8: 8, i9: 8, s0: 9, s1: 10, s10: 19, s2: 11, s3: 12, s4: 13, s5: 14, s6: 15, s7: 16, s8: 17, s9: 18 }
*** Ctx ping count: 110
    [0](110): ChainMap(*2: Range(1, 20), *3: Range(2, 20), *4: Range(3, 20), *5: Range(4, 20), *6: Range(5, 20), *7: Range(6, 20), *8: Range(7, 20), *9: Range(8, 20), *10: Range(9, 20), *11: Range(10, 20), *12: Range(11, 20), ForEach(*14: !13x, {N:*14, i0:#1, i1:#1, i10:#1, i2:#1, i3:#1, i4:#1, i5:#1, i6:#1, i7:#1, i8:#1, i9:#1, s0:*2, s1:*3, s10:*12, s2:*4, s3:*5, s4:*6, s5:*7, s6:*8, s7:*9, s8:*10, s9:*11}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), Range(2)->{ i0: #s0, i1: #s1, i2: #s2, i3: #s3, i4: #s4, i5: #s5, i6: #s6, i7: #s7, i8: #s8, i9: #s9, i10: #s10, i11: #s11, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), Range(2)->{ i0 : #s0, i1 : #s1, i2 : #s2, i3 : #s3, i4 : #s4, i5 : #s5, i6 : #s6, i7 : #s7, i8 : #s8, i9 : #s9, i10 : #s10, i11 : #s11, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N : it }) : {N:i8, i0:i8, i1:i8, i10:i8, i11:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, i0:i8, i1:i8, i10:i8, i11:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:3] Call(∂.Range(1:i8, 20:i8):i8*), [map:4] Call(∂.Range(2:i8, 20:i8):i8*), [map:5] Call(∂.Range(3:i8, 20:i8):i8*), [map:6] Call(∂.Range(4:i8, 20:i8):i8*), [map:7] Call(∂.Range(5:i8, 20:i8):i8*), [map:8] Call(∂.Range(6:i8, 20:i8):i8*), [map:9] Call(∂.Range(7:i8, 20:i8):i8*), [map:10] Call(∂.Range(8:i8, 20:i8):i8*), [map:11] Call(∂.Range(9:i8, 20:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 20:i8):i8*), [map:14] Call(∂.Range(12:i8, 20:i8):i8*), Call(∂.ForEach([map:15] Scope(1), {N:Scope(15), i0:Scope(2), i1:Scope(2), i10:Scope(2), i11:Scope(2), i2:Scope(2), i3:Scope(2), i4:Scope(2), i5:Scope(2), i6:Scope(2), i7:Scope(2), i8:Scope(2), i9:Scope(2), s0:Scope(3), s1:Scope(4), s10:Scope(13), s11:Scope(14), s2:Scope(5), s3:Scope(6), s4:Scope(7), s5:Scope(8), s6:Scope(9), s7:Scope(10), s8:Scope(11), s9:Scope(12)})))))))
Func sig: (<ctx>:x) to {N:i8, i0:i8, i1:i8, i10:i8, i11:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,...}>
 0) { N: 0, i0: 0, i1: 0, i10: 0, i11: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, i7: 0, i8: 0, i9: 0, s0: 1, s1: 2, s10: 11, s11: 12, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 1) { N: 1, i0: 0, i1: 0, i10: 0, i11: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, i7: 0, i8: 0, i9: 0, s0: 1, s1: 2, s10: 11, s11: 12, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 2) { N: 0, i0: 1, i1: 1, i10: 1, i11: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, i7: 1, i8: 1, i9: 1, s0: 2, s1: 3, s10: 12, s11: 13, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 3) { N: 1, i0: 1, i1: 1, i10: 1, i11: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, i7: 1, i8: 1, i9: 1, s0: 2, s1: 3, s10: 12, s11: 13, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 4) { N: 0, i0: 2, i1: 2, i10: 2, i11: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, i7: 2, i8: 2, i9: 2, s0: 3, s1: 4, s10: 13, s11: 14, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 5) { N: 1, i0: 2, i1: 2, i10: 2, i11: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, i7: 2, i8: 2, i9: 2, s0: 3, s1: 4, s10: 13, s11: 14, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 6) { N: 0, i0: 3, i1: 3, i10: 3, i11: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, i7: 3, i8: 3, i9: 3, s0: 4, s1: 5, s10: 14, s11: 15, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 7) { N: 1, i0: 3, i1: 3, i10: 3, i11: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, i7: 3, i8: 3, i9: 3, s0: 4, s1: 5, s10: 14, s11: 15, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 8) { N: 0, i0: 4, i1: 4, i10: 4, i11: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, i7: 4, i8: 4, i9: 4, s0: 5, s1: 6, s10: 15, s11: 16, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
 9) { N: 1, i0: 4, i1: 4, i10: 4, i11: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, i7: 4, i8: 4, i9: 4, s0: 5, s1: 6, s10: 15, s11: 16, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
10) { N: 0, i0: 5, i1: 5, i10: 5, i11: 5, i2: 5, i3: 5, i4: 5, i5: 5, i6: 5, i7: 5, i8: 5, i9: 5, s0: 6, s1: 7, s10: 16, s11: 17, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
11) { N: 1, i0: 5, i1: 5, i10: 5, i11: 5, i2: 5, i3: 5, i4: 5, i5: 5, i6: 5, i7: 5, i8: 5, i9: 5, s0: 6, s1: 7, s10: 16, s11: 17, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
12) { N: 0, i0: 6, i1: 6, i10: 6, i11: 6, i2: 6, i3: 6, i4: 6, i5: 6, i6: 6, i7: 6, i8: 6, i9: 6, s0: 7, s1: 8, s10: 17, s11: 18, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15, s9: 16 }
13) { N: 1, i0: 6, i1: 6, i10: 6, i11: 6, i2: 6, i3: 6, i4: 6, i5: 6, i6: 6, i7: 6, i8: 6, i9: 6, s0: 7, s1: 8, s10: 17, s11: 18, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15, s9: 16 }
14) { N: 0, i0: 7, i1: 7, i10: 7, i11: 7, i2: 7, i3: 7, i4: 7, i5: 7, i6: 7, i7: 7, i8: 7, i9: 7, s0: 8, s1: 9, s10: 18, s11: 19, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15, s8: 16, s9: 17 }
15) { N: 1, i0: 7, i1: 7, i10: 7, i11: 7, i2: 7, i3: 7, i4: 7, i5: 7, i6: 7, i7: 7, i8: 7, i9: 7, s0: 8, s1: 9, s10: 18, s11: 19, s2: 10, s3: 11, s4: 12, s5: 13, s6: 14, s7: 15, s8: 16, s9: 17 }
*** Ctx ping count: 108
    [0](108): ChainMap(*2: Range(1, 20), *3: Range(2, 20), *4: Range(3, 20), *5: Range(4, 20), *6: Range(5, 20), *7: Range(6, 20), *8: Range(7, 20), *9: Range(8, 20), *10: Range(9, 20), *11: Range(10, 20), *12: Range(11, 20), *13: Range(12, 20), ForEach(*15: !14x, {N:*15, i0:#1, i1:#1, i10:#1, i11:#1, i2:#1, i3:#1, i4:#1, i5:#1, i6:#1, i7:#1, i8:#1, i9:#1, s0:*2, s1:*3, s10:*12, s11:*13, s2:*4, s3:*5, s4:*6, s5:*7, s6:*8, s7:*9, s8:*10, s9:*11}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), Range(2)->{ i0: #s0, i1: #s1, i2: #s2, i3: #s3, i4: #s4, i5: #s5, i6: #s6, i7: #s7, i8: #s8, i9: #s9, i10: #s10, i11: #s11, i12: #s12, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), Range(2)->{ i0 : #s0, i1 : #s1, i2 : #s2, i3 : #s3, i4 : #s4, i5 : #s5, i6 : #s6, i7 : #s7, i8 : #s8, i9 : #s9, i10 : #s10, i11 : #s11, i12 : #s12, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N : it }) : {N:i8, i0:i8, i1:i8, i10:i8, i11:i8, i12:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, i0:i8, i1:i8, i10:i8, i11:i8, i12:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:3] Call(∂.Range(1:i8, 20:i8):i8*), [map:4] Call(∂.Range(2:i8, 20:i8):i8*), [map:5] Call(∂.Range(3:i8, 20:i8):i8*), [map:6] Call(∂.Range(4:i8, 20:i8):i8*), [map:7] Call(∂.Range(5:i8, 20:i8):i8*), [map:8] Call(∂.Range(6:i8, 20:i8):i8*), [map:9] Call(∂.Range(7:i8, 20:i8):i8*), [map:10] Call(∂.Range(8:i8, 20:i8):i8*), [map:11] Call(∂.Range(9:i8, 20:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 20:i8):i8*), [map:14] Call(∂.Range(12:i8, 20:i8):i8*), [map:15] Call(∂.Range(13:i8, 20:i8):i8*), Call(∂.ForEach([map:16] Scope(1), {N:Scope(16), i0:Scope(2), i1:Scope(2), i10:Scope(2), i11:Scope(2), i12:Scope(2), i2:Scope(2), i3:Scope(2), i4:Scope(2), i5:Scope(2), i6:Scope(2), i7:Scope(2), i8:Scope(2), i9:Scope(2), s0:Scope(3), s1:Scope(4), s10:Scope(13), s11:Scope(14), s12:Scope(15), s2:Scope(5), s3:Scope(6), s4:Scope(7), s5:Scope(8), s6:Scope(9), s7:Scope(10), s8:Scope(11), s9:Scope(12)})))))))
Func sig: (<ctx>:x) to {N:i8, i0:i8, i1:i8, i10:i8, i11:i8, i12:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,...}>
 0) { N: 0, i0: 0, i1: 0, i10: 0, i11: 0, i12: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, i7: 0, i8: 0, i9: 0, s0: 1, s1: 2, s10: 11, s11: 12, s12: 13, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 1) { N: 1, i0: 0, i1: 0, i10: 0, i11: 0, i12: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, i7: 0, i8: 0, i9: 0, s0: 1, s1: 2, s10: 11, s11: 12, s12: 13, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 2) { N: 0, i0: 1, i1: 1, i10: 1, i11: 1, i12: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, i7: 1, i8: 1, i9: 1, s0: 2, s1: 3, s10: 12, s11: 13, s12: 14, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 3) { N: 1, i0: 1, i1: 1, i10: 1, i11: 1, i12: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, i7: 1, i8: 1, i9: 1, s0: 2, s1: 3, s10: 12, s11: 13, s12: 14, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 4) { N: 0, i0: 2, i1: 2, i10: 2, i11: 2, i12: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, i7: 2, i8: 2, i9: 2, s0: 3, s1: 4, s10: 13, s11: 14, s12: 15, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 5) { N: 1, i0: 2, i1: 2, i10: 2, i11: 2, i12: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, i7: 2, i8: 2, i9: 2, s0: 3, s1: 4, s10: 13, s11: 14, s12: 15, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 6) { N: 0, i0: 3, i1: 3, i10: 3, i11: 3, i12: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, i7: 3, i8: 3, i9: 3, s0: 4, s1: 5, s10: 14, s11: 15, s12: 16, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 7) { N: 1, i0: 3, i1: 3, i10: 3, i11: 3, i12: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, i7: 3, i8: 3, i9: 3, s0: 4, s1: 5, s10: 14, s11: 15, s12: 16, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 8) { N: 0, i0: 4, i1: 4, i10: 4, i11: 4, i12: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, i7: 4, i8: 4, i9: 4, s0: 5, s1: 6, s10: 15, s11: 16, s12: 17, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
 9) { N: 1, i0: 4, i1: 4, i10: 4, i11: 4, i12: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, i7: 4, i8: 4, i9: 4, s0: 5, s1: 6, s10: 15, s11: 16, s12: 17, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
10) { N: 0, i0: 5, i1: 5, i10: 5, i11: 5, i12: 5, i2: 5, i3: 5, i4: 5, i5: 5, i6: 5, i7: 5, i8: 5, i9: 5, s0: 6, s1: 7, s10: 16, s11: 17, s12: 18, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
11) { N: 1, i0: 5, i1: 5, i10: 5, i11: 5, i12: 5, i2: 5, i3: 5, i4: 5, i5: 5, i6: 5, i7: 5, i8: 5, i9: 5, s0: 6, s1: 7, s10: 16, s11: 17, s12: 18, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
12) { N: 0, i0: 6, i1: 6, i10: 6, i11: 6, i12: 6, i2: 6, i3: 6, i4: 6, i5: 6, i6: 6, i7: 6, i8: 6, i9: 6, s0: 7, s1: 8, s10: 17, s11: 18, s12: 19, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15, s9: 16 }
13) { N: 1, i0: 6, i1: 6, i10: 6, i11: 6, i12: 6, i2: 6, i3: 6, i4: 6, i5: 6, i6: 6, i7: 6, i8: 6, i9: 6, s0: 7, s1: 8, s10: 17, s11: 18, s12: 19, s2: 9, s3: 10, s4: 11, s5: 12, s6: 13, s7: 14, s8: 15, s9: 16 }
*** Ctx ping count: 104
    [0](104): ChainMap(*2: Range(1, 20), *3: Range(2, 20), *4: Range(3, 20), *5: Range(4, 20), *6: Range(5, 20), *7: Range(6, 20), *8: Range(7, 20), *9: Range(8, 20), *10: Range(9, 20), *11: Range(10, 20), *12: Range(11, 20), *13: Range(12, 20), *14: Range(13, 20), ForEach(*16: !15x, {N:*16, i0:#1, i1:#1, i10:#1, i11:#1, i12:#1, i2:#1, i3:#1, i4:#1, i5:#1, i6:#1, i7:#1, i8:#1, i9:#1, s0:*2, s1:*3, s10:*12, s11:*13, s12:*14, s2:*4, s3:*5, s4:*6, s5:*7, s6:*8, s7:*9, s8:*10, s9:*11}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), Range(2)->{ i0: #s0, i1: #s1, i2: #s2, i3: #s3, i4: #s4, i5: #s5, i6: #s6, i7: #s7, i8: #s8, i9: #s9, i10: #s10, i11: #s11, i12: #s12, i13: #s13, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), Range(2)->{ i0 : #s0, i1 : #s1, i2 : #s2, i3 : #s3, i4 : #s4, i5 : #s5, i6 : #s6, i7 : #s7, i8 : #s8, i9 : #s9, i10 : #s10, i11 : #s11, i12 : #s12, i13 : #s13, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N : it }) : {N:i8, i0:i8, i1:i8, i10:i8, i11:i8, i12:i8, i13:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, i0:i8, i1:i8, i10:i8, i11:i8, i12:i8, i13:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:3] Call(∂.Range(1:i8, 20:i8):i8*), [map:4] Call(∂.Range(2:i8, 20:i8):i8*), [map:5] Call(∂.Range(3:i8, 20:i8):i8*), [map:6] Call(∂.Range(4:i8, 20:i8):i8*), [map:7] Call(∂.Range(5:i8, 20:i8):i8*), [map:8] Call(∂.Range(6:i8, 20:i8):i8*), [map:9] Call(∂.Range(7:i8, 20:i8):i8*), [map:10] Call(∂.Range(8:i8, 20:i8):i8*), [map:11] Call(∂.Range(9:i8, 20:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 20:i8):i8*), [map:14] Call(∂.Range(12:i8, 20:i8):i8*), [map:15] Call(∂.Range(13:i8, 20:i8):i8*), [map:16] Call(∂.Range(14:i8, 20:i8):i8*), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), i0:Scope(2), i1:Scope(2), i10:Scope(2), i11:Scope(2), i12:Scope(2), i13:Scope(2), i2:Scope(2), i3:Scope(2), i4:Scope(2), i5:Scope(2), i6:Scope(2), i7:Scope(2), i8:Scope(2), i9:Scope(2), s0:Scope(3), s1:Scope(4), s10:Scope(13), s11:Scope(14), s12:Scope(15), s13:Scope(16), s2:Scope(5), s3:Scope(6), s4:Scope(7), s5:Scope(8), s6:Scope(9), s7:Scope(10), s8:Scope(11), s9:Scope(12)})))))))
Func sig: (<ctx>:x) to {N:i8, i0:i8, i1:i8, i10:i8, i11:i8, i12:i8, i13:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,...}>
 0) { N: 0, i0: 0, i1: 0, i10: 0, i11: 0, i12: 0, i13: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, i7: 0, i8: 0, i9: 0, s0: 1, s1: 2, s10: 11, s11: 12, s12: 13, s13: 14, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 1) { N: 1, i0: 0, i1: 0, i10: 0, i11: 0, i12: 0, i13: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, i7: 0, i8: 0, i9: 0, s0: 1, s1: 2, s10: 11, s11: 12, s12: 13, s13: 14, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 2) { N: 0, i0: 1, i1: 1, i10: 1, i11: 1, i12: 1, i13: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, i7: 1, i8: 1, i9: 1, s0: 2, s1: 3, s10: 12, s11: 13, s12: 14, s13: 15, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 3) { N: 1, i0: 1, i1: 1, i10: 1, i11: 1, i12: 1, i13: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, i7: 1, i8: 1, i9: 1, s0: 2, s1: 3, s10: 12, s11: 13, s12: 14, s13: 15, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 4) { N: 0, i0: 2, i1: 2, i10: 2, i11: 2, i12: 2, i13: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, i7: 2, i8: 2, i9: 2, s0: 3, s1: 4, s10: 13, s11: 14, s12: 15, s13: 16, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 5) { N: 1, i0: 2, i1: 2, i10: 2, i11: 2, i12: 2, i13: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, i7: 2, i8: 2, i9: 2, s0: 3, s1: 4, s10: 13, s11: 14, s12: 15, s13: 16, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 6) { N: 0, i0: 3, i1: 3, i10: 3, i11: 3, i12: 3, i13: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, i7: 3, i8: 3, i9: 3, s0: 4, s1: 5, s10: 14, s11: 15, s12: 16, s13: 17, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 7) { N: 1, i0: 3, i1: 3, i10: 3, i11: 3, i12: 3, i13: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, i7: 3, i8: 3, i9: 3, s0: 4, s1: 5, s10: 14, s11: 15, s12: 16, s13: 17, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 8) { N: 0, i0: 4, i1: 4, i10: 4, i11: 4, i12: 4, i13: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, i7: 4, i8: 4, i9: 4, s0: 5, s1: 6, s10: 15, s11: 16, s12: 17, s13: 18, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
 9) { N: 1, i0: 4, i1: 4, i10: 4, i11: 4, i12: 4, i13: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, i7: 4, i8: 4, i9: 4, s0: 5, s1: 6, s10: 15, s11: 16, s12: 17, s13: 18, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
10) { N: 0, i0: 5, i1: 5, i10: 5, i11: 5, i12: 5, i13: 5, i2: 5, i3: 5, i4: 5, i5: 5, i6: 5, i7: 5, i8: 5, i9: 5, s0: 6, s1: 7, s10: 16, s11: 17, s12: 18, s13: 19, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
11) { N: 1, i0: 5, i1: 5, i10: 5, i11: 5, i12: 5, i13: 5, i2: 5, i3: 5, i4: 5, i5: 5, i6: 5, i7: 5, i8: 5, i9: 5, s0: 6, s1: 7, s10: 16, s11: 17, s12: 18, s13: 19, s2: 8, s3: 9, s4: 10, s5: 11, s6: 12, s7: 13, s8: 14, s9: 15 }
*** Ctx ping count: 98
    [0](98): ChainMap(*2: Range(1, 20), *3: Range(2, 20), *4: Range(3, 20), *5: Range(4, 20), *6: Range(5, 20), *7: Range(6, 20), *8: Range(7, 20), *9: Range(8, 20), *10: Range(9, 20), *11: Range(10, 20), *12: Range(11, 20), *13: Range(12, 20), *14: Range(13, 20), *15: Range(14, 20), ForEach(*17: !16x, {N:*17, i0:#1, i1:#1, i10:#1, i11:#1, i12:#1, i13:#1, i2:#1, i3:#1, i4:#1, i5:#1, i6:#1, i7:#1, i8:#1, i9:#1, s0:*2, s1:*3, s10:*12, s11:*13, s12:*14, s13:*15, s2:*4, s3:*5, s4:*6, s5:*7, s6:*8, s7:*9, s8:*10, s9:*11}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), Range(2)->{ i0: #s0, i1: #s1, i2: #s2, i3: #s3, i4: #s4, i5: #s5, i6: #s6, i7: #s7, i8: #s8, i9: #s9, i10: #s10, i11: #s11, i12: #s12, i13: #s13, i14: #s14, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), Range(2)->{ i0 : #s0, i1 : #s1, i2 : #s2, i3 : #s3, i4 : #s4, i5 : #s5, i6 : #s6, i7 : #s7, i8 : #s8, i9 : #s9, i10 : #s10, i11 : #s11, i12 : #s12, i13 : #s13, i14 : #s14, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, i0:i8, i1:i8, i10:i8, i11:i8, i12:i8, i13:i8, i14:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, i0:i8, i1:i8, i10:i8, i11:i8, i12:i8, i13:i8, i14:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:3] Call(∂.Range(1:i8, 20:i8):i8*), [map:4] Call(∂.Range(2:i8, 20:i8):i8*), [map:5] Call(∂.Range(3:i8, 20:i8):i8*), [map:6] Call(∂.Range(4:i8, 20:i8):i8*), [map:7] Call(∂.Range(5:i8, 20:i8):i8*), [map:8] Call(∂.Range(6:i8, 20:i8):i8*), [map:9] Call(∂.Range(7:i8, 20:i8):i8*), [map:10] Call(∂.Range(8:i8, 20:i8):i8*), [map:11] Call(∂.Range(9:i8, 20:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 20:i8):i8*), [map:14] Call(∂.Range(12:i8, 20:i8):i8*), [map:15] Call(∂.Range(13:i8, 20:i8):i8*), [map:16] Call(∂.Range(14:i8, 20:i8):i8*), [map:17] Call(∂.Range(15:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), i0:Scope(2), i1:Scope(2), i10:Scope(2), i11:Scope(2), i12:Scope(2), i13:Scope(2), i14:Scope(2), i2:Scope(2), i3:Scope(2), i4:Scope(2), i5:Scope(2), i6:Scope(2), i7:Scope(2), i8:Scope(2), i9:Scope(2), s0:Scope(3), s1:Scope(4), s10:Scope(13), s11:Scope(14), s12:Scope(15), s13:Scope(16), s14:Scope(17), s2:Scope(5), s3:Scope(6), s4:Scope(7), s5:Scope(8), s6:Scope(9), s7:Scope(10), s8:Scope(11), s9:Scope(12)})))))))
Func sig: (<ctx>:x) to {N:i8, i0:i8, i1:i8, i10:i8, i11:i8, i12:i8, i13:i8, i14:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,...}>
 0) { N: 0, i0: 0, i1: 0, i10: 0, i11: 0, i12: 0, i13: 0, i14: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, i7: 0, i8: 0, i9: 0, s0: 1, s1: 2, s10: 11, s11: 12, s12: 13, s13: 14, s14: 15, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 1) { N: 1, i0: 0, i1: 0, i10: 0, i11: 0, i12: 0, i13: 0, i14: 0, i2: 0, i3: 0, i4: 0, i5: 0, i6: 0, i7: 0, i8: 0, i9: 0, s0: 1, s1: 2, s10: 11, s11: 12, s12: 13, s13: 14, s14: 15, s2: 3, s3: 4, s4: 5, s5: 6, s6: 7, s7: 8, s8: 9, s9: 10 }
 2) { N: 0, i0: 1, i1: 1, i10: 1, i11: 1, i12: 1, i13: 1, i14: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, i7: 1, i8: 1, i9: 1, s0: 2, s1: 3, s10: 12, s11: 13, s12: 14, s13: 15, s14: 16, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 3) { N: 1, i0: 1, i1: 1, i10: 1, i11: 1, i12: 1, i13: 1, i14: 1, i2: 1, i3: 1, i4: 1, i5: 1, i6: 1, i7: 1, i8: 1, i9: 1, s0: 2, s1: 3, s10: 12, s11: 13, s12: 14, s13: 15, s14: 16, s2: 4, s3: 5, s4: 6, s5: 7, s6: 8, s7: 9, s8: 10, s9: 11 }
 4) { N: 0, i0: 2, i1: 2, i10: 2, i11: 2, i12: 2, i13: 2, i14: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, i7: 2, i8: 2, i9: 2, s0: 3, s1: 4, s10: 13, s11: 14, s12: 15, s13: 16, s14: 17, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 5) { N: 1, i0: 2, i1: 2, i10: 2, i11: 2, i12: 2, i13: 2, i14: 2, i2: 2, i3: 2, i4: 2, i5: 2, i6: 2, i7: 2, i8: 2, i9: 2, s0: 3, s1: 4, s10: 13, s11: 14, s12: 15, s13: 16, s14: 17, s2: 5, s3: 6, s4: 7, s5: 8, s6: 9, s7: 10, s8: 11, s9: 12 }
 6) { N: 0, i0: 3, i1: 3, i10: 3, i11: 3, i12: 3, i13: 3, i14: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, i7: 3, i8: 3, i9: 3, s0: 4, s1: 5, s10: 14, s11: 15, s12: 16, s13: 17, s14: 18, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 7) { N: 1, i0: 3, i1: 3, i10: 3, i11: 3, i12: 3, i13: 3, i14: 3, i2: 3, i3: 3, i4: 3, i5: 3, i6: 3, i7: 3, i8: 3, i9: 3, s0: 4, s1: 5, s10: 14, s11: 15, s12: 16, s13: 17, s14: 18, s2: 6, s3: 7, s4: 8, s5: 9, s6: 10, s7: 11, s8: 12, s9: 13 }
 8) { N: 0, i0: 4, i1: 4, i10: 4, i11: 4, i12: 4, i13: 4, i14: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, i7: 4, i8: 4, i9: 4, s0: 5, s1: 6, s10: 15, s11: 16, s12: 17, s13: 18, s14: 19, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
 9) { N: 1, i0: 4, i1: 4, i10: 4, i11: 4, i12: 4, i13: 4, i14: 4, i2: 4, i3: 4, i4: 4, i5: 4, i6: 4, i7: 4, i8: 4, i9: 4, s0: 5, s1: 6, s10: 15, s11: 16, s12: 17, s13: 18, s14: 19, s2: 7, s3: 8, s4: 9, s5: 10, s6: 11, s7: 12, s8: 13, s9: 14 }
*** Ctx ping count: 90
    [0](90): ChainMap(*2: Range(1, 20), *3: Range(2, 20), *4: Range(3, 20), *5: Range(4, 20), *6: Range(5, 20), *7: Range(6, 20), *8: Range(7, 20), *9: Range(8, 20), *10: Range(9, 20), *11: Range(10, 20), *12: Range(11, 20), *13: Range(12, 20), *14: Range(13, 20), *15: Range(14, 20), *16: Range(15, 20), ForEach(*18: !17x, {N:*18, i0:#1, i1:#1, i10:#1, i11:#1, i12:#1, i13:#1, i14:#1, i2:#1, i3:#1, i4:#1, i5:#1, i6:#1, i7:#1, i8:#1, i9:#1, s0:*2, s1:*3, s10:*12, s11:*13, s12:*14, s13:*15, s14:*16, s2:*4, s3:*5, s4:*6, s5:*7, s6:*8, s7:*9, s8:*10, s9:*11}))
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), s15: Range(16, 20), Range(2)->{ i0: #s0, i1: #s1, i2: #s2, i3: #s3, i4: #s4, i5: #s5, i6: #s6, i7: #s7, i8: #s8, i9: #s9, i10: #s10, i11: #s11, i12: #s12, i13: #s13, i14: #s14, i15: #s15, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), s15 : Range(16, 20), Range(2)->{ i0 : #s0, i1 : #s1, i2 : #s2, i3 : #s3, i4 : #s4, i5 : #s5, i6 : #s6, i7 : #s7, i8 : #s8, i9 : #s9, i10 : #s10, i11 : #s11, i12 : #s12, i13 : #s13, i14 : #s14, i15 : #s15, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, i0:i8, i1:i8, i10:i8, i11:i8, i12:i8, i13:i8, i14:i8, i15:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, i0:i8, i1:i8, i10:i8, i11:i8, i12:i8, i13:i8, i14:i8, i15:i8, i2:i8, i3:i8, i4:i8, i5:i8, i6:i8, i7:i8, i8:i8, i9:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:3] Call(∂.Range(1:i8, 20:i8):i8*), [map:4] Call(∂.Range(2:i8, 20:i8):i8*), [map:5] Call(∂.Range(3:i8, 20:i8):i8*), [map:6] Call(∂.Range(4:i8, 20:i8):i8*), [map:7] Call(∂.Range(5:i8, 20:i8):i8*), [map:8] Call(∂.Range(6:i8, 20:i8):i8*), [map:9] Call(∂.Range(7:i8, 20:i8):i8*), [map:10] Call(∂.Range(8:i8, 20:i8):i8*), [map:11] Call(∂.Range(9:i8, 20:i8):i8*), [map:12] Call(∂.Range(10:i8, 20:i8):i8*), [map:13] Call(∂.Range(11:i8, 20:i8):i8*), [map:14] Call(∂.Range(12:i8, 20:i8):i8*), [map:15] Call(∂.Range(13:i8, 20:i8):i8*), [map:16] Call(∂.Range(14:i8, 20:i8):i8*), [map:17] Call(∂.Range(15:i8, 20:i8):i8*), [map:18] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:19] Scope(1), {N:Scope(19), i0:Scope(2), i1:Scope(2), i10:Scope(2), i11:Scope(2), i12:Scope(2), i13:Scope(2), i14:Scope(2), i15:Scope(2), i2:Scope(2), i3:Scope(2), i4:Scope(2), i5:Scope(2), i6:Scope(2), i7:Scope(2), i8:Scope(2), i9:Scope(2), s0:Scope(3), s1:Scope(4), s10:Scope(13), s11:Scope(14), s12:Scope(15), s13:Scope(16), s14:Scope(17), s15:Scope(18), s2:Scope(5), s3:Scope(6), s4:Scope(7), s5:Scope(8), s6:Scope(9), s7:Scope(10), s8:Scope(11), s9:Scope(12)})))))))
*** NYI Exception: 'More than 16 parameters used'
###

**** New definitions: e, type: v*

> ChainMap(s0:e, Range(2)->{ s0, N:it })
ChainMap(s0 : e, Range(2)->{ s0, N : it }) : {N:i8, s0:v}*
BndKind:Call, Type:{N:i8, s0:v}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Global(e), Call(∂.ForEach([map:3] Scope(1), {N:Scope(3), s0:Scope(2)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:v}*
Sequence: Seq<{i8,obj}>
*** Ctx ping count: 0
###
> ChainMap(s0:e, s1: Range(2, 20), Range(2)->{ s0, s1, N:it })
ChainMap(s0 : e, s1 : Range(2, 20), Range(2)->{ s0, s1, N : it }) : {N:i8, s0:v, s1:i8}*
BndKind:Call, Type:{N:i8, s0:v, s1:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), Call(∂.ForEach([map:4] Scope(1), {N:Scope(4), s0:Scope(2), s1:Scope(3)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:v, s1:i8}*
Sequence: Seq<{i8,obj,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1:e, Range(2)->{ s0, s1, N:it })
ChainMap(s0 : Range(1, 20), s1 : e, Range(2)->{ s0, s1, N : it }) : {N:i8, s0:i8, s1:v}*
BndKind:Call, Type:{N:i8, s0:i8, s1:v}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Global(e), Call(∂.ForEach([map:4] Scope(1), {N:Scope(4), s0:Scope(2), s1:Scope(3)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:v}*
Sequence: Seq<{i8,i8,obj}>
*** Ctx ping count: 0
###
> ChainMap(s0:e, s1: Range(2, 20), s2: Range(3, 20), Range(2)->{ s0, s1, s2, N:it })
ChainMap(s0 : e, s1 : Range(2, 20), s2 : Range(3, 20), Range(2)->{ s0, s1, s2, N : it }) : {N:i8, s0:v, s1:i8, s2:i8}*
BndKind:Call, Type:{N:i8, s0:v, s1:i8, s2:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), Call(∂.ForEach([map:5] Scope(1), {N:Scope(5), s0:Scope(2), s1:Scope(3), s2:Scope(4)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:v, s1:i8, s2:i8}*
Sequence: Seq<{i8,obj,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1:e, s2: Range(3, 20), Range(2)->{ s0, s1, s2, N:it })
ChainMap(s0 : Range(1, 20), s1 : e, s2 : Range(3, 20), Range(2)->{ s0, s1, s2, N : it }) : {N:i8, s0:i8, s1:v, s2:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:v, s2:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), Call(∂.ForEach([map:5] Scope(1), {N:Scope(5), s0:Scope(2), s1:Scope(3), s2:Scope(4)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:v, s2:i8}*
Sequence: Seq<{i8,i8,obj,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2:e, Range(2)->{ s0, s1, s2, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : e, Range(2)->{ s0, s1, s2, N : it }) : {N:i8, s0:i8, s1:i8, s2:v}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:v}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Global(e), Call(∂.ForEach([map:5] Scope(1), {N:Scope(5), s0:Scope(2), s1:Scope(3), s2:Scope(4)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:v}*
Sequence: Seq<{i8,i8,i8,obj}>
*** Ctx ping count: 0
###
> ChainMap(s0:e, s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), Range(2)->{ s0, s1, s2, s3, N:it })
ChainMap(s0 : e, s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), Range(2)->{ s0, s1, s2, s3, N : it }) : {N:i8, s0:v, s1:i8, s2:i8, s3:i8}*
BndKind:Call, Type:{N:i8, s0:v, s1:i8, s2:i8, s3:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), Call(∂.ForEach([map:6] Scope(1), {N:Scope(6), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:v, s1:i8, s2:i8, s3:i8}*
Sequence: Seq<{i8,obj,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1:e, s2: Range(3, 20), s3: Range(4, 20), Range(2)->{ s0, s1, s2, s3, N:it })
ChainMap(s0 : Range(1, 20), s1 : e, s2 : Range(3, 20), s3 : Range(4, 20), Range(2)->{ s0, s1, s2, s3, N : it }) : {N:i8, s0:i8, s1:v, s2:i8, s3:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:v, s2:i8, s3:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), Call(∂.ForEach([map:6] Scope(1), {N:Scope(6), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:v, s2:i8, s3:i8}*
Sequence: Seq<{i8,i8,obj,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2:e, s3: Range(4, 20), Range(2)->{ s0, s1, s2, s3, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : e, s3 : Range(4, 20), Range(2)->{ s0, s1, s2, s3, N : it }) : {N:i8, s0:i8, s1:i8, s2:v, s3:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:v, s3:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), Call(∂.ForEach([map:6] Scope(1), {N:Scope(6), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:v, s3:i8}*
Sequence: Seq<{i8,i8,i8,obj,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3:e, Range(2)->{ s0, s1, s2, s3, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : e, Range(2)->{ s0, s1, s2, s3, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:v}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:v}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Global(e), Call(∂.ForEach([map:6] Scope(1), {N:Scope(6), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:v}*
Sequence: Seq<{i8,i8,i8,i8,obj}>
*** Ctx ping count: 0
###
> ChainMap(s0:e, s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), Range(2)->{ s0, s1, s2, s3, s4, N:it })
ChainMap(s0 : e, s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), Range(2)->{ s0, s1, s2, s3, s4, N : it }) : {N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8}*
BndKind:Call, Type:{N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), Call(∂.ForEach([map:7] Scope(1), {N:Scope(7), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8}*
Sequence: Seq<{i8,obj,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1:e, s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), Range(2)->{ s0, s1, s2, s3, s4, N:it })
ChainMap(s0 : Range(1, 20), s1 : e, s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), Range(2)->{ s0, s1, s2, s3, s4, N : it }) : {N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), Call(∂.ForEach([map:7] Scope(1), {N:Scope(7), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8}*
Sequence: Seq<{i8,i8,obj,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2:e, s3: Range(4, 20), s4: Range(5, 20), Range(2)->{ s0, s1, s2, s3, s4, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : e, s3 : Range(4, 20), s4 : Range(5, 20), Range(2)->{ s0, s1, s2, s3, s4, N : it }) : {N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), Call(∂.ForEach([map:7] Scope(1), {N:Scope(7), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8}*
Sequence: Seq<{i8,i8,i8,obj,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3:e, s4: Range(5, 20), Range(2)->{ s0, s1, s2, s3, s4, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : e, s4 : Range(5, 20), Range(2)->{ s0, s1, s2, s3, s4, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), Call(∂.ForEach([map:7] Scope(1), {N:Scope(7), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8}*
Sequence: Seq<{i8,i8,i8,i8,obj,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4:e, Range(2)->{ s0, s1, s2, s3, s4, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : e, Range(2)->{ s0, s1, s2, s3, s4, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Global(e), Call(∂.ForEach([map:7] Scope(1), {N:Scope(7), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v}*
Sequence: Seq<{i8,i8,i8,i8,i8,obj}>
*** Ctx ping count: 0
###
> ChainMap(s0:e, s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, N:it })
ChainMap(s0 : e, s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, N : it }) : {N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8}*
BndKind:Call, Type:{N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), Call(∂.ForEach([map:8] Scope(1), {N:Scope(8), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8}*
Sequence: Seq<{i8,obj,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1:e, s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, N:it })
ChainMap(s0 : Range(1, 20), s1 : e, s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, N : it }) : {N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8, s5:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8, s5:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), Call(∂.ForEach([map:8] Scope(1), {N:Scope(8), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8, s5:i8}*
Sequence: Seq<{i8,i8,obj,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2:e, s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : e, s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, N : it }) : {N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8, s5:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8, s5:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), Call(∂.ForEach([map:8] Scope(1), {N:Scope(8), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8, s5:i8}*
Sequence: Seq<{i8,i8,i8,obj,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3:e, s4: Range(5, 20), s5: Range(6, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : e, s4 : Range(5, 20), s5 : Range(6, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8, s5:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8, s5:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), Call(∂.ForEach([map:8] Scope(1), {N:Scope(8), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8, s5:i8}*
Sequence: Seq<{i8,i8,i8,i8,obj,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4:e, s5: Range(6, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : e, s5 : Range(6, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v, s5:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v, s5:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), Call(∂.ForEach([map:8] Scope(1), {N:Scope(8), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v, s5:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,obj,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5:e, Range(2)->{ s0, s1, s2, s3, s4, s5, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : e, Range(2)->{ s0, s1, s2, s3, s4, s5, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:v}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:v}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Global(e), Call(∂.ForEach([map:8] Scope(1), {N:Scope(8), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:v}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,obj}>
*** Ctx ping count: 0
###
> ChainMap(s0:e, s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, N:it })
ChainMap(s0 : e, s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, N : it }) : {N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8}*
BndKind:Call, Type:{N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), Call(∂.ForEach([map:9] Scope(1), {N:Scope(9), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8}*
Sequence: Seq<{i8,obj,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1:e, s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, N:it })
ChainMap(s0 : Range(1, 20), s1 : e, s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, N : it }) : {N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), Call(∂.ForEach([map:9] Scope(1), {N:Scope(9), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8}*
Sequence: Seq<{i8,i8,obj,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2:e, s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : e, s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, N : it }) : {N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), Call(∂.ForEach([map:9] Scope(1), {N:Scope(9), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8}*
Sequence: Seq<{i8,i8,i8,obj,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3:e, s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : e, s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), Call(∂.ForEach([map:9] Scope(1), {N:Scope(9), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8}*
Sequence: Seq<{i8,i8,i8,i8,obj,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4:e, s5: Range(6, 20), s6: Range(7, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : e, s5 : Range(6, 20), s6 : Range(7, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), Call(∂.ForEach([map:9] Scope(1), {N:Scope(9), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,obj,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5:e, s6: Range(7, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : e, s6 : Range(7, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), Call(∂.ForEach([map:9] Scope(1), {N:Scope(9), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,obj,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6:e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Global(e), Call(∂.ForEach([map:9] Scope(1), {N:Scope(9), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,obj}>
*** Ctx ping count: 0
###
> ChainMap(s0:e, s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N:it })
ChainMap(s0 : e, s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N : it }) : {N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8}*
BndKind:Call, Type:{N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), Call(∂.ForEach([map:10] Scope(1), {N:Scope(10), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8}*
Sequence: Seq<{i8,obj,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1:e, s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N:it })
ChainMap(s0 : Range(1, 20), s1 : e, s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N : it }) : {N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), Call(∂.ForEach([map:10] Scope(1), {N:Scope(10), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8}*
Sequence: Seq<{i8,i8,obj,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2:e, s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : e, s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N : it }) : {N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), Call(∂.ForEach([map:10] Scope(1), {N:Scope(10), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8}*
Sequence: Seq<{i8,i8,i8,obj,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3:e, s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : e, s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), Call(∂.ForEach([map:10] Scope(1), {N:Scope(10), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8}*
Sequence: Seq<{i8,i8,i8,i8,obj,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4:e, s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : e, s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), Call(∂.ForEach([map:10] Scope(1), {N:Scope(10), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,obj,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5:e, s6: Range(7, 20), s7: Range(8, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : e, s6 : Range(7, 20), s7 : Range(8, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), Call(∂.ForEach([map:10] Scope(1), {N:Scope(10), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,obj,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6:e, s7: Range(8, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : e, s7 : Range(8, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), Call(∂.ForEach([map:10] Scope(1), {N:Scope(10), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,obj,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7:e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Global(e), Call(∂.ForEach([map:10] Scope(1), {N:Scope(10), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,obj}>
*** Ctx ping count: 0
###
> ChainMap(s0:e, s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N:it })
ChainMap(s0 : e, s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N : it }) : {N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*
BndKind:Call, Type:{N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), Call(∂.ForEach([map:11] Scope(1), {N:Scope(11), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*
Sequence: Seq<{i8,obj,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1:e, s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N:it })
ChainMap(s0 : Range(1, 20), s1 : e, s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N : it }) : {N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), Call(∂.ForEach([map:11] Scope(1), {N:Scope(11), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*
Sequence: Seq<{i8,i8,obj,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2:e, s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : e, s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N : it }) : {N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), Call(∂.ForEach([map:11] Scope(1), {N:Scope(11), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*
Sequence: Seq<{i8,i8,i8,obj,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3:e, s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : e, s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), Call(∂.ForEach([map:11] Scope(1), {N:Scope(11), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8}*
Sequence: Seq<{i8,i8,i8,i8,obj,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4:e, s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : e, s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), Call(∂.ForEach([map:11] Scope(1), {N:Scope(11), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,obj,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5:e, s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : e, s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), Call(∂.ForEach([map:11] Scope(1), {N:Scope(11), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,obj,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6:e, s7: Range(8, 20), s8: Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : e, s7 : Range(8, 20), s8 : Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), Call(∂.ForEach([map:11] Scope(1), {N:Scope(11), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,obj,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7:e, s8: Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : e, s8 : Range(9, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), Call(∂.ForEach([map:11] Scope(1), {N:Scope(11), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,obj,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8:e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Global(e), Call(∂.ForEach([map:11] Scope(1), {N:Scope(11), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,obj}>
*** Ctx ping count: 0
###
> ChainMap(s0:e, s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N:it })
ChainMap(s0 : e, s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N : it }) : {N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), Call(∂.ForEach([map:12] Scope(1), {N:Scope(12), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:v, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1:e, s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N:it })
ChainMap(s0 : Range(1, 20), s1 : e, s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N : it }) : {N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), Call(∂.ForEach([map:12] Scope(1), {N:Scope(12), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2:e, s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : e, s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N : it }) : {N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), Call(∂.ForEach([map:12] Scope(1), {N:Scope(12), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3:e, s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : e, s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), Call(∂.ForEach([map:12] Scope(1), {N:Scope(12), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4:e, s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : e, s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), Call(∂.ForEach([map:12] Scope(1), {N:Scope(12), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5:e, s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : e, s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), Call(∂.ForEach([map:12] Scope(1), {N:Scope(12), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6:e, s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : e, s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), Call(∂.ForEach([map:12] Scope(1), {N:Scope(12), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7:e, s8: Range(9, 20), s9: Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : e, s8 : Range(9, 20), s9 : Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), Call(∂.ForEach([map:12] Scope(1), {N:Scope(12), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8:e, s9: Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : e, s9 : Range(10, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), Call(∂.ForEach([map:12] Scope(1), {N:Scope(12), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9:e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, N : it }) : {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Global(e), Call(∂.ForEach([map:12] Scope(1), {N:Scope(12), s0:Scope(2), s1:Scope(3), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj}>
*** Ctx ping count: 0
###
> ChainMap(s0:e, s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N:it })
ChainMap(s0 : e, s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N : it }) : {N:i8, s0:v, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:v, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), Call(∂.ForEach([map:13] Scope(1), {N:Scope(13), s0:Scope(2), s1:Scope(3), s10:Scope(12), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:v, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1:e, s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N:it })
ChainMap(s0 : Range(1, 20), s1 : e, s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N : it }) : {N:i8, s0:i8, s1:v, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:v, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), Call(∂.ForEach([map:13] Scope(1), {N:Scope(13), s0:Scope(2), s1:Scope(3), s10:Scope(12), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:v, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2:e, s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : e, s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), Call(∂.ForEach([map:13] Scope(1), {N:Scope(13), s0:Scope(2), s1:Scope(3), s10:Scope(12), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3:e, s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : e, s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), Call(∂.ForEach([map:13] Scope(1), {N:Scope(13), s0:Scope(2), s1:Scope(3), s10:Scope(12), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4:e, s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : e, s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), Call(∂.ForEach([map:13] Scope(1), {N:Scope(13), s0:Scope(2), s1:Scope(3), s10:Scope(12), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5:e, s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : e, s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), Call(∂.ForEach([map:13] Scope(1), {N:Scope(13), s0:Scope(2), s1:Scope(3), s10:Scope(12), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6:e, s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : e, s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), Call(∂.ForEach([map:13] Scope(1), {N:Scope(13), s0:Scope(2), s1:Scope(3), s10:Scope(12), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7:e, s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : e, s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), Call(∂.ForEach([map:13] Scope(1), {N:Scope(13), s0:Scope(2), s1:Scope(3), s10:Scope(12), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8:e, s9: Range(10, 20), s10: Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : e, s9 : Range(10, 20), s10 : Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), Call(∂.ForEach([map:13] Scope(1), {N:Scope(13), s0:Scope(2), s1:Scope(3), s10:Scope(12), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9:e, s10: Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : e, s10 : Range(11, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), Call(∂.ForEach([map:13] Scope(1), {N:Scope(13), s0:Scope(2), s1:Scope(3), s10:Scope(12), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10:e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, N : it }) : {N:i8, s0:i8, s1:i8, s10:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), Call(∂.ForEach([map:13] Scope(1), {N:Scope(13), s0:Scope(2), s1:Scope(3), s10:Scope(12), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0:e, s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N:it })
ChainMap(s0 : e, s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N : it }) : {N:i8, s0:v, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:v, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), Call(∂.ForEach([map:14] Scope(1), {N:Scope(14), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:v, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1:e, s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N:it })
ChainMap(s0 : Range(1, 20), s1 : e, s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N : it }) : {N:i8, s0:i8, s1:v, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:v, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), Call(∂.ForEach([map:14] Scope(1), {N:Scope(14), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:v, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2:e, s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : e, s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), Call(∂.ForEach([map:14] Scope(1), {N:Scope(14), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3:e, s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : e, s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), Call(∂.ForEach([map:14] Scope(1), {N:Scope(14), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4:e, s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : e, s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), Call(∂.ForEach([map:14] Scope(1), {N:Scope(14), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5:e, s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : e, s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), Call(∂.ForEach([map:14] Scope(1), {N:Scope(14), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6:e, s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : e, s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), Call(∂.ForEach([map:14] Scope(1), {N:Scope(14), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7:e, s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : e, s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), Call(∂.ForEach([map:14] Scope(1), {N:Scope(14), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8:e, s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : e, s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), Call(∂.ForEach([map:14] Scope(1), {N:Scope(14), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9:e, s10: Range(11, 20), s11: Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : e, s10 : Range(11, 20), s11 : Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), Call(∂.ForEach([map:14] Scope(1), {N:Scope(14), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10:e, s11: Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : e, s11 : Range(12, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N : it }) : {N:i8, s0:i8, s1:i8, s10:v, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:v, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), Call(∂.ForEach([map:14] Scope(1), {N:Scope(14), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:v, s11:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11:e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Global(e), Call(∂.ForEach([map:14] Scope(1), {N:Scope(14), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0:e, s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N:it })
ChainMap(s0 : e, s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N : it }) : {N:i8, s0:v, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:v, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), Call(∂.ForEach([map:15] Scope(1), {N:Scope(15), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:v, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1:e, s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N:it })
ChainMap(s0 : Range(1, 20), s1 : e, s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N : it }) : {N:i8, s0:i8, s1:v, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:v, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), Call(∂.ForEach([map:15] Scope(1), {N:Scope(15), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:v, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2:e, s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : e, s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), Call(∂.ForEach([map:15] Scope(1), {N:Scope(15), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3:e, s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : e, s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), Call(∂.ForEach([map:15] Scope(1), {N:Scope(15), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4:e, s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : e, s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), Call(∂.ForEach([map:15] Scope(1), {N:Scope(15), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5:e, s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : e, s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), Call(∂.ForEach([map:15] Scope(1), {N:Scope(15), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6:e, s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : e, s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), Call(∂.ForEach([map:15] Scope(1), {N:Scope(15), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7:e, s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : e, s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), Call(∂.ForEach([map:15] Scope(1), {N:Scope(15), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8:e, s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : e, s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), Call(∂.ForEach([map:15] Scope(1), {N:Scope(15), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9:e, s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : e, s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), Call(∂.ForEach([map:15] Scope(1), {N:Scope(15), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10:e, s11: Range(12, 20), s12: Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : e, s11 : Range(12, 20), s12 : Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N : it }) : {N:i8, s0:i8, s1:i8, s10:v, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:v, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), Call(∂.ForEach([map:15] Scope(1), {N:Scope(15), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:v, s11:i8, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11:e, s12: Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : e, s12 : Range(13, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:v, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:v, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), Call(∂.ForEach([map:15] Scope(1), {N:Scope(15), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:v, s12:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12:e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Global(e), Call(∂.ForEach([map:15] Scope(1), {N:Scope(15), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0:e, s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N:it })
ChainMap(s0 : e, s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N : it }) : {N:i8, s0:v, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:v, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), Call(∂.ForEach([map:16] Scope(1), {N:Scope(16), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:v, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1:e, s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N:it })
ChainMap(s0 : Range(1, 20), s1 : e, s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N : it }) : {N:i8, s0:i8, s1:v, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:v, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), Call(∂.ForEach([map:16] Scope(1), {N:Scope(16), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:v, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2:e, s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : e, s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), Call(∂.ForEach([map:16] Scope(1), {N:Scope(16), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3:e, s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : e, s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), Call(∂.ForEach([map:16] Scope(1), {N:Scope(16), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4:e, s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : e, s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), Call(∂.ForEach([map:16] Scope(1), {N:Scope(16), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5:e, s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : e, s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), Call(∂.ForEach([map:16] Scope(1), {N:Scope(16), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6:e, s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : e, s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), Call(∂.ForEach([map:16] Scope(1), {N:Scope(16), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7:e, s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : e, s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), Call(∂.ForEach([map:16] Scope(1), {N:Scope(16), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8:e, s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : e, s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), Call(∂.ForEach([map:16] Scope(1), {N:Scope(16), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9:e, s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : e, s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), Call(∂.ForEach([map:16] Scope(1), {N:Scope(16), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10:e, s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : e, s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N : it }) : {N:i8, s0:i8, s1:i8, s10:v, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:v, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), Call(∂.ForEach([map:16] Scope(1), {N:Scope(16), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:v, s11:i8, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11:e, s12: Range(13, 20), s13: Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : e, s12 : Range(13, 20), s13 : Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:v, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:v, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), Call(∂.ForEach([map:16] Scope(1), {N:Scope(16), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:v, s12:i8, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12:e, s13: Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : e, s13 : Range(14, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:v, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:v, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), Call(∂.ForEach([map:16] Scope(1), {N:Scope(16), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:v, s13:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13:e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Global(e), Call(∂.ForEach([map:16] Scope(1), {N:Scope(16), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0:e, s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : e, s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, s0:v, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:v, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:v, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1:e, s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : Range(1, 20), s1 : e, s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, s0:i8, s1:v, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:v, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:v, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2:e, s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : e, s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3:e, s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : e, s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4:e, s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : e, s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5:e, s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : e, s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6:e, s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : e, s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7:e, s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : e, s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8:e, s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : e, s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9:e, s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : e, s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10:e, s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : e, s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, s0:i8, s1:i8, s10:v, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:v, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:v, s11:i8, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11:e, s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : e, s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:v, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:v, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:v, s12:i8, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12:e, s13: Range(14, 20), s14: Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : e, s13 : Range(14, 20), s14 : Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:v, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:v, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:v, s13:i8, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13:e, s14: Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : e, s14 : Range(15, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:v, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:v, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Global(e), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:v, s14:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14:e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Global(e), Call(∂.ForEach([map:17] Scope(1), {N:Scope(17), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0:e, s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), s15: Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : e, s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), s15 : Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:v, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:v, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Global(e), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:v, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1:e, s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), s15: Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : e, s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), s15 : Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:i8, s1:v, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:v, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Global(e), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:v, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2:e, s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), s15: Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : e, s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), s15 : Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Global(e), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:v, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3:e, s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), s15: Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : e, s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), s15 : Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Global(e), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:v, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4:e, s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), s15: Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : e, s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), s15 : Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Global(e), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:v, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5:e, s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), s15: Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : e, s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), s15 : Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Global(e), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:v, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6:e, s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), s15: Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : e, s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), s15 : Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Global(e), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:v, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7:e, s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), s15: Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : e, s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), s15 : Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Global(e), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:v, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8:e, s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), s15: Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : e, s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), s15 : Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Global(e), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:v, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9:e, s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), s15: Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : e, s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), s15 : Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Global(e), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:v}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,obj}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10:e, s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), s15: Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : e, s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), s15 : Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:i8, s1:i8, s10:v, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:v, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Global(e), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:v, s11:i8, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11:e, s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), s15: Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : e, s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), s15 : Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:v, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:v, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Global(e), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:v, s12:i8, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12:e, s13: Range(14, 20), s14: Range(15, 20), s15: Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : e, s13 : Range(14, 20), s14 : Range(15, 20), s15 : Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:v, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:v, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Global(e), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:v, s13:i8, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13:e, s14: Range(15, 20), s15: Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : e, s14 : Range(15, 20), s15 : Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:v, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:v, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Global(e), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:v, s14:i8, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14:e, s15: Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : e, s15 : Range(16, 20), Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:v, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:v, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Global(e), [map:17] Call(∂.Range(16:i8, 20:i8):i8*), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:v, s15:i8, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
> ChainMap(s0: Range(1, 20), s1: Range(2, 20), s2: Range(3, 20), s3: Range(4, 20), s4: Range(5, 20), s5: Range(6, 20), s6: Range(7, 20), s7: Range(8, 20), s8: Range(9, 20), s9: Range(10, 20), s10: Range(11, 20), s11: Range(12, 20), s12: Range(13, 20), s13: Range(14, 20), s14: Range(15, 20), s15:e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N:it })
ChainMap(s0 : Range(1, 20), s1 : Range(2, 20), s2 : Range(3, 20), s3 : Range(4, 20), s4 : Range(5, 20), s5 : Range(6, 20), s6 : Range(7, 20), s7 : Range(8, 20), s8 : Range(9, 20), s9 : Range(10, 20), s10 : Range(11, 20), s11 : Range(12, 20), s12 : Range(13, 20), s13 : Range(14, 20), s14 : Range(15, 20), s15 : e, Range(2)->{ s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, N : it }) : {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
BndKind:Call, Type:{N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*, Bnd:(Call(∂.With([with:1] Call(∂.Range(2:i8):i8*), Call(∂.ChainMap([map:2] Call(∂.Range(1:i8, 20:i8):i8*), [map:3] Call(∂.Range(2:i8, 20:i8):i8*), [map:4] Call(∂.Range(3:i8, 20:i8):i8*), [map:5] Call(∂.Range(4:i8, 20:i8):i8*), [map:6] Call(∂.Range(5:i8, 20:i8):i8*), [map:7] Call(∂.Range(6:i8, 20:i8):i8*), [map:8] Call(∂.Range(7:i8, 20:i8):i8*), [map:9] Call(∂.Range(8:i8, 20:i8):i8*), [map:10] Call(∂.Range(9:i8, 20:i8):i8*), [map:11] Call(∂.Range(10:i8, 20:i8):i8*), [map:12] Call(∂.Range(11:i8, 20:i8):i8*), [map:13] Call(∂.Range(12:i8, 20:i8):i8*), [map:14] Call(∂.Range(13:i8, 20:i8):i8*), [map:15] Call(∂.Range(14:i8, 20:i8):i8*), [map:16] Call(∂.Range(15:i8, 20:i8):i8*), [map:17] Global(e), Call(∂.ForEach([map:18] Scope(1), {N:Scope(18), s0:Scope(2), s1:Scope(3), s10:Scope(12), s11:Scope(13), s12:Scope(14), s13:Scope(15), s14:Scope(16), s15:Scope(17), s2:Scope(4), s3:Scope(5), s4:Scope(6), s5:Scope(7), s6:Scope(8), s7:Scope(9), s8:Scope(10), s9:Scope(11)})))))))
Func sig: (<ctx>:x, e:v*) to {N:i8, s0:i8, s1:i8, s10:i8, s11:i8, s12:i8, s13:i8, s14:i8, s15:v, s2:i8, s3:i8, s4:i8, s5:i8, s6:i8, s7:i8, s8:i8, s9:i8}*
Sequence: Seq<{i8,i8,i8,i8,i8,i8,i8,i8,obj,i8,i8,i8,i8,i8,i8,i8,i8}>
*** Ctx ping count: 0
###
