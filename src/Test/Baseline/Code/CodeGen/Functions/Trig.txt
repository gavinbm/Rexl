**** New definitions: D, type: r8*
**** New definitions: R, type: r8*
**** New definitions: TwoPi, type: r8
**** New definitions: Ss, type: r8*
**** New definitions: SVals, type: r8*
**** New definitions: Ts, type: r8*
**** New definitions: TVals, type: r8*
**** New udf: Clean, arity: 1
**** New udf: Clean, arity: 3

> D->ForEach((Clean(SinD(it), #it, 0), Clean(-SinD(-it), #it, 0), Clean(SinD(it +   360), #it, 0), Clean(SinD(it -   360), #it, 0)))
D->ForEach((Clean(SinD(it), #it, 0), Clean(-SinD(-it), #it, 0), Clean(SinD(it + 360), #it, 0), Clean(SinD(it - 360), #it, 0))) : (s, s, s, s)*
BndKind:Call, Type:(s, s, s, s)*, Bnd:(Call(∂.ForEach([map:1] Global(D), (Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.SinD(Scope(1)):r8)):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Add([-] Call(∂.SinD(Add([-] Scope(1))):r8))):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.SinD(Add(Scope(1), 360:r8)):r8)):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.SinD(Add(Scope(1), [-] 360:r8)):r8)):i8)):s)):(s, s, s, s)):(s, s, s, s)*))
Func sig: (D:r8*) to (s, s, s, s)*
Sequence: Seq<(str,str,str,str)>
 0) (0000000000000000, 0000000000000000, 0000000000000000, 8000000000000000)
 1) (3FD0907DC1930690, 3FD0907DC1930690, 3FD0907DC1930690, 3FD0907DC1930690)
 2) (3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF)
 3) (3FE6A09E667F3BCD, 3FE6A09E667F3BCD, 3FE6A09E667F3BCD, 3FE6A09E667F3BCD)
 4) (3FEBB67AE8584CAB, 3FEBB67AE8584CAB, 3FEBB67AE8584CAB, 3FEBB67AE8584CAB)
 5) (3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15)
 6) (3FF0000000000000, 3FF0000000000000, 3FF0000000000000, 3FF0000000000000)
 7) (3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15)
 8) (3FEBB67AE8584CAB, 3FEBB67AE8584CAB, 3FEBB67AE8584CAB, 3FEBB67AE8584CAB)
 9) (3FE6A09E667F3BCD, 3FE6A09E667F3BCD, 3FE6A09E667F3BCD, 3FE6A09E667F3BCD)
10) (3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF)
11) (3FD0907DC1930690, 3FD0907DC1930690, 3FD0907DC1930690, 3FD0907DC1930690)
12) (0000000000000000, 0000000000000000, 0000000000000000, 8000000000000000)
13) (BFD0907DC1930690, BFD0907DC1930690, BFD0907DC1930690, BFD0907DC1930690)
14) (BFDFFFFFFFFFFFFF, BFDFFFFFFFFFFFFF, BFDFFFFFFFFFFFFF, BFDFFFFFFFFFFFFF)
15) (BFE6A09E667F3BCD, BFE6A09E667F3BCD, BFE6A09E667F3BCD, BFE6A09E667F3BCD)
16) (BFEBB67AE8584CAB, BFEBB67AE8584CAB, BFEBB67AE8584CAB, BFEBB67AE8584CAB)
17) (BFEEE8DD4748BF15, BFEEE8DD4748BF15, BFEEE8DD4748BF15, BFEEE8DD4748BF15)
18) (BFF0000000000000, BFF0000000000000, BFF0000000000000, BFF0000000000000)
19) (BFEEE8DD4748BF15, BFEEE8DD4748BF15, BFEEE8DD4748BF15, BFEEE8DD4748BF15)
20) (BFEBB67AE8584CAB, BFEBB67AE8584CAB, BFEBB67AE8584CAB, BFEBB67AE8584CAB)
21) (BFE6A09E667F3BCD, BFE6A09E667F3BCD, BFE6A09E667F3BCD, BFE6A09E667F3BCD)
22) (BFDFFFFFFFFFFFFF, BFDFFFFFFFFFFFFF, BFDFFFFFFFFFFFFF, BFDFFFFFFFFFFFFF)
23) (BFD0907DC1930690, BFD0907DC1930690, BFD0907DC1930690, BFD0907DC1930690)
24) (0000000000000000, 0000000000000000, 0000000000000000, 0000000000000000)
25) (3FD0907DC1930690, 3FD0907DC1930690, 3FD0907DC1930690, 3FD0907DC1930690)
26) (3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF)
27) (3FE6A09E667F3BCD, 3FE6A09E667F3BCD, 3FE6A09E667F3BCD, 3FE6A09E667F3BCD)
28) (3FEBB67AE8584CAB, 3FEBB67AE8584CAB, 3FEBB67AE8584CAB, 3FEBB67AE8584CAB)
29) (3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15)
30) (3FF0000000000000, 3FF0000000000000, 3FF0000000000000, 3FF0000000000000)
###
> R->ForEach((Clean(Sin (it), #it, 0), Clean(-Sin (-it), #it, 0), Clean(Sin (it + TwoPi), #it, 1), Clean(Sin (it - TwoPi), #it, 0)))
R->ForEach((Clean(Sin(it), #it, 0), Clean(-Sin(-it), #it, 0), Clean(Sin(it + TwoPi), #it, 1), Clean(Sin(it - TwoPi), #it, 0))) : (s, s, s, s)*
BndKind:Call, Type:(s, s, s, s)*, Bnd:(Call(∂.ForEach([map:2] Global(R), (Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Sin(Scope(2)):r8)):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Add([-] Call(∂.Sin(Add([-] Scope(2))):r8))):i8)):s), Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.Sin(Add(Scope(2), Global(TwoPi))):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Sin(Add(Scope(2), [-] Global(TwoPi))):r8)):i8)):s)):(s, s, s, s)):(s, s, s, s)*))
Func sig: (R:r8*, TwoPi:r8) to (s, s, s, s)*
Sequence: Seq<(str,str,str,str)>
 0) (0000000000000000, 0000000000000000, 0000000000000000, 8000000000000000)
 1) (3FD0907DC1930690, 3FD0907DC1930690, 3FD0907DC193068B, 3FD0907DC193068B)
 2) (3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF, 3FE0000000000002, 3FE0000000000002)
 3) (3FE6A09E667F3BCD, 3FE6A09E667F3BCD, 3FE6A09E667F3BCC, 3FE6A09E667F3BCD)
 4) (3FEBB67AE8584CAA, 3FEBB67AE8584CAA, 3FEBB67AE8584CA9, 3FEBB67AE8584CA9)
 5) (3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15)
 6) (3FF0000000000000, 3FF0000000000000, 3FF0000000000000, 3FF0000000000000)
 7) (3FEEE8DD4748BF14, 3FEEE8DD4748BF14, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15)
 8) (3FEBB67AE8584CAB, 3FEBB67AE8584CAB, 3FEBB67AE8584CAD, 3FEBB67AE8584CAD)
 9) (3FE6A09E667F3BCD, 3FE6A09E667F3BCD, 3FE6A09E667F3BD2, 3FE6A09E667F3BCD)
10) (3FDFFFFFFFFFFFFD, 3FDFFFFFFFFFFFFD, 3FDFFFFFFFFFFFF6, 3FDFFFFFFFFFFFFD)
11) (3FD0907DC1930693, 3FD0907DC1930693, 3FD0907DC193068B, 3FD0907DC1930693)
12) (0000000000000000, 0000000000000000, 0000000000000000, 8000000000000000)
13) (BFD0907DC1930693, BFD0907DC1930693, BFD0907DC193068B, BFD0907DC1930693)
14) (BFE0000000000002, BFE0000000000002, BFDFFFFFFFFFFFF6, BFE0000000000002)
15) (BFE6A09E667F3BCD, BFE6A09E667F3BCD, BFE6A09E667F3BD2, BFE6A09E667F3BCD)
16) (BFEBB67AE8584CA9, BFEBB67AE8584CA9, BFEBB67AE8584CA5, BFEBB67AE8584CA9)
17) (BFEEE8DD4748BF15, BFEEE8DD4748BF15, BFEEE8DD4748BF15, BFEEE8DD4748BF15)
18) (BFF0000000000000, BFF0000000000000, BFF0000000000000, BFF0000000000000)
19) (BFEEE8DD4748BF15, BFEEE8DD4748BF15, BFEEE8DD4748BF15, BFEEE8DD4748BF15)
20) (BFEBB67AE8584CA9, BFEBB67AE8584CA9, BFEBB67AE8584CA5, BFEBB67AE8584CA9)
21) (BFE6A09E667F3BCD, BFE6A09E667F3BCD, BFE6A09E667F3BD2, BFE6A09E667F3BCD)
22) (BFE0000000000002, BFE0000000000002, BFDFFFFFFFFFFFF6, BFE0000000000002)
23) (BFD0907DC193068B, BFD0907DC193068B, BFD0907DC193068B, BFD0907DC193068B)
24) (0000000000000000, 0000000000000000, 0000000000000000, 0000000000000000)
25) (3FD0907DC193068B, 3FD0907DC193068B, 3FD0907DC193068B, 3FD0907DC193068B)
26) (3FE0000000000002, 3FE0000000000002, 3FDFFFFFFFFFFFF6, 3FE0000000000002)
27) (3FE6A09E667F3BCD, 3FE6A09E667F3BCD, 3FE6A09E667F3BD2, 3FE6A09E667F3BCD)
28) (3FEBB67AE8584CAD, 3FEBB67AE8584CAD, 3FEBB67AE8584CAD, 3FEBB67AE8584CAD)
29) (3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15)
30) (3FF0000000000000, 3FF0000000000000, 3FF0000000000000, 3FF0000000000000)
###
> D->ForEach((Clean(CosD(it), #it, 1), Clean( CosD(-it), #it, 1), Clean(CosD(it +   360), #it, 1), Clean(CosD(it -   360), #it, 1)))
D->ForEach((Clean(CosD(it), #it, 1), Clean(CosD(-it), #it, 1), Clean(CosD(it + 360), #it, 1), Clean(CosD(it - 360), #it, 1))) : (s, s, s, s)*
BndKind:Call, Type:(s, s, s, s)*, Bnd:(Call(∂.ForEach([map:2] Global(D), (Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.CosD(Scope(2)):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s), Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.CosD(Add([-] Scope(2))):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s), Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.CosD(Add(Scope(2), 360:r8)):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s), Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.CosD(Add(Scope(2), [-] 360:r8)):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s)):(s, s, s, s)):(s, s, s, s)*))
Func sig: (D:r8*) to (s, s, s, s)*
Sequence: Seq<(str,str,str,str)>
 0) (3FF0000000000000, 3FF0000000000000, 3FF0000000000000, 3FF0000000000000)
 1) (3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15)
 2) (3FEBB67AE8584CAB, 3FEBB67AE8584CAB, 3FEBB67AE8584CAB, 3FEBB67AE8584CAB)
 3) (3FE6A09E667F3BCC, 3FE6A09E667F3BCC, 3FE6A09E667F3BCC, 3FE6A09E667F3BCC)
 4) (3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF)
 5) (3FD0907DC1930690, 3FD0907DC1930690, 3FD0907DC1930690, 3FD0907DC1930690)
 6) (0000000000000000, 0000000000000000, 0000000000000000, 0000000000000000)
 7) (BFD0907DC1930690, BFD0907DC1930690, BFD0907DC1930690, BFD0907DC1930690)
 8) (BFDFFFFFFFFFFFFF, BFDFFFFFFFFFFFFF, BFDFFFFFFFFFFFFF, BFDFFFFFFFFFFFFF)
 9) (BFE6A09E667F3BCC, BFE6A09E667F3BCC, BFE6A09E667F3BCC, BFE6A09E667F3BCC)
10) (BFEBB67AE8584CAB, BFEBB67AE8584CAB, BFEBB67AE8584CAB, BFEBB67AE8584CAB)
11) (BFEEE8DD4748BF15, BFEEE8DD4748BF15, BFEEE8DD4748BF15, BFEEE8DD4748BF15)
12) (BFF0000000000000, BFF0000000000000, BFF0000000000000, BFF0000000000000)
13) (BFEEE8DD4748BF15, BFEEE8DD4748BF15, BFEEE8DD4748BF15, BFEEE8DD4748BF15)
14) (BFEBB67AE8584CAB, BFEBB67AE8584CAB, BFEBB67AE8584CAB, BFEBB67AE8584CAB)
15) (BFE6A09E667F3BCC, BFE6A09E667F3BCC, BFE6A09E667F3BCC, BFE6A09E667F3BCC)
16) (BFDFFFFFFFFFFFFF, BFDFFFFFFFFFFFFF, BFDFFFFFFFFFFFFF, BFDFFFFFFFFFFFFF)
17) (BFD0907DC1930690, BFD0907DC1930690, BFD0907DC1930690, BFD0907DC1930690)
18) (0000000000000000, 0000000000000000, 0000000000000000, 0000000000000000)
19) (3FD0907DC1930690, 3FD0907DC1930690, 3FD0907DC1930690, 3FD0907DC1930690)
20) (3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF)
21) (3FE6A09E667F3BCC, 3FE6A09E667F3BCC, 3FE6A09E667F3BCC, 3FE6A09E667F3BCC)
22) (3FEBB67AE8584CAB, 3FEBB67AE8584CAB, 3FEBB67AE8584CAB, 3FEBB67AE8584CAB)
23) (3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15)
24) (3FF0000000000000, 3FF0000000000000, 3FF0000000000000, 3FF0000000000000)
25) (3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15)
26) (3FEBB67AE8584CAB, 3FEBB67AE8584CAB, 3FEBB67AE8584CAB, 3FEBB67AE8584CAB)
27) (3FE6A09E667F3BCC, 3FE6A09E667F3BCC, 3FE6A09E667F3BCC, 3FE6A09E667F3BCC)
28) (3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF, 3FDFFFFFFFFFFFFF)
29) (3FD0907DC1930690, 3FD0907DC1930690, 3FD0907DC1930690, 3FD0907DC1930690)
30) (0000000000000000, 0000000000000000, 0000000000000000, 0000000000000000)
###
> R->ForEach((Clean(Cos (it), #it, 1), Clean( Cos (-it), #it, 1), Clean(Cos (it + TwoPi), #it, 1), Clean(Cos (it - TwoPi), #it, 1)))
R->ForEach((Clean(Cos(it), #it, 1), Clean(Cos(-it), #it, 1), Clean(Cos(it + TwoPi), #it, 1), Clean(Cos(it - TwoPi), #it, 1))) : (s, s, s, s)*
BndKind:Call, Type:(s, s, s, s)*, Bnd:(Call(∂.ForEach([map:2] Global(R), (Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.Cos(Scope(2)):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s), Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.Cos(Add([-] Scope(2))):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s), Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.Cos(Add(Scope(2), Global(TwoPi))):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s), Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.Cos(Add(Scope(2), [-] Global(TwoPi))):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s)):(s, s, s, s)):(s, s, s, s)*))
Func sig: (R:r8*, TwoPi:r8) to (s, s, s, s)*
Sequence: Seq<(str,str,str,str)>
 0) (3FF0000000000000, 3FF0000000000000, 3FF0000000000000, 3FF0000000000000)
 1) (3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15)
 2) (3FEBB67AE8584CAB, 3FEBB67AE8584CAB, 3FEBB67AE8584CA9, 3FEBB67AE8584CA9)
 3) (3FE6A09E667F3BCC, 3FE6A09E667F3BCC, 3FE6A09E667F3BCC, 3FE6A09E667F3BCC)
 4) (3FE0000000000000, 3FE0000000000000, 3FE0000000000002, 3FE0000000000002)
 5) (3FD0907DC193068F, 3FD0907DC193068F, 3FD0907DC193068B, 3FD0907DC193068B)
 6) (0000000000000000, 0000000000000000, 0000000000000000, 0000000000000000)
 7) (BFD0907DC1930693, BFD0907DC1930693, BFD0907DC193068B, BFD0907DC193068B)
 8) (BFDFFFFFFFFFFFFD, BFDFFFFFFFFFFFFD, BFDFFFFFFFFFFFF6, BFDFFFFFFFFFFFF6)
 9) (BFE6A09E667F3BCC, BFE6A09E667F3BCC, BFE6A09E667F3BC6, BFE6A09E667F3BCC)
10) (BFEBB67AE8584CAB, BFEBB67AE8584CAB, BFEBB67AE8584CAD, BFEBB67AE8584CAB)
11) (BFEEE8DD4748BF14, BFEEE8DD4748BF14, BFEEE8DD4748BF15, BFEEE8DD4748BF14)
12) (BFF0000000000000, BFF0000000000000, BFF0000000000000, BFF0000000000000)
13) (BFEEE8DD4748BF14, BFEEE8DD4748BF14, BFEEE8DD4748BF15, BFEEE8DD4748BF14)
14) (BFEBB67AE8584CA9, BFEBB67AE8584CA9, BFEBB67AE8584CAD, BFEBB67AE8584CA9)
15) (BFE6A09E667F3BCC, BFE6A09E667F3BCC, BFE6A09E667F3BC6, BFE6A09E667F3BCC)
16) (BFE0000000000002, BFE0000000000002, BFE0000000000009, BFE0000000000002)
17) (BFD0907DC193068B, BFD0907DC193068B, BFD0907DC193068B, BFD0907DC193068B)
18) (0000000000000000, 0000000000000000, 0000000000000000, 0000000000000000)
19) (3FD0907DC193068B, 3FD0907DC193068B, 3FD0907DC193068B, 3FD0907DC193068B)
20) (3FE0000000000002, 3FE0000000000002, 3FE0000000000009, 3FE0000000000002)
21) (3FE6A09E667F3BCC, 3FE6A09E667F3BCC, 3FE6A09E667F3BC6, 3FE6A09E667F3BCC)
22) (3FEBB67AE8584CA9, 3FEBB67AE8584CA9, 3FEBB67AE8584CAD, 3FEBB67AE8584CA9)
23) (3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15)
24) (3FF0000000000000, 3FF0000000000000, 3FF0000000000000, 3FF0000000000000)
25) (3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15, 3FEEE8DD4748BF15)
26) (3FEBB67AE8584CA9, 3FEBB67AE8584CA9, 3FEBB67AE8584CAD, 3FEBB67AE8584CA9)
27) (3FE6A09E667F3BCC, 3FE6A09E667F3BCC, 3FE6A09E667F3BC6, 3FE6A09E667F3BCC)
28) (3FDFFFFFFFFFFFF6, 3FDFFFFFFFFFFFF6, 3FDFFFFFFFFFFFF6, 3FDFFFFFFFFFFFF6)
29) (3FD0907DC193068B, 3FD0907DC193068B, 3FD0907DC193068B, 3FD0907DC193068B)
30) (0000000000000000, 0000000000000000, 0000000000000000, 0000000000000000)
###
> D->ForEach((Clean(TanD(it), #it, 0), Clean(-TanD(-it), #it, 0), Clean(TanD(it +   360), #it, 0), Clean(TanD(it -   360), #it, 0)))
D->ForEach((Clean(TanD(it), #it, 0), Clean(-TanD(-it), #it, 0), Clean(TanD(it + 360), #it, 0), Clean(TanD(it - 360), #it, 0))) : (s, s, s, s)*
BndKind:Call, Type:(s, s, s, s)*, Bnd:(Call(∂.ForEach([map:1] Global(D), (Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.TanD(Scope(1)):r8)):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Add([-] Call(∂.TanD(Add([-] Scope(1))):r8))):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.TanD(Add(Scope(1), 360:r8)):r8)):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.TanD(Add(Scope(1), [-] 360:r8)):r8)):i8)):s)):(s, s, s, s)):(s, s, s, s)*))
Func sig: (D:r8*) to (s, s, s, s)*
Sequence: Seq<(str,str,str,str)>
 0) (0000000000000000, 0000000000000000, 0000000000000000, 8000000000000000)
 1) (3FD126145E9ECD56, 3FD126145E9ECD56, 3FD126145E9ECD56, 3FD126145E9ECD56)
 2) (3FE279A74590331C, 3FE279A74590331C, 3FE279A74590331C, 3FE279A74590331C)
 3) (3FF0000000000001, 3FF0000000000001, 3FF0000000000001, 3FF0000000000001)
 4) (3FFBB67AE8584CAB, 3FFBB67AE8584CAB, 3FFBB67AE8584CAB, 3FFBB67AE8584CAB)
 5) (400DDB3D742C2656, 400DDB3D742C2656, 400DDB3D742C2656, 400DDB3D742C2656)
 6) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, FFF0000000000000)
 7) (C00DDB3D742C2656, C00DDB3D742C2656, C00DDB3D742C2656, C00DDB3D742C2656)
 8) (BFFBB67AE8584CAB, BFFBB67AE8584CAB, BFFBB67AE8584CAB, BFFBB67AE8584CAB)
 9) (BFF0000000000001, BFF0000000000001, BFF0000000000001, BFF0000000000001)
10) (BFE279A74590331C, BFE279A74590331C, BFE279A74590331C, BFE279A74590331C)
11) (BFD126145E9ECD56, BFD126145E9ECD56, BFD126145E9ECD56, BFD126145E9ECD56)
12) (0000000000000000, 0000000000000000, 0000000000000000, 8000000000000000)
13) (3FD126145E9ECD56, 3FD126145E9ECD56, 3FD126145E9ECD56, 3FD126145E9ECD56)
14) (3FE279A74590331C, 3FE279A74590331C, 3FE279A74590331C, 3FE279A74590331C)
15) (3FF0000000000001, 3FF0000000000001, 3FF0000000000001, 3FF0000000000001)
16) (3FFBB67AE8584CAB, 3FFBB67AE8584CAB, 3FFBB67AE8584CAB, 3FFBB67AE8584CAB)
17) (400DDB3D742C2656, 400DDB3D742C2656, 400DDB3D742C2656, 400DDB3D742C2656)
18) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, FFF0000000000000)
19) (C00DDB3D742C2656, C00DDB3D742C2656, C00DDB3D742C2656, C00DDB3D742C2656)
20) (BFFBB67AE8584CAB, BFFBB67AE8584CAB, BFFBB67AE8584CAB, BFFBB67AE8584CAB)
21) (BFF0000000000001, BFF0000000000001, BFF0000000000001, BFF0000000000001)
22) (BFE279A74590331C, BFE279A74590331C, BFE279A74590331C, BFE279A74590331C)
23) (BFD126145E9ECD56, BFD126145E9ECD56, BFD126145E9ECD56, BFD126145E9ECD56)
24) (0000000000000000, 0000000000000000, 0000000000000000, 0000000000000000)
25) (3FD126145E9ECD56, 3FD126145E9ECD56, 3FD126145E9ECD56, 3FD126145E9ECD56)
26) (3FE279A74590331C, 3FE279A74590331C, 3FE279A74590331C, 3FE279A74590331C)
27) (3FF0000000000001, 3FF0000000000001, 3FF0000000000001, 3FF0000000000001)
28) (3FFBB67AE8584CAB, 3FFBB67AE8584CAB, 3FFBB67AE8584CAB, 3FFBB67AE8584CAB)
29) (400DDB3D742C2656, 400DDB3D742C2656, 400DDB3D742C2656, 400DDB3D742C2656)
30) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, 7FF0000000000000)
###
> R->ForEach((Clean(Tan (it), #it, 0), Clean(-Tan (-it), #it, 0), Clean(Tan (it + TwoPi), #it, 0), Clean(Tan (it - TwoPi), #it, 0)))
R->ForEach((Clean(Tan(it), #it, 0), Clean(-Tan(-it), #it, 0), Clean(Tan(it + TwoPi), #it, 0), Clean(Tan(it - TwoPi), #it, 0))) : (s, s, s, s)*
BndKind:Call, Type:(s, s, s, s)*, Bnd:(Call(∂.ForEach([map:1] Global(R), (Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Tan(Scope(1)):r8)):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Add([-] Call(∂.Tan(Add([-] Scope(1))):r8))):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Tan(Add(Scope(1), Global(TwoPi))):r8)):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Tan(Add(Scope(1), [-] Global(TwoPi))):r8)):i8)):s)):(s, s, s, s)):(s, s, s, s)*))
Func sig: (R:r8*, TwoPi:r8) to (s, s, s, s)*
Sequence: Seq<(str,str,str,str)>
 0) (0000000000000000, 0000000000000000, 0000000000000000, 8000000000000000)
 1) (3FD126145E9ECD56, 3FD126145E9ECD56, 3FD126145E9ECD50, 3FD126145E9ECD50)
 2) (3FE279A74590331C, 3FE279A74590331C, 3FE279A745903320, 3FE279A745903320)
 3) (3FF0000000000001, 3FF0000000000001, 3FF0000000000001, 3FF0000000000001)
 4) (3FFBB67AE8584CA9, 3FFBB67AE8584CA9, 3FFBB67AE8584CA5, 3FFBB67AE8584CA5)
 5) (400DDB3D742C2657, 400DDB3D742C2657, 400DDB3D742C2660, 400DDB3D742C2660)
 6) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, FFF0000000000000)
 7) (C00DDB3D742C2650, C00DDB3D742C2650, C00DDB3D742C2660, C00DDB3D742C2660)
 8) (BFFBB67AE8584CAE, BFFBB67AE8584CAE, BFFBB67AE8584CB5, BFFBB67AE8584CB5)
 9) (BFF0000000000001, BFF0000000000001, BFF0000000000009, BFF0000000000001)
10) (BFE279A74590331A, BFE279A74590331A, BFE279A745903315, BFE279A74590331A)
11) (BFD126145E9ECD59, BFD126145E9ECD59, BFD126145E9ECD50, BFD126145E9ECD59)
12) (0000000000000000, 0000000000000000, 0000000000000000, 8000000000000000)
13) (3FD126145E9ECD59, 3FD126145E9ECD59, 3FD126145E9ECD50, 3FD126145E9ECD59)
14) (3FE279A745903320, 3FE279A745903320, 3FE279A745903315, 3FE279A745903320)
15) (3FF0000000000001, 3FF0000000000001, 3FF0000000000009, 3FF0000000000001)
16) (3FFBB67AE8584CA5, 3FFBB67AE8584CA5, 3FFBB67AE8584C96, 3FFBB67AE8584CA5)
17) (400DDB3D742C2660, 400DDB3D742C2660, 400DDB3D742C2660, 400DDB3D742C2660)
18) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, FFF0000000000000)
19) (C00DDB3D742C2660, C00DDB3D742C2660, C00DDB3D742C2660, C00DDB3D742C2660)
20) (BFFBB67AE8584CA5, BFFBB67AE8584CA5, BFFBB67AE8584C96, BFFBB67AE8584CA5)
21) (BFF0000000000001, BFF0000000000001, BFF0000000000009, BFF0000000000001)
22) (BFE279A745903320, BFE279A745903320, BFE279A745903315, BFE279A745903320)
23) (BFD126145E9ECD50, BFD126145E9ECD50, BFD126145E9ECD50, BFD126145E9ECD50)
24) (0000000000000000, 0000000000000000, 0000000000000000, 0000000000000000)
25) (3FD126145E9ECD50, 3FD126145E9ECD50, 3FD126145E9ECD50, 3FD126145E9ECD50)
26) (3FE279A745903320, 3FE279A745903320, 3FE279A745903315, 3FE279A745903320)
27) (3FF0000000000001, 3FF0000000000001, 3FF0000000000009, 3FF0000000000001)
28) (3FFBB67AE8584CB5, 3FFBB67AE8584CB5, 3FFBB67AE8584CB5, 3FFBB67AE8584CB5)
29) (400DDB3D742C2660, 400DDB3D742C2660, 400DDB3D742C2660, 400DDB3D742C2660)
30) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, 7FF0000000000000)
###
> D->ForEach((Clean(CscD(it), #it, 0), Clean(-CscD(-it), #it, 0), Clean(CscD(it +   360), #it, 0), Clean(CscD(it -   360), #it, 0)))
D->ForEach((Clean(CscD(it), #it, 0), Clean(-CscD(-it), #it, 0), Clean(CscD(it + 360), #it, 0), Clean(CscD(it - 360), #it, 0))) : (s, s, s, s)*
BndKind:Call, Type:(s, s, s, s)*, Bnd:(Call(∂.ForEach([map:1] Global(D), (Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.CscD(Scope(1)):r8)):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Add([-] Call(∂.CscD(Add([-] Scope(1))):r8))):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.CscD(Add(Scope(1), 360:r8)):r8)):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.CscD(Add(Scope(1), [-] 360:r8)):r8)):i8)):s)):(s, s, s, s)):(s, s, s, s)*))
Func sig: (D:r8*) to (s, s, s, s)*
Sequence: Seq<(str,str,str,str)>
 0) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, FFF0000000000000)
 1) (400EE8DD4748BF16, 400EE8DD4748BF16, 400EE8DD4748BF16, 400EE8DD4748BF16)
 2) (4000000000000001, 4000000000000001, 4000000000000001, 4000000000000001)
 3) (3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BCC)
 4) (3FF279A74590331C, 3FF279A74590331C, 3FF279A74590331C, 3FF279A74590331C)
 5) (3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690)
 6) (3FF0000000000000, 3FF0000000000000, 3FF0000000000000, 3FF0000000000000)
 7) (3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690)
 8) (3FF279A74590331C, 3FF279A74590331C, 3FF279A74590331C, 3FF279A74590331C)
 9) (3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BCC)
10) (4000000000000001, 4000000000000001, 4000000000000001, 4000000000000001)
11) (400EE8DD4748BF16, 400EE8DD4748BF16, 400EE8DD4748BF16, 400EE8DD4748BF16)
12) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, FFF0000000000000)
13) (C00EE8DD4748BF16, C00EE8DD4748BF16, C00EE8DD4748BF16, C00EE8DD4748BF16)
14) (C000000000000001, C000000000000001, C000000000000001, C000000000000001)
15) (BFF6A09E667F3BCC, BFF6A09E667F3BCC, BFF6A09E667F3BCC, BFF6A09E667F3BCC)
16) (BFF279A74590331C, BFF279A74590331C, BFF279A74590331C, BFF279A74590331C)
17) (BFF0907DC1930690, BFF0907DC1930690, BFF0907DC1930690, BFF0907DC1930690)
18) (BFF0000000000000, BFF0000000000000, BFF0000000000000, BFF0000000000000)
19) (BFF0907DC1930690, BFF0907DC1930690, BFF0907DC1930690, BFF0907DC1930690)
20) (BFF279A74590331C, BFF279A74590331C, BFF279A74590331C, BFF279A74590331C)
21) (BFF6A09E667F3BCC, BFF6A09E667F3BCC, BFF6A09E667F3BCC, BFF6A09E667F3BCC)
22) (C000000000000001, C000000000000001, C000000000000001, C000000000000001)
23) (C00EE8DD4748BF16, C00EE8DD4748BF16, C00EE8DD4748BF16, C00EE8DD4748BF16)
24) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, 7FF0000000000000)
25) (400EE8DD4748BF16, 400EE8DD4748BF16, 400EE8DD4748BF16, 400EE8DD4748BF16)
26) (4000000000000001, 4000000000000001, 4000000000000001, 4000000000000001)
27) (3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BCC)
28) (3FF279A74590331C, 3FF279A74590331C, 3FF279A74590331C, 3FF279A74590331C)
29) (3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690)
30) (3FF0000000000000, 3FF0000000000000, 3FF0000000000000, 3FF0000000000000)
###
> R->ForEach((Clean(Csc (it), #it, 0), Clean(-Csc (-it), #it, 0), Clean(Csc (it + TwoPi), #it, 1), Clean(Csc (it - TwoPi), #it, 0)))
R->ForEach((Clean(Csc(it), #it, 0), Clean(-Csc(-it), #it, 0), Clean(Csc(it + TwoPi), #it, 1), Clean(Csc(it - TwoPi), #it, 0))) : (s, s, s, s)*
BndKind:Call, Type:(s, s, s, s)*, Bnd:(Call(∂.ForEach([map:2] Global(R), (Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Csc(Scope(2)):r8)):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Add([-] Call(∂.Csc(Add([-] Scope(2))):r8))):i8)):s), Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.Csc(Add(Scope(2), Global(TwoPi))):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Csc(Add(Scope(2), [-] Global(TwoPi))):r8)):i8)):s)):(s, s, s, s)):(s, s, s, s)*))
Func sig: (R:r8*, TwoPi:r8) to (s, s, s, s)*
Sequence: Seq<(str,str,str,str)>
 0) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, FFF0000000000000)
 1) (400EE8DD4748BF16, 400EE8DD4748BF16, 400EE8DD4748BF1F, 400EE8DD4748BF1F)
 2) (4000000000000001, 4000000000000001, 3FFFFFFFFFFFFFFC, 3FFFFFFFFFFFFFFC)
 3) (3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BCC)
 4) (3FF279A74590331D, 3FF279A74590331D, 3FF279A74590331D, 3FF279A74590331D)
 5) (3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690)
 6) (3FF0000000000000, 3FF0000000000000, 3FF0000000000000, 3FF0000000000000)
 7) (3FF0907DC1930691, 3FF0907DC1930691, 3FF0907DC1930690, 3FF0907DC1930690)
 8) (3FF279A74590331C, 3FF279A74590331C, 3FF279A74590331B, 3FF279A74590331B)
 9) (3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BC6, 3FF6A09E667F3BCC)
10) (4000000000000002, 4000000000000002, 4000000000000005, 4000000000000002)
11) (400EE8DD4748BF10, 400EE8DD4748BF10, 400EE8DD4748BF1F, 400EE8DD4748BF10)
12) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, FFF0000000000000)
13) (C00EE8DD4748BF10, C00EE8DD4748BF10, C00EE8DD4748BF1F, C00EE8DD4748BF10)
14) (BFFFFFFFFFFFFFFC, BFFFFFFFFFFFFFFC, C000000000000005, BFFFFFFFFFFFFFFC)
15) (BFF6A09E667F3BCC, BFF6A09E667F3BCC, BFF6A09E667F3BC6, BFF6A09E667F3BCC)
16) (BFF279A74590331D, BFF279A74590331D, BFF279A745903320, BFF279A74590331D)
17) (BFF0907DC1930690, BFF0907DC1930690, BFF0907DC1930690, BFF0907DC1930690)
18) (BFF0000000000000, BFF0000000000000, BFF0000000000000, BFF0000000000000)
19) (BFF0907DC1930690, BFF0907DC1930690, BFF0907DC1930690, BFF0907DC1930690)
20) (BFF279A74590331D, BFF279A74590331D, BFF279A745903320, BFF279A74590331D)
21) (BFF6A09E667F3BCC, BFF6A09E667F3BCC, BFF6A09E667F3BC6, BFF6A09E667F3BCC)
22) (BFFFFFFFFFFFFFFC, BFFFFFFFFFFFFFFC, C000000000000005, BFFFFFFFFFFFFFFC)
23) (C00EE8DD4748BF1F, C00EE8DD4748BF1F, C00EE8DD4748BF1F, C00EE8DD4748BF1F)
24) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, 7FF0000000000000)
25) (400EE8DD4748BF1F, 400EE8DD4748BF1F, 400EE8DD4748BF1F, 400EE8DD4748BF1F)
26) (3FFFFFFFFFFFFFFC, 3FFFFFFFFFFFFFFC, 4000000000000005, 3FFFFFFFFFFFFFFC)
27) (3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BC6, 3FF6A09E667F3BCC)
28) (3FF279A74590331B, 3FF279A74590331B, 3FF279A74590331B, 3FF279A74590331B)
29) (3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690)
30) (3FF0000000000000, 3FF0000000000000, 3FF0000000000000, 3FF0000000000000)
###
> D->ForEach((Clean(SecD(it), #it, 1), Clean( SecD(-it), #it, 1), Clean(SecD(it +   360), #it, 1), Clean(SecD(it -   360), #it, 1)))
D->ForEach((Clean(SecD(it), #it, 1), Clean(SecD(-it), #it, 1), Clean(SecD(it + 360), #it, 1), Clean(SecD(it - 360), #it, 1))) : (s, s, s, s)*
BndKind:Call, Type:(s, s, s, s)*, Bnd:(Call(∂.ForEach([map:2] Global(D), (Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.SecD(Scope(2)):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s), Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.SecD(Add([-] Scope(2))):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s), Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.SecD(Add(Scope(2), 360:r8)):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s), Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.SecD(Add(Scope(2), [-] 360:r8)):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s)):(s, s, s, s)):(s, s, s, s)*))
Func sig: (D:r8*) to (s, s, s, s)*
Sequence: Seq<(str,str,str,str)>
 0) (3FF0000000000000, 3FF0000000000000, 3FF0000000000000, 3FF0000000000000)
 1) (3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690)
 2) (3FF279A74590331C, 3FF279A74590331C, 3FF279A74590331C, 3FF279A74590331C)
 3) (3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BCC)
 4) (4000000000000001, 4000000000000001, 4000000000000001, 4000000000000001)
 5) (400EE8DD4748BF16, 400EE8DD4748BF16, 400EE8DD4748BF16, 400EE8DD4748BF16)
 6) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, 7FF0000000000000)
 7) (C00EE8DD4748BF16, C00EE8DD4748BF16, C00EE8DD4748BF16, C00EE8DD4748BF16)
 8) (C000000000000001, C000000000000001, C000000000000001, C000000000000001)
 9) (BFF6A09E667F3BCC, BFF6A09E667F3BCC, BFF6A09E667F3BCC, BFF6A09E667F3BCC)
10) (BFF279A74590331C, BFF279A74590331C, BFF279A74590331C, BFF279A74590331C)
11) (BFF0907DC1930690, BFF0907DC1930690, BFF0907DC1930690, BFF0907DC1930690)
12) (BFF0000000000000, BFF0000000000000, BFF0000000000000, BFF0000000000000)
13) (BFF0907DC1930690, BFF0907DC1930690, BFF0907DC1930690, BFF0907DC1930690)
14) (BFF279A74590331C, BFF279A74590331C, BFF279A74590331C, BFF279A74590331C)
15) (BFF6A09E667F3BCC, BFF6A09E667F3BCC, BFF6A09E667F3BCC, BFF6A09E667F3BCC)
16) (C000000000000001, C000000000000001, C000000000000001, C000000000000001)
17) (C00EE8DD4748BF16, C00EE8DD4748BF16, C00EE8DD4748BF16, C00EE8DD4748BF16)
18) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, 7FF0000000000000)
19) (400EE8DD4748BF16, 400EE8DD4748BF16, 400EE8DD4748BF16, 400EE8DD4748BF16)
20) (4000000000000001, 4000000000000001, 4000000000000001, 4000000000000001)
21) (3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BCC)
22) (3FF279A74590331C, 3FF279A74590331C, 3FF279A74590331C, 3FF279A74590331C)
23) (3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690)
24) (3FF0000000000000, 3FF0000000000000, 3FF0000000000000, 3FF0000000000000)
25) (3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690)
26) (3FF279A74590331C, 3FF279A74590331C, 3FF279A74590331C, 3FF279A74590331C)
27) (3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BCC)
28) (4000000000000001, 4000000000000001, 4000000000000001, 4000000000000001)
29) (400EE8DD4748BF16, 400EE8DD4748BF16, 400EE8DD4748BF16, 400EE8DD4748BF16)
30) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, 7FF0000000000000)
###
> R->ForEach((Clean(Sec (it), #it, 1), Clean( Sec (-it), #it, 1), Clean(Sec (it + TwoPi), #it, 1), Clean(Sec (it - TwoPi), #it, 1)))
R->ForEach((Clean(Sec(it), #it, 1), Clean(Sec(-it), #it, 1), Clean(Sec(it + TwoPi), #it, 1), Clean(Sec(it - TwoPi), #it, 1))) : (s, s, s, s)*
BndKind:Call, Type:(s, s, s, s)*, Bnd:(Call(∂.ForEach([map:2] Global(R), (Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.Sec(Scope(2)):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s), Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.Sec(Add([-] Scope(2))):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s), Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.Sec(Add(Scope(2), Global(TwoPi))):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s), Call(∂.Int.Hex(BitAnd(Call(∂.Float.Bits(Call(∂.Sec(Add(Scope(2), [-] Global(TwoPi))):r8)):i8), BitXor(If(Cmp(IntMod(Scope(1), 6:i8) @= 3:i8), 1:i8, 0:i8), -1:i8))):s)):(s, s, s, s)):(s, s, s, s)*))
Func sig: (R:r8*, TwoPi:r8) to (s, s, s, s)*
Sequence: Seq<(str,str,str,str)>
 0) (3FF0000000000000, 3FF0000000000000, 3FF0000000000000, 3FF0000000000000)
 1) (3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690)
 2) (3FF279A74590331C, 3FF279A74590331C, 3FF279A74590331D, 3FF279A74590331D)
 3) (3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BCC)
 4) (4000000000000000, 4000000000000000, 3FFFFFFFFFFFFFFC, 3FFFFFFFFFFFFFFC)
 5) (400EE8DD4748BF17, 400EE8DD4748BF17, 400EE8DD4748BF1F, 400EE8DD4748BF1F)
 6) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, 7FF0000000000000)
 7) (C00EE8DD4748BF10, C00EE8DD4748BF10, C00EE8DD4748BF1F, C00EE8DD4748BF1F)
 8) (C000000000000002, C000000000000002, C000000000000005, C000000000000005)
 9) (BFF6A09E667F3BCC, BFF6A09E667F3BCC, BFF6A09E667F3BD2, BFF6A09E667F3BCC)
10) (BFF279A74590331C, BFF279A74590331C, BFF279A74590331B, BFF279A74590331C)
11) (BFF0907DC1930691, BFF0907DC1930691, BFF0907DC1930690, BFF0907DC1930691)
12) (BFF0000000000000, BFF0000000000000, BFF0000000000000, BFF0000000000000)
13) (BFF0907DC1930691, BFF0907DC1930691, BFF0907DC1930690, BFF0907DC1930691)
14) (BFF279A74590331D, BFF279A74590331D, BFF279A74590331B, BFF279A74590331D)
15) (BFF6A09E667F3BCC, BFF6A09E667F3BCC, BFF6A09E667F3BD2, BFF6A09E667F3BCC)
16) (BFFFFFFFFFFFFFFC, BFFFFFFFFFFFFFFC, BFFFFFFFFFFFFFEE, BFFFFFFFFFFFFFFC)
17) (C00EE8DD4748BF1F, C00EE8DD4748BF1F, C00EE8DD4748BF1F, C00EE8DD4748BF1F)
18) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, 7FF0000000000000)
19) (400EE8DD4748BF1F, 400EE8DD4748BF1F, 400EE8DD4748BF1F, 400EE8DD4748BF1F)
20) (3FFFFFFFFFFFFFFC, 3FFFFFFFFFFFFFFC, 3FFFFFFFFFFFFFEE, 3FFFFFFFFFFFFFFC)
21) (3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BD2, 3FF6A09E667F3BCC)
22) (3FF279A74590331D, 3FF279A74590331D, 3FF279A74590331B, 3FF279A74590331D)
23) (3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690)
24) (3FF0000000000000, 3FF0000000000000, 3FF0000000000000, 3FF0000000000000)
25) (3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690, 3FF0907DC1930690)
26) (3FF279A74590331D, 3FF279A74590331D, 3FF279A74590331B, 3FF279A74590331D)
27) (3FF6A09E667F3BCC, 3FF6A09E667F3BCC, 3FF6A09E667F3BD2, 3FF6A09E667F3BCC)
28) (4000000000000005, 4000000000000005, 4000000000000005, 4000000000000005)
29) (400EE8DD4748BF1F, 400EE8DD4748BF1F, 400EE8DD4748BF1F, 400EE8DD4748BF1F)
30) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, 7FF0000000000000)
###
> D->ForEach((Clean(CotD(it), #it, 0), Clean(-CotD(-it), #it, 0), Clean(CotD(it +   360), #it, 0), Clean(CotD(it -   360), #it, 0)))
D->ForEach((Clean(CotD(it), #it, 0), Clean(-CotD(-it), #it, 0), Clean(CotD(it + 360), #it, 0), Clean(CotD(it - 360), #it, 0))) : (s, s, s, s)*
BndKind:Call, Type:(s, s, s, s)*, Bnd:(Call(∂.ForEach([map:1] Global(D), (Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.CotD(Scope(1)):r8)):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Add([-] Call(∂.CotD(Add([-] Scope(1))):r8))):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.CotD(Add(Scope(1), 360:r8)):r8)):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.CotD(Add(Scope(1), [-] 360:r8)):r8)):i8)):s)):(s, s, s, s)):(s, s, s, s)*))
Func sig: (D:r8*) to (s, s, s, s)*
Sequence: Seq<(str,str,str,str)>
 0) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, FFF0000000000000)
 1) (400DDB3D742C2656, 400DDB3D742C2656, 400DDB3D742C2656, 400DDB3D742C2656)
 2) (3FFBB67AE8584CAB, 3FFBB67AE8584CAB, 3FFBB67AE8584CAB, 3FFBB67AE8584CAB)
 3) (3FEFFFFFFFFFFFFE, 3FEFFFFFFFFFFFFE, 3FEFFFFFFFFFFFFE, 3FEFFFFFFFFFFFFE)
 4) (3FE279A74590331C, 3FE279A74590331C, 3FE279A74590331C, 3FE279A74590331C)
 5) (3FD126145E9ECD56, 3FD126145E9ECD56, 3FD126145E9ECD56, 3FD126145E9ECD56)
 6) (0000000000000000, 0000000000000000, 0000000000000000, 8000000000000000)
 7) (BFD126145E9ECD56, BFD126145E9ECD56, BFD126145E9ECD56, BFD126145E9ECD56)
 8) (BFE279A74590331C, BFE279A74590331C, BFE279A74590331C, BFE279A74590331C)
 9) (BFEFFFFFFFFFFFFE, BFEFFFFFFFFFFFFE, BFEFFFFFFFFFFFFE, BFEFFFFFFFFFFFFE)
10) (BFFBB67AE8584CAB, BFFBB67AE8584CAB, BFFBB67AE8584CAB, BFFBB67AE8584CAB)
11) (C00DDB3D742C2656, C00DDB3D742C2656, C00DDB3D742C2656, C00DDB3D742C2656)
12) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, FFF0000000000000)
13) (400DDB3D742C2656, 400DDB3D742C2656, 400DDB3D742C2656, 400DDB3D742C2656)
14) (3FFBB67AE8584CAB, 3FFBB67AE8584CAB, 3FFBB67AE8584CAB, 3FFBB67AE8584CAB)
15) (3FEFFFFFFFFFFFFE, 3FEFFFFFFFFFFFFE, 3FEFFFFFFFFFFFFE, 3FEFFFFFFFFFFFFE)
16) (3FE279A74590331C, 3FE279A74590331C, 3FE279A74590331C, 3FE279A74590331C)
17) (3FD126145E9ECD56, 3FD126145E9ECD56, 3FD126145E9ECD56, 3FD126145E9ECD56)
18) (0000000000000000, 0000000000000000, 0000000000000000, 8000000000000000)
19) (BFD126145E9ECD56, BFD126145E9ECD56, BFD126145E9ECD56, BFD126145E9ECD56)
20) (BFE279A74590331C, BFE279A74590331C, BFE279A74590331C, BFE279A74590331C)
21) (BFEFFFFFFFFFFFFE, BFEFFFFFFFFFFFFE, BFEFFFFFFFFFFFFE, BFEFFFFFFFFFFFFE)
22) (BFFBB67AE8584CAB, BFFBB67AE8584CAB, BFFBB67AE8584CAB, BFFBB67AE8584CAB)
23) (C00DDB3D742C2656, C00DDB3D742C2656, C00DDB3D742C2656, C00DDB3D742C2656)
24) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, 7FF0000000000000)
25) (400DDB3D742C2656, 400DDB3D742C2656, 400DDB3D742C2656, 400DDB3D742C2656)
26) (3FFBB67AE8584CAB, 3FFBB67AE8584CAB, 3FFBB67AE8584CAB, 3FFBB67AE8584CAB)
27) (3FEFFFFFFFFFFFFE, 3FEFFFFFFFFFFFFE, 3FEFFFFFFFFFFFFE, 3FEFFFFFFFFFFFFE)
28) (3FE279A74590331C, 3FE279A74590331C, 3FE279A74590331C, 3FE279A74590331C)
29) (3FD126145E9ECD56, 3FD126145E9ECD56, 3FD126145E9ECD56, 3FD126145E9ECD56)
30) (0000000000000000, 0000000000000000, 0000000000000000, 0000000000000000)
###
> R->ForEach((Clean(Cot (it), #it, 0), Clean(-Cot (-it), #it, 0), Clean(Cot (it + TwoPi), #it, 0), Clean( Cot(it - TwoPi), #it, 0)))
R->ForEach((Clean(Cot(it), #it, 0), Clean(-Cot(-it), #it, 0), Clean(Cot(it + TwoPi), #it, 0), Clean(Cot(it - TwoPi), #it, 0))) : (s, s, s, s)*
BndKind:Call, Type:(s, s, s, s)*, Bnd:(Call(∂.ForEach([map:1] Global(R), (Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Cot(Scope(1)):r8)):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Add([-] Call(∂.Cot(Add([-] Scope(1))):r8))):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Cot(Add(Scope(1), Global(TwoPi))):r8)):i8)):s), Call(∂.Int.Hex(Call(∂.Float.Bits(Call(∂.Cot(Add(Scope(1), [-] Global(TwoPi))):r8)):i8)):s)):(s, s, s, s)):(s, s, s, s)*))
Func sig: (R:r8*, TwoPi:r8) to (s, s, s, s)*
Sequence: Seq<(str,str,str,str)>
 0) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, FFF0000000000000)
 1) (400DDB3D742C2656, 400DDB3D742C2656, 400DDB3D742C2660, 400DDB3D742C2660)
 2) (3FFBB67AE8584CAB, 3FFBB67AE8584CAB, 3FFBB67AE8584CA5, 3FFBB67AE8584CA5)
 3) (3FEFFFFFFFFFFFFE, 3FEFFFFFFFFFFFFE, 3FEFFFFFFFFFFFFE, 3FEFFFFFFFFFFFFE)
 4) (3FE279A74590331D, 3FE279A74590331D, 3FE279A745903320, 3FE279A745903320)
 5) (3FD126145E9ECD55, 3FD126145E9ECD55, 3FD126145E9ECD50, 3FD126145E9ECD50)
 6) (0000000000000000, 0000000000000000, 0000000000000000, 8000000000000000)
 7) (BFD126145E9ECD59, BFD126145E9ECD59, BFD126145E9ECD50, BFD126145E9ECD50)
 8) (BFE279A74590331A, BFE279A74590331A, BFE279A745903315, BFE279A745903315)
 9) (BFEFFFFFFFFFFFFE, BFEFFFFFFFFFFFFE, BFEFFFFFFFFFFFEE, BFEFFFFFFFFFFFFE)
10) (BFFBB67AE8584CAE, BFFBB67AE8584CAE, BFFBB67AE8584CB5, BFFBB67AE8584CAE)
11) (C00DDB3D742C2650, C00DDB3D742C2650, C00DDB3D742C2660, C00DDB3D742C2650)
12) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, FFF0000000000000)
13) (400DDB3D742C2650, 400DDB3D742C2650, 400DDB3D742C2660, 400DDB3D742C2650)
14) (3FFBB67AE8584CA5, 3FFBB67AE8584CA5, 3FFBB67AE8584CB5, 3FFBB67AE8584CA5)
15) (3FEFFFFFFFFFFFFE, 3FEFFFFFFFFFFFFE, 3FEFFFFFFFFFFFEE, 3FEFFFFFFFFFFFFE)
16) (3FE279A745903320, 3FE279A745903320, 3FE279A74590332A, 3FE279A745903320)
17) (3FD126145E9ECD50, 3FD126145E9ECD50, 3FD126145E9ECD50, 3FD126145E9ECD50)
18) (0000000000000000, 0000000000000000, 0000000000000000, 8000000000000000)
19) (BFD126145E9ECD50, BFD126145E9ECD50, BFD126145E9ECD50, BFD126145E9ECD50)
20) (BFE279A745903320, BFE279A745903320, BFE279A74590332A, BFE279A745903320)
21) (BFEFFFFFFFFFFFFE, BFEFFFFFFFFFFFFE, BFEFFFFFFFFFFFEE, BFEFFFFFFFFFFFFE)
22) (BFFBB67AE8584CA5, BFFBB67AE8584CA5, BFFBB67AE8584CB5, BFFBB67AE8584CA5)
23) (C00DDB3D742C2660, C00DDB3D742C2660, C00DDB3D742C2660, C00DDB3D742C2660)
24) (7FF0000000000000, 7FF0000000000000, 7FF0000000000000, 7FF0000000000000)
25) (400DDB3D742C2660, 400DDB3D742C2660, 400DDB3D742C2660, 400DDB3D742C2660)
26) (3FFBB67AE8584CA5, 3FFBB67AE8584CA5, 3FFBB67AE8584CB5, 3FFBB67AE8584CA5)
27) (3FEFFFFFFFFFFFFE, 3FEFFFFFFFFFFFFE, 3FEFFFFFFFFFFFEE, 3FEFFFFFFFFFFFFE)
28) (3FE279A745903315, 3FE279A745903315, 3FE279A745903315, 3FE279A745903315)
29) (3FD126145E9ECD50, 3FD126145E9ECD50, 3FD126145E9ECD50, 3FD126145E9ECD50)
30) (0000000000000000, 0000000000000000, 0000000000000000, 0000000000000000)
###
> SVals->Asin()->(it, Degrees(it))
SVals->Asin()->(it, Degrees(it)) : (r8, r8)*
BndKind:Call, Type:(r8, r8)*, Bnd:(Call(∂.ForEach([map:1] Global(SVals), Call(∂.With([with:2] Call(∂.Asin(Scope(1)):r8), (Scope(2), Call(∂.Degrees(Scope(2)):r8)):(r8, r8)):(r8, r8))):(r8, r8)*))
Func sig: (SVals:r8*) to (r8, r8)*
Sequence: Seq<(r8,r8)>
 0) (0, 0)
 1) (0.5235987755982989, 30.000000000000004)
 2) (0.7853981633974484, 45.00000000000001)
 3) (1.0471975511965976, 59.99999999999999)
 4) (1.5707963267948966, 90)
 5) (-0, -0)
 6) (-0.5235987755982989, -30.000000000000004)
 7) (-0.7853981633974484, -45.00000000000001)
 8) (-1.0471975511965976, -59.99999999999999)
 9) (-1.5707963267948966, -90)
###
> SVals->Acos()->(it, Degrees(it))
SVals->Acos()->(it, Degrees(it)) : (r8, r8)*
BndKind:Call, Type:(r8, r8)*, Bnd:(Call(∂.ForEach([map:1] Global(SVals), Call(∂.With([with:2] Call(∂.Acos(Scope(1)):r8), (Scope(2), Call(∂.Degrees(Scope(2)):r8)):(r8, r8)):(r8, r8))):(r8, r8)*))
Func sig: (SVals:r8*) to (r8, r8)*
Sequence: Seq<(r8,r8)>
 0) (1.5707963267948966, 90)
 1) (1.0471975511965979, 60.00000000000001)
 2) (0.7853981633974483, 45)
 3) (0.5235987755982989, 30.000000000000004)
 4) (0, 0)
 5) (1.5707963267948966, 90)
 6) (2.0943951023931957, 120.00000000000001)
 7) (2.356194490192345, 135)
 8) (2.6179938779914944, 150)
 9) (3.141592653589793, 180)
###
> TVals->Atan()->(it, Degrees(it))
TVals->Atan()->(it, Degrees(it)) : (r8, r8)*
BndKind:Call, Type:(r8, r8)*, Bnd:(Call(∂.ForEach([map:1] Global(TVals), Call(∂.With([with:2] Call(∂.Atan(Scope(1)):r8), (Scope(2), Call(∂.Degrees(Scope(2)):r8)):(r8, r8)):(r8, r8))):(r8, r8)*))
Func sig: (TVals:r8*) to (r8, r8)*
Sequence: Seq<(r8,r8)>
 0) (0, 0)
 1) (0.5235987755982989, 30.000000000000004)
 2) (0.7853981633974483, 45)
 3) (1.0471975511965976, 59.99999999999999)
 4) (1.5707963267948966, 90)
 5) (-0, -0)
 6) (-0.5235987755982989, -30.000000000000004)
 7) (-0.7853981633974483, -45)
 8) (-1.0471975511965976, -59.99999999999999)
 9) (-1.5707963267948966, -90)
###
