**** New definitions: Acct, type: s
**** New definitions: Path, type: s
**** New definitions: Url, type: s
**** New definitions: File, type: s
**** New definitions: E, type: s
**** New udf: Props, arity: 1
**** New udf: PropFuncs, arity: 1

> Link.LocalText(File)
Link.LocalText(File) : U<Text>
BndKind:Call, Type:U<Text>, Bnd:(Call(∂.Link.LocalText(Global(File)):U<Text>))
Func sig: (File:s) to U<Text>
Type: Link, Value: Link<Generic>(<null>, c:\MyDir\MyFile.blah)
###
> Link.LocalData(File)
Link.LocalData(File) : U<Data>
BndKind:Call, Type:U<Data>, Bnd:(Call(∂.Link.LocalData(Global(File)):U<Data>))
Func sig: (File:s) to U<Data>
Type: Link, Value: Link<Generic>(<null>, c:\MyDir\MyFile.blah)
###
> Link.LocalImage(File)
Link.LocalImage(File) : U<Image>
BndKind:Call, Type:U<Image>, Bnd:(Call(∂.Link.LocalImage(Global(File)):U<Image>))
Func sig: (File:s) to U<Image>
Type: Link, Value: Link<Generic>(<null>, c:\MyDir\MyFile.blah)
###
> Link.LocalAudio(File)
Link.LocalAudio(File) : U<Audio>
BndKind:Call, Type:U<Audio>, Bnd:(Call(∂.Link.LocalAudio(Global(File)):U<Audio>))
Func sig: (File:s) to U<Audio>
Type: Link, Value: Link<Generic>(<null>, c:\MyDir\MyFile.blah)
###
> Link.LocalVideo(File)
Link.LocalVideo(File) : U<Video>
BndKind:Call, Type:U<Video>, Bnd:(Call(∂.Link.LocalVideo(Global(File)):U<Video>))
Func sig: (File:s) to U<Video>
Type: Link, Value: Link<Generic>(<null>, c:\MyDir\MyFile.blah)
###
> Link.LocalPDF(File)
Link.LocalPDF(File) : U<Document>
BndKind:Call, Type:U<Document>, Bnd:(Call(∂.Link.LocalPDF(Global(File)):U<Document>))
Func sig: (File:s) to U<Document>
Type: Link, Value: Link<Generic>(<null>, c:\MyDir\MyFile.blah)
###
> Link.LocalText("C:\\Whatever.blah")
Link.LocalText("C:\\Whatever.blah") : U<Text>
BndKind:Call, Type:U<Text>, Bnd:(Call(∂.Link.LocalText(str(C:\Whatever.blah)):U<Text>))
Func sig: () to U<Text>
Type: Link, Value: Link<Generic>(<null>, C:\Whatever.blah)
###
> Link.LocalData("C:\\Whatever.blah")
Link.LocalData("C:\\Whatever.blah") : U<Data>
BndKind:Call, Type:U<Data>, Bnd:(Call(∂.Link.LocalData(str(C:\Whatever.blah)):U<Data>))
Func sig: () to U<Data>
Type: Link, Value: Link<Generic>(<null>, C:\Whatever.blah)
###
> Link.LocalImage("C:\\Whatever.blah")
Link.LocalImage("C:\\Whatever.blah") : U<Image>
BndKind:Call, Type:U<Image>, Bnd:(Call(∂.Link.LocalImage(str(C:\Whatever.blah)):U<Image>))
Func sig: () to U<Image>
Type: Link, Value: Link<Generic>(<null>, C:\Whatever.blah)
###
> Link.LocalAudio("C:\\Whatever.blah")
Link.LocalAudio("C:\\Whatever.blah") : U<Audio>
BndKind:Call, Type:U<Audio>, Bnd:(Call(∂.Link.LocalAudio(str(C:\Whatever.blah)):U<Audio>))
Func sig: () to U<Audio>
Type: Link, Value: Link<Generic>(<null>, C:\Whatever.blah)
###
> Link.LocalVideo("C:\\Whatever.blah")
Link.LocalVideo("C:\\Whatever.blah") : U<Video>
BndKind:Call, Type:U<Video>, Bnd:(Call(∂.Link.LocalVideo(str(C:\Whatever.blah)):U<Video>))
Func sig: () to U<Video>
Type: Link, Value: Link<Generic>(<null>, C:\Whatever.blah)
###
> Link.LocalPDF("C:\\Whatever.blah")
Link.LocalPDF("C:\\Whatever.blah") : U<Document>
BndKind:Call, Type:U<Document>, Bnd:(Call(∂.Link.LocalPDF(str(C:\Whatever.blah)):U<Document>))
Func sig: () to U<Document>
Type: Link, Value: Link<Generic>(<null>, C:\Whatever.blah)
###
> Link.LocalText(File)->IsNull()
Link.LocalText(File)->IsNull() : b
BndKind:Call, Type:b, Bnd:(Call(∂.IsNull(Call(∂.Link.LocalText(Global(File)):U<Text>)):b))
Func sig: (File:s) to b
Type: bool, Value: false
###
> Link.LocalText(E)->IsNull()
Link.LocalText(E)->IsNull() : b
BndKind:Call, Type:b, Bnd:(Call(∂.IsNull(Call(∂.Link.LocalText(Global(E)):U<Text>)):b))
Func sig: (E:s) to b
Type: bool, Value: true 
###
> Link.WebText(Url)
Link.WebText(Url) : U<Text>
BndKind:Call, Type:U<Text>, Bnd:(Call(∂.Link.WebText(Global(Url)):U<Text>))
Func sig: (Url:s) to U<Text>
Type: Link, Value: Link<Http>(<null>, https://microsoft.com/Resource.blah)
###
> Link.WebData(Url)
Link.WebData(Url) : U<Data>
BndKind:Call, Type:U<Data>, Bnd:(Call(∂.Link.WebData(Global(Url)):U<Data>))
Func sig: (Url:s) to U<Data>
Type: Link, Value: Link<Http>(<null>, https://microsoft.com/Resource.blah)
###
> Link.WebImage(Url)
Link.WebImage(Url) : U<Image>
BndKind:Call, Type:U<Image>, Bnd:(Call(∂.Link.WebImage(Global(Url)):U<Image>))
Func sig: (Url:s) to U<Image>
Type: Link, Value: Link<Http>(<null>, https://microsoft.com/Resource.blah)
###
> Link.WebAudio(Url)
Link.WebAudio(Url) : U<Audio>
BndKind:Call, Type:U<Audio>, Bnd:(Call(∂.Link.WebAudio(Global(Url)):U<Audio>))
Func sig: (Url:s) to U<Audio>
Type: Link, Value: Link<Http>(<null>, https://microsoft.com/Resource.blah)
###
> Link.WebVideo(Url)
Link.WebVideo(Url) : U<Video>
BndKind:Call, Type:U<Video>, Bnd:(Call(∂.Link.WebVideo(Global(Url)):U<Video>))
Func sig: (Url:s) to U<Video>
Type: Link, Value: Link<Http>(<null>, https://microsoft.com/Resource.blah)
###
> Link.WebPDF(Url)
Link.WebPDF(Url) : U<Document>
BndKind:Call, Type:U<Document>, Bnd:(Call(∂.Link.WebPDF(Global(Url)):U<Document>))
Func sig: (Url:s) to U<Document>
Type: Link, Value: Link<Http>(<null>, https://microsoft.com/Resource.blah)
###
> Link.WebText("https://microsoft.com/something.blah")
Link.WebText("https://microsoft.com/something.blah") : U<Text>
BndKind:Call, Type:U<Text>, Bnd:(Call(∂.Link.WebText(str(https://microsoft.com/something.blah)):U<Text>))
Func sig: () to U<Text>
Type: Link, Value: Link<Http>(<null>, https://microsoft.com/something.blah)
###
> Link.WebData("https://microsoft.com/something.blah")
Link.WebData("https://microsoft.com/something.blah") : U<Data>
BndKind:Call, Type:U<Data>, Bnd:(Call(∂.Link.WebData(str(https://microsoft.com/something.blah)):U<Data>))
Func sig: () to U<Data>
Type: Link, Value: Link<Http>(<null>, https://microsoft.com/something.blah)
###
> Link.WebImage("https://microsoft.com/something.blah")
Link.WebImage("https://microsoft.com/something.blah") : U<Image>
BndKind:Call, Type:U<Image>, Bnd:(Call(∂.Link.WebImage(str(https://microsoft.com/something.blah)):U<Image>))
Func sig: () to U<Image>
Type: Link, Value: Link<Http>(<null>, https://microsoft.com/something.blah)
###
> Link.WebAudio("https://microsoft.com/something.blah")
Link.WebAudio("https://microsoft.com/something.blah") : U<Audio>
BndKind:Call, Type:U<Audio>, Bnd:(Call(∂.Link.WebAudio(str(https://microsoft.com/something.blah)):U<Audio>))
Func sig: () to U<Audio>
Type: Link, Value: Link<Http>(<null>, https://microsoft.com/something.blah)
###
> Link.WebVideo("https://microsoft.com/something.blah")
Link.WebVideo("https://microsoft.com/something.blah") : U<Video>
BndKind:Call, Type:U<Video>, Bnd:(Call(∂.Link.WebVideo(str(https://microsoft.com/something.blah)):U<Video>))
Func sig: () to U<Video>
Type: Link, Value: Link<Http>(<null>, https://microsoft.com/something.blah)
###
> Link.WebPDF("https://microsoft.com/something.blah")
Link.WebPDF("https://microsoft.com/something.blah") : U<Document>
BndKind:Call, Type:U<Document>, Bnd:(Call(∂.Link.WebPDF(str(https://microsoft.com/something.blah)):U<Document>))
Func sig: () to U<Document>
Type: Link, Value: Link<Http>(<null>, https://microsoft.com/something.blah)
###
> Link.BlobText(Acct, Path)
Link.BlobText(Acct, Path) : U<Text>
BndKind:Call, Type:U<Text>, Bnd:(Call(∂.Link.BlobText(Global(Acct), Global(Path)):U<Text>))
Func sig: (Acct:s, Path:s) to U<Text>
Type: Link, Value: Link<AzureBlob>(SomeAccount, SomePath)
###
> Link.BlobData(Acct, Path)
Link.BlobData(Acct, Path) : U<Data>
BndKind:Call, Type:U<Data>, Bnd:(Call(∂.Link.BlobData(Global(Acct), Global(Path)):U<Data>))
Func sig: (Acct:s, Path:s) to U<Data>
Type: Link, Value: Link<AzureBlob>(SomeAccount, SomePath)
###
> Link.BlobImage(Acct, Path)
Link.BlobImage(Acct, Path) : U<Image>
BndKind:Call, Type:U<Image>, Bnd:(Call(∂.Link.BlobImage(Global(Acct), Global(Path)):U<Image>))
Func sig: (Acct:s, Path:s) to U<Image>
Type: Link, Value: Link<AzureBlob>(SomeAccount, SomePath)
###
> Link.BlobAudio(Acct, Path)
Link.BlobAudio(Acct, Path) : U<Audio>
BndKind:Call, Type:U<Audio>, Bnd:(Call(∂.Link.BlobAudio(Global(Acct), Global(Path)):U<Audio>))
Func sig: (Acct:s, Path:s) to U<Audio>
Type: Link, Value: Link<AzureBlob>(SomeAccount, SomePath)
###
> Link.BlobVideo(Acct, Path)
Link.BlobVideo(Acct, Path) : U<Video>
BndKind:Call, Type:U<Video>, Bnd:(Call(∂.Link.BlobVideo(Global(Acct), Global(Path)):U<Video>))
Func sig: (Acct:s, Path:s) to U<Video>
Type: Link, Value: Link<AzureBlob>(SomeAccount, SomePath)
###
> Link.BlobPDF(Acct, Path)
Link.BlobPDF(Acct, Path) : U<Document>
BndKind:Call, Type:U<Document>, Bnd:(Call(∂.Link.BlobPDF(Global(Acct), Global(Path)):U<Document>))
Func sig: (Acct:s, Path:s) to U<Document>
Type: Link, Value: Link<AzureBlob>(SomeAccount, SomePath)
###
> Link.BlobText(Acct, "path")
Link.BlobText(Acct, "path") : U<Text>
BndKind:Call, Type:U<Text>, Bnd:(Call(∂.Link.BlobText(Global(Acct), str(path)):U<Text>))
Func sig: (Acct:s) to U<Text>
Type: Link, Value: Link<AzureBlob>(SomeAccount, path)
###
> Link.BlobData(Acct, "path")
Link.BlobData(Acct, "path") : U<Data>
BndKind:Call, Type:U<Data>, Bnd:(Call(∂.Link.BlobData(Global(Acct), str(path)):U<Data>))
Func sig: (Acct:s) to U<Data>
Type: Link, Value: Link<AzureBlob>(SomeAccount, path)
###
> Link.BlobImage(Acct, "path")
Link.BlobImage(Acct, "path") : U<Image>
BndKind:Call, Type:U<Image>, Bnd:(Call(∂.Link.BlobImage(Global(Acct), str(path)):U<Image>))
Func sig: (Acct:s) to U<Image>
Type: Link, Value: Link<AzureBlob>(SomeAccount, path)
###
> Link.BlobAudio(Acct, "path")
Link.BlobAudio(Acct, "path") : U<Audio>
BndKind:Call, Type:U<Audio>, Bnd:(Call(∂.Link.BlobAudio(Global(Acct), str(path)):U<Audio>))
Func sig: (Acct:s) to U<Audio>
Type: Link, Value: Link<AzureBlob>(SomeAccount, path)
###
> Link.BlobVideo(Acct, "path")
Link.BlobVideo(Acct, "path") : U<Video>
BndKind:Call, Type:U<Video>, Bnd:(Call(∂.Link.BlobVideo(Global(Acct), str(path)):U<Video>))
Func sig: (Acct:s) to U<Video>
Type: Link, Value: Link<AzureBlob>(SomeAccount, path)
###
> Link.BlobPDF(Acct, "file")
Link.BlobPDF(Acct, "file") : U<Document>
BndKind:Call, Type:U<Document>, Bnd:(Call(∂.Link.BlobPDF(Global(Acct), str(file)):U<Document>))
Func sig: (Acct:s) to U<Document>
Type: Link, Value: Link<AzureBlob>(SomeAccount, file)
###
> Link.BlobText("acct", Path)
Link.BlobText("acct", Path) : U<Text>
BndKind:Call, Type:U<Text>, Bnd:(Call(∂.Link.BlobText(str(acct), Global(Path)):U<Text>))
Func sig: (Path:s) to U<Text>
Type: Link, Value: Link<AzureBlob>(acct, SomePath)
###
> Link.BlobData("acct", Path)
Link.BlobData("acct", Path) : U<Data>
BndKind:Call, Type:U<Data>, Bnd:(Call(∂.Link.BlobData(str(acct), Global(Path)):U<Data>))
Func sig: (Path:s) to U<Data>
Type: Link, Value: Link<AzureBlob>(acct, SomePath)
###
> Link.BlobImage("acct", Path)
Link.BlobImage("acct", Path) : U<Image>
BndKind:Call, Type:U<Image>, Bnd:(Call(∂.Link.BlobImage(str(acct), Global(Path)):U<Image>))
Func sig: (Path:s) to U<Image>
Type: Link, Value: Link<AzureBlob>(acct, SomePath)
###
> Link.BlobAudio("acct", Path)
Link.BlobAudio("acct", Path) : U<Audio>
BndKind:Call, Type:U<Audio>, Bnd:(Call(∂.Link.BlobAudio(str(acct), Global(Path)):U<Audio>))
Func sig: (Path:s) to U<Audio>
Type: Link, Value: Link<AzureBlob>(acct, SomePath)
###
> Link.BlobVideo("acct", Path)
Link.BlobVideo("acct", Path) : U<Video>
BndKind:Call, Type:U<Video>, Bnd:(Call(∂.Link.BlobVideo(str(acct), Global(Path)):U<Video>))
Func sig: (Path:s) to U<Video>
Type: Link, Value: Link<AzureBlob>(acct, SomePath)
###
> Link.BlobPDF("acct", Path)
Link.BlobPDF("acct", Path) : U<Document>
BndKind:Call, Type:U<Document>, Bnd:(Call(∂.Link.BlobPDF(str(acct), Global(Path)):U<Document>))
Func sig: (Path:s) to U<Document>
Type: Link, Value: Link<AzureBlob>(acct, SomePath)
###
> Link.BlobText("acct", "path")
Link.BlobText("acct", "path") : U<Text>
BndKind:Call, Type:U<Text>, Bnd:(Call(∂.Link.BlobText(str(acct), str(path)):U<Text>))
Func sig: () to U<Text>
Type: Link, Value: Link<AzureBlob>(acct, path)
###
> Link.BlobData("acct", "path")
Link.BlobData("acct", "path") : U<Data>
BndKind:Call, Type:U<Data>, Bnd:(Call(∂.Link.BlobData(str(acct), str(path)):U<Data>))
Func sig: () to U<Data>
Type: Link, Value: Link<AzureBlob>(acct, path)
###
> Link.BlobImage("acct", "path")
Link.BlobImage("acct", "path") : U<Image>
BndKind:Call, Type:U<Image>, Bnd:(Call(∂.Link.BlobImage(str(acct), str(path)):U<Image>))
Func sig: () to U<Image>
Type: Link, Value: Link<AzureBlob>(acct, path)
###
> Link.BlobAudio("acct", "path")
Link.BlobAudio("acct", "path") : U<Audio>
BndKind:Call, Type:U<Audio>, Bnd:(Call(∂.Link.BlobAudio(str(acct), str(path)):U<Audio>))
Func sig: () to U<Audio>
Type: Link, Value: Link<AzureBlob>(acct, path)
###
> Link.BlobVideo("acct", "path")
Link.BlobVideo("acct", "path") : U<Video>
BndKind:Call, Type:U<Video>, Bnd:(Call(∂.Link.BlobVideo(str(acct), str(path)):U<Video>))
Func sig: () to U<Video>
Type: Link, Value: Link<AzureBlob>(acct, path)
###
> Link.BlobPDF("acct", "path")
Link.BlobPDF("acct", "path") : U<Document>
BndKind:Call, Type:U<Document>, Bnd:(Call(∂.Link.BlobPDF(str(acct), str(path)):U<Document>))
Func sig: () to U<Document>
Type: Link, Value: Link<AzureBlob>(acct, path)
###
> Link.DataLakeText(Acct, Path)
Link.DataLakeText(Acct, Path) : U<Text>
BndKind:Call, Type:U<Text>, Bnd:(Call(∂.Link.DataLakeText(Global(Acct), Global(Path)):U<Text>))
Func sig: (Acct:s, Path:s) to U<Text>
Type: Link, Value: Link<AzureDataLakeGen2>(SomeAccount, SomePath)
###
> Link.DataLakeData(Acct, Path)
Link.DataLakeData(Acct, Path) : U<Data>
BndKind:Call, Type:U<Data>, Bnd:(Call(∂.Link.DataLakeData(Global(Acct), Global(Path)):U<Data>))
Func sig: (Acct:s, Path:s) to U<Data>
Type: Link, Value: Link<AzureDataLakeGen2>(SomeAccount, SomePath)
###
> Link.DataLakeImage(Acct, Path)
Link.DataLakeImage(Acct, Path) : U<Image>
BndKind:Call, Type:U<Image>, Bnd:(Call(∂.Link.DataLakeImage(Global(Acct), Global(Path)):U<Image>))
Func sig: (Acct:s, Path:s) to U<Image>
Type: Link, Value: Link<AzureDataLakeGen2>(SomeAccount, SomePath)
###
> Link.DataLakeAudio(Acct, Path)
Link.DataLakeAudio(Acct, Path) : U<Audio>
BndKind:Call, Type:U<Audio>, Bnd:(Call(∂.Link.DataLakeAudio(Global(Acct), Global(Path)):U<Audio>))
Func sig: (Acct:s, Path:s) to U<Audio>
Type: Link, Value: Link<AzureDataLakeGen2>(SomeAccount, SomePath)
###
> Link.DataLakeVideo(Acct, Path)
Link.DataLakeVideo(Acct, Path) : U<Video>
BndKind:Call, Type:U<Video>, Bnd:(Call(∂.Link.DataLakeVideo(Global(Acct), Global(Path)):U<Video>))
Func sig: (Acct:s, Path:s) to U<Video>
Type: Link, Value: Link<AzureDataLakeGen2>(SomeAccount, SomePath)
###
> Link.DataLakePDF(Acct, Path)
Link.DataLakePDF(Acct, Path) : U<Document>
BndKind:Call, Type:U<Document>, Bnd:(Call(∂.Link.DataLakePDF(Global(Acct), Global(Path)):U<Document>))
Func sig: (Acct:s, Path:s) to U<Document>
Type: Link, Value: Link<AzureDataLakeGen2>(SomeAccount, SomePath)
###
> Link.LegacyDataLakeText(Acct, Path)
Link.LegacyDataLakeText(Acct, Path) : U<Text>
BndKind:Call, Type:U<Text>, Bnd:(Call(∂.Link.LegacyDataLakeText(Global(Acct), Global(Path)):U<Text>))
Func sig: (Acct:s, Path:s) to U<Text>
Type: Link, Value: Link<AzureDataLake>(SomeAccount, SomePath)
###
> Link.LegacyDataLakeData(Acct, Path)
Link.LegacyDataLakeData(Acct, Path) : U<Data>
BndKind:Call, Type:U<Data>, Bnd:(Call(∂.Link.LegacyDataLakeData(Global(Acct), Global(Path)):U<Data>))
Func sig: (Acct:s, Path:s) to U<Data>
Type: Link, Value: Link<AzureDataLake>(SomeAccount, SomePath)
###
> Link.LegacyDataLakeImage(Acct, Path)
Link.LegacyDataLakeImage(Acct, Path) : U<Image>
BndKind:Call, Type:U<Image>, Bnd:(Call(∂.Link.LegacyDataLakeImage(Global(Acct), Global(Path)):U<Image>))
Func sig: (Acct:s, Path:s) to U<Image>
Type: Link, Value: Link<AzureDataLake>(SomeAccount, SomePath)
###
> Link.LegacyDataLakeAudio(Acct, Path)
Link.LegacyDataLakeAudio(Acct, Path) : U<Audio>
BndKind:Call, Type:U<Audio>, Bnd:(Call(∂.Link.LegacyDataLakeAudio(Global(Acct), Global(Path)):U<Audio>))
Func sig: (Acct:s, Path:s) to U<Audio>
Type: Link, Value: Link<AzureDataLake>(SomeAccount, SomePath)
###
> Link.LegacyDataLakeVideo(Acct, Path)
Link.LegacyDataLakeVideo(Acct, Path) : U<Video>
BndKind:Call, Type:U<Video>, Bnd:(Call(∂.Link.LegacyDataLakeVideo(Global(Acct), Global(Path)):U<Video>))
Func sig: (Acct:s, Path:s) to U<Video>
Type: Link, Value: Link<AzureDataLake>(SomeAccount, SomePath)
###
> Link.LegacyDataLakePDF(Acct, Path)
Link.LegacyDataLakePDF(Acct, Path) : U<Document>
BndKind:Call, Type:U<Document>, Bnd:(Call(∂.Link.LegacyDataLakePDF(Global(Acct), Global(Path)):U<Document>))
Func sig: (Acct:s, Path:s) to U<Document>
Type: Link, Value: Link<AzureDataLake>(SomeAccount, SomePath)
###
> Link.LocalText(E)
Link.LocalText(E) : U<Text>
BndKind:Call, Type:U<Text>, Bnd:(Call(∂.Link.LocalText(Global(E)):U<Text>))
Func sig: (E:s) to U<Text>
Type: <null>, Value: <null>
###
> Link.BlobText(E, Path)
Link.BlobText(E, Path) : U<Text>
BndKind:Call, Type:U<Text>, Bnd:(Call(∂.Link.BlobText(Global(E), Global(Path)):U<Text>))
Func sig: (E:s, Path:s) to U<Text>
Type: <null>, Value: <null>
###
> Link.BlobText(Acct, E)
Link.BlobText(Acct, E) : U<Text>
BndKind:Call, Type:U<Text>, Bnd:(Call(∂.Link.BlobText(Global(Acct), Global(E)):U<Text>))
Func sig: (Acct:s, E:s) to U<Text>
Type: <null>, Value: <null>
###
> Link.BlobText(E, E)
Link.BlobText(E, E) : U<Text>
BndKind:Call, Type:U<Text>, Bnd:(Call(∂.Link.BlobText(Global(E), Global(E)):U<Text>))
Func sig: (E:s) to U<Text>
Type: <null>, Value: <null>
###
> Props(Link.LocalText(File))
Props(Link.LocalText(File)) : (s, s, s)
BndKind:Call, Type:(s, s, s), Bnd:(Call(∂.With([with:1] Call(∂.Link.LocalText(Global(File)):U<Text>), (Call(∂.Link.Kind(Scope(1)):s), Call(∂.Link.Account(Scope(1)):s), Call(∂.Link.Path(Scope(1)):s)):(s, s, s)):(s, s, s)))
Func sig: (File:s) to (s, s, s)
Type: (str,str,str), Value: (Local, <null>, c:\MyDir\MyFile.blah)
###
> Props(Link.LocalText(E))
Props(Link.LocalText(E)) : (s, s, s)
BndKind:Call, Type:(s, s, s), Bnd:(Call(∂.With([with:1] Call(∂.Link.LocalText(Global(E)):U<Text>), (Call(∂.Link.Kind(Scope(1)):s), Call(∂.Link.Account(Scope(1)):s), Call(∂.Link.Path(Scope(1)):s)):(s, s, s)):(s, s, s)))
Func sig: (E:s) to (s, s, s)
Type: (str,str,str), Value: (<null>, <null>, <null>)
###
> Props(Link.WebText(Url))
Props(Link.WebText(Url)) : (s, s, s)
BndKind:Call, Type:(s, s, s), Bnd:(Call(∂.With([with:1] Call(∂.Link.WebText(Global(Url)):U<Text>), (Call(∂.Link.Kind(Scope(1)):s), Call(∂.Link.Account(Scope(1)):s), Call(∂.Link.Path(Scope(1)):s)):(s, s, s)):(s, s, s)))
Func sig: (Url:s) to (s, s, s)
Type: (str,str,str), Value: (Web, <null>, https://microsoft.com/Resource.blah)
###
> Props(Link.BlobText(Acct, Path))
Props(Link.BlobText(Acct, Path)) : (s, s, s)
BndKind:Call, Type:(s, s, s), Bnd:(Call(∂.With([with:1] Call(∂.Link.BlobText(Global(Acct), Global(Path)):U<Text>), (Call(∂.Link.Kind(Scope(1)):s), Call(∂.Link.Account(Scope(1)):s), Call(∂.Link.Path(Scope(1)):s)):(s, s, s)):(s, s, s)))
Func sig: (Acct:s, Path:s) to (s, s, s)
Type: (str,str,str), Value: (Blob, SomeAccount, SomePath)
###
> Props(Link.BlobText(E, Path))
Props(Link.BlobText(E, Path)) : (s, s, s)
BndKind:Call, Type:(s, s, s), Bnd:(Call(∂.With([with:1] Call(∂.Link.BlobText(Global(E), Global(Path)):U<Text>), (Call(∂.Link.Kind(Scope(1)):s), Call(∂.Link.Account(Scope(1)):s), Call(∂.Link.Path(Scope(1)):s)):(s, s, s)):(s, s, s)))
Func sig: (E:s, Path:s) to (s, s, s)
Type: (str,str,str), Value: (<null>, <null>, <null>)
###
> Props(Link.DataLakeText(Acct, Path))
Props(Link.DataLakeText(Acct, Path)) : (s, s, s)
BndKind:Call, Type:(s, s, s), Bnd:(Call(∂.With([with:1] Call(∂.Link.DataLakeText(Global(Acct), Global(Path)):U<Text>), (Call(∂.Link.Kind(Scope(1)):s), Call(∂.Link.Account(Scope(1)):s), Call(∂.Link.Path(Scope(1)):s)):(s, s, s)):(s, s, s)))
Func sig: (Acct:s, Path:s) to (s, s, s)
Type: (str,str,str), Value: (DataLake, SomeAccount, SomePath)
###
> Props(Link.LegacyDataLakeText(Acct, Path))
Props(Link.LegacyDataLakeText(Acct, Path)) : (s, s, s)
BndKind:Call, Type:(s, s, s), Bnd:(Call(∂.With([with:1] Call(∂.Link.LegacyDataLakeText(Global(Acct), Global(Path)):U<Text>), (Call(∂.Link.Kind(Scope(1)):s), Call(∂.Link.Account(Scope(1)):s), Call(∂.Link.Path(Scope(1)):s)):(s, s, s)):(s, s, s)))
Func sig: (Acct:s, Path:s) to (s, s, s)
Type: (str,str,str), Value: (LegacyDataLake, SomeAccount, SomePath)
###
> PropFuncs(Link.LocalText(File))
PropFuncs(Link.LocalText(File)) : (s, s, s)
BndKind:Call, Type:(s, s, s), Bnd:(Call(∂.With([with:1] Call(∂.Link.LocalText(Global(File)):U<Text>), (Call(∂.Link.Kind(Scope(1)):s), Call(∂.Link.Account(Scope(1)):s), Call(∂.Link.Path(Scope(1)):s)):(s, s, s)):(s, s, s)))
Func sig: (File:s) to (s, s, s)
Type: (str,str,str), Value: (Local, <null>, c:\MyDir\MyFile.blah)
###
> PropFuncs(Link.LocalText(E))
PropFuncs(Link.LocalText(E)) : (s, s, s)
BndKind:Call, Type:(s, s, s), Bnd:(Call(∂.With([with:1] Call(∂.Link.LocalText(Global(E)):U<Text>), (Call(∂.Link.Kind(Scope(1)):s), Call(∂.Link.Account(Scope(1)):s), Call(∂.Link.Path(Scope(1)):s)):(s, s, s)):(s, s, s)))
Func sig: (E:s) to (s, s, s)
Type: (str,str,str), Value: (<null>, <null>, <null>)
###
> Tensor.From([Link.LocalText("A"), Link.LocalText("B")], 3)[2].Kind
Tensor.From([Link.LocalText("A"), Link.LocalText("B")], 3)[2].Kind : s
BndKind:Call, Type:s, Bnd:(Call(∂.Link.Kind(IdxTen(Call(∂.Tensor.From([Call(∂.Link.LocalText(str(A)):U<Text>), Call(∂.Link.LocalText(str(B)):U<Text>)]:U<Text>*, 3:i8):U<Text>[*]), 2:i8):U<Text>):s))
Func sig: (<ctx>:x) to s
Type: <null>, Value: <null>
*** Ctx ping count: 0
###
> Link.Local("Text", File)
Link.Local("Text", File) : U<Text>
BndKind:Call, Type:U<Text>, Bnd:(Call(∂.Link.Local(str(Text), Global(File)):U<Text>))
Func sig: (File:s) to U<Text>
Type: Link, Value: Link<Generic>(<null>, c:\MyDir\MyFile.blah)
###
> Link.Local("PDF", "C:\\Whatever.blah")
Link.Local("PDF", "C:\\Whatever.blah") : U<PDF>
BndKind:Call, Type:U<PDF>, Bnd:(Call(∂.Link.Local(str(PDF), str(C:\Whatever.blah)):U<PDF>))
Func sig: () to U<PDF>
Type: Link, Value: Link<Generic>(<null>, C:\Whatever.blah)
###
> Link.Local("", File)
Link.Local("", File) : U<>
BndKind:Call, Type:U<>, Bnd:(Call(∂.Link.Local(str(), Global(File)):U<>))
Func sig: (File:s) to U<>
Type: Link, Value: Link<Generic>(<null>, c:\MyDir\MyFile.blah)
###
> Link.Local(null, File)
Link.Local(null, File) : U<>
BndKind:Call, Type:U<>, Bnd:(Call(∂.Link.Local(str(<null>), Global(File)):U<>))
Func sig: (File:s) to U<>
Type: Link, Value: Link<Generic>(<null>, c:\MyDir\MyFile.blah)
###
> Link.Local(1234, "C:\\Whatever.blah")   // Error
Link.Local(1234, "C:\\Whatever.blah") : U<>
BndKind:Call, Type:U<>, Bnd:(Call(∂.Link.Local*(Error(ErrBadType_Src_Dst), str(C:\Whatever.blah)):U<>))
*** Error: (11,15) Node: 1234, Message: Flavor is not a text literal
*** Error: (11,15) Node: 1234, Message: Invalid operand type: cannot convert type 'i8' to 's'
###
> Link.Local("Ima ge", "C:\\Whatever.blah")   // Error
Link.Local("Ima ge", "C:\\Whatever.blah") : U<>
BndKind:Call, Type:U<>, Bnd:(Call(∂.Link.Local*(str(Ima ge), str(C:\Whatever.blah)):U<>))
*** Error: (11,19) Node: "Ima ge", Message: Invalid flavor: "Ima ge"
###
> Link.Local("Text", E)->IsNull()
Link.Local("Text", E)->IsNull() : b
BndKind:Call, Type:b, Bnd:(Call(∂.IsNull(Call(∂.Link.Local(str(Text), Global(E)):U<Text>)):b))
Func sig: (E:s) to b
Type: bool, Value: true 
###
> Link.Local(null, File)->IsNull()
Link.Local(null, File)->IsNull() : b
BndKind:Call, Type:b, Bnd:(Call(∂.IsNull(Call(∂.Link.Local(str(<null>), Global(File)):U<>)):b))
Func sig: (File:s) to b
Type: bool, Value: false
###
> Link.Local(1234, "C:\\Whatever.blah")->IsNull() // Error
Link.Local(1234, "C:\\Whatever.blah")->IsNull() : b
BndKind:Call, Type:b, Bnd:(Call(∂.IsNull(Call(∂.Link.Local*(Error(ErrBadType_Src_Dst), str(C:\Whatever.blah)):U<>)):b))
*** Error: (11,15) Node: 1234, Message: Flavor is not a text literal
*** Error: (11,15) Node: 1234, Message: Invalid operand type: cannot convert type 'i8' to 's'
###
> Link.Local("Ima ge", "C:\\Whatever.blah")->IsNull() // Error
Link.Local("Ima ge", "C:\\Whatever.blah")->IsNull() : b
BndKind:Call, Type:b, Bnd:(Call(∂.IsNull(Call(∂.Link.Local*(str(Ima ge), str(C:\Whatever.blah)):U<>)):b))
*** Error: (11,19) Node: "Ima ge", Message: Invalid flavor: "Ima ge"
###
> Link.Web("Txt", Url)
Link.Web("Txt", Url) : U<Txt>
BndKind:Call, Type:U<Txt>, Bnd:(Call(∂.Link.Web(str(Txt), Global(Url)):U<Txt>))
Func sig: (Url:s) to U<Txt>
Type: Link, Value: Link<Http>(<null>, https://microsoft.com/Resource.blah)
###
> Link.Web("Mof", "https://microsoft.com/something.blah")
Link.Web("Mof", "https://microsoft.com/something.blah") : U<Mof>
BndKind:Call, Type:U<Mof>, Bnd:(Call(∂.Link.Web(str(Mof), str(https://microsoft.com/something.blah)):U<Mof>))
Func sig: () to U<Mof>
Type: Link, Value: Link<Http>(<null>, https://microsoft.com/something.blah)
###
> Link.Web("", Url)
Link.Web("", Url) : U<>
BndKind:Call, Type:U<>, Bnd:(Call(∂.Link.Web(str(), Global(Url)):U<>))
Func sig: (Url:s) to U<>
Type: Link, Value: Link<Http>(<null>, https://microsoft.com/Resource.blah)
###
> Link.Web("-", "https://microsoft.com/something.blah")   // Error
Link.Web("-", "https://microsoft.com/something.blah") : U<>
BndKind:Call, Type:U<>, Bnd:(Call(∂.Link.Web*(str(-), str(https://microsoft.com/something.blah)):U<>))
*** Error: (9,12) Node: "-", Message: Invalid flavor: "-"
###
> Link.Blob("PDF", Acct, Path)
Link.Blob("PDF", Acct, Path) : U<PDF>
BndKind:Call, Type:U<PDF>, Bnd:(Call(∂.Link.Blob(str(PDF), Global(Acct), Global(Path)):U<PDF>))
Func sig: (Acct:s, Path:s) to U<PDF>
Type: Link, Value: Link<AzureBlob>(SomeAccount, SomePath)
###
> Link.Blob("", Acct, Path)
Link.Blob("", Acct, Path) : U<>
BndKind:Call, Type:U<>, Bnd:(Call(∂.Link.Blob(str(), Global(Acct), Global(Path)):U<>))
Func sig: (Acct:s, Path:s) to U<>
Type: Link, Value: Link<AzureBlob>(SomeAccount, SomePath)
###
> Link.Blob(null, Acct, Path)
Link.Blob(null, Acct, Path) : U<>
BndKind:Call, Type:U<>, Bnd:(Call(∂.Link.Blob(str(<null>), Global(Acct), Global(Path)):U<>))
Func sig: (Acct:s, Path:s) to U<>
Type: Link, Value: Link<AzureBlob>(SomeAccount, SomePath)
###
> Link.Blob(1234, Acct, Path) // Error
Link.Blob(1234, Acct, Path) : U<>
BndKind:Call, Type:U<>, Bnd:(Call(∂.Link.Blob*(Error(ErrBadType_Src_Dst), Global(Acct), Global(Path)):U<>))
*** Error: (10,14) Node: 1234, Message: Flavor is not a text literal
*** Error: (10,14) Node: 1234, Message: Invalid operand type: cannot convert type 'i8' to 's'
###
> Link.Blob("Txt", Acct, "file")
Link.Blob("Txt", Acct, "file") : U<Txt>
BndKind:Call, Type:U<Txt>, Bnd:(Call(∂.Link.Blob(str(Txt), Global(Acct), str(file)):U<Txt>))
Func sig: (Acct:s) to U<Txt>
Type: Link, Value: Link<AzureBlob>(SomeAccount, file)
###
> Link.Blob("Txt", "acct", Path)
Link.Blob("Txt", "acct", Path) : U<Txt>
BndKind:Call, Type:U<Txt>, Bnd:(Call(∂.Link.Blob(str(Txt), str(acct), Global(Path)):U<Txt>))
Func sig: (Path:s) to U<Txt>
Type: Link, Value: Link<AzureBlob>(acct, SomePath)
###
> Link.Blob("PDF", "acct", "path")
Link.Blob("PDF", "acct", "path") : U<PDF>
BndKind:Call, Type:U<PDF>, Bnd:(Call(∂.Link.Blob(str(PDF), str(acct), str(path)):U<PDF>))
Func sig: () to U<PDF>
Type: Link, Value: Link<AzureBlob>(acct, path)
###
> Link.DataLake("PDF", Acct, Path)
Link.DataLake("PDF", Acct, Path) : U<PDF>
BndKind:Call, Type:U<PDF>, Bnd:(Call(∂.Link.DataLake(str(PDF), Global(Acct), Global(Path)):U<PDF>))
Func sig: (Acct:s, Path:s) to U<PDF>
Type: Link, Value: Link<AzureDataLakeGen2>(SomeAccount, SomePath)
###
> Link.DataLake("", Acct, Path)
Link.DataLake("", Acct, Path) : U<>
BndKind:Call, Type:U<>, Bnd:(Call(∂.Link.DataLake(str(), Global(Acct), Global(Path)):U<>))
Func sig: (Acct:s, Path:s) to U<>
Type: Link, Value: Link<AzureDataLakeGen2>(SomeAccount, SomePath)
###
> Link.LegacyDataLake("PDF", Acct, Path)
Link.LegacyDataLake("PDF", Acct, Path) : U<PDF>
BndKind:Call, Type:U<PDF>, Bnd:(Call(∂.Link.LegacyDataLake(str(PDF), Global(Acct), Global(Path)):U<PDF>))
Func sig: (Acct:s, Path:s) to U<PDF>
Type: Link, Value: Link<AzureDataLake>(SomeAccount, SomePath)
###
> Link.LegacyDataLake(null, Acct, Path)
Link.LegacyDataLake(null, Acct, Path) : U<>
BndKind:Call, Type:U<>, Bnd:(Call(∂.Link.LegacyDataLake(str(<null>), Global(Acct), Global(Path)):U<>))
Func sig: (Acct:s, Path:s) to U<>
Type: Link, Value: Link<AzureDataLake>(SomeAccount, SomePath)
###
