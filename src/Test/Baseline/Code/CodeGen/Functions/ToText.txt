> ToText(Null("")) = ToText(Wrap(Null("")))
ToText(Null("")) @= ToText(Wrap(Null(""))) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(<null>) @= Call(∂.Test.Wrap(str(<null>)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText("") = ToText(Wrap(""))
ToText("") @= ToText(Wrap("")) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str() @= Call(∂.Test.Wrap(str()):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText("s") = ToText(Wrap("s"))
ToText("s") @= ToText(Wrap("s")) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(s) @= Call(∂.Test.Wrap(str(s)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(0) = ToText(Wrap(0))
ToText(0) @= ToText(Wrap(0)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(0) @= Call(∂.ToText(Call(∂.Test.Wrap(0:i8):i8)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(1) = ToText(Wrap(1))
ToText(1) @= ToText(Wrap(1)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(1) @= Call(∂.ToText(Call(∂.Test.Wrap(1:i8):i8)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(100000) = ToText(Wrap(100000))
ToText(100000) @= ToText(Wrap(100000)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(100000) @= Call(∂.ToText(Call(∂.Test.Wrap(100000:i8):i8)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(-1) = ToText(Wrap(-1))
ToText(-1) @= ToText(Wrap(-1)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(-1) @= Call(∂.ToText(Call(∂.Test.Wrap(-1:i8):i8)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(-100000) = ToText(Wrap(-100000))
ToText(-100000) @= ToText(Wrap(-100000)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(-100000) @= Call(∂.ToText(Call(∂.Test.Wrap(-100000:i8):i8)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(0xFFi1) = ToText(Wrap(0xFFi1))
ToText(255) @= ToText(Wrap(255)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(-1) @= Call(∂.ToText(Call(∂.Test.Wrap(-1:i1):i1)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(0xABi1) = ToText(Wrap(0xABi1))
ToText(171) @= ToText(Wrap(171)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(-85) @= Call(∂.ToText(Call(∂.Test.Wrap(-85:i1):i1)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(0x7Fi1) = ToText(Wrap(0x7Fi1))
ToText(127) @= ToText(Wrap(127)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(127) @= Call(∂.ToText(Call(∂.Test.Wrap(127:i1):i1)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(0xFFFFFFFFi4) = ToText(Wrap(0xFFFFFFFFi4))
ToText(4294967295) @= ToText(Wrap(4294967295)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(-1) @= Call(∂.ToText(Call(∂.Test.Wrap(-1:i4):i4)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(0xABCDEi4) = ToText(Wrap(0xABCDEi4))
ToText(703710) @= ToText(Wrap(703710)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(703710) @= Call(∂.ToText(Call(∂.Test.Wrap(703710:i4):i4)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(0x7Fi1) = ToText(Wrap(0x7Fi1))
ToText(127) @= ToText(Wrap(127)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(127) @= Call(∂.ToText(Call(∂.Test.Wrap(127:i1):i1)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(0xFFu1) = ToText(Wrap(0xFFu1))
ToText(255) @= ToText(Wrap(255)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(255) @= Call(∂.ToText(Call(∂.Test.Wrap(255:u1):u1)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(0xABu1) = ToText(Wrap(0xABu1))
ToText(171) @= ToText(Wrap(171)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(171) @= Call(∂.ToText(Call(∂.Test.Wrap(171:u1):u1)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(0xFFFFFFFFu4) = ToText(Wrap(0xFFFFFFFFu4))
ToText(4294967295) @= ToText(Wrap(4294967295)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(4294967295) @= Call(∂.ToText(Call(∂.Test.Wrap(4294967295:u4):u4)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(0xABCDEu4) = ToText(Wrap(0xABCDEu4))
ToText(703710) @= ToText(Wrap(703710)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(703710) @= Call(∂.ToText(Call(∂.Test.Wrap(703710:u4):u4)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(1.0) = ToText(Wrap(1.0))
ToText(1) @= ToText(Wrap(1)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(1) @= Call(∂.ToText(Call(∂.Test.Wrap(1:r8):r8)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(-1.0) = ToText(Wrap(-1.0))
ToText(-1) @= ToText(Wrap(-1)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(-1) @= Call(∂.ToText(Call(∂.Test.Wrap(-1:r8):r8)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(0.0) = ToText(Wrap(0.0))
ToText(0) @= ToText(Wrap(0)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(0) @= Call(∂.ToText(Call(∂.Test.Wrap(0:r8):r8)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(-0.0) = ToText(Wrap(-0.0))
ToText(-0) @= ToText(Wrap(-0)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(-0) @= Call(∂.ToText(Call(∂.Test.Wrap(-0:r8):r8)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(2.00000001r4) = ToText(Wrap(2.00000001r4))
ToText(2.00000001) @= ToText(Wrap(2.00000001)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(2) @= Call(∂.ToText(Call(∂.Test.Wrap(2:r4):r4)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(-2.00000001r4) = ToText(Wrap(-2.00000001r4))
ToText(-2.00000001) @= ToText(Wrap(-2.00000001)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(-2) @= Call(∂.ToText(Call(∂.Test.Wrap(-2:r4):r4)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(1e30r4) = ToText(Wrap(1e30r4))
ToText(1E+30) @= ToText(Wrap(1E+30)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(1E+30) @= Call(∂.ToText(Call(∂.Test.Wrap(1.0000000150474662E+30:r4):r4)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(-1e30r4) = ToText(Wrap(-1e30r4))
ToText(-1E+30) @= ToText(Wrap(-1E+30)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(-1E+30) @= Call(∂.ToText(Call(∂.Test.Wrap(-1.0000000150474662E+30:r4):r4)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(1.0/0.0) = ToText(Wrap(1.0/0.0))
ToText(1 / 0) @= ToText(Wrap(1 / 0)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(∞) @= Call(∂.ToText(Call(∂.Test.Wrap(∞:r8):r8)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(-1.0/0.0) = ToText(Wrap(-1.0/0.0))
ToText(-1 / 0) @= ToText(Wrap(-1 / 0)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(-∞) @= Call(∂.ToText(Call(∂.Test.Wrap(-∞:r8):r8)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(1234567910.5) = ToText(Wrap(1234567910.5))
ToText(1234567910.5) @= ToText(Wrap(1234567910.5)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(1234567910.5) @= Call(∂.ToText(Call(∂.Test.Wrap(1234567910.5:r8):r8)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(-1234567910.5) = ToText(Wrap(-1234567910.5))
ToText(-1234567910.5) @= ToText(Wrap(-1234567910.5)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(-1234567910.5) @= Call(∂.ToText(Call(∂.Test.Wrap(-1234567910.5:r8):r8)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(1e100r8) = ToText(Wrap(1e100r8))
ToText(1E+100) @= ToText(Wrap(1E+100)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(1E+100) @= Call(∂.ToText(Call(∂.Test.Wrap(1E+100:r8):r8)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(1e-100r8) = ToText(Wrap(1e-100r8))
ToText(1E-100) @= ToText(Wrap(1E-100)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(1E-100) @= Call(∂.ToText(Call(∂.Test.Wrap(1E-100:r8):r8)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(true) = ToText(Wrap(true))
ToText(true) @= ToText(Wrap(true)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(true) @= Call(∂.ToText(Call(∂.Test.Wrap(true:b):b)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(false) = ToText(Wrap(false))
ToText(false) @= ToText(Wrap(false)) : b
BndKind:Compare, Type:b, Bnd:(Cmp(str(false) @= Call(∂.ToText(Call(∂.Test.Wrap(false:b):b)):s)))
Func sig: () to b
Type: bool, Value: true 
###
> ToText(CastDate(Null("")))
ToText(CastDate(Null(""))) : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(<null>)):d)):s))
Func sig: () to s
Type: str, Value: 01/01/0001 00:00:00
###
> ToText(CastDate("1-2-49"))
ToText(CastDate("1-2-49")) : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(1-2-49)):d)):s))
Func sig: () to s
Type: str, Value: 01/02/2049 00:00:00
###
> ToText(CastDate("1-2-50"))
ToText(CastDate("1-2-50")) : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(1-2-50)):d)):s))
Func sig: () to s
Type: str, Value: 01/02/1950 00:00:00
###
> ToText(CastDate("1-2-30"))
ToText(CastDate("1-2-30")) : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(1-2-30)):d)):s))
Func sig: () to s
Type: str, Value: 01/02/2030 00:00:00
###
> ToText(CastDate("1-2-0030"))
ToText(CastDate("1-2-0030")) : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(1-2-0030)):d)):s))
Func sig: () to s
Type: str, Value: 01/02/0030 00:00:00
###
> ToText(CastDate("1-2-1930"))
ToText(CastDate("1-2-1930")) : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(1-2-1930)):d)):s))
Func sig: () to s
Type: str, Value: 01/02/1930 00:00:00
###
> ToText(CastDate("1-2-2030"))
ToText(CastDate("1-2-2030")) : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(1-2-2030)):d)):s))
Func sig: () to s
Type: str, Value: 01/02/2030 00:00:00
###
> ToText(CastDate("December 25, 2019"))
ToText(CastDate("December 25, 2019")) : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(December 25, 2019)):d)):s))
Func sig: () to s
Type: str, Value: 12/25/2019 00:00:00
###
> ToText(CastDate("12-25-2019 03:04:12.5678"))
ToText(CastDate("12-25-2019 03:04:12.5678")) : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(12-25-2019 03:04:12.5678)):d)):s))
Func sig: () to s
Type: str, Value: 12/25/2019 03:04:12
###
> ToText(CastDate("12-25-2019 15:04:12.5678"))
ToText(CastDate("12-25-2019 15:04:12.5678")) : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(12-25-2019 15:04:12.5678)):d)):s))
Func sig: () to s
Type: str, Value: 12/25/2019 15:04:12
###
> ToText(CastDate("2019-12-25T03:04:12.12+01:00"))
ToText(CastDate("2019-12-25T03:04:12.12+01:00")) : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(2019-12-25T03:04:12.12+01:00)):d)):s))
Func sig: () to s
Type: str, Value: 12/25/2019 02:04:12
###
> ToText(CastDate("12-25-2019 03:04:12.5678"), "")
ToText(CastDate("12-25-2019 03:04:12.5678"), "") : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(12-25-2019 03:04:12.5678)):d), str()):s))
Func sig: () to s
Type: str, Value: 12/25/2019 03:04:12
###
> ToText(CastDate("12-25-2019 03:04:12.5678"), Null(""))
ToText(CastDate("12-25-2019 03:04:12.5678"), Null("")) : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(12-25-2019 03:04:12.5678)):d), str(<null>)):s))
Func sig: () to s
Type: str, Value: 12/25/2019 03:04:12
###
> ToText(CastDate("12-25-2019 03:04:12.5678"), "G")
ToText(CastDate("12-25-2019 03:04:12.5678"), "G") : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(12-25-2019 03:04:12.5678)):d), str(G)):s))
Func sig: () to s
Type: str, Value: 12/25/2019 03:04:12
###
> ToText(CastDate("12-25-2019 03:04:12.5678"), "d")
ToText(CastDate("12-25-2019 03:04:12.5678"), "d") : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(12-25-2019 03:04:12.5678)):d), str(d)):s))
Func sig: () to s
Type: str, Value: 12/25/2019
###
> ToText(CastDate("12-25-2019 03:04:12.5678"), "m")
ToText(CastDate("12-25-2019 03:04:12.5678"), "m") : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(12-25-2019 03:04:12.5678)):d), str(m)):s))
Func sig: () to s
Type: str, Value: December 25
###
> ToText(CastDate("12-25-2019 03:04:12.5678"), "yyyy MM dd hh mm ss")
ToText(CastDate("12-25-2019 03:04:12.5678"), "yyyy MM dd hh mm ss") : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(12-25-2019 03:04:12.5678)):d), str(yyyy MM dd hh mm ss)):s))
Func sig: () to s
Type: str, Value: 2019 12 25 03 04 12
###
> ToText(CastDate("12-25-2019 03:04:12.5678"), "YYYY MM DD hh mm ss")
ToText(CastDate("12-25-2019 03:04:12.5678"), "YYYY MM DD hh mm ss") : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(12-25-2019 03:04:12.5678)):d), str(YYYY MM DD hh mm ss)):s))
Func sig: () to s
Type: str, Value: YYYY 12 DD 03 04 12
###
> ToText(CastDate("12-25-2019 03:04:12.5678"), "e")
ToText(CastDate("12-25-2019 03:04:12.5678"), "e") : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(12-25-2019 03:04:12.5678)):d), str(e)):s))
Func sig: () to s
Type: <null>, Value: <null>
###
> ToText(CastDate("00-00-00"), "G")
ToText(CastDate("00-00-00"), "G") : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(00-00-00)):d), str(G)):s))
Func sig: () to s
Type: str, Value: 01/01/0001 00:00:00
###
> ToText(CastDate("12-25-2019 03:04:12.5678"), "Garbled string")
ToText(CastDate("12-25-2019 03:04:12.5678"), "Garbled string") : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastDate(str(12-25-2019 03:04:12.5678)):d), str(Garbled string)):s))
Func sig: () to s
Type: str, Value: Garble25 12ArinA.D.
###
> ToText(CastGuid())
ToText(CastGuid()) : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(dflt<G>):s))
Func sig: () to s
Type: str, Value: 00000000-0000-0000-0000-000000000000
###
> ToText(CastGuid("00000000000000000000000000000000"))
ToText(CastGuid("00000000000000000000000000000000")) : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastGuid(str(00000000000000000000000000000000)):G)):s))
Func sig: () to s
Type: str, Value: 00000000-0000-0000-0000-000000000000
###
> ToText(CastGuid("835d1bb3-bb06-4c8c-816f-ed27dfbd2854"))
ToText(CastGuid("835d1bb3-bb06-4c8c-816f-ed27dfbd2854")) : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastGuid(str(835d1bb3-bb06-4c8c-816f-ed27dfbd2854)):G)):s))
Func sig: () to s
Type: str, Value: 835d1bb3-bb06-4c8c-816f-ed27dfbd2854
###
> ToText(CastGuid("835d1bb3-bb06-4c8c-816f-ed27dfbd2854"), "N")
ToText(CastGuid("835d1bb3-bb06-4c8c-816f-ed27dfbd2854"), "N") : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastGuid(str(835d1bb3-bb06-4c8c-816f-ed27dfbd2854)):G), str(N)):s))
Func sig: () to s
Type: str, Value: 835d1bb3bb064c8c816fed27dfbd2854
###
> ToText(CastGuid("835d1bb3-bb06-4c8c-816f-ed27dfbd2854"), "D")
ToText(CastGuid("835d1bb3-bb06-4c8c-816f-ed27dfbd2854"), "D") : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastGuid(str(835d1bb3-bb06-4c8c-816f-ed27dfbd2854)):G), str(D)):s))
Func sig: () to s
Type: str, Value: 835d1bb3-bb06-4c8c-816f-ed27dfbd2854
###
> ToText(CastGuid("835d1bb3-bb06-4c8c-816f-ed27dfbd2854"), "B")
ToText(CastGuid("835d1bb3-bb06-4c8c-816f-ed27dfbd2854"), "B") : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastGuid(str(835d1bb3-bb06-4c8c-816f-ed27dfbd2854)):G), str(B)):s))
Func sig: () to s
Type: str, Value: {835d1bb3-bb06-4c8c-816f-ed27dfbd2854}
###
> ToText(CastGuid("835d1bb3-bb06-4c8c-816f-ed27dfbd2854"), "X")
ToText(CastGuid("835d1bb3-bb06-4c8c-816f-ed27dfbd2854"), "X") : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastGuid(str(835d1bb3-bb06-4c8c-816f-ed27dfbd2854)):G), str(X)):s))
Func sig: () to s
Type: str, Value: {0x835d1bb3,0xbb06,0x4c8c,{0x81,0x6f,0xed,0x27,0xdf,0xbd,0x28,0x54}}
###
> ToText(CastGuid("835d1bb3-bb06-4c8c-816f-ed27dfbd2854"), "")
ToText(CastGuid("835d1bb3-bb06-4c8c-816f-ed27dfbd2854"), "") : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastGuid(str(835d1bb3-bb06-4c8c-816f-ed27dfbd2854)):G), str()):s))
Func sig: () to s
Type: str, Value: 835d1bb3-bb06-4c8c-816f-ed27dfbd2854
###
> ToText(CastGuid("835d1bb3-bb06-4c8c-816f-ed27dfbd2854"), Null(""))
ToText(CastGuid("835d1bb3-bb06-4c8c-816f-ed27dfbd2854"), Null("")) : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastGuid(str(835d1bb3-bb06-4c8c-816f-ed27dfbd2854)):G), str(<null>)):s))
Func sig: () to s
Type: str, Value: 835d1bb3-bb06-4c8c-816f-ed27dfbd2854
###
> ToText(CastGuid("835d1bb3-bb06-4c8c-816f-ed27dfbd2854"), "invalid")
ToText(CastGuid("835d1bb3-bb06-4c8c-816f-ed27dfbd2854"), "invalid") : s
BndKind:Call, Type:s, Bnd:(Call(∂.ToText(Call(∂.CastGuid(str(835d1bb3-bb06-4c8c-816f-ed27dfbd2854)):G), str(invalid)):s))
Func sig: () to s
Type: <null>, Value: <null>
###
