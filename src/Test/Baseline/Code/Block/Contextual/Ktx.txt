>>> *** Source:
    abort := "abort:abort"; abort;
    and := "and:and"; and;
    band := "band:band"; band;
    bor := "bor:bor"; bor;
    bxor := "bxor:bxor"; bxor;
    con := "con:con"; con;
    const := "const:const"; const;
    constant := "constant:const"; constant;
    constraint := "constraint:con"; constraint;
    def := "def:def"; def;
    default := "default:def"; default;
    div := "div:div"; div;
    finish := "finish:finish"; finish;
    func := "func:func"; func;
    function := "function:func"; function;
    let := "let:let"; let;
    max := "max:max"; max;
    measure := "measure:msr"; measure;
    min := "min:min"; min;
    mod := "mod:mod"; mod;
    module := "module:module"; module;
    msr := "msr:msr"; msr;
    opt := "opt:opt"; opt;
    optional := "optional:opt"; optional;
    or := "or:or"; or;
    param := "param:param"; param;
    parameter := "parameter:param"; parameter;
    pause := "pause:pause"; pause;
    plan := "plan:module"; plan;
    play := "play:play"; play;
    poke := "poke:poke"; poke;
    poll := "poll:poll"; poll;
    primary := "primary:primary"; primary;
    prime := "prime:prime"; prime;
    proc := "proc:proc"; proc;
    procedure := "procedure:proc"; procedure;
    prop := "prop:prop"; prop;
    property := "property:prop"; property;
    publish := "publish:publish"; publish;
    req := "req:req"; req;
    required := "required:req"; required;
    shl := "shl:shl"; shl;
    shr := "shr:shr"; shr;
    shri := "shri:shri"; shri;
    shru := "shru:shru"; shru;
    stream := "stream:stream"; stream;
    task := "task:task"; task;
    var := "var:var"; var;
    variable := "variable:var"; variable;
    xor := "xor:xor"; xor;

>>> *** Instructions:
   0) [0] Define abort <- "abort:abort"
   1) [0] Expr abort
   2) [0] Define and <- "and:and"
   3) [0] Expr and
   4) [0] Define band <- "band:band"
   5) [0] Expr band
   6) [0] Define bor <- "bor:bor"
   7) [0] Expr bor
   8) [0] Define bxor <- "bxor:bxor"
   9) [0] Expr bxor
  10) [0] Define con <- "con:con"
  11) [0] Expr con
  12) [0] Define const <- "const:const"
  13) [0] Expr const
  14) [0] Define constant <- "constant:const"
  15) [0] Expr constant
  16) [0] Define constraint <- "constraint:con"
  17) [0] Expr constraint
  18) [0] Define def <- "def:def"
  19) [0] Expr def
  20) [0] Define default <- "default:def"
  21) [0] Expr default
  22) [0] Define div <- "div:div"
  23) [0] Expr div
  24) [0] Define finish <- "finish:finish"
  25) [0] Expr finish
  26) [0] Define func <- "func:func"
  27) [0] Expr func
  28) [0] Define function <- "function:func"
  29) [0] Expr function
  30) [0] Define let <- "let:let"
  31) [0] Expr let
  32) [0] Define max <- "max:max"
  33) [0] Expr max
  34) [0] Define measure <- "measure:msr"
  35) [0] Expr measure
  36) [0] Define min <- "min:min"
  37) [0] Expr min
  38) [0] Define mod <- "mod:mod"
  39) [0] Expr mod
  40) [0] Define module <- "module:module"
  41) [0] Expr module
  42) [0] Define msr <- "msr:msr"
  43) [0] Expr msr
  44) [0] Define opt <- "opt:opt"
  45) [0] Expr opt
  46) [0] Define optional <- "optional:opt"
  47) [0] Expr optional
  48) [0] Define or <- "or:or"
  49) [0] Expr or
  50) [0] Define param <- "param:param"
  51) [0] Expr param
  52) [0] Define parameter <- "parameter:param"
  53) [0] Expr parameter
  54) [0] Define pause <- "pause:pause"
  55) [0] Expr pause
  56) [0] Define plan <- "plan:module"
  57) [0] Expr plan
  58) [0] Define play <- "play:play"
  59) [0] Expr play
  60) [0] Define poke <- "poke:poke"
  61) [0] Expr poke
  62) [0] Define poll <- "poll:poll"
  63) [0] Expr poll
  64) [0] Define primary <- "primary:primary"
  65) [0] Expr primary
  66) [0] Define prime <- "prime:prime"
  67) [0] Expr prime
  68) [0] Define proc <- "proc:proc"
  69) [0] Expr proc
  70) [0] Define procedure <- "procedure:proc"
  71) [0] Expr procedure
  72) [0] Define prop <- "prop:prop"
  73) [0] Expr prop
  74) [0] Define property <- "property:prop"
  75) [0] Expr property
  76) [0] Define publish <- "publish:publish"
  77) [0] Expr publish
  78) [0] Define req <- "req:req"
  79) [0] Expr req
  80) [0] Define required <- "required:req"
  81) [0] Expr required
  82) [0] Define shl <- "shl:shl"
  83) [0] Expr shl
  84) [0] Define shr <- "shr:shr"
  85) [0] Expr shr
  86) [0] Define shri <- "shri:shri"
  87) [0] Expr shri
  88) [0] Define shru <- "shru:shru"
  89) [0] Expr shru
  90) [0] Define stream <- "stream:stream"
  91) [0] Expr stream
  92) [0] Define task <- "task:task"
  93) [0] Expr task
  94) [0] Define var <- "var:var"
  95) [0] Expr var
  96) [0] Define variable <- "variable:var"
  97) [0] Expr variable
  98) [0] Define xor <- "xor:xor"
  99) [0] Expr xor
 100) [0] End

>    0) [0] Define abort <- "abort:abort"
Global 'abort' has DType: s, SysType: str
>    1) [0] Expr abort
abort:abort
>    2) [0] Define and <- "and:and"
Global 'and' has DType: s, SysType: str
>    3) [0] Expr and
and:and
>    4) [0] Define band <- "band:band"
Global 'band' has DType: s, SysType: str
>    5) [0] Expr band
band:band
>    6) [0] Define bor <- "bor:bor"
Global 'bor' has DType: s, SysType: str
>    7) [0] Expr bor
bor:bor
>    8) [0] Define bxor <- "bxor:bxor"
Global 'bxor' has DType: s, SysType: str
>    9) [0] Expr bxor
bxor:bxor
>   10) [0] Define con <- "con:con"
Global 'con' has DType: s, SysType: str
>   11) [0] Expr con
con:con
>   12) [0] Define const <- "const:const"
Global 'const' has DType: s, SysType: str
>   13) [0] Expr const
const:const
>   14) [0] Define constant <- "constant:const"
Global 'constant' has DType: s, SysType: str
>   15) [0] Expr constant
constant:const
>   16) [0] Define constraint <- "constraint:con"
Global 'constraint' has DType: s, SysType: str
>   17) [0] Expr constraint
constraint:con
>   18) [0] Define def <- "def:def"
Global 'def' has DType: s, SysType: str
>   19) [0] Expr def
def:def
>   20) [0] Define default <- "default:def"
Global 'default' has DType: s, SysType: str
>   21) [0] Expr default
default:def
>   22) [0] Define div <- "div:div"
Global 'div' has DType: s, SysType: str
>   23) [0] Expr div
div:div
>   24) [0] Define finish <- "finish:finish"
Global 'finish' has DType: s, SysType: str
>   25) [0] Expr finish
finish:finish
>   26) [0] Define func <- "func:func"
Global 'func' has DType: s, SysType: str
>   27) [0] Expr func
func:func
>   28) [0] Define function <- "function:func"
Global 'function' has DType: s, SysType: str
>   29) [0] Expr function
function:func
>   30) [0] Define let <- "let:let"
Global 'let' has DType: s, SysType: str
>   31) [0] Expr let
let:let
>   32) [0] Define max <- "max:max"
Global 'max' has DType: s, SysType: str
>   33) [0] Expr max
max:max
>   34) [0] Define measure <- "measure:msr"
Global 'measure' has DType: s, SysType: str
>   35) [0] Expr measure
measure:msr
>   36) [0] Define min <- "min:min"
Global 'min' has DType: s, SysType: str
>   37) [0] Expr min
min:min
>   38) [0] Define mod <- "mod:mod"
Global 'mod' has DType: s, SysType: str
>   39) [0] Expr mod
mod:mod
>   40) [0] Define module <- "module:module"
Global 'module' has DType: s, SysType: str
>   41) [0] Expr module
module:module
>   42) [0] Define msr <- "msr:msr"
Global 'msr' has DType: s, SysType: str
>   43) [0] Expr msr
msr:msr
>   44) [0] Define opt <- "opt:opt"
Global 'opt' has DType: s, SysType: str
>   45) [0] Expr opt
opt:opt
>   46) [0] Define optional <- "optional:opt"
Global 'optional' has DType: s, SysType: str
>   47) [0] Expr optional
optional:opt
>   48) [0] Define or <- "or:or"
Global 'or' has DType: s, SysType: str
>   49) [0] Expr or
or:or
>   50) [0] Define param <- "param:param"
Global 'param' has DType: s, SysType: str
>   51) [0] Expr param
param:param
>   52) [0] Define parameter <- "parameter:param"
Global 'parameter' has DType: s, SysType: str
>   53) [0] Expr parameter
parameter:param
>   54) [0] Define pause <- "pause:pause"
Global 'pause' has DType: s, SysType: str
>   55) [0] Expr pause
pause:pause
>   56) [0] Define plan <- "plan:module"
Global 'plan' has DType: s, SysType: str
>   57) [0] Expr plan
plan:module
>   58) [0] Define play <- "play:play"
Global 'play' has DType: s, SysType: str
>   59) [0] Expr play
play:play
>   60) [0] Define poke <- "poke:poke"
Global 'poke' has DType: s, SysType: str
>   61) [0] Expr poke
poke:poke
>   62) [0] Define poll <- "poll:poll"
Global 'poll' has DType: s, SysType: str
>   63) [0] Expr poll
poll:poll
>   64) [0] Define primary <- "primary:primary"
Global 'primary' has DType: s, SysType: str
>   65) [0] Expr primary
primary:primary
>   66) [0] Define prime <- "prime:prime"
Global 'prime' has DType: s, SysType: str
>   67) [0] Expr prime
prime:prime
>   68) [0] Define proc <- "proc:proc"
Global 'proc' has DType: s, SysType: str
>   69) [0] Expr proc
proc:proc
>   70) [0] Define procedure <- "procedure:proc"
Global 'procedure' has DType: s, SysType: str
>   71) [0] Expr procedure
procedure:proc
>   72) [0] Define prop <- "prop:prop"
Global 'prop' has DType: s, SysType: str
>   73) [0] Expr prop
prop:prop
>   74) [0] Define property <- "property:prop"
Global 'property' has DType: s, SysType: str
>   75) [0] Expr property
property:prop
>   76) [0] Define publish <- "publish:publish"
Global 'publish' has DType: s, SysType: str
>   77) [0] Expr publish
publish:publish
>   78) [0] Define req <- "req:req"
Global 'req' has DType: s, SysType: str
>   79) [0] Expr req
req:req
>   80) [0] Define required <- "required:req"
Global 'required' has DType: s, SysType: str
>   81) [0] Expr required
required:req
>   82) [0] Define shl <- "shl:shl"
Global 'shl' has DType: s, SysType: str
>   83) [0] Expr shl
shl:shl
>   84) [0] Define shr <- "shr:shr"
Global 'shr' has DType: s, SysType: str
>   85) [0] Expr shr
shr:shr
>   86) [0] Define shri <- "shri:shri"
Global 'shri' has DType: s, SysType: str
>   87) [0] Expr shri
shri:shri
>   88) [0] Define shru <- "shru:shru"
Global 'shru' has DType: s, SysType: str
>   89) [0] Expr shru
shru:shru
>   90) [0] Define stream <- "stream:stream"
Global 'stream' has DType: s, SysType: str
>   91) [0] Expr stream
stream:stream
>   92) [0] Define task <- "task:task"
Global 'task' has DType: s, SysType: str
>   93) [0] Expr task
task:task
>   94) [0] Define var <- "var:var"
Global 'var' has DType: s, SysType: str
>   95) [0] Expr var
var:var
>   96) [0] Define variable <- "variable:var"
Global 'variable' has DType: s, SysType: str
>   97) [0] Expr variable
variable:var
>   98) [0] Define xor <- "xor:xor"
Global 'xor' has DType: s, SysType: str
>   99) [0] Expr xor
xor:xor
>  100) [0] End

