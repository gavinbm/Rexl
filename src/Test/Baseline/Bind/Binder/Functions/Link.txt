**** New globals: {qui:U<Image>, s1:s, s2:s, ui:U<Image>, ux:U<Image.Xray>}

> Link.LocalText(s1)
Link.LocalText(s1) : U<Text>
Binder : Link.LocalText(s1)
###
> Link.LocalData(s1)
Link.LocalData(s1) : U<Data>
Binder : Link.LocalData(s1)
###
> Link.LocalImage(s1)
Link.LocalImage(s1) : U<Image>
Binder : Link.LocalImage(s1)
###
> Link.LocalAudio(s1)
Link.LocalAudio(s1) : U<Audio>
Binder : Link.LocalAudio(s1)
###
> Link.LocalVideo(s1)
Link.LocalVideo(s1) : U<Video>
Binder : Link.LocalVideo(s1)
###
> Link.LocalPDF(s1)
Link.LocalPDF(s1) : U<Document>
Binder : Link.LocalPDF(s1)
###
> Link.LocalText("file")
Link.LocalText("file") : U<Text>
Binder : Link.LocalText("file")
###
> Link.LocalData("file")
Link.LocalData("file") : U<Data>
Binder : Link.LocalData("file")
###
> Link.LocalImage("file")
Link.LocalImage("file") : U<Image>
Binder : Link.LocalImage("file")
###
> Link.LocalAudio("file")
Link.LocalAudio("file") : U<Audio>
Binder : Link.LocalAudio("file")
###
> Link.LocalVideo("file")
Link.LocalVideo("file") : U<Video>
Binder : Link.LocalVideo("file")
###
> Link.LocalPDF("file")
Link.LocalPDF("file") : U<Document>
Binder : Link.LocalPDF("file")
###
> Link.LocalText("")
Link.LocalText("") : U<Text>
Binder : Link.LocalText("")
Reducer: null
###
> Link.LocalData("")
Link.LocalData("") : U<Data>
Binder : Link.LocalData("")
Reducer: null
###
> Link.LocalImage("")
Link.LocalImage("") : U<Image>
Binder : Link.LocalImage("")
Reducer: null
###
> Link.LocalAudio("")
Link.LocalAudio("") : U<Audio>
Binder : Link.LocalAudio("")
Reducer: null
###
> Link.LocalVideo("")
Link.LocalVideo("") : U<Video>
Binder : Link.LocalVideo("")
Reducer: null
###
> Link.LocalPDF("")
Link.LocalPDF("") : U<Document>
Binder : Link.LocalPDF("")
Reducer: null
###
> Link.LocalText(null)
Link.LocalText(null) : U<Text>
Binder : Link.LocalText(str(<null>))
Reducer: null
###
> Link.LocalData(null)
Link.LocalData(null) : U<Data>
Binder : Link.LocalData(str(<null>))
Reducer: null
###
> Link.LocalImage(null)
Link.LocalImage(null) : U<Image>
Binder : Link.LocalImage(str(<null>))
Reducer: null
###
> Link.LocalAudio(null)
Link.LocalAudio(null) : U<Audio>
Binder : Link.LocalAudio(str(<null>))
Reducer: null
###
> Link.LocalVideo(null)
Link.LocalVideo(null) : U<Video>
Binder : Link.LocalVideo(str(<null>))
Reducer: null
###
> Link.LocalPDF(null)
Link.LocalPDF(null) : U<Document>
Binder : Link.LocalPDF(str(<null>))
Reducer: null
###
> Link.LocalText(s1)->IsNull()
Link.LocalText(s1)->IsNull() : b
Binder : IsNull(Link.LocalText(s1))
###
> Link.LocalText("some path")->IsNull()
Link.LocalText("some path")->IsNull() : b
Binder : IsNull(Link.LocalText("some path"))
###
> Link.LocalText("")->IsNull()
Link.LocalText("")->IsNull() : b
Binder : IsNull(Link.LocalText(""))
Reducer: true
###
> Link.LocalText(null)->IsNull()
Link.LocalText(null)->IsNull() : b
Binder : IsNull(Link.LocalText(str(<null>)))
Reducer: true
###
> Link.WebText(s1)
Link.WebText(s1) : U<Text>
Binder : Link.WebText(s1)
###
> Link.WebData(s1)
Link.WebData(s1) : U<Data>
Binder : Link.WebData(s1)
###
> Link.WebImage(s1)
Link.WebImage(s1) : U<Image>
Binder : Link.WebImage(s1)
###
> Link.WebAudio(s1)
Link.WebAudio(s1) : U<Audio>
Binder : Link.WebAudio(s1)
###
> Link.WebVideo(s1)
Link.WebVideo(s1) : U<Video>
Binder : Link.WebVideo(s1)
###
> Link.WebPDF(s1)
Link.WebPDF(s1) : U<Document>
Binder : Link.WebPDF(s1)
###
> Link.BlobText(s1, s2)
Link.BlobText(s1, s2) : U<Text>
Binder : Link.BlobText(s1, s2)
###
> Link.BlobData(s1, s2)
Link.BlobData(s1, s2) : U<Data>
Binder : Link.BlobData(s1, s2)
###
> Link.BlobImage(s1, s2)
Link.BlobImage(s1, s2) : U<Image>
Binder : Link.BlobImage(s1, s2)
###
> Link.BlobAudio(s1, s2)
Link.BlobAudio(s1, s2) : U<Audio>
Binder : Link.BlobAudio(s1, s2)
###
> Link.BlobVideo(s1, s2)
Link.BlobVideo(s1, s2) : U<Video>
Binder : Link.BlobVideo(s1, s2)
###
> Link.BlobPDF(s1, s2)
Link.BlobPDF(s1, s2) : U<Document>
Binder : Link.BlobPDF(s1, s2)
###
> Link.BlobText(s1, "file")
Link.BlobText(s1, "file") : U<Text>
Binder : Link.BlobText(s1, "file")
###
> Link.BlobData(s1, "file")
Link.BlobData(s1, "file") : U<Data>
Binder : Link.BlobData(s1, "file")
###
> Link.BlobImage(s1, "file")
Link.BlobImage(s1, "file") : U<Image>
Binder : Link.BlobImage(s1, "file")
###
> Link.BlobAudio(s1, "file")
Link.BlobAudio(s1, "file") : U<Audio>
Binder : Link.BlobAudio(s1, "file")
###
> Link.BlobVideo(s1, "file")
Link.BlobVideo(s1, "file") : U<Video>
Binder : Link.BlobVideo(s1, "file")
###
> Link.BlobPDF(s1, "file")
Link.BlobPDF(s1, "file") : U<Document>
Binder : Link.BlobPDF(s1, "file")
###
> Link.BlobText("acct", s2)
Link.BlobText("acct", s2) : U<Text>
Binder : Link.BlobText("acct", s2)
###
> Link.BlobData("acct", s2)
Link.BlobData("acct", s2) : U<Data>
Binder : Link.BlobData("acct", s2)
###
> Link.BlobImage("acct", s2)
Link.BlobImage("acct", s2) : U<Image>
Binder : Link.BlobImage("acct", s2)
###
> Link.BlobAudio("acct", s2)
Link.BlobAudio("acct", s2) : U<Audio>
Binder : Link.BlobAudio("acct", s2)
###
> Link.BlobVideo("acct", s2)
Link.BlobVideo("acct", s2) : U<Video>
Binder : Link.BlobVideo("acct", s2)
###
> Link.BlobPDF("acct", s2)
Link.BlobPDF("acct", s2) : U<Document>
Binder : Link.BlobPDF("acct", s2)
###
> Link.BlobText("acct", "file")
Link.BlobText("acct", "file") : U<Text>
Binder : Link.BlobText("acct", "file")
###
> Link.BlobData("acct", "file")
Link.BlobData("acct", "file") : U<Data>
Binder : Link.BlobData("acct", "file")
###
> Link.BlobImage("acct", "file")
Link.BlobImage("acct", "file") : U<Image>
Binder : Link.BlobImage("acct", "file")
###
> Link.BlobAudio("acct", "file")
Link.BlobAudio("acct", "file") : U<Audio>
Binder : Link.BlobAudio("acct", "file")
###
> Link.BlobVideo("acct", "file")
Link.BlobVideo("acct", "file") : U<Video>
Binder : Link.BlobVideo("acct", "file")
###
> Link.BlobPDF("acct", "file")
Link.BlobPDF("acct", "file") : U<Document>
Binder : Link.BlobPDF("acct", "file")
###
> Link.BlobText("acct", null)
Link.BlobText("acct", null) : U<Text>
Binder : Link.BlobText("acct", str(<null>))
Reducer: null
###
> Link.BlobData("acct", null)
Link.BlobData("acct", null) : U<Data>
Binder : Link.BlobData("acct", str(<null>))
Reducer: null
###
> Link.BlobImage("acct", null)
Link.BlobImage("acct", null) : U<Image>
Binder : Link.BlobImage("acct", str(<null>))
Reducer: null
###
> Link.BlobAudio("acct", null)
Link.BlobAudio("acct", null) : U<Audio>
Binder : Link.BlobAudio("acct", str(<null>))
Reducer: null
###
> Link.BlobVideo("acct", null)
Link.BlobVideo("acct", null) : U<Video>
Binder : Link.BlobVideo("acct", str(<null>))
Reducer: null
###
> Link.BlobPDF("acct", null)
Link.BlobPDF("acct", null) : U<Document>
Binder : Link.BlobPDF("acct", str(<null>))
Reducer: null
###
> Link.BlobText("", "file")
Link.BlobText("", "file") : U<Text>
Binder : Link.BlobText("", "file")
Reducer: null
###
> Link.BlobData("", "file")
Link.BlobData("", "file") : U<Data>
Binder : Link.BlobData("", "file")
Reducer: null
###
> Link.BlobImage("", "file")
Link.BlobImage("", "file") : U<Image>
Binder : Link.BlobImage("", "file")
Reducer: null
###
> Link.BlobAudio("", "file")
Link.BlobAudio("", "file") : U<Audio>
Binder : Link.BlobAudio("", "file")
Reducer: null
###
> Link.BlobVideo("", "file")
Link.BlobVideo("", "file") : U<Video>
Binder : Link.BlobVideo("", "file")
Reducer: null
###
> Link.BlobPDF("", "file")
Link.BlobPDF("", "file") : U<Document>
Binder : Link.BlobPDF("", "file")
Reducer: null
###
> Link.BlobText(s1, s2)->IsNull()
Link.BlobText(s1, s2)->IsNull() : b
Binder : IsNull(Link.BlobText(s1, s2))
###
> Link.BlobText("my account", s2)->IsNull()
Link.BlobText("my account", s2)->IsNull() : b
Binder : IsNull(Link.BlobText("my account", s2))
###
> Link.BlobText("", s2)->IsNull()
Link.BlobText("", s2)->IsNull() : b
Binder : IsNull(Link.BlobText("", s2))
Reducer: true
###
> Link.BlobText(null, s2)->IsNull()
Link.BlobText(null, s2)->IsNull() : b
Binder : IsNull(Link.BlobText(str(<null>), s2))
Reducer: true
###
> Link.BlobText(s1, "")->IsNull()
Link.BlobText(s1, "")->IsNull() : b
Binder : IsNull(Link.BlobText(s1, ""))
Reducer: true
###
> Link.BlobText(s1, null)->IsNull()
Link.BlobText(s1, null)->IsNull() : b
Binder : IsNull(Link.BlobText(s1, str(<null>)))
Reducer: true
###
> Link.BlobText(null, "")->IsNull()
Link.BlobText(null, "")->IsNull() : b
Binder : IsNull(Link.BlobText(str(<null>), ""))
Reducer: true
###
> Link.DataLakeText(s1, s2)
Link.DataLakeText(s1, s2) : U<Text>
Binder : Link.DataLakeText(s1, s2)
###
> Link.DataLakeData(s1, s2)
Link.DataLakeData(s1, s2) : U<Data>
Binder : Link.DataLakeData(s1, s2)
###
> Link.DataLakeImage(s1, s2)
Link.DataLakeImage(s1, s2) : U<Image>
Binder : Link.DataLakeImage(s1, s2)
###
> Link.DataLakeAudio(s1, s2)
Link.DataLakeAudio(s1, s2) : U<Audio>
Binder : Link.DataLakeAudio(s1, s2)
###
> Link.DataLakeVideo(s1, s2)
Link.DataLakeVideo(s1, s2) : U<Video>
Binder : Link.DataLakeVideo(s1, s2)
###
> Link.DataLakePDF(s1, s2)
Link.DataLakePDF(s1, s2) : U<Document>
Binder : Link.DataLakePDF(s1, s2)
###
> Link.LegacyDataLakeText(s1, s2)
Link.LegacyDataLakeText(s1, s2) : U<Text>
Binder : Link.LegacyDataLakeText(s1, s2)
###
> Link.LegacyDataLakeData(s1, s2)
Link.LegacyDataLakeData(s1, s2) : U<Data>
Binder : Link.LegacyDataLakeData(s1, s2)
###
> Link.LegacyDataLakeImage(s1, s2)
Link.LegacyDataLakeImage(s1, s2) : U<Image>
Binder : Link.LegacyDataLakeImage(s1, s2)
###
> Link.LegacyDataLakeAudio(s1, s2)
Link.LegacyDataLakeAudio(s1, s2) : U<Audio>
Binder : Link.LegacyDataLakeAudio(s1, s2)
###
> Link.LegacyDataLakeVideo(s1, s2)
Link.LegacyDataLakeVideo(s1, s2) : U<Video>
Binder : Link.LegacyDataLakeVideo(s1, s2)
###
> Link.LegacyDataLakePDF(s1, s2)
Link.LegacyDataLakePDF(s1, s2) : U<Document>
Binder : Link.LegacyDataLakePDF(s1, s2)
###
> Link.LocalText(s1, s2) // Error
Link.LocalText(s1, s2) : U<Text>
*** Error: (19,21) Node: s2, Message: Too many arguments for Link.LocalText, expected 1 fewer
Binder : Link.LocalText(s1)
###
> Link.LocalData(s1, s2) // Error
Link.LocalData(s1, s2) : U<Data>
*** Error: (19,21) Node: s2, Message: Too many arguments for Link.LocalData, expected 1 fewer
Binder : Link.LocalData(s1)
###
> Link.LocalImage(s1, s2) // Error
Link.LocalImage(s1, s2) : U<Image>
*** Error: (20,22) Node: s2, Message: Too many arguments for Link.LocalImage, expected 1 fewer
Binder : Link.LocalImage(s1)
###
> Link.LocalAudio(s1, s2) // Error
Link.LocalAudio(s1, s2) : U<Audio>
*** Error: (20,22) Node: s2, Message: Too many arguments for Link.LocalAudio, expected 1 fewer
Binder : Link.LocalAudio(s1)
###
> Link.LocalVideo(s1, s2) // Error
Link.LocalVideo(s1, s2) : U<Video>
*** Error: (20,22) Node: s2, Message: Too many arguments for Link.LocalVideo, expected 1 fewer
Binder : Link.LocalVideo(s1)
###
> Link.LocalPDF(s1, s2) // Error
Link.LocalPDF(s1, s2) : U<Document>
*** Error: (18,20) Node: s2, Message: Too many arguments for Link.LocalPDF, expected 1 fewer
Binder : Link.LocalPDF(s1)
###
> Link.BlobText(s1) // Error
Link.BlobText(s1) : U<Text>
*** Error: (13,14) Node: Link.BlobText(s1), Message: Too few arguments for Link.BlobText, expected 1 additional
Binder : Link.BlobText(s1, Unit<s>(<missing>))
Reducer: null
###
> Link.BlobImage(s1) // Error
Link.BlobImage(s1) : U<Image>
*** Error: (14,15) Node: Link.BlobImage(s1), Message: Too few arguments for Link.BlobImage, expected 1 additional
Binder : Link.BlobImage(s1, Unit<s>(<missing>))
Reducer: null
###
> Link.BlobAudio(s1) // Error
Link.BlobAudio(s1) : U<Audio>
*** Error: (14,15) Node: Link.BlobAudio(s1), Message: Too few arguments for Link.BlobAudio, expected 1 additional
Binder : Link.BlobAudio(s1, Unit<s>(<missing>))
Reducer: null
###
> Link.BlobVideo(s1) // Error
Link.BlobVideo(s1) : U<Video>
*** Error: (14,15) Node: Link.BlobVideo(s1), Message: Too few arguments for Link.BlobVideo, expected 1 additional
Binder : Link.BlobVideo(s1, Unit<s>(<missing>))
Reducer: null
###
> Link.BlobPDF(s1) // Error
Link.BlobPDF(s1) : U<Document>
*** Error: (12,13) Node: Link.BlobPDF(s1), Message: Too few arguments for Link.BlobPDF, expected 1 additional
Binder : Link.BlobPDF(s1, Unit<s>(<missing>))
Reducer: null
###
> LinkToWebText(s1)
LinkToWebText(s1) : U<Text>
Binder : Link.WebText(s1)
###
> LinkToWebData(s1)
LinkToWebData(s1) : U<Data>
Binder : Link.WebData(s1)
###
> LinkToWebImage(s1)
LinkToWebImage(s1) : U<Image>
Binder : Link.WebImage(s1)
###
> LinkToWebAudio(s1)
LinkToWebAudio(s1) : U<Audio>
Binder : Link.WebAudio(s1)
###
> LinkToWebVideo(s1)
LinkToWebVideo(s1) : U<Video>
Binder : Link.WebVideo(s1)
###
> LinkToWebPDF(s1)
LinkToWebPDF(s1) : U<Document>
Binder : Link.WebPDF(s1)
###
> LinkToBlobStorageText(s1, s2)
LinkToBlobStorageText(s1, s2) : U<Text>
Binder : Link.BlobText(s1, s2)
###
> LinkToBlobStorageData(s1, s2)
LinkToBlobStorageData(s1, s2) : U<Data>
Binder : Link.BlobData(s1, s2)
###
> LinkToBlobStorageImage(s1, s2)
LinkToBlobStorageImage(s1, s2) : U<Image>
Binder : Link.BlobImage(s1, s2)
###
> LinkToBlobStorageAudio(s1, s2)
LinkToBlobStorageAudio(s1, s2) : U<Audio>
Binder : Link.BlobAudio(s1, s2)
###
> LinkToBlobStorageVideo(s1, s2)
LinkToBlobStorageVideo(s1, s2) : U<Video>
Binder : Link.BlobVideo(s1, s2)
###
> LinkToBlobStoragePDF(s1, s2)
LinkToBlobStoragePDF(s1, s2) : U<Document>
Binder : Link.BlobPDF(s1, s2)
###
> LinkToDataLakeText(s1, s2)
LinkToDataLakeText(s1, s2) : U<Text>
Binder : Link.DataLakeText(s1, s2)
###
> LinkToDataLakeData(s1, s2)
LinkToDataLakeData(s1, s2) : U<Data>
Binder : Link.DataLakeData(s1, s2)
###
> LinkToDataLakeImage(s1, s2)
LinkToDataLakeImage(s1, s2) : U<Image>
Binder : Link.DataLakeImage(s1, s2)
###
> LinkToDataLakeAudio(s1, s2)
LinkToDataLakeAudio(s1, s2) : U<Audio>
Binder : Link.DataLakeAudio(s1, s2)
###
> LinkToDataLakeVideo(s1, s2)
LinkToDataLakeVideo(s1, s2) : U<Video>
Binder : Link.DataLakeVideo(s1, s2)
###
> LinkToDataLakePDF(s1, s2)
LinkToDataLakePDF(s1, s2) : U<Document>
Binder : Link.DataLakePDF(s1, s2)
###
> LinkToLegacyDataLakeText(s1, s2)
LinkToLegacyDataLakeText(s1, s2) : U<Text>
Binder : Link.LegacyDataLakeText(s1, s2)
###
> LinkToLegacyDataLakeData(s1, s2)
LinkToLegacyDataLakeData(s1, s2) : U<Data>
Binder : Link.LegacyDataLakeData(s1, s2)
###
> LinkToLegacyDataLakeImage(s1, s2)
LinkToLegacyDataLakeImage(s1, s2) : U<Image>
Binder : Link.LegacyDataLakeImage(s1, s2)
###
> LinkToLegacyDataLakeAudio(s1, s2)
LinkToLegacyDataLakeAudio(s1, s2) : U<Audio>
Binder : Link.LegacyDataLakeAudio(s1, s2)
###
> LinkToLegacyDataLakeVideo(s1, s2)
LinkToLegacyDataLakeVideo(s1, s2) : U<Video>
Binder : Link.LegacyDataLakeVideo(s1, s2)
###
> LinkToLegacyDataLakePDF(s1, s2)
LinkToLegacyDataLakePDF(s1, s2) : U<Document>
Binder : Link.LegacyDataLakePDF(s1, s2)
###
> Link.Kind(s1)
Link.Kind(s1) : s
*** Error: (10,12) Node: s1, Message: Invalid operand type: cannot convert type 's' to 'U<>'
Binder : Link.Kind(Error(ErrBadType_Src_Dst))
###
> Link.Kind(ui)
Link.Kind(ui) : s
Binder : Link.Kind(ui)
###
> Link.Account(ui)
Link.Account(ui) : s
Binder : Link.Account(ui)
###
> Link.Path(ui)
Link.Path(ui) : s
Binder : Link.Path(ui)
###
> ui->Link.Kind()
ui->Link.Kind() : s
Binder : Link.Kind(ui)
###
> ui->Link.Account()
ui->Link.Account() : s
Binder : Link.Account(ui)
###
> ui->Link.Path()
ui->Link.Path() : s
Binder : Link.Path(ui)
###
> ui->Kind()
ui->Kind() : s
Binder : Link.Kind(ui)
###
> ui->Account()
ui->Account() : s
Binder : Link.Account(ui)
###
> ui->Path()
ui->Path() : s
Binder : Link.Path(ui)
###
> ui.Kind
ui.Kind : s
Binder : Link.Kind(ui)
###
> ui.Account
ui.Account : s
Binder : Link.Account(ui)
###
> ui.Path
ui.Path : s
Binder : Link.Path(ui)
###
> Link.Kind(qui)
Link.Kind(qui) : s
Binder : Link.Kind(qui)
###
> Link.Account(qui)
Link.Account(qui) : s
Binder : Link.Account(qui)
###
> Link.Path(qui)
Link.Path(qui) : s
Binder : Link.Path(qui)
###
> qui->Link.Kind()
qui->Link.Kind() : s
Binder : Link.Kind(qui)
###
> qui->Link.Account()
qui->Link.Account() : s
Binder : Link.Account(qui)
###
> qui->Link.Path()
qui->Link.Path() : s
Binder : Link.Path(qui)
###
> qui->Kind()
qui->Kind() : s
Binder : Link.Kind(qui)
###
> qui->Account()
qui->Account() : s
Binder : Link.Account(qui)
###
> qui->Path()
qui->Path() : s
Binder : Link.Path(qui)
###
> qui.Kind
qui.Kind : s
Binder : Link.Kind(qui)
###
> qui.Account
qui.Account : s
Binder : Link.Account(qui)
###
> qui.Path
qui.Path : s
Binder : Link.Path(qui)
###
> ux.Kind
ux.Kind : s
Binder : Link.Kind(ux)
###
> ux.Account
ux.Account : s
Binder : Link.Account(ux)
###
> ux.Path
ux.Path : s
Binder : Link.Path(ux)
###
> Link.Local("Text", s1)
Link.Local("Text", s1) : U<Text>
Binder : Link.Local("Text", s1)
###
> Link.Local("Image", "file")
Link.Local("Image", "file") : U<Image>
Binder : Link.Local("Image", "file")
###
> Link.Local("PDF", "")
Link.Local("PDF", "") : U<PDF>
Binder : Link.Local("PDF", "")
Reducer: null
###
> Link.Local("Mof", null)
Link.Local("Mof", null) : U<Mof>
Binder : Link.Local("Mof", str(<null>))
Reducer: null
###
> Link.Local("A.B.C", s1)
Link.Local("A.B.C", s1) : U<A.B.C>
Binder : Link.Local("A.B.C", s1)
###
> Link.Local("'Test flavor'", s1)
Link.Local("'Test flavor'", s1) : U<'Test flavor'>
Binder : Link.Local("\'Test flavor\'", s1)
###
> Link.Local("'Test flavor'.'B'.C", s1)
Link.Local("'Test flavor'.'B'.C", s1) : U<'Test flavor'.B.C>
Binder : Link.Local("\'Test flavor\'.\'B\'.C", s1)
###
> Link.Local("'Test flavor'.'B'.'C.D.E'", s1)
Link.Local("'Test flavor'.'B'.'C.D.E'", s1) : U<'Test flavor'.B.'C.D.E'>
Binder : Link.Local("\'Test flavor\'.\'B\'.\'C.D.E\'", s1)
###
> Link.Local("'Test flavor.B.C.D.E'", s1)
Link.Local("'Test flavor.B.C.D.E'", s1) : U<'Test flavor.B.C.D.E'>
Binder : Link.Local("\'Test flavor.B.C.D.E\'", s1)
###
> Link.Local("'Test'.'flavor.B.C.D.E'.", s1) // Error
Link.Local("'Test'.'flavor.B.C.D.E'.", s1) : U<>
*** Error: (11,37) Node: "'Test'.'flavor.B.C.D.E'.", Message: Invalid flavor: "'Test'.'flavor.B.C.D.E'."
Binder : Link.Local*("\'Test\'.\'flavor.B.C.D.E\'.", s1)
###
> Link.Local("Test flavor.B.C.D.E", s1) // Error
Link.Local("Test flavor.B.C.D.E", s1) : U<>
*** Error: (11,32) Node: "Test flavor.B.C.D.E", Message: Invalid flavor: "Test flavor.B.C.D.E"
Binder : Link.Local*("Test flavor.B.C.D.E", s1)
###
> Link.Local("A.B.C.D.E.-", s1) // Error
Link.Local("A.B.C.D.E.-", s1) : U<>
*** Error: (11,24) Node: "A.B.C.D.E.-", Message: Invalid flavor: "A.B.C.D.E.-"
Binder : Link.Local*("A.B.C.D.E.-", s1)
###
> Link.Local(1234, s1) // Error
Link.Local(1234, s1) : U<>
*** Error: (11,15) Node: 1234, Message: Flavor is not a text literal
*** Error: (11,15) Node: 1234, Message: Invalid operand type: cannot convert type 'i8' to 's'
Binder : Link.Local*(Error(ErrBadType_Src_Dst), s1)
###
> Link.Local(null, s1)
Link.Local(null, s1) : U<>
Binder : Link.Local(str(<null>), s1)
###
> Link.Local("", s1)
Link.Local("", s1) : U<>
Binder : Link.Local("", s1)
###
> Link.Local(s1, s2) // Error
Link.Local(s1, s2) : U<>
*** Error: (11,13) Node: s1, Message: Flavor is not a text literal
Binder : Link.Local*(s1, s2)
###
> Link.Local(s1, "file") // Error
Link.Local(s1, "file") : U<>
*** Error: (11,13) Node: s1, Message: Flavor is not a text literal
Binder : Link.Local*(s1, "file")
###
> Link.Local("Im ag e", s1) // Error
Link.Local("Im ag e", s1) : U<>
*** Error: (11,20) Node: "Im ag e", Message: Invalid flavor: "Im ag e"
Binder : Link.Local*("Im ag e", s1)
###
> Link.Local("Text", s1)->IsNull()
Link.Local("Text", s1)->IsNull() : b
Binder : IsNull(Link.Local("Text", s1))
###
> Link.Local(null, s1)->IsNull()
Link.Local(null, s1)->IsNull() : b
Binder : IsNull(Link.Local(str(<null>), s1))
###
> Link.Local("", "file")->IsNull()
Link.Local("", "file")->IsNull() : b
Binder : IsNull(Link.Local("", "file"))
###
> Link.Local(s1, s2)->IsNull() // Error
Link.Local(s1, s2)->IsNull() : b
*** Error: (11,13) Node: s1, Message: Flavor is not a text literal
Binder : IsNull(Link.Local*(s1, s2))
###
> Link.Web("Audio", s1)
Link.Web("Audio", s1) : U<Audio>
Binder : Link.Web("Audio", s1)
###
> Link.Web(1234, s1) // Error
Link.Web(1234, s1) : U<>
*** Error: (9,13) Node: 1234, Message: Flavor is not a text literal
*** Error: (9,13) Node: 1234, Message: Invalid operand type: cannot convert type 'i8' to 's'
Binder : Link.Web*(Error(ErrBadType_Src_Dst), s1)
###
> Link.Web(null, s1)
Link.Web(null, s1) : U<>
Binder : Link.Web(str(<null>), s1)
###
> Link.Web("", s1)
Link.Web("", s1) : U<>
Binder : Link.Web("", s1)
###
> Link.Web("Im ag e", s1) // Error
Link.Web("Im ag e", s1) : U<>
*** Error: (9,18) Node: "Im ag e", Message: Invalid flavor: "Im ag e"
Binder : Link.Web*("Im ag e", s1)
###
> Link.Web("Image" & ".Xray", s1) // Error
Link.Web("Image" & ".Xray", s1) : U<>
*** Error: (17,18) Node: "Image" & ".Xray", Message: Flavor is not a text literal
Binder : Link.Web*(StrConcat("Image", ".Xray"), s1)
Reducer: Link.Web*("Image.Xray", s1)
###
> Link.Blob("Audio", s1, s2)
Link.Blob("Audio", s1, s2) : U<Audio>
Binder : Link.Blob("Audio", s1, s2)
###
> Link.Blob(1234, s1, s2) // Error
Link.Blob(1234, s1, s2) : U<>
*** Error: (10,14) Node: 1234, Message: Flavor is not a text literal
*** Error: (10,14) Node: 1234, Message: Invalid operand type: cannot convert type 'i8' to 's'
Binder : Link.Blob*(Error(ErrBadType_Src_Dst), s1, s2)
###
> Link.Blob(null, s1, s2)
Link.Blob(null, s1, s2) : U<>
Binder : Link.Blob(str(<null>), s1, s2)
###
> Link.Blob(" ", s1, s2) // Error
Link.Blob(" ", s1, s2) : U<>
*** Error: (10,13) Node: " ", Message: Invalid flavor: " "
Binder : Link.Blob*(" ", s1, s2)
###
> Link.Blob("Data", s1, "file")
Link.Blob("Data", s1, "file") : U<Data>
Binder : Link.Blob("Data", s1, "file")
###
> Link.Blob(1234, s1, "file") // Error
Link.Blob(1234, s1, "file") : U<>
*** Error: (10,14) Node: 1234, Message: Flavor is not a text literal
*** Error: (10,14) Node: 1234, Message: Invalid operand type: cannot convert type 'i8' to 's'
Binder : Link.Blob*(Error(ErrBadType_Src_Dst), s1, "file")
###
> Link.Blob(null, s1, "file")
Link.Blob(null, s1, "file") : U<>
Binder : Link.Blob(str(<null>), s1, "file")
###
> Link.Blob(" ", s1, "file") // Error
Link.Blob(" ", s1, "file") : U<>
*** Error: (10,13) Node: " ", Message: Invalid flavor: " "
Binder : Link.Blob*(" ", s1, "file")
###
> Link.Blob("Mof", "acct", s2)
Link.Blob("Mof", "acct", s2) : U<Mof>
Binder : Link.Blob("Mof", "acct", s2)
###
> Link.Blob(1234, "acct", s2) // Error
Link.Blob(1234, "acct", s2) : U<>
*** Error: (10,14) Node: 1234, Message: Flavor is not a text literal
*** Error: (10,14) Node: 1234, Message: Invalid operand type: cannot convert type 'i8' to 's'
Binder : Link.Blob*(Error(ErrBadType_Src_Dst), "acct", s2)
###
> Link.Blob(null, "acct", s2)
Link.Blob(null, "acct", s2) : U<>
Binder : Link.Blob(str(<null>), "acct", s2)
###
> Link.Blob(" ", "acct", s2) // Error
Link.Blob(" ", "acct", s2) : U<>
*** Error: (10,13) Node: " ", Message: Invalid flavor: " "
Binder : Link.Blob*(" ", "acct", s2)
###
> Link.Blob("Text", "acct", "file")
Link.Blob("Text", "acct", "file") : U<Text>
Binder : Link.Blob("Text", "acct", "file")
###
> Link.Blob(1234, "acct", "file") // Error
Link.Blob(1234, "acct", "file") : U<>
*** Error: (10,14) Node: 1234, Message: Flavor is not a text literal
*** Error: (10,14) Node: 1234, Message: Invalid operand type: cannot convert type 'i8' to 's'
Binder : Link.Blob*(Error(ErrBadType_Src_Dst), "acct", "file")
###
> Link.Blob(null, "acct", "file")
Link.Blob(null, "acct", "file") : U<>
Binder : Link.Blob(str(<null>), "acct", "file")
###
> Link.Blob(" ", "acct", "file") // Error
Link.Blob(" ", "acct", "file") : U<>
*** Error: (10,13) Node: " ", Message: Invalid flavor: " "
Binder : Link.Blob*(" ", "acct", "file")
###
> Link.Blob("Text", "acct", null)
Link.Blob("Text", "acct", null) : U<Text>
Binder : Link.Blob("Text", "acct", str(<null>))
Reducer: null
###
> Link.Blob(1234, "acct", null) // Error
Link.Blob(1234, "acct", null) : U<>
*** Error: (10,14) Node: 1234, Message: Flavor is not a text literal
*** Error: (10,14) Node: 1234, Message: Invalid operand type: cannot convert type 'i8' to 's'
Binder : Link.Blob*(Error(ErrBadType_Src_Dst), "acct", str(<null>))
Reducer: null
###
> Link.Blob("Text", "", "file")
Link.Blob("Text", "", "file") : U<Text>
Binder : Link.Blob("Text", "", "file")
Reducer: null
###
> Link.Blob(1234, "", "file") // Error
Link.Blob(1234, "", "file") : U<>
*** Error: (10,14) Node: 1234, Message: Flavor is not a text literal
*** Error: (10,14) Node: 1234, Message: Invalid operand type: cannot convert type 'i8' to 's'
Binder : Link.Blob*(Error(ErrBadType_Src_Dst), "", "file")
Reducer: null
###
> Link.Blob(null, "", "file")
Link.Blob(null, "", "file") : U<>
Binder : Link.Blob(str(<null>), "", "file")
Reducer: null
###
> Link.Blob("Text", s1, s2)->IsNull()
Link.Blob("Text", s1, s2)->IsNull() : b
Binder : IsNull(Link.Blob("Text", s1, s2))
###
> Link.Blob("Image", "account", s2)->IsNull()
Link.Blob("Image", "account", s2)->IsNull() : b
Binder : IsNull(Link.Blob("Image", "account", s2))
###
> Link.Blob("Audio", "", "file")->IsNull()
Link.Blob("Audio", "", "file")->IsNull() : b
Binder : IsNull(Link.Blob("Audio", "", "file"))
Reducer: true
###
> Link.Blob(1234, s1, s2)->IsNull() // Error
Link.Blob(1234, s1, s2)->IsNull() : b
*** Error: (10,14) Node: 1234, Message: Flavor is not a text literal
*** Error: (10,14) Node: 1234, Message: Invalid operand type: cannot convert type 'i8' to 's'
Binder : IsNull(Link.Blob*(Error(ErrBadType_Src_Dst), s1, s2))
###
> Link.Blob(null, s1, "file")->IsNull()
Link.Blob(null, s1, "file")->IsNull() : b
Binder : IsNull(Link.Blob(str(<null>), s1, "file"))
###
> Link.Blob(" ", "", "file")->IsNull() // Error
Link.Blob(" ", "", "file")->IsNull() : b
*** Error: (10,13) Node: " ", Message: Invalid flavor: " "
Binder : IsNull(Link.Blob*(" ", "", "file"))
Reducer: true
###
> Link.DataLake("PDF", s1, s2)
Link.DataLake("PDF", s1, s2) : U<PDF>
Binder : Link.DataLake("PDF", s1, s2)
###
> Link.DataLake(1234, s1, s2) // Error
Link.DataLake(1234, s1, s2) : U<>
*** Error: (14,18) Node: 1234, Message: Flavor is not a text literal
*** Error: (14,18) Node: 1234, Message: Invalid operand type: cannot convert type 'i8' to 's'
Binder : Link.DataLake*(Error(ErrBadType_Src_Dst), s1, s2)
###
> Link.DataLake(null, s1, s2)
Link.DataLake(null, s1, s2) : U<>
Binder : Link.DataLake(str(<null>), s1, s2)
###
> Link.LegacyDataLake("Video", s1, s2)
Link.LegacyDataLake("Video", s1, s2) : U<Video>
Binder : Link.LegacyDataLake("Video", s1, s2)
###
> Link.LegacyDataLake(1234, s1, s2) // Error
Link.LegacyDataLake(1234, s1, s2) : U<>
*** Error: (20,24) Node: 1234, Message: Flavor is not a text literal
*** Error: (20,24) Node: 1234, Message: Invalid operand type: cannot convert type 'i8' to 's'
Binder : Link.LegacyDataLake*(Error(ErrBadType_Src_Dst), s1, s2)
###
> Link.LegacyDataLake(null, s1, s2)
Link.LegacyDataLake(null, s1, s2) : U<>
Binder : Link.LegacyDataLake(str(<null>), s1, s2)
###
> Link.LegacyDataLake("", s1, s2)
Link.LegacyDataLake("", s1, s2) : U<>
Binder : Link.LegacyDataLake("", s1, s2)
###
> Link.Local("PDF", s1, s2) // Error
Link.Local("PDF", s1, s2) : U<PDF>
*** Error: (22,24) Node: s2, Message: Too many arguments for Link.Local, expected 1 fewer
Binder : Link.Local("PDF", s1)
###
> Link.Blob("PDF", s1) // Error
Link.Blob("PDF", s1) : U<PDF>
*** Error: (9,10) Node: Link.Blob("PDF", s1), Message: Too few arguments for Link.Blob, expected 1 additional
Binder : Link.Blob("PDF", s1, Unit<s>(<missing>))
Reducer: null
###
> Link.Web("PDF") // Error
Link.Web("PDF") : U<PDF>
*** Error: (8,9) Node: Link.Web("PDF"), Message: Too few arguments for Link.Web, expected 1 additional
Binder : Link.Web("PDF", Unit<s>(<missing>))
Reducer: null
###
