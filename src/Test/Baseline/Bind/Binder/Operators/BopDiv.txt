**** New globals: {b:b, g:g, i:i, i1:i1, i2:i2, i4:i4, i8:i8, n:r8, o:o, qb:b?, qi:i?, qi1:i1?, qi2:i2?, qi4:i4?, qi8:i8?, qn:r8?, qr4:r4?, qr8:r8?, qu1:u1?, qu2:u2?, qu4:u4?, qu8:u8?, r4:r4, r8:r8, s:s, u1:u1, u2:u2, u4:u4, u8:u8}

> 3 / 4 // R8
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3 / 4u
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3 / 4i
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3 / 4d
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3u / 4i
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3i / 4i
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3d / 4
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3d / 4u
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3d / 4i
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3d / 4f
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3f / 4d
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3d / 4d
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3 / 4f // R4
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3u / 4f
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3i / 4f
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3f / 4
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3f / 4u
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3f / 4i
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 3f / 4f
3 / 4 : r8
Binder : Mul(3, [/] 4)
Reducer: 0.75
###
> 2 / -1 // R8
2 / -1 : r8
Binder : Mul(2, [/] -1)
Reducer: -2
###
> 2 / -1f // R4
2 / -1 : r8
Binder : Mul(2, [/] -1)
Reducer: -2
###
> 2f / -1
2 / -1 : r8
Binder : Mul(2, [/] -1)
Reducer: -2
###
> 2 / 0 // R8
2 / 0 : r8
Binder : Mul(2, [/] 0)
Reducer: ∞
###
> 2 / 0f // R4
2 / 0 : r8
Binder : Mul(2, [/] 0)
Reducer: ∞
###
> 2f / 0
2 / 0 : r8
Binder : Mul(2, [/] 0)
Reducer: ∞
###
> -0 / 2 // R8
-0 / 2 : r8
Binder : Mul(0, [/] 2)
Reducer: 0
###
> -0 / 2d
-0 / 2 : r8
Binder : Mul(0, [/] 2)
Reducer: 0
###
> -0 / 2f // R4
-0 / 2 : r8
Binder : Mul(0, [/] 2)
Reducer: 0
###
> -0d / 2 // R8
-0 / 2 : r8
Binder : Mul(-0, [/] 2)
Reducer: -0
###
> -0f / 2 // R4
-0 / 2 : r8
Binder : Mul(-0, [/] 2)
Reducer: -0
###
> -2 / -0 // R8
-2 / -0 : r8
Binder : Mul(-2, [/] 0)
Reducer: -∞
###
> -2 / -0d
-2 / -0 : r8
Binder : Mul(-2, [/] -0)
Reducer: ∞
###
> -2 / -0f // R4
-2 / -0 : r8
Binder : Mul(-2, [/] -0)
Reducer: ∞
###
> -2d / -0 // R8
-2 / -0 : r8
Binder : Mul(-2, [/] 0)
Reducer: -∞
###
> -2f / -0 // R4
-2 / -0 : r8
Binder : Mul(-2, [/] 0)
Reducer: -∞
###
> 0x3FFFFFFF / 2 // R8
1073741823 / 2 : r8
Binder : Mul(1073741823, [/] 2)
Reducer: 536870911.5
###
> 0x3FFFFFFF / 4
1073741823 / 4 : r8
Binder : Mul(1073741823, [/] 4)
Reducer: 268435455.75
###
> 0x7FFFFFFFU / 2
2147483647 / 2 : r8
Binder : Mul(2147483647, [/] 2)
Reducer: 1073741823.5
###
> 0x7FFFFFFFU / 2U
2147483647 / 2 : r8
Binder : Mul(2147483647, [/] 2)
Reducer: 1073741823.5
###
> 0x7FFFFFFFU / 4
2147483647 / 4 : r8
Binder : Mul(2147483647, [/] 4)
Reducer: 536870911.75
###
> 0x3FFFFFFF / 2f // R4
1073741823 / 2 : r8
Binder : Mul(1073741823, [/] 2)
Reducer: 536870911.5
###
> 0x3FFFFFFF / 4f
1073741823 / 4 : r8
Binder : Mul(1073741823, [/] 4)
Reducer: 268435455.75
###
> 0x7FFFFFFFU / 2f
2147483647 / 2 : r8
Binder : Mul(2147483647, [/] 2)
Reducer: 1073741823.5
###
> 0x7FFFFFFFU / 2f
2147483647 / 2 : r8
Binder : Mul(2147483647, [/] 2)
Reducer: 1073741823.5
###
> 0x7FFFFFFFU / 4f
2147483647 / 4 : r8
Binder : Mul(2147483647, [/] 4)
Reducer: 536870911.75
###
> 3 / null // R8
3 / null : r8?
Binder : Guard(?1: null, Mul(3, [/] Unit<r8>(?1)))
Reducer: null
###
> 3d / null
3 / null : r8?
Binder : Guard(?1: null, Mul(3, [/] Unit<r8>(?1)))
Reducer: null
###
> 3f / null // R4
3 / null : r8?
Binder : Guard(?1: null, Mul(3, [/] Unit<r8>(?1)))
Reducer: null
###
> null / 3 // R8
null / 3 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] 3))
Reducer: null
###
> null / 3d
null / 3 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] 3))
Reducer: null
###
> null / 3f // R4
null / 3 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] 3))
Reducer: null
###
> 0 / null // R8
0 / null : r8?
Binder : Guard(?1: null, Mul(0, [/] Unit<r8>(?1)))
Reducer: null
###
> 0d / null
0 / null : r8?
Binder : Guard(?1: null, Mul(0, [/] Unit<r8>(?1)))
Reducer: null
###
> 0f / null // R4
0 / null : r8?
Binder : Guard(?1: null, Mul(0, [/] Unit<r8>(?1)))
Reducer: null
###
> null / 0 // R8
null / 0 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] 0))
Reducer: null
###
> null / 0d
null / 0 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] 0))
Reducer: null
###
> null / 0f // R4
null / 0 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] 0))
Reducer: null
###
> i4 / 3 // R8
i4 / 3 : r8
Binder : Mul(Num<r8>(i4), [/] 3)
###
> i4 / 3d
i4 / 3 : r8
Binder : Mul(Num<r8>(i4), [/] 3)
###
> i4 / 3f // R4
i4 / 3 : r8
Binder : Mul(Num<r8>(i4), [/] 3)
###
> 3 / i4 // R8
3 / i4 : r8
Binder : Mul(3, [/] Num<r8>(i4))
###
> 3d / i4
3 / i4 : r8
Binder : Mul(3, [/] Num<r8>(i4))
###
> 3f / i4 // R4
3 / i4 : r8
Binder : Mul(3, [/] Num<r8>(i4))
###
> i4 / null // R8
i4 / null : r8?
Binder : Guard(?1: null, Mul(Num<r8>(i4), [/] Unit<r8>(?1)))
Reducer: null
###
> i4 / CastR8(null)
i4 / CastR8(null) : r8?
Binder : Guard(?2: Guard(?1: null, CastR8*(Unit<r8>(?1))), Mul(Num<r8>(i4), [/] ?2))
Reducer: null
###
> i4 / CastR4(null) // R4
i4 / CastR4(null) : r8?
Binder : Guard(?2: Guard(?1: null, CastR4*(Unit<r4>(?1))), Mul(Num<r8>(i4), [/] Num<r8>(?2)))
Reducer: null
###
> null / i4 // R8
null / i4 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] Num<r8>(i4)))
Reducer: null
###
> CastR8(null) / i4
CastR8(null) / i4 : r8?
Binder : Guard(?2: Guard(?1: null, CastR8*(Unit<r8>(?1))), Mul(?2, [/] Num<r8>(i4)))
Reducer: null
###
> CastR4(null) / i4 // R4
CastR4(null) / i4 : r8?
Binder : Guard(?2: Guard(?1: null, CastR4*(Unit<r4>(?1))), Mul(Num<r8>(?2), [/] Num<r8>(i4)))
Reducer: null
###
> i4 / 2 / null // R8
i4 / 2 / null : r8?
Binder : Guard(?1: null, Mul(Num<r8>(i4), [/] 2, [/] Unit<r8>(?1)))
Reducer: null
###
> i4 / 2 / CastR8(null)
i4 / 2 / CastR8(null) : r8?
Binder : Guard(?2: Guard(?1: null, CastR8*(Unit<r8>(?1))), Mul(Num<r8>(i4), [/] 2, [/] ?2))
Reducer: null
###
> i4 / 2 / CastR4(null)
i4 / 2 / CastR4(null) : r8?
Binder : Guard(?2: Guard(?1: null, CastR4*(Unit<r4>(?1))), Mul(Num<r8>(i4), [/] 2, [/] Num<r8>(?2)))
Reducer: null
###
> i4 / 2d / null
i4 / 2 / null : r8?
Binder : Guard(?1: null, Mul(Num<r8>(i4), [/] 2, [/] Unit<r8>(?1)))
Reducer: null
###
> i4 / 2f / null // R4
i4 / 2 / null : r8?
Binder : Guard(?1: null, Mul(Num<r8>(i4), [/] 2, [/] Unit<r8>(?1)))
Reducer: null
###
> null / i4 / 2 // R8
null / i4 / 2 : r8?
Binder : Guard(?2: Guard(?1: null, Mul(Unit<r8>(?1), [/] Num<r8>(i4))), Mul(?2, [/] 2))
Reducer: null
###
> CastR8(null) / i4 / 2
CastR8(null) / i4 / 2 : r8?
Binder : Guard(?3: Guard(?2: Guard(?1: null, CastR8*(Unit<r8>(?1))), Mul(?2, [/] Num<r8>(i4))), Mul(?3, [/] 2))
Reducer: null
###
> CastR4(null) / i4 / 2 // R4
CastR4(null) / i4 / 2 : r8?
Binder : Guard(?3: Guard(?2: Guard(?1: null, CastR4*(Unit<r4>(?1))), Mul(Num<r8>(?2), [/] Num<r8>(i4))), Mul(?3, [/] 2))
Reducer: null
###
> i1 / i2 / i2
i1 / i2 / i2 : r8
Binder : Mul(Num<r8>(i1), [/] Num<r8>(i2), [/] Num<r8>(i2))
###
> i1 / i2 / i4
i1 / i2 / i4 : r8
Binder : Mul(Num<r8>(i1), [/] Num<r8>(i2), [/] Num<r8>(i4))
###
> i4 / i2 / i1
i4 / i2 / i1 : r8
Binder : Mul(Num<r8>(i4), [/] Num<r8>(i2), [/] Num<r8>(i1))
###
> (i1 / 3) / (i2 / 2)
i1 / 3 / (i2 / 2) : r8
Binder : Mul(Num<r8>(i1), [/] 3, [/] Mul(Num<r8>(i2), [/] 2))
###
> (i1 / 3f) / (i2 / 2)
i1 / 3 / (i2 / 2) : r8
Binder : Mul(Num<r8>(i1), [/] 3, [/] Mul(Num<r8>(i2), [/] 2))
###
> (i1 / 3) / (i2 / 2f)
i1 / 3 / (i2 / 2) : r8
Binder : Mul(Num<r8>(i1), [/] 3, [/] Mul(Num<r8>(i2), [/] 2))
###
> (i1 / 3f) / (i2 / 2f)
i1 / 3 / (i2 / 2) : r8
Binder : Mul(Num<r8>(i1), [/] 3, [/] Mul(Num<r8>(i2), [/] 2))
###
> (i1 / 3i1) / (i2 / i4)
i1 / 3 / (i2 / i4) : r8
Binder : Mul(Num<r8>(i1), [/] 3, [/] Mul(Num<r8>(i2), [/] Num<r8>(i4)))
###
> i1 / 3i1 / 2i1
i1 / 3 / 2 : r8
Binder : Mul(Num<r8>(i1), [/] 3, [/] 2)
###
> i1 / -1i1 / -1i1
i1 / -1 / -1 : r8
Binder : Mul(Num<r8>(i1), [/] -1, [/] -1)
Reducer: Num<r8>(i1)
###
> i1 / -1f / -1f
i1 / -1 / -1 : r8
Binder : Mul(Num<r8>(i1), [/] -1, [/] -1)
Reducer: Num<r8>(i1)
###
> i1 / 3i1 / -1i1
i1 / 3 / -1 : r8
Binder : Mul(Num<r8>(i1), [/] 3, [/] -1)
Reducer: Mul(Num<r8>(i1), [/] -3)
###
> i1 / 3i1 / -1f
i1 / 3 / -1 : r8
Binder : Mul(Num<r8>(i1), [/] 3, [/] -1)
Reducer: Mul(Num<r8>(i1), [/] -3)
###
> i1 / 3i1 / -1f / -1f
i1 / 3 / -1 / -1 : r8
Binder : Mul(Num<r8>(i1), [/] 3, [/] -1, [/] -1)
Reducer: Mul(Num<r8>(i1), [/] 3)
###
> -i1 / -1f / -1f
-i1 / -1 / -1 : r8
Binder : Mul(Num<r8>(Add([-] Num<i8>(i1))), [/] -1, [/] -1)
Reducer: Num<r8>(Add([-] Num<i8>(i1)))
###
> i2 / qi2 / i1
i2 / qi2 / i1 : r8?
Binder : Guard(?2: Guard(?1: qi2, Mul(Num<r8>(i2), [/] Num<r8>(?1))), Mul(?2, [/] Num<r8>(i1)))
Reducer: Guard(?1: qi2, Mul(Num<r8>(i2), [/] Num<r8>(?1), [/] Num<r8>(i1)))
###
> i4 / qi2 / i1
i4 / qi2 / i1 : r8?
Binder : Guard(?2: Guard(?1: qi2, Mul(Num<r8>(i4), [/] Num<r8>(?1))), Mul(?2, [/] Num<r8>(i1)))
Reducer: Guard(?1: qi2, Mul(Num<r8>(i4), [/] Num<r8>(?1), [/] Num<r8>(i1)))
###
> 3 / true
3 / true : r8
Binder : Mul(3, [/] 1)
Reducer: 3
###
> true / 3
true / 3 : r8
Binder : Mul(1, [/] 3)
Reducer: 0.3333333333333333
###
> false / true
false / true : r8
Binder : Mul(0, [/] 1)
Reducer: 0
###
> true / false
true / false : r8
Binder : Mul(1, [/] 0)
Reducer: ∞
###
> "3" / true
"3" / true : r8
*** Error: (0,3) Node: "3", Message: Invalid operand type: cannot convert type 's' to 'r8'
Binder : Mul(Error(ErrBadType_Src_Dst), [/] 1)
Reducer: Error(ErrBadType_Src_Dst)
###
> 3 / "true"
3 / "true" : r8
*** Error: (4,10) Node: "true", Message: Invalid operand type: cannot convert type 's' to 'r8'
Binder : Mul(3, [/] Error(ErrBadType_Src_Dst))
###
> "3" / "true"
"3" / "true" : r8
*** Error: (0,3) Node: "3", Message: Invalid operand type: cannot convert type 's' to 'r8'
*** Error: (6,12) Node: "true", Message: Invalid operand type: cannot convert type 's' to 'r8'
Binder : Mul(Error(ErrBadType_Src_Dst), [/] Error(ErrBadType_Src_Dst))
###
> 2.0f / 4.0f
2 / 4 : r8
Binder : Mul(2, [/] 4)
Reducer: 0.5
###
> 2.0f / 3.0f
2 / 3 : r8
Binder : Mul(2, [/] 3)
Reducer: 0.6666666666666666
###
> 2.0d / 4.0d
2 / 4 : r8
Binder : Mul(2, [/] 4)
Reducer: 0.5
###
> 2.0d / 3.0d
2 / 3 : r8
Binder : Mul(2, [/] 3)
Reducer: 0.6666666666666666
###
> 3f / null
3 / null : r8?
Binder : Guard(?1: null, Mul(3, [/] Unit<r8>(?1)))
Reducer: null
###
> null / 2f
null / 2 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] 2))
Reducer: null
###
> 2i1 / r4
2 / r4 : r8
Binder : Mul(2, [/] Num<r8>(r4))
###
> r4 / 3i1
r4 / 3 : r8
Binder : Mul(Num<r8>(r4), [/] 3)
###
> 1i1 / r4
1 / r4 : r8
Binder : Mul(1, [/] Num<r8>(r4))
Reducer: Mul([/] Num<r8>(r4))
###
> r4 / 1i1
r4 / 1 : r8
Binder : Mul(Num<r8>(r4), [/] 1)
Reducer: Num<r8>(r4)
###
> null / r4
null / r4 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] Num<r8>(r4)))
Reducer: null
###
> r4 / null
r4 / null : r8?
Binder : Guard(?1: null, Mul(Num<r8>(r4), [/] Unit<r8>(?1)))
Reducer: null
###
> 0i1 / r4
0 / r4 : r8
Binder : Mul(0, [/] Num<r8>(r4))
###
> r4 / 0i1
r4 / 0 : r8
Binder : Mul(Num<r8>(r4), [/] 0)
###
> 2 / r4
2 / r4 : r8
Binder : Mul(2, [/] Num<r8>(r4))
###
> r4 / 3
r4 / 3 : r8
Binder : Mul(Num<r8>(r4), [/] 3)
###
> 1 / r4
1 / r4 : r8
Binder : Mul(1, [/] Num<r8>(r4))
Reducer: Mul([/] Num<r8>(r4))
###
> r4 / 1
r4 / 1 : r8
Binder : Mul(Num<r8>(r4), [/] 1)
Reducer: Num<r8>(r4)
###
> null / r4
null / r4 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] Num<r8>(r4)))
Reducer: null
###
> r4 / null
r4 / null : r8?
Binder : Guard(?1: null, Mul(Num<r8>(r4), [/] Unit<r8>(?1)))
Reducer: null
###
> 0 / r4
0 / r4 : r8
Binder : Mul(0, [/] Num<r8>(r4))
###
> r4 / 0
r4 / 0 : r8
Binder : Mul(Num<r8>(r4), [/] 0)
###
> r4 / r4 / 1
r4 / r4 / 1 : r8
Binder : Mul(Num<r8>(r4), [/] Num<r8>(r4), [/] 1)
Reducer: Mul(Num<r8>(r4), [/] Num<r8>(r4))
###
> r4 / (r4 / 1)
r4 / (r4 / 1) : r8
Binder : Mul(Num<r8>(r4), [/] Mul(Num<r8>(r4), [/] 1))
Reducer: Mul(Num<r8>(r4), [/] Num<r8>(r4))
###
> r4 / -1f / -1f / -1f
r4 / -1 / -1 / -1 : r8
Binder : Mul(Num<r8>(r4), [/] -1, [/] -1, [/] -1)
Reducer: Add([-] Num<r8>(r4))
###
> r4 / -1f / -2f / -1f / -3f
r4 / -1 / -2 / -1 / -3 : r8
Binder : Mul(Num<r8>(r4), [/] -1, [/] -2, [/] -1, [/] -3)
Reducer: Mul(Num<r8>(r4), [/] -2, [/] -3)
###
> r4 / -1f / -2f / -3f / -1f
r4 / -1 / -2 / -3 / -1 : r8
Binder : Mul(Num<r8>(r4), [/] -1, [/] -2, [/] -3, [/] -1)
Reducer: Mul(Num<r8>(r4), [/] -2, [/] -3)
###
> r4 / -1f / -1f * -1f
r4 / -1 / -1 * -1 : r8
Binder : Mul(Num<r8>(r4), [/] -1, [/] -1, -1)
Reducer: Add([-] Num<r8>(r4))
###
> r4 / -1f / -2f / -3f * -1f
r4 / -1 / -2 / -3 * -1 : r8
Binder : Mul(Num<r8>(r4), [/] -1, [/] -2, [/] -3, -1)
Reducer: Mul(Num<r8>(r4), [/] -2, [/] -3)
###
> -1f / r4 / -1f
-1 / r4 / -1 : r8
Binder : Mul(-1, [/] Num<r8>(r4), [/] -1)
Reducer: Mul([/] Num<r8>(r4))
###
> r4 / -1f / i2 / -1f
r4 / -1 / i2 / -1 : r8
Binder : Mul(Num<r8>(r4), [/] -1, [/] Num<r8>(i2), [/] -1)
Reducer: Mul(Num<r8>(r4), [/] Num<r8>(i2))
###
> r8 / r4 / -1
r8 / r4 / -1 : r8
Binder : Mul(r8, [/] Num<r8>(r4), [/] -1)
Reducer: Mul(r8, [/] Num<r8>(r4), -1)
###
> 3 / g
3 / g : r8
*** Error: (4,5) Node: g, Message: Invalid operand type: cannot convert type 'g' to 'r8'
Binder : Mul(3, [/] Error(ErrBadType_Src_Dst))
###
> 3 / o
3 / o : r8?
Binder : Guard(?1: o, Mul(3, [/] Unit<r8>(?1)))
Reducer: null
###
> 3 / s
3 / s : r8
*** Error: (4,5) Node: s, Message: Invalid operand type: cannot convert type 's' to 'r8'
Binder : Mul(3, [/] Error(ErrBadType_Src_Dst))
###
> 3 / b
3 / b : r8
Binder : Mul(3, [/] Num<r8>(b))
###
> 3 / n
3 / n : r8
Binder : Mul(3, [/] n)
###
> 3 / r8
3 / r8 : r8
Binder : Mul(3, [/] r8)
###
> 3 / r4
3 / r4 : r8
Binder : Mul(3, [/] Num<r8>(r4))
###
> 3 / i
3 / i : r8
Binder : Mul(3, [/] Num<r8>(i))
###
> 3 / i8
3 / i8 : r8
Binder : Mul(3, [/] Num<r8>(i8))
###
> 3 / i4
3 / i4 : r8
Binder : Mul(3, [/] Num<r8>(i4))
###
> 3 / i2
3 / i2 : r8
Binder : Mul(3, [/] Num<r8>(i2))
###
> 3 / i1
3 / i1 : r8
Binder : Mul(3, [/] Num<r8>(i1))
###
> 3 / u8
3 / u8 : r8
Binder : Mul(3, [/] Num<r8>(u8))
###
> 3 / u4
3 / u4 : r8
Binder : Mul(3, [/] Num<r8>(u4))
###
> 3 / u2
3 / u2 : r8
Binder : Mul(3, [/] Num<r8>(u2))
###
> 3 / u1
3 / u1 : r8
Binder : Mul(3, [/] Num<r8>(u1))
###
> 3u / g
3 / g : r8
*** Error: (5,6) Node: g, Message: Invalid operand type: cannot convert type 'g' to 'r8'
Binder : Mul(3, [/] Error(ErrBadType_Src_Dst))
###
> 3u / o
3 / o : r8?
Binder : Guard(?1: o, Mul(3, [/] Unit<r8>(?1)))
Reducer: null
###
> 3u / s
3 / s : r8
*** Error: (5,6) Node: s, Message: Invalid operand type: cannot convert type 's' to 'r8'
Binder : Mul(3, [/] Error(ErrBadType_Src_Dst))
###
> 3u / b
3 / b : r8
Binder : Mul(3, [/] Num<r8>(b))
###
> 3u / n
3 / n : r8
Binder : Mul(3, [/] n)
###
> 3u / r8
3 / r8 : r8
Binder : Mul(3, [/] r8)
###
> 3u / r4
3 / r4 : r8
Binder : Mul(3, [/] Num<r8>(r4))
###
> 3u / i
3 / i : r8
Binder : Mul(3, [/] Num<r8>(i))
###
> 3u / i8
3 / i8 : r8
Binder : Mul(3, [/] Num<r8>(i8))
###
> 3u / i4
3 / i4 : r8
Binder : Mul(3, [/] Num<r8>(i4))
###
> 3u / i2
3 / i2 : r8
Binder : Mul(3, [/] Num<r8>(i2))
###
> 3u / i1
3 / i1 : r8
Binder : Mul(3, [/] Num<r8>(i1))
###
> 3u / u8
3 / u8 : r8
Binder : Mul(3, [/] Num<r8>(u8))
###
> 3u / u4
3 / u4 : r8
Binder : Mul(3, [/] Num<r8>(u4))
###
> 3u / u2
3 / u2 : r8
Binder : Mul(3, [/] Num<r8>(u2))
###
> 3u / u1
3 / u1 : r8
Binder : Mul(3, [/] Num<r8>(u1))
###
> 3d / g
3 / g : r8
*** Error: (5,6) Node: g, Message: Invalid operand type: cannot convert type 'g' to 'r8'
Binder : Mul(3, [/] Error(ErrBadType_Src_Dst))
###
> 3d / o
3 / o : r8?
Binder : Guard(?1: o, Mul(3, [/] Unit<r8>(?1)))
Reducer: null
###
> 3d / s
3 / s : r8
*** Error: (5,6) Node: s, Message: Invalid operand type: cannot convert type 's' to 'r8'
Binder : Mul(3, [/] Error(ErrBadType_Src_Dst))
###
> 3d / b
3 / b : r8
Binder : Mul(3, [/] Num<r8>(b))
###
> 3d / n
3 / n : r8
Binder : Mul(3, [/] n)
###
> 3d / r8
3 / r8 : r8
Binder : Mul(3, [/] r8)
###
> 3d / r4
3 / r4 : r8
Binder : Mul(3, [/] Num<r8>(r4))
###
> 3d / i
3 / i : r8
Binder : Mul(3, [/] Num<r8>(i))
###
> 3d / i8
3 / i8 : r8
Binder : Mul(3, [/] Num<r8>(i8))
###
> 3d / i4
3 / i4 : r8
Binder : Mul(3, [/] Num<r8>(i4))
###
> 3d / i2
3 / i2 : r8
Binder : Mul(3, [/] Num<r8>(i2))
###
> 3d / i1
3 / i1 : r8
Binder : Mul(3, [/] Num<r8>(i1))
###
> 3d / u8
3 / u8 : r8
Binder : Mul(3, [/] Num<r8>(u8))
###
> 3d / u4
3 / u4 : r8
Binder : Mul(3, [/] Num<r8>(u4))
###
> 3d / u2
3 / u2 : r8
Binder : Mul(3, [/] Num<r8>(u2))
###
> 3d / u1
3 / u1 : r8
Binder : Mul(3, [/] Num<r8>(u1))
###
> 3f / g
3 / g : r8
*** Error: (5,6) Node: g, Message: Invalid operand type: cannot convert type 'g' to 'r8'
Binder : Mul(3, [/] Error(ErrBadType_Src_Dst))
###
> 3f / o
3 / o : r8?
Binder : Guard(?1: o, Mul(3, [/] Unit<r8>(?1)))
Reducer: null
###
> 3f / s
3 / s : r8
*** Error: (5,6) Node: s, Message: Invalid operand type: cannot convert type 's' to 'r8'
Binder : Mul(3, [/] Error(ErrBadType_Src_Dst))
###
> 3f / b
3 / b : r8
Binder : Mul(3, [/] Num<r8>(b))
###
> 3f / n
3 / n : r8
Binder : Mul(3, [/] n)
###
> 3f / r8
3 / r8 : r8
Binder : Mul(3, [/] r8)
###
> 3f / r4
3 / r4 : r8
Binder : Mul(3, [/] Num<r8>(r4))
###
> 3f / i
3 / i : r8
Binder : Mul(3, [/] Num<r8>(i))
###
> 3f / i8
3 / i8 : r8
Binder : Mul(3, [/] Num<r8>(i8))
###
> 3f / i4
3 / i4 : r8
Binder : Mul(3, [/] Num<r8>(i4))
###
> 3f / i2
3 / i2 : r8
Binder : Mul(3, [/] Num<r8>(i2))
###
> 3f / i1
3 / i1 : r8
Binder : Mul(3, [/] Num<r8>(i1))
###
> 3f / u8
3 / u8 : r8
Binder : Mul(3, [/] Num<r8>(u8))
###
> 3f / u4
3 / u4 : r8
Binder : Mul(3, [/] Num<r8>(u4))
###
> 3f / u2
3 / u2 : r8
Binder : Mul(3, [/] Num<r8>(u2))
###
> 3f / u1
3 / u1 : r8
Binder : Mul(3, [/] Num<r8>(u1))
###
> null / g
null / g : r8?
*** Error: (7,8) Node: g, Message: Invalid operand type: cannot convert type 'g' to 'r8'
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] Error(ErrBadType_Src_Dst)))
Reducer: null
###
> null / o
null / o : r8?
Binder : Guard(?1: null, ?2: o, Mul(Unit<r8>(?1), [/] Unit<r8>(?2)))
Reducer: null
###
> null / s
null / s : r8?
*** Error: (7,8) Node: s, Message: Invalid operand type: cannot convert type 's' to 'r8'
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] Error(ErrBadType_Src_Dst)))
Reducer: null
###
> null / b
null / b : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] Num<r8>(b)))
Reducer: null
###
> null / n
null / n : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] n))
Reducer: null
###
> null / r8
null / r8 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] r8))
Reducer: null
###
> null / r4
null / r4 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] Num<r8>(r4)))
Reducer: null
###
> null / i
null / i : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] Num<r8>(i)))
Reducer: null
###
> null / i8
null / i8 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] Num<r8>(i8)))
Reducer: null
###
> null / i4
null / i4 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] Num<r8>(i4)))
Reducer: null
###
> null / i2
null / i2 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] Num<r8>(i2)))
Reducer: null
###
> null / i1
null / i1 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] Num<r8>(i1)))
Reducer: null
###
> null / u8
null / u8 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] Num<r8>(u8)))
Reducer: null
###
> null / u4
null / u4 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] Num<r8>(u4)))
Reducer: null
###
> null / u2
null / u2 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] Num<r8>(u2)))
Reducer: null
###
> null / u1
null / u1 : r8?
Binder : Guard(?1: null, Mul(Unit<r8>(?1), [/] Num<r8>(u1)))
Reducer: null
###
> 3 / qb
3 / qb : r8?
Binder : Guard(?1: qb, Mul(3, [/] Num<r8>(?1)))
###
> 3 / qn
3 / qn : r8?
Binder : Guard(?1: qn, Mul(3, [/] ?1))
###
> 3 / qr8
3 / qr8 : r8?
Binder : Guard(?1: qr8, Mul(3, [/] ?1))
###
> 3 / qr4
3 / qr4 : r8?
Binder : Guard(?1: qr4, Mul(3, [/] Num<r8>(?1)))
###
> 3 / qi
3 / qi : r8?
Binder : Guard(?1: qi, Mul(3, [/] Num<r8>(?1)))
###
> 3 / qi8
3 / qi8 : r8?
Binder : Guard(?1: qi8, Mul(3, [/] Num<r8>(?1)))
###
> 3 / qi4
3 / qi4 : r8?
Binder : Guard(?1: qi4, Mul(3, [/] Num<r8>(?1)))
###
> 3 / qi2
3 / qi2 : r8?
Binder : Guard(?1: qi2, Mul(3, [/] Num<r8>(?1)))
###
> 3 / qi1
3 / qi1 : r8?
Binder : Guard(?1: qi1, Mul(3, [/] Num<r8>(?1)))
###
> 3 / qu8
3 / qu8 : r8?
Binder : Guard(?1: qu8, Mul(3, [/] Num<r8>(?1)))
###
> 3 / qu4
3 / qu4 : r8?
Binder : Guard(?1: qu4, Mul(3, [/] Num<r8>(?1)))
###
> 3 / qu2
3 / qu2 : r8?
Binder : Guard(?1: qu2, Mul(3, [/] Num<r8>(?1)))
###
> 3 / qu1
3 / qu1 : r8?
Binder : Guard(?1: qu1, Mul(3, [/] Num<r8>(?1)))
###
> 3u / qb
3 / qb : r8?
Binder : Guard(?1: qb, Mul(3, [/] Num<r8>(?1)))
###
> 3u / qn
3 / qn : r8?
Binder : Guard(?1: qn, Mul(3, [/] ?1))
###
> 3u / qr8
3 / qr8 : r8?
Binder : Guard(?1: qr8, Mul(3, [/] ?1))
###
> 3u / qr4
3 / qr4 : r8?
Binder : Guard(?1: qr4, Mul(3, [/] Num<r8>(?1)))
###
> 3u / qi
3 / qi : r8?
Binder : Guard(?1: qi, Mul(3, [/] Num<r8>(?1)))
###
> 3u / qi8
3 / qi8 : r8?
Binder : Guard(?1: qi8, Mul(3, [/] Num<r8>(?1)))
###
> 3u / qi4
3 / qi4 : r8?
Binder : Guard(?1: qi4, Mul(3, [/] Num<r8>(?1)))
###
> 3u / qi2
3 / qi2 : r8?
Binder : Guard(?1: qi2, Mul(3, [/] Num<r8>(?1)))
###
> 3u / qi1
3 / qi1 : r8?
Binder : Guard(?1: qi1, Mul(3, [/] Num<r8>(?1)))
###
> 3u / qu8
3 / qu8 : r8?
Binder : Guard(?1: qu8, Mul(3, [/] Num<r8>(?1)))
###
> 3u / qu4
3 / qu4 : r8?
Binder : Guard(?1: qu4, Mul(3, [/] Num<r8>(?1)))
###
> 3u / qu2
3 / qu2 : r8?
Binder : Guard(?1: qu2, Mul(3, [/] Num<r8>(?1)))
###
> 3u / qu1
3 / qu1 : r8?
Binder : Guard(?1: qu1, Mul(3, [/] Num<r8>(?1)))
###
> 3d / qb
3 / qb : r8?
Binder : Guard(?1: qb, Mul(3, [/] Num<r8>(?1)))
###
> 3d / qn
3 / qn : r8?
Binder : Guard(?1: qn, Mul(3, [/] ?1))
###
> 3d / qr8
3 / qr8 : r8?
Binder : Guard(?1: qr8, Mul(3, [/] ?1))
###
> 3d / qr4
3 / qr4 : r8?
Binder : Guard(?1: qr4, Mul(3, [/] Num<r8>(?1)))
###
> 3d / qi
3 / qi : r8?
Binder : Guard(?1: qi, Mul(3, [/] Num<r8>(?1)))
###
> 3d / qi8
3 / qi8 : r8?
Binder : Guard(?1: qi8, Mul(3, [/] Num<r8>(?1)))
###
> 3d / qi4
3 / qi4 : r8?
Binder : Guard(?1: qi4, Mul(3, [/] Num<r8>(?1)))
###
> 3d / qi2
3 / qi2 : r8?
Binder : Guard(?1: qi2, Mul(3, [/] Num<r8>(?1)))
###
> 3d / qi1
3 / qi1 : r8?
Binder : Guard(?1: qi1, Mul(3, [/] Num<r8>(?1)))
###
> 3d / qu8
3 / qu8 : r8?
Binder : Guard(?1: qu8, Mul(3, [/] Num<r8>(?1)))
###
> 3d / qu4
3 / qu4 : r8?
Binder : Guard(?1: qu4, Mul(3, [/] Num<r8>(?1)))
###
> 3d / qu2
3 / qu2 : r8?
Binder : Guard(?1: qu2, Mul(3, [/] Num<r8>(?1)))
###
> 3d / qu1
3 / qu1 : r8?
Binder : Guard(?1: qu1, Mul(3, [/] Num<r8>(?1)))
###
> 3f / qb
3 / qb : r8?
Binder : Guard(?1: qb, Mul(3, [/] Num<r8>(?1)))
###
> 3f / qn
3 / qn : r8?
Binder : Guard(?1: qn, Mul(3, [/] ?1))
###
> 3f / qr8
3 / qr8 : r8?
Binder : Guard(?1: qr8, Mul(3, [/] ?1))
###
> 3f / qr4
3 / qr4 : r8?
Binder : Guard(?1: qr4, Mul(3, [/] Num<r8>(?1)))
###
> 3f / qi
3 / qi : r8?
Binder : Guard(?1: qi, Mul(3, [/] Num<r8>(?1)))
###
> 3f / qi8
3 / qi8 : r8?
Binder : Guard(?1: qi8, Mul(3, [/] Num<r8>(?1)))
###
> 3f / qi4
3 / qi4 : r8?
Binder : Guard(?1: qi4, Mul(3, [/] Num<r8>(?1)))
###
> 3f / qi2
3 / qi2 : r8?
Binder : Guard(?1: qi2, Mul(3, [/] Num<r8>(?1)))
###
> 3f / qi1
3 / qi1 : r8?
Binder : Guard(?1: qi1, Mul(3, [/] Num<r8>(?1)))
###
> 3f / qu8
3 / qu8 : r8?
Binder : Guard(?1: qu8, Mul(3, [/] Num<r8>(?1)))
###
> 3f / qu4
3 / qu4 : r8?
Binder : Guard(?1: qu4, Mul(3, [/] Num<r8>(?1)))
###
> 3f / qu2
3 / qu2 : r8?
Binder : Guard(?1: qu2, Mul(3, [/] Num<r8>(?1)))
###
> 3f / qu1
3 / qu1 : r8?
Binder : Guard(?1: qu1, Mul(3, [/] Num<r8>(?1)))
###
> null / qb
null / qb : r8?
Binder : Guard(?1: null, ?2: qb, Mul(Unit<r8>(?1), [/] Num<r8>(?2)))
Reducer: null
###
> null / qn
null / qn : r8?
Binder : Guard(?1: null, ?2: qn, Mul(Unit<r8>(?1), [/] ?2))
Reducer: null
###
> null / qr8
null / qr8 : r8?
Binder : Guard(?1: null, ?2: qr8, Mul(Unit<r8>(?1), [/] ?2))
Reducer: null
###
> null / qr4
null / qr4 : r8?
Binder : Guard(?1: null, ?2: qr4, Mul(Unit<r8>(?1), [/] Num<r8>(?2)))
Reducer: null
###
> null / qi
null / qi : r8?
Binder : Guard(?1: null, ?2: qi, Mul(Unit<r8>(?1), [/] Num<r8>(?2)))
Reducer: null
###
> null / qi8
null / qi8 : r8?
Binder : Guard(?1: null, ?2: qi8, Mul(Unit<r8>(?1), [/] Num<r8>(?2)))
Reducer: null
###
> null / qi4
null / qi4 : r8?
Binder : Guard(?1: null, ?2: qi4, Mul(Unit<r8>(?1), [/] Num<r8>(?2)))
Reducer: null
###
> null / qi2
null / qi2 : r8?
Binder : Guard(?1: null, ?2: qi2, Mul(Unit<r8>(?1), [/] Num<r8>(?2)))
Reducer: null
###
> null / qi1
null / qi1 : r8?
Binder : Guard(?1: null, ?2: qi1, Mul(Unit<r8>(?1), [/] Num<r8>(?2)))
Reducer: null
###
> null / qu8
null / qu8 : r8?
Binder : Guard(?1: null, ?2: qu8, Mul(Unit<r8>(?1), [/] Num<r8>(?2)))
Reducer: null
###
> null / qu4
null / qu4 : r8?
Binder : Guard(?1: null, ?2: qu4, Mul(Unit<r8>(?1), [/] Num<r8>(?2)))
Reducer: null
###
> null / qu2
null / qu2 : r8?
Binder : Guard(?1: null, ?2: qu2, Mul(Unit<r8>(?1), [/] Num<r8>(?2)))
Reducer: null
###
> null / qu1
null / qu1 : r8?
Binder : Guard(?1: null, ?2: qu1, Mul(Unit<r8>(?1), [/] Num<r8>(?2)))
Reducer: null
###
> i / qb
i / qb : r8?
Binder : Guard(?1: qb, Mul(Num<r8>(i), [/] Num<r8>(?1)))
###
> i / qn
i / qn : r8?
Binder : Guard(?1: qn, Mul(Num<r8>(i), [/] ?1))
###
> i / qr8
i / qr8 : r8?
Binder : Guard(?1: qr8, Mul(Num<r8>(i), [/] ?1))
###
> i / qr4
i / qr4 : r8?
Binder : Guard(?1: qr4, Mul(Num<r8>(i), [/] Num<r8>(?1)))
###
> i / qi
i / qi : r8?
Binder : Guard(?1: qi, Mul(Num<r8>(i), [/] Num<r8>(?1)))
###
> i / qi8
i / qi8 : r8?
Binder : Guard(?1: qi8, Mul(Num<r8>(i), [/] Num<r8>(?1)))
###
> i / qi4
i / qi4 : r8?
Binder : Guard(?1: qi4, Mul(Num<r8>(i), [/] Num<r8>(?1)))
###
> i / qi2
i / qi2 : r8?
Binder : Guard(?1: qi2, Mul(Num<r8>(i), [/] Num<r8>(?1)))
###
> i / qi1
i / qi1 : r8?
Binder : Guard(?1: qi1, Mul(Num<r8>(i), [/] Num<r8>(?1)))
###
> i / qu8
i / qu8 : r8?
Binder : Guard(?1: qu8, Mul(Num<r8>(i), [/] Num<r8>(?1)))
###
> i / qu4
i / qu4 : r8?
Binder : Guard(?1: qu4, Mul(Num<r8>(i), [/] Num<r8>(?1)))
###
> i / qu2
i / qu2 : r8?
Binder : Guard(?1: qu2, Mul(Num<r8>(i), [/] Num<r8>(?1)))
###
> i / qu1
i / qu1 : r8?
Binder : Guard(?1: qu1, Mul(Num<r8>(i), [/] Num<r8>(?1)))
###
> qi / qb
qi / qb : r8?
Binder : Guard(?1: qi, ?2: qb, Mul(Num<r8>(?1), [/] Num<r8>(?2)))
###
> qi / qn
qi / qn : r8?
Binder : Guard(?1: qi, ?2: qn, Mul(Num<r8>(?1), [/] ?2))
###
> qi / qr8
qi / qr8 : r8?
Binder : Guard(?1: qi, ?2: qr8, Mul(Num<r8>(?1), [/] ?2))
###
> qi / qr4
qi / qr4 : r8?
Binder : Guard(?1: qi, ?2: qr4, Mul(Num<r8>(?1), [/] Num<r8>(?2)))
###
> qi / qi
qi / qi : r8?
Binder : Guard(?1: qi, ?2: qi, Mul(Num<r8>(?1), [/] Num<r8>(?2)))
Reducer: Guard(?1: qi, Mul(Num<r8>(?1), [/] Num<r8>(?1)))
###
> qi / qi8
qi / qi8 : r8?
Binder : Guard(?1: qi, ?2: qi8, Mul(Num<r8>(?1), [/] Num<r8>(?2)))
###
> qi / qi4
qi / qi4 : r8?
Binder : Guard(?1: qi, ?2: qi4, Mul(Num<r8>(?1), [/] Num<r8>(?2)))
###
> qi / qi2
qi / qi2 : r8?
Binder : Guard(?1: qi, ?2: qi2, Mul(Num<r8>(?1), [/] Num<r8>(?2)))
###
> qi / qi1
qi / qi1 : r8?
Binder : Guard(?1: qi, ?2: qi1, Mul(Num<r8>(?1), [/] Num<r8>(?2)))
###
> qi / qu8
qi / qu8 : r8?
Binder : Guard(?1: qi, ?2: qu8, Mul(Num<r8>(?1), [/] Num<r8>(?2)))
###
> qi / qu4
qi / qu4 : r8?
Binder : Guard(?1: qi, ?2: qu4, Mul(Num<r8>(?1), [/] Num<r8>(?2)))
###
> qi / qu2
qi / qu2 : r8?
Binder : Guard(?1: qi, ?2: qu2, Mul(Num<r8>(?1), [/] Num<r8>(?2)))
###
> qi / qu1
qi / qu1 : r8?
Binder : Guard(?1: qi, ?2: qu1, Mul(Num<r8>(?1), [/] Num<r8>(?2)))
###

**** New globals: {b:b*, g:g*, i:i*, i1:i1*, i2:i2*, i4:i4*, i8:i8*, n:r8*, o:o*, qb:b?*, qi:i?*, qi1:i1?*, qi2:i2?*, qi4:i4?*, qi8:i8?*, qn:r8?*, qr4:r4?*, qr8:r8?*, qu1:u1?*, qu2:u2?*, qu4:u4?*, qu8:u8?*, r4:r4*, r8:r8*, s:s*, u1:u1*, u2:u2*, u4:u4*, u8:u8*}

> 3 / g
3 / g : r8*
*** Error: (4,5) Node: g, Message: Invalid operand type: cannot convert type 'g' to 'r8'
Binder : ForEach(*1: g, Mul(3, [/] Error(ErrBadType_Src_Dst)))
###
> 3 / o
3 / o : r8?*
Binder : ForEach(*1: o, Guard(?2: *1, Mul(3, [/] Unit<r8>(?2))))
Reducer: ForEach(*1: o, null)
###
> 3 / s
3 / s : r8*
*** Error: (4,5) Node: s, Message: Invalid operand type: cannot convert type 's' to 'r8'
Binder : ForEach(*1: s, Mul(3, [/] Error(ErrBadType_Src_Dst)))
###
> 3 / b
3 / b : r8*
Binder : ForEach(*1: b, Mul(3, [/] Num<r8>(*1)))
###
> 3 / n
3 / n : r8*
Binder : ForEach(*1: n, Mul(3, [/] *1))
###
> 3 / r8
3 / r8 : r8*
Binder : ForEach(*1: r8, Mul(3, [/] *1))
###
> 3 / r4
3 / r4 : r8*
Binder : ForEach(*1: r4, Mul(3, [/] Num<r8>(*1)))
###
> 3 / i
3 / i : r8*
Binder : ForEach(*1: i, Mul(3, [/] Num<r8>(*1)))
###
> 3 / i8
3 / i8 : r8*
Binder : ForEach(*1: i8, Mul(3, [/] Num<r8>(*1)))
###
> 3 / i4
3 / i4 : r8*
Binder : ForEach(*1: i4, Mul(3, [/] Num<r8>(*1)))
###
> 3 / i2
3 / i2 : r8*
Binder : ForEach(*1: i2, Mul(3, [/] Num<r8>(*1)))
###
> 3 / i1
3 / i1 : r8*
Binder : ForEach(*1: i1, Mul(3, [/] Num<r8>(*1)))
###
> 3 / u8
3 / u8 : r8*
Binder : ForEach(*1: u8, Mul(3, [/] Num<r8>(*1)))
###
> 3 / u4
3 / u4 : r8*
Binder : ForEach(*1: u4, Mul(3, [/] Num<r8>(*1)))
###
> 3 / u2
3 / u2 : r8*
Binder : ForEach(*1: u2, Mul(3, [/] Num<r8>(*1)))
###
> 3 / u1
3 / u1 : r8*
Binder : ForEach(*1: u1, Mul(3, [/] Num<r8>(*1)))
###
> 3 / qb
3 / qb : r8?*
Binder : ForEach(*1: qb, Guard(?2: *1, Mul(3, [/] Num<r8>(?2))))
###
> 3 / qn
3 / qn : r8?*
Binder : ForEach(*1: qn, Guard(?2: *1, Mul(3, [/] ?2)))
###
> 3 / qr8
3 / qr8 : r8?*
Binder : ForEach(*1: qr8, Guard(?2: *1, Mul(3, [/] ?2)))
###
> 3 / qr4
3 / qr4 : r8?*
Binder : ForEach(*1: qr4, Guard(?2: *1, Mul(3, [/] Num<r8>(?2))))
###
> 3 / qi
3 / qi : r8?*
Binder : ForEach(*1: qi, Guard(?2: *1, Mul(3, [/] Num<r8>(?2))))
###
> 3 / qi8
3 / qi8 : r8?*
Binder : ForEach(*1: qi8, Guard(?2: *1, Mul(3, [/] Num<r8>(?2))))
###
> 3 / qi4
3 / qi4 : r8?*
Binder : ForEach(*1: qi4, Guard(?2: *1, Mul(3, [/] Num<r8>(?2))))
###
> 3 / qi2
3 / qi2 : r8?*
Binder : ForEach(*1: qi2, Guard(?2: *1, Mul(3, [/] Num<r8>(?2))))
###
> 3 / qi1
3 / qi1 : r8?*
Binder : ForEach(*1: qi1, Guard(?2: *1, Mul(3, [/] Num<r8>(?2))))
###
> 3 / qu8
3 / qu8 : r8?*
Binder : ForEach(*1: qu8, Guard(?2: *1, Mul(3, [/] Num<r8>(?2))))
###
> 3 / qu4
3 / qu4 : r8?*
Binder : ForEach(*1: qu4, Guard(?2: *1, Mul(3, [/] Num<r8>(?2))))
###
> 3 / qu2
3 / qu2 : r8?*
Binder : ForEach(*1: qu2, Guard(?2: *1, Mul(3, [/] Num<r8>(?2))))
###
> 3 / qu1
3 / qu1 : r8?*
Binder : ForEach(*1: qu1, Guard(?2: *1, Mul(3, [/] Num<r8>(?2))))
###
